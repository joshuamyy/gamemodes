/*==============================================================================  

        ____       ___                __     ____        __           __
       / __ \___  / (_)   _____  ____/ /    / __ \____  / /__  ____  / /___ ___  __
      / /_/ / _ \/ / / | / / _ \/ __  /    / /_/ / __ \/ / _ \/ __ \/ / __ `/ / / /
     / _, _/  __/ / /| |/ /  __/ /_/ /    / _, _/ /_/ / /  __/ /_/ / / /_/ / /_/ /
    /_/ |_|\___/_/_/ |___/\___/\__,_/    /_/ |_|\____/_/\___/ .___/_/\__,_/\__, /
                                                           /_/            /____/

    Script Information:

    * Name: Modern
    * Development by: Lukman.
    * Base Script: South Central Roleplay
    * Current Version: v1.1.0f Rise Up

    Other Credits:

    * Kalcor (Kye) SAMP Developer
    * Y_Less (sscanf, YSI, and other function)
    * BlueG, maddinat0r (a_mysql plugin)
    * Southclaw (Progressbar2, and other function)
    * Emmet_ (Original script)
    * Incognito, Zeex, and much more contribution on samp forum.

    Copyright (c) 2021 Valley Roleplay (All rights reserved).
==============================================================================*/ 


/*==============================================================================
    Changelogs:

    Version v1.3.3r2 Milestone
    - Added
        1. New activity (Forager)
        2. /detroypacket for PD to destroying smuggler packet
        3. /rdutytime for high command all factions to remove duty time
        4. Random Fire at random building (Beta)
        5. Broken Bone on /myhealth
        6. /buyplate, /unlocktire, /payticket point at Flint Precint
        7. Add New Toys on Clothes Store
        8. Add Wildfire Notifications
    
    - Changes
        1. Improve /report
        2. Change first aid to bandage (+20HP/Bandage) Max: 5 Bandage
        3. /reports now all players can see their own report
        4. Change delays for Commands Forager 1sec Avoid Spamming
        5. Change Production Time Orange and Tomato to 10 Minutes
        6. Adjust Forager Orange and Tomato & relocated Forager
    
    - Bugs
        1. Fix bug on Furniture, structure house texture
        2. Fix Animation Forager bug
==============================================================================*/


/*==============================================================================
    Library Predefinitions
==============================================================================*/
#pragma compat 1
// #pragma compress 0
#pragma dynamic 500000
// #pragma dynamic 1_048_576
// #pragma warning disable 239, 214, 217

#include <a_samp>                   //Credits to SA-MP
#pragma warning disable 202, 203, 204, 217, 219, 213
#undef MAX_PLAYERS
#define MAX_PLAYERS 300

// #define DEBUG_MODE

//#include <mapandreas>
//#include <Pawn.RakNet>
/*==============================================================================
    Librarys    
==============================================================================*/
#include <a_mysql>
#include <streamer>                 //by Incognito
#include <sscanf2>                  //by Y_Less fixed by maddinat0r & Emmet_
#include <gvar>                     //by Incognito
#include <ctime>                   //by Southclaws
#include <crashdetect>
//#include <profiler>                 //by Zeex

#include <YSI\y_timers>             //by Y_Less from YSI
#include <YSI\y_iterate>            //by Y_Less from YSI
#include <YSI\y_colours>            //by Y_Less from YSI

#include <vehicleplus>              //by Gammix

#include <nex-ac>                   //BY Nexus
#include <strlib>                   //by Slice
// #include <distance>
#include <easyDialog>               //by Emmet_
#include <eSelection>               //by Emmet_
#include <eSelectionv2>             //by Emmet edited by Agus Syahputra
#include <progress2>                //by Southclaws
#include <izcmd>                    //by YashasSamaga
#include <lookup>                   //by Emmet_
#include <evi>                      //by Vince
#include <cb>                       //by Emmet_
#include <editing>                  //by Pottus
#include <garage_block>             //by Crayder
#include <PreviewModelDialog>       //by Gammix
#include <vending>
// #include <mapandreas>
// #include <PathFinder>

// #define WC_CUSTOM_VENDING_MACHINES false
// #define WC_DEBUG true
// #include <weapon-config>            //by oscar-broman
// #include <SKY>                      //by oscar-broman
// #include <OPVD>
// #include <sampmailjs>
// #include <filemanager>
// #include <discord-connector>        //by maddinat0r

#include <discord-connector>
#include <discord-cmd>

#include "modules/core/defined.pwn"
#include "modules/core/enums.pwn"
#include "modules/core/enums_variable.pwn"
#include "modules/core/variable.pwn"
#include "modules/core/array.pwn"
#include "modules/core/functions.pwn"

// #if defined SAMPMAILJS_URL
//     #undef SAMPMAILJS_URL
// #endif
// #if defined SAMPMAILJS_PASSWORD
//     #undef SAMPMAILJS_PASSWORD
// #endif

// #define SAMPMAILJS_URL "127.0.0.1:8080"
// #define SAMPMAILJS_PASSWORD "Valleyrp2307"

/*==============================================================================
    Function Prototype
==============================================================================*/
forward OnGameModeInitEx();
forward ServerUpdateTime();
forward OnPlayerScriptUpdate(playerid);
forward OnPlayerDisconnectEx(playerid);
forward Float:GetVehicleSpeed(vehicleid, bool:kmh = true, Float:velx = 0.0, Float:vely = 0.0, Float:velz = 0.0);
/*==============================================================================
    Initialising OnGameModeInit
==============================================================================*/
new DCC_Channel:Whitelist;
new DCC_Channel:RefundRoles;
new playergame;

/*
main() {
    DCC_SetBotActivity("Valley BOT");
}*/

public OnGameModeInit()
{
//    Profiler_Start();

    print("[OnGameModeInit] Initialising 'Main'...");

    OnGameModeInit_Setup();

    #if defined main_OnGameModeInit
        return main_OnGameModeInit();
    #else
        return 1;
    #endif
}
#if defined _ALS_OnGameModeInit
    #undef OnGameModeInit
#else
    #define _ALS_OnGameModeInit
#endif
#define OnGameModeInit main_OnGameModeInit
#if defined main_OnGameModeInit
    forward main_OnGameModeInit();
#endif

/*==============================================================================
    Server modules
==============================================================================*/

// Player
#include "modules\player\blacklist\core.pwn"
#include "modules\player\blacklist\commands.pwn"

#include "modules/dynamic/event.pwn"
#include "modules/player/weapon/core.pwn"
#include "modules/player/weapon/cmd.pwn"
#include "modules/player/weapon/faction.pwn"

// Server
#include "modules/server/dmv.pwn"
#include "modules/server/salary.pwn"
#include "modules/server/database.pwn"
#include "modules/server/waypoint.pwn"
#include "modules/server/weather.pwn"
// #include "modules/server/discord-bot.pwn"
//#include "modules/server/anticheat_callback.pwn"
//#include "modules/server/aimbot_anticheat.pwn"

// Misc
#include "modules/misc/vehicle_object.pwn"
#include "modules/misc/anti_spam.pwn"
#include "modules/misc/prison.pwn"
#include "modules/misc/autorp.pwn"
#include "modules/misc/racing.pwn"
#include "modules/misc/alltextures.pwn"
#include "modules/misc/earthquake.pwn"

// Dynamic
#include "modules/dynamic/tags.pwn"
#include "modules/dynamic/payphone/main.pwn"

//#include "modules/dynamic/gate.pwn"
//#include "modules/dynamic/lumber.pwn"
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS*3];
new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];

#include "modules/dynamic/Rent/main.pwn"
#include "modules/dynamic/weaponbody.pwn"

#include "modules/dynamic/workshop.pwn"

#include "modules/dynamic/gate/core.pwn"
#include "modules/dynamic/gate/commands.pwn"
#include "modules/dynamic/gate/action.pwn"

#include "modules/dynamic/lumber/core.pwn"
#include "modules/dynamic/lumber/cmd.pwn"
#include "modules/dynamic/lumber/action.pwn"

#include "modules/dynamic/job/trucker/missions.pwn"
#include "modules/dynamic/job/smuggler/smuggler.pwn"
#include "modules/dynamic/vip.pwn"
#include "modules/dynamic/object_creator.pwn"
#include "modules/dynamic/map.pwn"
#include "modules/dynamic/rob"
#include "modules/dynamic/toll.pwn"
#include "modules/dynamic/actor.pwn"
#include "modules/dynamic/vending.pwn"

#include "modules\dynamic\flat.pwn"
#include "modules/dynamic/apartment/apartment.pwn"
#include "modules/dynamic/garage.pwn"
#include "modules/dynamic/farmer/privatefarm.pwn"
#include "modules/dynamic/furnstore.pwn"

#include "modules/dynamic/locker.pwn"
#include "modules/dynamic/factionveh.pwn"
#include "modules/dynamic/greenzone.pwn"
#include "modules/dynamic/forager.pwn"

// Mapping
#include "modules/mapping/bankv2.pwn"
#include "modules/mapping/ship.pwn"
#include "modules/mapping/dermaga.pwn"
// #include "modules/mapping/asghext.pwn"
#include "modules/mapping/mechanic.pwn"
#include "modules/mapping/workshop.pwn"
// #include "modules/mapping/sanewsext.pwn"
// #include "modules/mapping/cgh_int.pwn"
#include "modules/mapping/interiorfd.pwn"
#include "modules/mapping/fishfactory.pwn" 
#include "modules/mapping/criminalintel.pwn"
#include "modules/mapping/gov_int.pwn"
#include "modules/mapping/asgh_int.pwn"
#include "modules/mapping/news_int.pwn"

// #include "modules/mapping/mc_mc.pwn"
// #include "modules/mapping/homeless.pwn"

#include "modules/mapping/sapd_int.pwn"
// #include "modules/mapping/lspd_inside.pwn"
#include "modules/mapping/lspd_jail.pwn"
#include "modules/mapping/safd_hq.pwn"

// #include "modules/mapping/ch_lobby.pwn"
// #include "modules/mapping/ch_office.pwn"

// #include "modules/mapping/fire_dept.pwn"
// #include "modules/mapping/construction.pwn"

#include "modules/mapping/gang.pwn"
#include "modules/mapping/family.pwn"
#include "modules/mapping/allmapping.pwn"

// Sidejob
#include "modules/sidejob/sweeperjob.pwn"
#include "modules/sidejob/bussidejob.pwn"

// Other
#include "modules/demo/handbreak.pwn"
#include "modules/demo/anticheat.pwn"
#include "modules/vehicle/anti_tapping.pwn"
#include "modules/vehicle/anti_hopping.pwn"
#include "modules/vehicle/crash.pwn"
/*==============================================================================
    Enums 
==============================================================================*/

enum reportData {
    rExists,
    rType,
    rPlayer,
    rText[128 char]
};

enum askData {
    askExists,
    askPlayer,
    askQuestion[128 char]
};

// enum billboardData {
//     bbID,
//     bbExists,
//     bbName[32],
//     bbMessage[230],
//     bbOwner,
//     bbPrice,
//     bbRange,
//     Float:bbPos[4],
//     Text3D:bbText3D
// };

enum houseStorage {
    hItemID,
    hItemName[32 char],
    hItemModel,
    hItemQuantity
};

enum droppedItems {
    droppedID,
    droppedItem[32],
    droppedPlayer[24],
    droppedModel,
    droppedQuantity,
    droppedTime,
    Float:droppedPos[3],
    droppedWeaponId,
    droppedAmmo,
    droppedDurability,
    droppedInt,
    droppedWorld,
    droppedObject,
    Text3D:droppedLabel
};

enum entranceData {
    entranceID,
    entranceExists,
    entranceName[128],
    entrancePass[32],
    entranceIcon,
    entranceLocked,
    Float:entrancePos[4],
    Float:entranceInt[4],
    entranceInterior,
    entranceExterior,
    entranceExteriorVW,
    entranceType,
    entranceCustom,
    entranceWorld,
    entranceVehAble,
    entranceFaction,
    entranceForklift[7],
    entrancePickup,
    Text3D:entranceText3D,
    entrancePickupInt,
    Text3D:entranceText3DInt,
    entranceCheckpoint
};

enum dealershipCars {
    vehID,
    vehModel,
    vehPrice
};

enum carStorage {
    cItemID,
    cItemName[32 char],
    cItemModel,
    cItemQuantity
};

enum pumpData {
    pumpID,
    pumpExists,
    pumpBusiness,
    Float:pumpPos[4],
    pumpFuel,
    pumpObject,
    pumpRefilled,
    Text3D:pumpText3D
};

enum furnitureData {
    furnitureID,
    furnitureModel,
    furnitureName[32],
    Float:furniturePos[3],
    Float:furnitureRot[3],
    furnitureMaterials[MAX_MATERIALS],
    furnitureObject,
    furnitureUnused
};

enum contactData {
    contactID,
    contactExists,
    contactName[32],
    contactNumber
};

enum damageData {
    damageID,
    damageExists,
    damageBodypart,
    damageWeapon,
    damageAmount,
    damageTime
};

enum locationData {
    locationID,
    locationExists,
    locationName[32],
    Float:locationPos[3],
};

enum crateData {
    crateID,
    crateExists,
    crateType,
    Float:cratePos[4],
    crateInterior,
    crateWorld,
    crateObject,
    crateVehicle,
    Text3D:crateText3D
};

enum plantData {
    plantID,
    plantExists,
    plantType,
    plantDrugs,
    Float:plantPos[4],
    plantInterior,
    plantWorld,
    plantFarm,
    plantObject,
    Text3D:plantText3D
};

enum arrestPoints {
    arrestID,
    arrestExists,
    Float:arrestPos[3],
    arrestInterior,
    arrestWorld,
    Text3D:arrestText3D,
    arrestPickup
};

enum ticketData {
    ticketID,
    ticketExists,
    ticketFee,
    ticketDate[36],
    ticketReason[64],
    ticketIssuer[24]
};

enum barricadeData {
    cadeExists,
    cadeType,
    cadeName[225],
    Float:cadePos[4],
    cadeObject
};

/*enum backpackData {
    backpackID,
    backpackExists,
    backpackPlayer,
    backpackHouse,
    backpackVehicle,
    Float:backpackPos[3],
    backpackInterior,
    backpackWorld,
    Text3D:backpackText3D,
    backpackObject
};
new BackpackData[MAX_BACKPACKS][backpackData],
    BackpackListed[MAX_PLAYERS][MAX_BACKPACK_CAPACITY];*/

/*enum backpackItems {
    bItemID,
    bItemBackpack,
    bItemExists,
    bItemName[32],
    bItemModel,
    bItemQuantity
};
new BackpackItems[MAX_BACKPACK_ITEMS][backpackItems];*/

enum impoundData {
    impoundID,
    impoundExists,
    Float:impoundLot[3],
    Float:impoundRelease[4],
    Text3D:releaseText3D,
    releasePickup,
    Text3D:impoundText3D,
    impoundPickup
};

enum atmData {
    atmID,
    atmExists,
    Float:atmPos[4],
    atmInterior,
    atmWorld,
    atmMoney,
    atmObject,
    Text3D:atmText3D
};

enum garbageData {
    garbageID,
    garbageExists,
    garbageModel,
    garbageCapacity,
    Float:garbagePos[4],
    garbageInterior,
    garbageWorld,
    garbageObject
};

enum boomboxData {
    boomboxPlaced,
    Float:boomboxPos[3],
    boomboxInterior,
    boomboxWorld,
    boomboxObject,
    boomboxURL[128 char],
    Text3D:boomboxText3D
};

// enum rackData {
//     rackID,
//     rackExists,
//     rackHouse,
//     Float:rackPos[4],
//     rackInterior,
//     rackWorld,
//     rackWeapons[4],
//     rackAmmo[4],
//     rackObjects[5],
//     Text3D:rackText3D
// };

enum speedData {
    speedID,
    speedExists,
    Float:speedPos[4],
    Float:speedRange,
    Float:speedLimit,
    speedObject,
    Text3D:speedText3D,
    speedVehicle,
    speedVehPlate[24],
    speedVehSpeed
};

// enum detectorData {
//     detectorID,
//     detectorExists,
//     Float:detectorPos[4],
//     detectorInterior,
//     detectorWorld,
//     detectorObject[2]
// };

enum dealershipData {
    dID,
    dName[32],
    dExists,
    Float:dPos[3],
    Float:dSpawnPos[4],
    dStock,
    dLock,
    dType,
    dPickup,
    dIcon
};

/*==============================================================================
    Enums Variable
==============================================================================*/

new FishName[MAX_PLAYERS][MAX_FISH][32];
new Float:FishWeight[MAX_PLAYERS][MAX_FISH];
new damageList[MAX_PLAYERS][10][128];
new DamageData[MAX_PLAYERS][MAX_DAMAGE][damageData];

new misscallList[MAX_PLAYERS][10][128];
new latestInbox[MAX_PLAYERS][10][128];

new ReportData[MAX_REPORTS][reportData];
new AskData[MAX_ASK][askData];

new ContactData[MAX_PLAYERS][MAX_CONTACTS][contactData];
new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];

new HouseStorage[MAX_HOUSES][MAX_HOUSE_STORAGE][houseStorage],
    Iterator:HousesStorage[MAX_HOUSES]<MAX_HOUSE_STORAGE>;
// new RackData[MAX_WEAPON_RACKS][rackData];

new FurnitureData[MAX_HOUSES][MAX_FURNITURE][furnitureData],
    Iterator:HouseFurnitures[MAX_HOUSES]<MAX_FURNITURE>;
new PumpData[MAX_GAS_PUMPS][pumpData];

new EntranceData[MAX_ENTRANCES][entranceData];
new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];
new CrateData[MAX_CRATES][crateData];
new PlantData[MAX_PLANTS][plantData];

new CarStorage[MAX_DYNAMIC_VEHICLES][MAX_CAR_STORAGE][carStorage],
    Iterator:CarsStorage[MAX_DYNAMIC_VEHICLES]<MAX_CAR_STORAGE>;
new DealershipCars[MAX_BUSINESSES][MAX_DEALERSHIP_CARS][dealershipCars];
new DealershipData[MAX_DEALER][dealershipData];

new FactionRanks[MAX_FACTIONS][15][32];
// new FactionDivison[MAX_FACTIONS][15][32];
new ArrestData[MAX_ARREST_POINTS][arrestPoints];
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
new BarricadeData[MAX_BARRICADES][barricadeData];
new ImpoundData[MAX_IMPOUND_LOTS][impoundData];

new ATMData[MAX_ATM_MACHINES][atmData];
new BoomboxData[MAX_PLAYERS][boomboxData];
new SpeedData[MAX_SPEED_CAMERAS][speedData];
new GarbageData[MAX_GARBAGE_BINS][garbageData];
// new BillBoardData[MAX_BILLBOARDS][billboardData];
// new MetalDetectors[MAX_METAL_DETECTORS][detectorData];

new
    ListedFurniture[MAX_PLAYERS][MAX_FURNITURE],
    ListedStructure[MAX_PLAYERS][MAX_HOUSE_STRUCTURES],
    NearestItems[MAX_PLAYERS][MAX_LISTED_ITEMS],
    ListedContacts[MAX_PLAYERS][MAX_CONTACTS],
    ListedAcc[MAX_PLAYERS][MAX_ACC],
    ListedHouse[MAX_PLAYERS][MAX_OWNABLE_HOUSES+4],
    ListedFlat[MAX_PLAYERS][2],
    ListedBusiness[MAX_PLAYERS][MAX_OWNABLE_BUSINESSES+1],
    ListedGarage[MAX_PLAYERS][MAX_OWNABLE_GARAGE+1],
    ListedWorkshop[MAX_PLAYERS][MAX_OWNABLE_WORKSHOP+1],
    ListedFarm[MAX_PLAYERS][1],
    ListedFurnstore[MAX_PLAYERS][1],
    ListedAds[MAX_PLAYERS][10],
    // ListedDamage[MAX_PLAYERS][MAX_DAMAGE],
    ListedTickets[MAX_PLAYERS][MAX_PLAYER_TICKETS],
    ListedInventory[MAX_PLAYERS][MAX_INVENTORY],
    ListedBuyVehicle[MAX_PLAYERS][MAX_DEALER_VEHICLES],
    ListedFacVehicle[MAX_PLAYERS][100];

// Timers
timer SetPlayerToUnfreeze[2000](playerid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        PlayerData[playerid][pFreeze] = 0;
        Streamer_ToggleIdleUpdate(playerid,0);
        TogglePlayerControllable(playerid, 1);
    }
    return 1;
}

timer HideHUDMoney[3000](playerid)
{
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_moneyhud]);
    return 1;
}

timer DragUpdate[1000](playerid, targetid)
{
    if(PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
    {
        new Float:fX, Float:fY, Float:fZ, Float:fAngle;

        GetXYInFrontOfPlayer(playerid, fX, fY, -1.0);
        GetPlayerPos(playerid, fZ, fZ, fZ);
        GetPlayerFacingAngle(playerid, fAngle);

        SetPlayerPos(targetid, fX, fY, fZ);
        SetPlayerFacingAngle(targetid, fAngle);
        SetCameraBehindPlayer(targetid);
        SetPlayerInterior(targetid, GetPlayerInterior(playerid));
        SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
    }
    return 1;
}

timer JobDutyTime[300000](playerid) {
    if((!PlayerData[playerid][pLogged]) || !PlayerData[playerid][pCreated] || PlayerData[playerid][pKicked])
        return 0;

    if ((PlayerData[playerid][pJobDuty] && (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && !PlayerData[playerid][pCanPaycheck]) || (PlayerData[playerid][pJobDuty] && (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI) && !PlayerData[playerid][pCanPaycheck])) {
        AddPlayerSalary(playerid, 50, (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) ? ("Jobduty Mechanic") : ("Jobduty Taxi"));
    }
    return 1;
}

timer UnlockServer[1000]() {
    if (++LoadGamemodeCount >= 100) {
        SendRconCommand("password 0");
        SendRconCommand("hostname Valley Roleplay");
        stop GamemodeInit;
        LoadGamemodeCount = 0;

        // for (new i = 1, obj = Streamer_CountItems(STREAMER_TYPE_OBJECT); i <= obj; i ++) {
        //     static int, vw;

        //     int = Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_INTERIOR_ID);
        //     vw = Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_WORLD_ID);

        //     if (int == 0 && vw == 0) {
        //         if (IsValidDynamicObject(i)) {
        //             Streamer_ToggleItemCallbacks(STREAMER_TYPE_OBJECT, i, 1);
        //         }
        //     }
        // }
    } else {
        static hostname[64];
        format(hostname,sizeof(hostname),"hostname Valley Roleplay [Loading: %d%%]", LoadGamemodeCount);
        SendRconCommand(hostname);
    }
    return 1;
}

timer washingMoney[1000](playerid, amount) {
    if(SQL_IsCharacterLogged(playerid)) {
        if (GetFactionType(playerid) == FACTION_GANG) {
            if (IsPlayerInRangeOfPoint(playerid,3.0,-1956.0898,790.6878,55.7245)) {
                SetPVarInt(playerid, "WashingMoney", (GetPVarInt(playerid,"WashingMoney")+1));

                if (GetPVarInt(playerid,"WashingMoney") >= 30) {
                    Inventory_Remove(playerid,"Dirty Money",amount);
                    GiveMoney(playerid,(amount/2));
                    SendCustomMessage(playerid,"DRUGFACTORY","You've been washed your dirty money and you've received "GREEN"%s",FormatNumber((amount/2)));
                    SetPVarInt(playerid, "WashingMoney",0);
                    ClearAnimations(playerid, 1);
                    HidePlayerFooter(playerid);
                    PlayerData[playerid][pLoopAnim] = 0;
                    stop PlayerData[playerid][pWashMoney];
                }
                ShowPlayerFooter(playerid, sprintf("~b~Washing Money progress ~g~%d~b~/30!", GetPVarInt(playerid,"WashingMoney")), 1000);
                ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
            } else {
                stop PlayerData[playerid][pWashMoney];
                SetPVarInt(playerid,"WashingMoney",0);
                ShowPlayerFooter(playerid,"~r~Washing money has failed!");
                SendErrorMessage(playerid,"You're leaving from Money Laundry point.");
                ClearAnimations(playerid, 1);
                HidePlayerFooter(playerid);
                PlayerData[playerid][pLoopAnim] = 0;
                return 1;
            }
        }
    }
    return 1;
}

timer getFish[30000](playerid, status)
{
    if(!SQL_IsCharacterLogged(playerid) || !PlayerData[playerid][pFishing])
        return 0;

    new 
        rand = random(5),
        moneyrand = RandomEx(10, 20);

    switch(status)
    {
        case 1: {
            switch(rand)
            {
                case 0: SendServerMessage(playerid, "Anda mendapatkan sampah di laut..");
                case 1: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(10.0,20.0));
                case 2: SendClientMessageEx(playerid, X11_RED_2, "Anda mendapatkan ubur-ubur, ini menyengat anda (darah berkurang otomatis)."), SetPlayerHealth(playerid, ReturnHealth(playerid)-5);
                case 3: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(5.0,15.0));
                case 4: SendServerMessage(playerid, "Anda mendapatkan bonus uang sebesar "GREEN"%s.", FormatNumber(moneyrand)), GiveMoney(playerid, moneyrand);
            }
        }
        case 2: {
            switch(rand)
            {
                case 0: SendServerMessage(playerid, "Anda mendapatkan sampah di laut..");
                case 1: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(20.0,30.0));
                case 2: SendClientMessageEx(playerid, X11_RED_2, "Anda mendapatkan ubur-ubur, ini menyengat anda (darah berkurang otomatis)."), SetPlayerHealth(playerid, ReturnHealth(playerid)-5);
                case 3: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(15.0,25.0));
                case 4: SendServerMessage(playerid, "Anda mendapatkan bonus uang sebesar "GREEN"%s.", FormatNumber(moneyrand)), GiveMoney(playerid, moneyrand);
            }
        }
        case 3: {
            switch(rand)
            {
                case 0: SendServerMessage(playerid, "Anda mendapatkan sampah di laut..");
                case 1: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(30.0,40.0));
                case 2: SendClientMessageEx(playerid, X11_RED_2, "Anda mendapatkan ubur-ubur, ini menyengat anda (darah berkurang otomatis)."), SetPlayerHealth(playerid, ReturnHealth(playerid)-5);                    
                case 3: AddFish(playerid, fishNames[random(sizeof(fishNames))], RandomFloat(25.0,35.0));
                case 4: SendServerMessage(playerid, "Anda mendapatkan bonus uang sebesar "GREEN"%s.", FormatNumber(moneyrand)), GiveMoney(playerid, moneyrand);
            }
        }
    }

    if(IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT)) RemovePlayerAttachedObject(playerid, WEAPON_SLOT);

    ClearAnimations(playerid, 1);
    PlayerData[playerid][pFishing] = 0;
    return 1;
}

timer refuseLogin[300000](playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SendServerMessage(playerid, "Anda di keluarkan dari server dikarenakan terlalu lama login ke dalam server.");

        Dialog_Close(playerid);
        KickEx(playerid);
    }
    return 1;
}

timer refuseEmail[300000](playerid) {
    if (IsPlayerConnected(playerid)) {
        SendServerMessage(playerid, "Anda di keluarkan dari server dikarenakan terlalu lama memasukkan email.");
    
        Dialog_Close(playerid);
        KickEx(playerid);
    }
    return 1;
}

timer refuseVCode[600000](playerid) {
    if (IsPlayerConnected(playerid)) {
        SendServerMessage(playerid, "Anda di keluarkan dari server dikarenakan terlalu lama memasukkan verifikasi kode.");

        Dialog_Close(playerid);
        KickEx(playerid);
    }
    return 1;
}

timer Canusingask[120000](playerid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        if(PlayerData[playerid][pAsk])
        {
            PlayerData[playerid][pAsk] = false;
            PlayerData[playerid][pAskQ] = EOS;
            SendServerMessage(playerid, "No one answer your questions, now you can use /ask again.");
        }
    }
    return 1;
}

timer repairGYMEquip[1500](playerid, equipid) {
    if(SQL_IsCharacterLogged(playerid)) {
        if((GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && GYMObject_Nearest(playerid) == equipid) {
            PlayerData[playerid][pMekanikTime] ++;
            new string[128];
            format(string,sizeof(string),"~b~Repairing GYM Equipment~n~Waiting for repairing progress for ~g~%d~b~/15 ...", PlayerData[playerid][pMekanikTime]);
            ShowPlayerFooter(playerid, string, 1000);

            if(PlayerData[playerid][pMekanikTime] >= 15) {
                GYMObject[equipid][objectCondition] = 5000;
                Inventory_Remove(playerid, "Component", 100);

                GameTextForPlayer(playerid, "~g~~h~GYM Equipment Fixed!", 1500, 3);
                PlayerData[playerid][pMekanik] = 0;
                stop PlayerData[playerid][pRepairTime];
                SetPlayerArmedWeapon(playerid, 0);
            }
        } else {
            PlayerData[playerid][pMekanik] = 0;
            stop PlayerData[playerid][pRepairTime];
            SetPlayerArmedWeapon(playerid, 0);
            SendCustomMessage(playerid, "REPAIR","Gagal memperbaiki GYM Equipment, terlalu jauh dari GYM Equipment.");
            return 1;
        }
    }
    return 1;
}

// timer RepairKit[1500](playerid, vehicleid) {
//     if(SQL_IsCharacterLogged(playerid)) {
//         if (GetNearestVehicleToPlayer(playerid,4.0,false) == vehicleid) {
//             PlayerData[playerid][pMekanikTime] ++;

//             new Float:maxhealth, vehid = -1, string[128], panels, doors, lights, tires;

//             if ((vehid = Vehicle_GetID(vehicleid)) != -1) {
//                 if (VehicleData[vehid][cEngineUpgrade] && !IsABike(vehicleid)) maxhealth = 2000.0;
//                 else if (VehicleData[vehid][cEngineUpgrade] && IsABike(vehicleid)) maxhealth = 1500.0;
//                 else maxhealth = 1000.0;

//                 if(PlayerData[playerid][pMekanikTime] >= 15) {
//                     GameTextForPlayer(playerid, "~g~~h~Vehicle Fixed!", 1500, 3);
//                     SetHoodStatus(vehicleid,false);
//                     SetVehicleHealth(vehicleid, maxhealth);
//                     GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
//                     UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, tires);
//                     PlayerData[playerid][pMekanik] = 0;
//                     stop PlayerData[playerid][pRepairTime];
//                     SetPlayerArmedWeapon(playerid, 0);
//                     Inventory_Remove(playerid, "Repair Kit", 1);
//                 } else {
//                     format(string,sizeof(string),"~b~Repairing vehicle~n~Waiting for repairing progress for ~g~%d~b~/15 ...", PlayerData[playerid][pMekanikTime]);
//                     ShowPlayerFooter(playerid, string, 1000);
//                 }
//             }
//         } else {
//             PlayerData[playerid][pMekanik] = 0;
//             stop PlayerData[playerid][pRepairTime];
//             SetPlayerArmedWeapon(playerid, 0);
//             SendCustomMessage(playerid, "REPAIR","Gagal memperbaiki kendaraan, terlalu jauh dari kendaraan.");
//             return 1;
//         }
//     }
//     return 1;
// }

timer repairVehicle[1500](playerid, vehicleid, type)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        if((GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && GetNearestVehicleToPlayer(playerid,4.0,false) == vehicleid)
        {
            PlayerData[playerid][pMekanikTime] ++;

            switch (type) {
                case REPAIR_TIRES: ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
                default: ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
            }

            new string[128],
                panels, doors, lights, tires, 
                id = -1,
                vehid = Vehicle_GetID(vehicleid);

            switch(type)
            {
                case REPAIR_BODY: format(string,sizeof(string),"~b~Repairing vehicle body~n~Waiting for repairing progress for ~g~%d~b~/15 ...", PlayerData[playerid][pMekanikTime]);
                case REPAIR_TIRES: format(string,sizeof(string),"~b~Repairing vehicle tires~n~Waiting for repairing progress for ~g~%d~b~/15 ...", PlayerData[playerid][pMekanikTime]);
                case PAINTJOB: format(string,sizeof(string),"~b~Spraying vehicle paintjob~n~Waiting for spraying progress for ~g~%d~b~/15 ...", PlayerData[playerid][pMekanikTime]);
            }
            ShowPlayerFooter(playerid, string, 1000);

            switch (type) {
                case REPAIR_ENGINE: {
                    new Float:maxhealth;

                    if (VehicleData[vehid][cEngineUpgrade] && !IsABike(vehicleid)) maxhealth = VehicleData[vehid][cMaxHealth];
                    else if (VehicleData[vehid][cEngineUpgrade] && IsABike(vehicleid)) maxhealth = 1500.0;
                    else maxhealth = 1000.0;

                    if(ReturnVehicleHealth(vehicleid) <= maxhealth) {
                        if((id = Workshop_Nearest(playerid)) != -1)
                        {
                            if(WorkshopData[id][wComponent] < 2) 
                                return SendErrorMessage(playerid, "Komponen pada workshop tidak mencukupi, gagal memperbaiki kendaraan.");

                            WorkshopData[id][wComponent] -= 2;
                            format(string,sizeof(string),"~g~~h~Repair Vehicle~n~~y~~h~Waiting for health progress ~r~%d.~n~~y~~h~This workshop have %d component now", ReturnVehicleHealth(vehicleid), WorkshopData[id][wComponent]);
                        }
                        else {
                            if(Inventory_Count(playerid, "Component") < 2)
                                return SendErrorMessage(playerid, "Komponent milikmu tidak mencukupi, gagal memperbaiki kendaraan.");

                            Inventory_Remove(playerid, "Component", 2);
                            format(string,sizeof(string),"~g~~h~Repair Vehicle~n~~y~~h~Waiting for health progress ~r~%d.~n~~y~~h~You have %d component now", ReturnVehicleHealth(vehicleid), Inventory_Count(playerid, "Component"));
                        }

                        SetVehicleHealth(vehicleid, (ReturnVehicleHealth(vehicleid)+25));
                        ShowPlayerFooter(playerid, string, 1000);
                    } else {
                        GameTextForPlayer(playerid, "~g~~h~Vehicle engine Fixed!", 1500, 3);
                        SetHoodStatus(vehicleid,false);
                        SetVehicleHealth(vehicleid, maxhealth);
                        PlayerData[playerid][pMekanik] = 0;
                        stop PlayerData[playerid][pRepairTime];
                        SetPlayerArmedWeapon(playerid, 0);
                    }
                }
            }

            if(PlayerData[playerid][pMekanikTime] >= 15)
            {
                switch(type)
                {
                    case REPAIR_BODY:
                    {    
                        if((id = Workshop_Nearest(playerid)) != -1)
                        {
                            if(WorkshopData[id][wComponent] < 40) 
                                return SendErrorMessage(playerid, "Komponen pada workshop tidak mencukupi, gagal memperbaiki kendaraan.");

                            WorkshopData[id][wComponent] -= 40;
                        }
                        else {
                            if(Inventory_Count(playerid, "Component") < 40)
                                return SendErrorMessage(playerid, "Komponent milikmu tidak mencukupi, gagal memperbaiki kendaraan.");

                            Inventory_Remove(playerid, "Component", 40);
                        }
                        
                        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
                        UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, tires);
                        GameTextForPlayer(playerid, "~g~~h~Vehicle body Fixed!", 1500, 3);
                    }
                    case REPAIR_TIRES:
                    {
                        if((id = Workshop_Nearest(playerid)) != -1)
                        {
                            if(WorkshopData[id][wComponent] < 15) 
                                return SendErrorMessage(playerid, "Komponen pada workshop tidak mencukupi, gagal memperbaiki kendaraan.");

                            WorkshopData[id][wComponent] -= 15;
                        }
                        else {
                            if(Inventory_Count(playerid, "Component") < 15)
                                return SendErrorMessage(playerid, "Komponent milikmu tidak mencukupi, gagal memperbaiki kendaraan.");

                            Inventory_Remove(playerid, "Component", 15);
                        }

                        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
                        UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 0);
                        GameTextForPlayer(playerid, "~g~~h~Vehicle tire's Fixed!", 1500, 3);  
                    }
                    case PAINTJOB:
                    {
                        new vehicle_id = GetPVarInt(playerid, "WorkshopVeh"),
                            workshop_id = GetPVarInt(playerid, "Workshop"),
                            paintjob_id = GetPVarInt(playerid, "PaintjobId");

                        SetVehiclePaintjob(VehicleData[vehicle_id][cVehicle], paintjob_id);
                        WorkshopData[workshop_id][wComponent] -= 15;
                        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
                        
                        SetPVarInt(playerid, "Workshop", -1);
                        SetPVarInt(playerid, "WorkshopVeh", -1);
                        SetPVarInt(playerid, "PaintjobId", 0);
                        
                        SendServerMessage(playerid, "You've spraying paintjob for this vehicle.");
                    }
                }

                if (type != REPAIR_ENGINE) {
                    PlayerData[playerid][pMekanik] = 0;
                    stop PlayerData[playerid][pRepairTime];
                    SetPlayerArmedWeapon(playerid, 0);
                }
            }
        }
        else 
        {
            PlayerData[playerid][pMekanik] = 0;
            stop PlayerData[playerid][pRepairTime];
            SetPlayerArmedWeapon(playerid, 0);
            SendCustomMessage(playerid, "REPAIR","Gagal memperbaiki kendaraan, terlalu jauh dari kendaraan.");
            return 1;
        }
    }
    return 1;
}

timer UpgradeCar[1500](playerid, vehicleid, type) {
    new id = -1, vehid = Vehicle_GetID(vehicleid);

    switch (type) {
        case 0: {
            new panels, doors, lights, tires;
            if (SQL_IsCharacterLogged(playerid)) {
                if ((GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && GetNearestVehicleToPlayer(playerid,4.0,false) == vehicleid) {
                    if (++PlayerData[playerid][pUpgrade] >= 50) {
                        if((id = Workshop_Nearest(playerid)) != -1) {
                            WorkshopData[id][wComponent] -= 250;
                        } else {
                            Inventory_Remove(playerid, "Component", 250);
                        }
                        stop PlayerData[playerid][pUpgradeTimer];
                        VehicleData[vehid][cBodyUpgrade] = 1;
                        Vehicle_Save(vehid);
                        ClearAnimations(playerid, 1);
                        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
                        UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, tires);
                        PlayerData[playerid][pUpgrade] = 0;
                        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Upgrade done!...", 5000, 4);
                    }
                    ShowPlayerFooter(playerid, sprintf("~b~Upgrade body vehicle progress ~g~%d~b~/50!", PlayerData[playerid][pUpgrade]), 1000);
                    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
                } else {
                    stop PlayerData[playerid][pUpgradeTimer];
                    SendCustomMessage(playerid, "MECHANIC","Gagal mengupgrade body kendaraan, terlalu jauh dari kap kendaraan.");
                }
            }
        }
        case 1: {
            if (SQL_IsCharacterLogged(playerid)) {
                if ((GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && GetNearestVehicleToPlayer(playerid,4.0,false) == vehicleid) {
                    if (++PlayerData[playerid][pUpgrade] >= 50) {
                        if((id = Workshop_Nearest(playerid)) != -1) {
                            WorkshopData[id][wComponent] -= 250;
                        } else {
                            Inventory_Remove(playerid, "Component", 250);
                        }
                        stop PlayerData[playerid][pUpgradeTimer];
                        if (IsABike(vehicleid)) VehicleData[vehid][cMaxHealth] = 1500.0;
                        else VehicleData[vehid][cMaxHealth] = 2000.0;
                        VehicleData[vehid][cEngineUpgrade] = 1;
                        Vehicle_Save(vehid);
                        SetVehicleHealth(vehicleid, VehicleData[vehid][cMaxHealth]);
                        ClearAnimations(playerid, 1);
                        PlayerData[playerid][pUpgrade] = 0;
                        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Upgrade done!...", 5000, 4);
                    }
                    ShowPlayerFooter(playerid, sprintf("~b~Upgrade engine vehicle progress ~g~%d~b~/50!", PlayerData[playerid][pUpgrade]), 1000);
                    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
                } else {
                    stop PlayerData[playerid][pUpgradeTimer];
                    SendCustomMessage(playerid, "MECHANIC","Gagal mengupgrade mesin kendaraan, terlalu jauh dari kap kendaraan.");
                }
            }
        }
        // case 2: {
        //     if (SQL_IsCharacterLogged(playerid)) {
        //         if ((GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && GetNearestVehicleToPlayer(playerid,4.0,false) == vehicleid) {
        //             if (++PlayerData[playerid][pUpgrade] >= 50) {
        //                 if((id = Workshop_Nearest(playerid)) != -1) {
        //                     WorkshopData[id][wComponent] -= 250;
        //                 } else {
        //                     Inventory_Remove(playerid, "Component", 250);
        //                 }
        //                 stop PlayerData[playerid][pUpgradeTimer];
        //                 VehicleData[vehid][cAlarm] = 1;
        //                 Vehicle_Save(vehid);
        //                 ClearAnimations(playerid, 1);
        //                 PlayerData[playerid][pUpgrade] = 0;
        //                 GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Upgrade done!...", 5000, 4);
        //             }
        //             ShowPlayerFooter(playerid, sprintf("~b~Installing security alarm vehicle progress ~g~%d~b~/50!", PlayerData[playerid][pUpgrade]), 1000);
        //             ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
        //         } else {
        //             stop PlayerData[playerid][pUpgradeTimer];
        //             SendCustomMessage(playerid, "MECHANIC","Gagal menginstall security alarm kendaraan, terlalu jauh dari kap kendaraan.");
        //         }
        //     }
        // }
    }
    return 1;
}

timer ResprayCar[1000](playerid, vehicleid, color1, color2)
{
    if(SQL_IsCharacterLogged(playerid) && (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC))
    {
        if(GetNearestVehicleToPlayer(playerid,4.0,false) != vehicleid)
        {
            SetPlayerArmedWeapon(playerid, 0);
            stop PlayerData[playerid][pSprayTimer];
            return 1;
        }
        if(++PlayerData[playerid][pSpray] >= 10)
        {
            new id = -1, vehname[32];
            if((id = Workshop_Nearest(playerid)) != -1) {
                WorkshopData[id][wComponent] -= 40;
            } else if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
                Inventory_Remove(playerid, "Component", 35);
            }

            SetPlayerArmedWeapon(playerid, 0);

            Inventory_Remove(playerid, "Spray Can");

            stop PlayerData[playerid][pSprayTimer];
            SetVehicleColorEx(vehicleid, color1, color2);
            GetVehicleNameByVehicle(vehicleid, vehname);
            GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Spraying done!...", 5000, 4);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has used a can of spray paint on the %s.", ReturnName(playerid, 0, 1), vehname);
        }
        ShowPlayerFooter(playerid, sprintf("~b~Spraying vehicle progress ~g~%d~b~/10!", PlayerData[playerid][pSpray]), 1000);
    }
    return 1;
}

// timer GiveLastWeapon[500](playerid)
// {
//     SetPlayerArmedWeapon(playerid, PlayerData[playerid][pLastWeapon]);
//     PlayerData[playerid][pLastWeapon] = 0;
//     return 1;
// }

Function:GeneratePlateRegistration(playerid, carid, plate[])
{
    new rows = cache_num_rows();

    if (rows) {
        new newplate[24];
        format(newplate,sizeof(newplate),"LS-%d%d%d%d",random(10),random(10),random(10),random(10));

        mysql_tquery(g_iHandle, sprintf("SELECT `Plate` FROM `player_vehicles` WHERE `Plate` = '%s'", newplate), "GeneratePlateRegistration", "dds", playerid, carid, newplate);
    } else {
        new vehname[32];
        SetVehicleNumberPlate(VehicleData[carid][cVehicle], plate);
        format(VehicleData[carid][cPlate], 24, "%s", plate);
        RespawnVehicle(VehicleData[carid][cVehicle]);
        Vehicle_Save(carid);
        SendCustomMessage(playerid, "VEHICLE", "You've been registered your "CYAN"%s "WHITE"number plate to '"YELLOW"%s"WHITE"'", vehname, VehicleData[carid][cPlate]);
        GiveMoney(playerid, -250);

        for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_POLICE) {
            FactionData[fac][factionMoney] += 250;
            FactionData[fac][factionDepositMoney] = 250;
            format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Registering vehicle number plate");
        }
    }
    return 1;
}

/*stock const Float:arrHospitalSpawns[6][4] = {
    {-2655.1240, 638.6232, 14.4531, 180.0000},
    {-318.8799, 1049.2433, 20.3403, 0.0000},
    {1607.4869, 1816.0693, 10.8203, 0.0000},
    {1172.8372, -1325.3186, 15.4000, 270.0000},
    {2034.0670, -1402.6815, 17.2938, 180.0000},
    {1241.6802, 326.4038, 19.7555, 335.0000}
};*/

/*stock const Float:arrHospitalSpawn[2][4] = {
    {1182.8778,-1324.2023,13.5784,269.8747},
    {2028.7529,-1419.9445,16.9922,133.3715}
};*/

stock const Float:g_arrWeaponDamage[] = {
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 82.5, 0.0, 1.0, 9.9, 46.2, 0.0, 8.25, 13.2,
    46.2, 3.3, 3.3, 4.95, 6.6, 8.25, 9.9, 9.9, 6.6, 24.75, 41.25,
    82.5, 82.5, 1.0, 46.2, 82.5, 0.0, 0.33, 0.33, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.64, 9.9, 330.0, 82.5, 1.0, 1.0, 165.0
};

stock const g_aPreloadLibs[][] =
{
    "AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
    "BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
    "BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
    "BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
    "BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
    "CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
    "COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
    "DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
    "DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
    "FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
    "FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
    "GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
    "GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
    "INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
    "KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
    "MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
    "MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
    "PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
    "POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
    "QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
    "ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
    "SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
    "SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
    "STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
    "SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
    "TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
    "WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

enum houseInteriors {
    eHouseInterior,
    Float:eHouseX,
    Float:eHouseY,
    Float:eHouseZ,
    Float:eHouseAngle
};

new const Float:arrHouseInteriors[3][houseInteriors] = {
    {3, 387.78, 634.47, 1009.67, 91.58},
    {4, 431.00, 612.65, 1000.22, 89.33},
    {5, 1384.50, 1518.17, 10.95, 270.38}
};

/*new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
    {300.5000, -137.0286, 1004.0625},
    {300.5000, -135.5336, 1004.0625},
    {300.5000, -134.0436, 1004.0625},
    {300.5000, -132.5637, 1004.0625},
    {300.5000, -131.0782, 1004.0625},
    {300.5000, -129.5582, 1004.0625},
    {300.5000, -128.0786, 1004.0625}
};*/

stock const FontNames[][] = {
    "Arial",
    "Calibri",
    "Comic Sans MS",
    "Georgia",
    "Times New Roman",
    "Consolas",
    "Constantia",
    "Corbel",
    "Courier New",
    "Impact",
    "Lucida Console",
    "Palatino Linotype",
    "Tahoma",
    "Trebuchet MS",
    "Verdana"
};

stock const countryList[][] = {
    "United States of America",
    "United Kingdom",
    "Indonesia",
	"Afghanistan",
	"Albania",
	"Algeria",
	"American Samoa",
	"Andorra",
	"Angola",
	"Anguilla",
	"Antarctica",
	"Antigua and Barbuda",
	"Argentina",
	"Armenia",
	"Aruba",
	"Australia",
	"Austria",
	"Azerbaijan",
	"Bahrain",
	"Bangladesh",
	"Barbados",
	"Belarus",
	"Belgium",
	"Belize",
	"Benin",
	"Bermuda",
	"Bhutan",
	"Botswana",
	"Bouvet Island",
	"Brazil",
	"Brunei Darussalam",
	"Bulgaria",
	"Burkina Faso",
	"Burundi",
	"Cabo Verde",
	"Cambodia",
	"Cameroon",
	"Canada",
	"Chad",
	"Chile",
	"China",
	"Christmas Island",
	"Colombia",
	"Comoros",
	"Congo",
	"Cook Islands",
	"Costa Rica",
	"Croatia",
	"Cuba",
	"Curaçao",
	"Cyprus",
	"Czechia",
	"Côte d'Ivoire",
	"Denmark",
	"Djibouti",
	"Dominica",
	"Ecuador",
	"Egypt",
	"El Salvador",
	"Eritrea",
	"Estonia",
	"Eswatini",
	"Ethiopia",
	"Fiji",
	"Finland",
	"France",
	"Gabon",
	"Gambia",
	"Georgia",
	"Germany",
	"Ghana",
	"Gibraltar",
	"Greece",
	"Greenland",
	"Grenada",
	"Guadeloupe",
	"Guam",
	"Guatemala",
	"Guernsey",
	"Guinea",
	"Guinea-Bissau",
	"Guyana",
	"Haiti",
	"Honduras",
	"Hong Kong",
	"Hungary",
	"Iceland",
	"India",
	"Iran",
	"Iraq",
	"Ireland",
	"Isle of Man",
	"Israel",
	"Italy",
	"Jamaica",
	"Japan",
	"Jersey",
	"Jordan",
	"Kazakhstan",
	"Kenya",
	"Kiribati",
	"Korea",
	"Kuwait",
	"Kyrgyzstan",
	"Latvia",
	"Lebanon",
	"Lesotho",
	"Liberia",
	"Libya",
	"Liechtenstein",
	"Lithuania",
	"Luxembourg",
	"Macao",
	"Madagascar",
	"Malawi",
	"Malaysia",
	"Maldives",
	"Mali",
	"Malta",
	"Martinique",
	"Mauritania",
	"Mauritius",
	"Mayotte",
	"Mexico",
	"Moldova",
	"Monaco",
	"Mongolia",
	"Montenegro",
	"Montserrat",
	"Morocco",
	"Mozambique",
	"Myanmar",
	"Namibia",
	"Nauru",
	"Nepal",
	"Netherlands",
	"New Caledonia",
	"New Zealand",
	"Nicaragua",
	"Niger",
	"Nigeria",
	"Niue",
	"Norway",
	"Oman",
	"Pakistan",
	"Palestine",
	"Panama",
	"Papua New Guinea",
	"Paraguay",
	"Peru",
	"Philippines",
	"Pitcairn",
	"Poland",
	"Portugal",
	"Qatar",
	"Romania",
	"Russian",
	"Samoa",
	"San Marino",
	"Saudi Arabia",
	"Serbia",
	"Singapore",
	"Slovakia",
	"South Africa",
	"Spain",
	"Sri Lanka",
	"Sudan",
	"Suriname",
	"Sweden",
	"Switzerland",
	"Taiwan",
	"Tajikistan",
	"Thailand",
	"Timor-Leste",
	"Togo",
	"Tokelau",
	"Tonga",
	"Tunisia",
	"Turkey",
	"Turkmenistan",
	"Tuvalu",
	"Uganda",
	"Ukraine",
	"United Arab Emirates",
	"Uruguay",
	"Uzbekistan",
	"Vanuatu",
	"Vietnam",
	"Yemen",
	"Zambia",
	"Zimbabwe"
};

stock const ObjectList[][] = {
    {18244, "cuntw_stwnmotsign1"},
    {9314, "advert01_sfn"},
    {19475, "Plane001"},
    {19475, "Plane001"},
    {19476, "Plane002"},
    {19477, "Plane003"},
    {19478, "Plane004"},
    {19479, "Plane005"},
    {19480, "Plane006"},
    {19481, "Plane007"},
    {19482, "Plane008"},
    {19483, "Plane009"}
};

stock const FontSizes[][] = {
    {OBJECT_MATERIAL_SIZE_32x32, "32x32" },
    {OBJECT_MATERIAL_SIZE_64x32, "64x32" },
    {OBJECT_MATERIAL_SIZE_64x64, "64x64" },
    {OBJECT_MATERIAL_SIZE_128x32, "128x32" },
    {OBJECT_MATERIAL_SIZE_128x64, "128x64" },
    {OBJECT_MATERIAL_SIZE_128x128, "128x128" },
    {OBJECT_MATERIAL_SIZE_256x32, "256x32" },
    {OBJECT_MATERIAL_SIZE_256x64, "256x64" },
    {OBJECT_MATERIAL_SIZE_256x128 ,"256x128" },
    {OBJECT_MATERIAL_SIZE_256x256 ,"256x256" },
    {OBJECT_MATERIAL_SIZE_512x64, "512x64" },
    {OBJECT_MATERIAL_SIZE_512x128, "512x128" },
    {OBJECT_MATERIAL_SIZE_512x256, "512x256" },
    {OBJECT_MATERIAL_SIZE_512x512, "512x512" }
};

stock const AvailableColor[][] =
{
    {0xFFFF0000, "Red" },
    {0xFFFFFFFF, "White" },
    {0xFF00FFFF, "Cyan" },
    {0xFFC0C0C0, "Silver" },
    {0xFF0000FF, "Blue" },
    {0xFF808080, "Grey" },
    {0xFF0000A0, "Dark Blue" },
    {0xFF000000, "Black" },
    {0xFF33CCFF, "Lightblue" },
    {0xFFFFA500, "Orange" },
    {0xFF800080, "Purple" },
    {0xFFA52A2A, "Brown" },
    {0xFFFFFF00, "Yellow" },
    {0xFF800000, "Maroon" },
    {0xFF00FF00, "Lime" },
    {0xFF008000, "Green" },
    {0xFFFF00FF, "Fuchsia" },
    {0xFF808000, "Olive" }
};

stock const g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Valleyic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

enum radioEnums {
    Link[128],
    Name[64]
};

new RadioStation[][radioEnums] = {
    {"http://s7.alhastream.com/radio/8350/radio?1608463211", "SANews Radio"},
    {"http://d.zaix.ru./kRWx.png", "Los Dol"},
    {"http://d.zaix.ru/mqbQ.jpg", "Tokyo Drift"},
    {"https://mboxdrive.com/story.mp3", "Story Of My Life"},
    {"http://d.zaix.ru/mn7T.jpg", "Dj Cinta Diatas Kertas"},
    {"http://d.zaix.ru/momM.png", "Alone"},
    {"http://d.zaix.ru/mmX6.jpg", "NEFFEX Best Of Me"},
    {"http://d.zaix.ru/mmWY.jpg", "NEFFEX Crown"},
    {"http://d.zaix.ru/mfDN.txt", "Dear God"},
    {"http://d.zaix.ru/kwdu.jpg", "Bird"},
    {"http://d.zaix.ru/md8e.jpg", "Play Date"},
    {"http://d.zaix.ru/moLq.jpg", "Unravel / Opening tokyo ghoul"},
    {"http://d.zaix.ru/kqst.mp3", "Kimi no toriko"},
    {"http://d.zaix.ru/moL7.jpg", "No game no life full opening"},
    {"http://d.zaix.ru/moLY.jpg", "Kimi no nawa / your name"},
    {"http://d.zaix.ru/moM2.jpg", "Shigatsu / Hikaru nara"},
    {"http://d.zaix.ru/kPJg.jpg", "Dj rasa ini yang tertinggal"},
    {"http://d.zaix.ru/joyp.mp3", "Dj inspirasiku"},
    {"http://d.zaix.ru/kIfV.ttf", "Aku Suka Body Goyang Mama Muda"},
    {"http://d.zaix.ru/kNR7.jpg", "DJ Hareudang"},
    {"http://d.zaix.ru/kIgd.ttf", "Play Date Angklung"},
    {"http://d.zaix.ru/kRnW.jpg", "Dj dalan liyane slow remix"},
    {"http://d.zaix.ru/kqrf.jpg", "Dj never be alone"},
    {"http://d.zaix.ru/krvu.jpg", "Dj tatu remix full bass"},
    {"http://d.zaix.ru/kQtY.png", "Dj all of me angklung slow remix"},
    {"http://d.zaix.ru/kQdu.jpg", "Pamer Bojo"},
    {"http://d.zaix.ru/kNL4.jpg", "Milos"},
    {"http://d.zaix.ru/kNEs.jpg", "Cinnamon Cover"},
    {"http://d.zaix.ru/kQqx.png", "Dj bad liar angklung slow remix"},
    {"http://d.zaix.ru/kHqr.ttf", "Te molla (Original)"},
    {"http://d.zaix.ru/kNRq.jpg", "Lathi"},
    {"http://d.zaix.ru/kRob.jpg", "Dj terlena"},
    {"http://d.zaix.ru/kRoc.jpg", "Dj tresno ku"},
    {"http://d.zaix.ru/kRku.jpg", "DJ Vaaste"}
};

enum bodyEnums {
    Id,
    Model[37]
};

new BodyWork[][bodyEnums] = {
    {1000,"Generic Spoiler"},
    {1001,"Generic Spoiler"},
    {1002,"Generic Spoiler"},
    {1003,"Generic Spoiler"},
    {1004,"Bonnet Scoop"},
    {1005,"Bonnet Scoop"},
    {1006,"Generic Vehicle Roof-Scoop"},
    {1007,"Generic Vehicle Side Skirt (L)"},
    {1011,"Bonnet Scoop"},
    {1012,"Bonnet Scoop"},
    {1013,"Round Fog Lamps"},
    {1014,"Generic Spoiler"},
    {1015,"Generic Spoiler"},
    {1016,"Generic Spoiler"},
    {1017,"Generic Vehicle Side Skirt (R)"},
    {1018,"Curved Twin Cylinder Generic Exhaust"},
    {1019,"Twin Cylinder Generic Exhaust"},
    {1020,"Large Generic Exhaust"},
    {1021,"Medium Generic Exhaust"},
    {1022,"Small Generic Exhaust"},
    {1023,"Generic Spoiler"},
    {1024,"Square Fog Lamps"},
    {1026,"Sultan Side Skirt Type 1 (L)"},
    {1027,"Sultan Side Skirt Type 1 (R)"},
    {1028,"Sultan Exhaust Type 1"},
    {1029,"Sultan Exhaust Type 2"},
    {1030,"Sultan Side Skirt Type 2 (R)"},
    {1031,"Sultan Side Skirt Type 1 (L)"},
    {1032,"Sultan Roof Scoop type 1"},
    {1033,"Sultan Roof Scoop type 2"},
    {1169,"Sultan Front Bumper type 1"},
    {1170,"Sultan Front Bumper type 2"},
    {1138,"Sultan Spoiler type 1"},
    {1139,"Sultan Spoiler type 2"},
    {1140,"Sultan Rear Bumper type 2"},
    {1141,"Sultan Rear Bumper type 1"},
    {1146,"Elegy Spoiler type 2"},
    {1147,"Elegy Spoiler type 1"},
    {1148,"Elegy Rear Bumper type 2"},
    {1149,"Elegy Rear Bumper type 1"},
    {1150,"Flash Rear Bumper type 1"},
    {1151,"Flash Rear Bumper type 2"},
    {1152,"Flash Front Bumper type 2"},
    {1153,"Flash Front Bumper type 1"},
    {1154,"Stratum Rear Bumper type 1"},
    {1155,"Stratum Front Bumper type 1"},
    {1156,"Stratum Rear Bumper type 2"},
    {1157,"Stratum Front Bumper type 2"},
    {1158,"Jester Spoiler type 2"},
    {1159,"Jester Rear Bumper type 1"},
    {1160,"Jester Front bumper type 1"},
    {1161,"Jester Rear bumper type2"},
    {1162,"Jester Spoiler type 1"},
    {1163,"Uranus Spoiler type 2"},
    {1164,"Uranus Spoiler type 1"},
    {1165,"Uranus Front Bumper type 2"},
    {1166,"Uranus Rear Bumper type 2"},
    {1167,"Uranus Front Bumper type 1"},
    {1168,"Uranus Rear Bumper type 1"},
    {1171,"Elegy Front Bumper type 1"},
    {1172,"Elegy Front Bumper type 2"},
    {1173,"Jester Front Bumper type 2"},
    {1174,"Broadway Front Bumper type 1"},
    {1175,"Broadway Front Bumper type 2"},
    {1176,"Broadway Rear Bumper type 1"},
    {1178,"Remington Rear Bumper type 2"},
    {1179,"Remington Front Bumper type 1"},
    {1180,"Remington Rear Bumper type 2"},
    {1181,"Blade Front Bumper type 2"},
    {1182,"Blade Front Bumper type 1"},
    {1183,"Blade Rear Bumper type 2"},
    {1184,"Blade Rear Bumper type 1"},
    {1185,"Remington Front Bumper type 2"},
    {1186,"Savanna Rear Bumper type 2"},
    {1187,"Savanna Rear Bumper type 1"},
    {1188,"Savanna Front Bumper type 2"},
    {1189,"Savanna Front Bumper type 1"},
    {1190,"Tornado Rear Bumper type 1"},
    {1191,"Tornado Rear Bumper type 2"},
    {1192,"Tornado Front Bumper type 1"},
    {1193,"Tornado Front Bumper type 2"},
    {1034,"Elegy Exhaust type 1"},
    {1035,"Elegy Roof Scoop Type 1"},
    {1036,"Elegy Side Skirt type 1 (L)"},
    {1037,"Elegy Exhaust Type 2"},
    {1038,"Elegy Roof Scoop type 2"},
    {1039,"Elegy Side Skirt type 2 (L)"},
    {1040,"Elegy Side Skirt type 1 (R)"},
    {1041,"Elegy Side Skirt type 2 (R)"},
    {1042,"Broadway Side Skirt (L)"},
    {1043,"Broadway Exhaust type 2"},
    {1044,"Broadway Exhaust type 1"},
    {1045,"Flash Exhaust type 2"},
    {1046,"Flash Exhaust type 1"},
    {1047,"Flash Side Skirt type 1 (L)"},
    {1048,"Flash Side Skirt type 2 (L)"},
    {1049,"Flash Spoiler type 1"},
    {1050,"Flash Spoiler type 2"},
    {1051,"Flash Side Skirt type 1 (R)"},
    {1052,"Flash Side Skirt type 2 (R)"},
    {1053,"Flash Roof Scoop type 2"},
    {1054,"Flash Roof Scoop type 1"},
    {1055,"Stratum Roof Scoop type 1"},
    {1056,"Stratum Side Skirt type 1 (L)"},
    {1057,"Stratum Side Skirt type 2 (L)"},
    {1058,"Stratum Spoiler type 1"},
    {1059,"Stratum Exhaust type 2"},
    {1060,"Stratum Spoiler type 2"},
    {1061,"Stratum Roof Scoop type 2"},
    {1062,"Stratum Side Skirt type 1 (R)"},
    {1063,"Stratum Side Skirt type 2 (R)"},
    {1064,"Stratum Exhaust type 1"},
    {1065,"Jester Exhaust type 1"},
    {1066,"Jester Exhaust type 2"},
    {1067,"Jester Roof Scoop type 1"},
    {1068,"Jester Roof Scoop type 2"},
    {1069,"Jester Side Skirt type 1 (L)"},
    {1070,"Jester Side Skirt type 2 (L)"},
    {1071,"Jester Side Skirt type 1 (R)"},
    {1072,"Jester Side Skirt type 2 (R)"},
    {1088,"Uranus Roof Scoop 1"},
    {1089,"Uranus Exhaust Type 1"},
    {1090,"Uranus Side Skirt type 1 (L)"},
    {1091,"Uranus Roof Scoop 2"},
    {1092,"Uranus Exhaust Type 2"},
    {1093,"Uranus Side Skirt type 2 (L)"},
    {1094,"Uranus Side Skirt type 1 (R)"},
    {1095,"Uranus Side Skirt type 2 (R)"},
    {1099,"Broadway Side Skirt (R)"},
    {1100,"Remington Misc. Part 1"},
    {1101,"Remington Side Skirt type 1 (R)"},
    {1102,"Savanna Side Skirt (R)"},
    {1103,"Blade Roof type 2"},
    {1104,"Blade Exhaust type 1"},
    {1105,"Blade Exhaust type 2"},
    {1106,"Remington Side Skirt type 2 (L)"},
    {1107,"Blade Side Skirt (R)"},
    {1108,"Blade Side Skirt (L)"},
    {1109,"Slamvan Rear Bullbars type 1"},
    {1110,"Slamvan Rear Bullbars type 2"},
    {1111,"Slamvan hood ornament 1 (not used)"},
    {1112,"Slamvan hood ornament 2 (not used)"},
    {1113,"Slamvan Exhaust type 1"},
    {1114,"Slamvan Exhaust type 2"},
    {1115,"Slamvan Front Bullbars type 1"},
    {1116,"Slamvan Front Bullbars type 2"},
    {1117,"Slamvan Front Bumper"},
    {1118,"Slamvan Side Skirt type 1 (L)"},
    {1119,"Slamvan Side Skirt type 2 (L)"},
    {1120,"Slamvan Side Skirt type 1 (R)"},
    {1121,"Slamvan Side Skirt type 2 (R)"},
    {1122,"Remington Side Skirt type 1 (L)"},
    {1123,"Remington Misc. Part 2"},
    {1124,"Remington Side Skirt type 2 (R)"},
    {1125,"Remington Misc. Part 3"},
    {1126,"Remington Exhaust type 1"},
    {1127,"Remington Exhaust type 2"},
    {1128,"Blade Roof Type 1"},
    {1129,"Savanna Exhaust type 1"},
    {1130,"Savanna Roof type 1"},
    {1131,"Savanna Roof type 2"},
    {1132,"Savanna Exhaust type 2"},
    {1133,"Savanna Side Skirt (L)"},
    {1134,"Tornado Side Skirt (L)"},
    {1135,"Tornado Exhaust type 2"},
    {1136,"Tornado Exhaust type 1"},
    {1137,"Tornado Side Skirt (R)"},
    {1142,"Oval Bonnet Vents (R)"},
    {1143,"Oval Bonnet Vents (L)"},
    {1144,"Square Bonnet Vents (R)"},
    {1145,"Square Bonnet Vents (L)"},
    {19310,"Taxi Cab White"},
    {19311,"Taxi Cab Black"},
    {18646,"Police_Light1"},
    {19797,"Police_Visor_Strobe1"},
    {19306,"Red_flag1"},
    {19307,"Blue_flag2"},
    {19620,"Light_Bar1"},
    {11701,"Ambulance_Lights1"},
    {19419,"Police_lights01"},
    {19834,"PoliceLine1"}
};
enum e_InteriorData {
    e_InteriorName[32],
    e_InteriorID,
    Float:e_InteriorX,
    Float:e_InteriorY,
    Float:e_InteriorZ
};

new const g_arrInteriorData[][e_InteriorData] = {
    {"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"Driving School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};

stock const Float:g_arrDrivingCheckpoints[][] = {
    {1150.3688, -1674.3969, 13.78},
    {1150.2283,-1572.1079,13.27},
    {1297.3367,-1572.0890,13.38},
    {1297.2411,-1852.5016,13.38},
    {1425.4194,-1872.4116,13.38},
    {1570.5751,-1872.4644,13.38},
    {1570.8784,-1730.0461,13.38},
    {1433.7212,-1731.0153,13.38},
    {1312.3274,-1731.7233,13.38},
    {1312.2893,-1570.4691,13.38},
    {1357.0247,-1396.8232,13.33},
    {1194.7001,-1397.0439,13.23},
    {1194.1786,-1570.1896,13.38},
    {1149.6901,-1571.1787,13.27},
    {1149.1445,-1675.4083,13.78},
    {1134.4229,-1676.0897,13.75}
};

stock const Float:g_arrSitSpawns[][] = {
    {-2027.5542, -117.0377, 1035.1719},
    {-2026.0056, -116.4610, 1035.1719},
    {-2024.5223, -117.6099, 1035.1719},
    {-2022.8257, -115.9175, 1035.1719},
    {-2030.3478, -116.2167, 1035.1719}
};


stock const Float:insuranceSpawn[][] = {
    {1080.9292, -1772.4038, 14.3665, 90.0000},
    {1081.0171,-1766.5964,14.3799,88.9713},
    {1080.7587,-1757.7683,14.3985,89.4019}
};

new g_aMaleSkins[188] = {
    1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
    61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
    121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
    147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
    177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
    208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
    241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
    290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 304, 305
};

new g_aFemaleSkins[77] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298
};

enum beaconData {
    bool:beaconExists,
    beaconObject
};

new BeaconActive[50][beaconData];

enum e_randomBuilding {
    Float:buildX,
    Float:buildY,
    Float:buildZ,
    buildID
};

new const g_randomBuilding[][e_randomBuilding] = {
    // bis station
    {985.60, -1290.52, 17.38, 0},
    {1020.23, -1290.52, 17.38, 0},
    {1002.24, -1287.45, 19.38, 0},
    {1020.92, -1279.88, 19.38, 0},
    {1011.04, -1282.32, 19.38, 0},
    {981.33, -1279.02, 19.38, 0},
    {996.91, -1279.30, 19.38, 0},
    {1016.59, -1303.06, 17.38, 0},
    {1016.79, -1308.99, 17.38, 0},
    {1023.31, -1308.55, 17.38, 0},
    {1025.69, -1308.42, 21.36, 0},
    {1041.92, -1307.81, 21.36, 0},
    // pom flint
    {-92.42, -1162.24, 2.44, 1},
    {-85.54, -1164.92, 2.36, 1},
    {-90.07, -1176.23, 2.26, 1},
    {-96.82, -1173.39, 2.49, 1},
    // MC
    {2452.10, -2090.88, 14.56, 2},
    {2452.36, -2080.23, 14.56, 2},
    {2458.41, -2102.37, 14.56, 2},
    {2486.02, -2102.16, 14.56, 2},
    {2452.53, -2072.11, 14.56, 2},
    {2452.54, -2099.75, 14.56, 2},
    {2452.99, -2085.95, 17.28, 2},
    {2469.46, -2102.06, 14.56, 2},
    // Pom idlewood
    {1941.55, -1776.15, 14.00, 3},
    {1941.78, -1769.69, 14.00, 3},
    {1928.59, -1776.60, 14.26, 3},
    {1942.84, -1772.99, 14.12, 3},
    // Pom vinewood
    {1000.71, -937.27, 42.32, 4},
    {1007.00, -936.26, 42.32, 4},
    {1002.92, -930.23, 43.32, 4},
    {1007.09, -929.65, 43.32, 4}
};

enum e_HouseInteriors {
    e_ObjModel,
    Float:e_ObjPosX,
    Float:e_ObjPosY,
    Float:e_ObjPosZ,
    Float:e_ObjRotX,
    Float:e_ObjRotY,
    Float:e_ObjRotZ,
    e_Type
};

new const g_aHouseInteriors[][e_HouseInteriors] = {
    // Small
    {19379,383.881,632.481,1012.149,0.000,90.000,270.000,1},
    {19379,374.301,632.481,1012.149,0.000,90.000,270.000,1},
    {19379,374.301,622.131,1012.149,0.000,90.000,270.000,1},
    {19379,374.301,621.990,1008.589,0.000,90.000,270.000,1},
    {19379,374.301,632.481,1008.589,0.000,90.000,270.000,1},
    {19379,383.881,632.481,1008.589,0.000,90.000,270.000,1},
    {19369,388.612,628.821,1010.345,0.000,0.000,0.000,1},
    {19369,388.612,631.981,1010.345,0.000,0.000,0.000,1},
    {19369,388.612,635.181,1010.345,0.000,0.000,0.000,1},
    {19369,388.612,638.361,1010.345,0.000,0.000,0.000,1},
    {19369,387.002,637.640,1010.345,0.000,0.000,90.000,1},
    {19369,383.882,637.640,1010.345,0.000,0.000,90.000,1},
    {19369,380.752,637.640,1010.345,0.000,0.000,90.000,1},
    {19369,377.572,637.640,1010.345,0.000,0.000,90.000,1},
    {19369,374.382,637.640,1010.345,0.000,0.000,90.000,1},
    {19369,371.182,637.640,1010.345,0.000,0.000,90.000,1},
    {19369,383.932,627.260,1010.345,0.000,0.000,90.000,1},
    {19369,379.022,625.590,1010.345,0.000,0.000,180.000,1},
    {19369,371.192,627.260,1010.345,0.000,0.000,90.000,1},
    {19369,377.582,627.260,1010.345,0.000,0.000,90.000,1},
    {19369,380.742,627.260,1010.345,0.000,0.000,90.000,1},
    {19369,387.122,627.260,1010.345,0.000,0.000,90.000,1},
    {19369,379.022,622.380,1010.345,0.000,0.000,180.000,1},
    {19369,379.022,619.221,1010.345,0.000,0.000,180.000,1},
    {19369,377.442,617.580,1010.345,0.000,0.000,270.000,1},
    {19369,374.313,617.580,1010.345,0.000,0.000,270.000,1},
    {19369,371.203,617.580,1010.345,0.000,0.000,270.000,1},
    {19369,369.583,619.220,1010.345,0.000,0.000,360.000,1},
    {19369,369.583,622.370,1010.345,0.000,0.000,360.000,1},
    {19369,369.583,625.560,1010.345,0.000,0.000,360.000,1},
    {19369,369.583,628.730,1010.345,0.000,0.000,360.000,1},
    {19369,369.583,631.880,1010.345,0.000,0.000,360.000,1},
    {19369,369.583,635.010,1010.345,0.000,0.000,360.000,1},
    {19369,369.583,638.210,1010.345,0.000,0.000,360.000,1},
    {1506,388.525,633.680,1008.675,0.000,0.000,90.000,1},
    {19397,374.375,627.252,1010.345,0.000,0.000,90.000,1},
    {1491,375.131,627.269,1008.605,0.000,0.000,540.000,1},
    // Medium
    {19379,427.058,602.686,1002.676,540.000,990.000,450.000,2},
    {19379,427.058,613.025,1002.676,540.000,990.000,450.000,2},
    {19379,427.058,623.415,1002.676,540.000,990.000,450.000,2},
    {19379,417.508,623.415,1002.676,540.000,990.000,450.000,2},
    {19379,417.508,612.946,1002.676,540.000,990.000,450.000,2},
    {19379,417.508,602.546,1002.676,540.000,990.000,450.000,2},
    {19379,408.058,602.546,1002.676,540.000,990.000,450.000,2},
    {19379,408.058,613.016,1002.676,540.000,990.000,450.000,2},
    {19379,427.058,613.145,999.136,540.000,990.000,450.000,2},
    {19379,417.458,613.145,999.136,540.000,990.000,450.000,2},
    {19379,427.058,602.686,999.136,540.000,990.000,450.000,2},
    {19379,417.488,602.686,999.136,540.000,990.000,450.000,2},
    {19379,407.918,602.686,999.136,540.000,990.000,450.000,2},
    {19379,407.918,613.085,999.136,540.000,990.000,450.000,2},
    {19379,427.058,623.546,999.136,540.000,990.000,450.000,2},
    {19379,417.538,623.546,999.136,540.000,990.000,450.000,2},
    {19367,416.614,623.171,1000.873,0.000,-180.000,0.000,2},
    {19367,416.614,626.341,1000.873,0.000,-180.000,0.000,2},
    {19367,418.213,627.912,1000.873,0.000,-180.000,90.000,2},
    {19367,421.353,627.912,1000.873,0.000,-180.000,90.000,2},
    {19367,424.543,627.912,1000.873,0.000,-180.000,90.000,2},
    {19367,426.527,623.140,1000.878,180.000,0.000,180.000,2},
    {19367,426.527,626.320,1000.878,180.000,0.000,180.000,2},
    {19367,427.733,627.912,1000.873,0.000,-180.000,90.000,2},
    {19367,-922.011,597.801,-0.290,0.000,0.000,0.000,2},
    {19367,417.782,616.789,1000.873,0.000,-180.000,0.000,2},
    {19367,417.774,610.177,1000.873,0.000,-180.360,0.000,2},
    {19367,417.787,606.978,1000.873,0.000,-180.360,0.000,2},
    {19367,419.409,605.406,1000.878,-180.000,0.000,270.000,2},
    {19367,422.605,605.411,1000.878,-180.000,0.000,270.000,2},
    {19367,425.797,605.402,1000.878,-180.000,0.000,270.000,2},
    {19367,428.993,605.394,1000.878,-180.000,0.000,270.000,2},
    {19367,417.775,603.989,1000.893,0.000,-180.360,0.000,2},
    {19367,432.202,605.396,1000.878,-180.000,0.000,270.000,2},
    {19367,5829.613,-4209.926,-6659.902,0.000,0.000,0.000,2},
    {19367,5829.613,-4209.926,-6659.902,0.000,0.000,0.000,2},
    {19367,1683.819,-8018.711,-4805.494,0.000,0.000,0.000,2},
    {19367,433.064,0.663,1000.878,-180.000,0.000,270.000,2},
    {19367,431.692,607.110,1000.878,180.000,0.019,180.000,2},
    {19367,431.687,610.299,1000.878,180.000,0.000,180.000,2},
    {1505,8492.210,-2183.372,999.819,0.000,0.000,0.000,2},
    {1505,431.691,611.874,999.168,0.000,0.000,90.000,2},
    {19367,431.695,614.996,1000.878,180.000,0.000,180.000,2},
    {19367,431.699,618.190,1000.878,180.000,0.000,180.000,2},
    {19367,429.800,618.376,1000.878,180.000,0.000,90.000,2},
    {19367,426.595,618.386,1000.878,180.000,0.000,90.000,2},
    {19367,423.400,618.399,1000.878,180.000,0.000,90.000,2},
    {19367,426.527,619.989,1000.878,180.000,0.000,180.000,2},
    {19367,416.614,620.030,1000.873,0.000,-180.000,0.000,2},
    {19367,416.265,618.361,1000.878,180.000,0.000,90.000,2},
    {19367,418.747,618.353,1000.878,180.000,0.000,90.000,2},
    {19367,413.304,618.371,1000.878,180.000,0.000,90.000,2},
    {19367,410.369,618.390,1000.878,180.000,0.000,90.000,2},
    {19367,416.130,606.410,1000.878,180.000,0.000,90.000,2},
    {19367,413.114,606.416,1000.878,180.000,0.000,90.000,2},
    {19367,411.550,607.922,1000.873,0.000,-180.360,0.000,2},
    {19367,411.546,611.113,1000.873,0.000,-180.360,0.000,2},
    {19367,411.545,614.285,1000.873,0.000,-180.360,0.000,2},
    {19367,411.540,617.329,1000.873,0.000,-180.360,0.000,2},
    {19367,417.767,612.095,1000.873,0.000,-180.360,0.000,2},
    {1491,417.780,613.683,999.185,0.000,0.000,90.000,2},
    {1491,420.300,618.362,999.185,0.000,0.000,0.000,2},
    {19367,432.986,618.375,1000.878,180.000,0.000,90.000,2},
    {19367,420.929,618.403,1003.443,180.000,-180.000,-90.000,2},
    {19367,417.728,614.346,1003.417,178.000,180.000,360.000,2},
    {19367,431.165,612.774,1003.317,0.000,-18.360,359.799,2},
    // Big
    {970,1396.816894,1511.817016,14.148458,0.000000,0.000000,0.000000,3},
    {970,1392.625976,1511.817016,14.148458,0.000000,0.000000,0.000000,3},
    {970,1388.425415,1511.817016,14.148458,0.000000,0.000000,0.000000,3},
    {970,1384.225830,1511.817016,14.148458,0.000000,0.000000,0.000000,3},
    {19379,1388.848754,1513.377441,9.872499,0.000000,90.000000,0.000000,3},
    {19379,1388.848754,1523.007690,9.872499,0.000000,90.000000,0.000000,3},
    {19379,1399.318115,1513.377441,9.872499,0.000000,90.000000,0.000000,3},
    {19379,1399.318115,1522.998779,9.872499,0.000000,90.000000,0.000000,3},
    {19449,1383.703491,1513.386108,11.678435,0.000000,0.000000,0.000000,3},
    {19449,1383.703491,1523.005493,11.678435,0.000000,0.000000,0.000000,3},
    {19449,1388.542968,1527.735717,11.678435,0.000000,0.000000,90.000000,3},
    {19449,1398.162963,1527.735717,11.678435,0.000000,0.000000,90.000000,3},
    {19379,1409.817871,1522.998779,9.872499,0.000000,90.000000,0.000000,3},
    {19449,1407.782470,1527.735717,11.678435,0.000000,0.000000,90.000000,3},
    {19379,1409.817749,1513.377441,16.992519,0.000000,90.000000,0.000000,3},
    {19357,1414.204345,1527.735717,11.678435,0.000000,0.000000,90.000000,3},
    {19449,1414.966674,1523.005493,11.678435,0.000000,0.000000,0.000000,3},
    {19449,1414.966674,1513.383422,11.678435,0.000000,0.000000,0.000000,3},
    {19449,1407.782470,1508.654907,11.678435,0.000000,0.000000,90.000000,3},
    {19357,1414.204345,1508.654541,11.678435,0.000000,0.000000,90.000000,3},
    {19449,1398.151000,1508.654907,11.678435,0.000000,0.000000,90.000000,3},
    {19449,1388.539184,1508.654907,11.678435,0.000000,0.000000,90.000000,3},
    {19379,1409.817871,1522.998779,13.512515,0.000000,90.000000,0.000000,3},
    {19379,1399.356567,1522.998779,13.512515,0.000000,90.000000,0.000000,3},
    {19357,1394.183959,1526.056274,11.678435,0.000000,0.000000,0.000000,3},
    {19387,1394.183959,1522.856079,11.678435,0.000000,0.000000,0.000000,3},
    {19449,1394.183959,1516.596801,11.678435,0.000000,0.000000,0.000000,3},
    {1502,1394.128906,1523.636474,9.938437,0.000000,0.000000,-90.000000,3},
    {19357,1399.072998,1518.105712,11.678435,0.000000,0.000000,90.000000,3},
    {19379,1404.155883,1513.388671,13.512515,0.000000,90.000000,0.000000,3},
    {19449,1408.535888,1518.105712,11.678435,0.000000,0.000000,90.000000,3},
    {14414,1397.078125,1509.768432,10.228441,0.000000,0.000000,90.000000,3},
    {19387,1402.253906,1518.116088,11.678435,0.000000,0.000000,90.000000,3},
    {19357,1395.872192,1518.105712,11.678435,0.000000,0.000000,90.000000,3},
    {19387,1402.253906,1510.323974,11.678435,0.000000,0.000000,180.000000,3},
    {19370,1397.156250,1516.577636,13.512515,0.000000,90.000000,0.000000,3},
    {19462,1411.136108,1513.377807,13.512515,0.000000,90.000000,0.000000,3},
    {19462,1414.627563,1513.377807,13.512515,0.000000,90.000000,0.000000,3},
    {19430,1414.133544,1518.105712,11.678435,0.000000,0.000000,-90.000000,3},
    {19357,1400.563964,1511.834960,11.678435,0.000000,0.000000,90.000000,3},
    {19357,1397.354003,1511.885009,11.678435,0.000000,0.000000,90.000000,3},
    {19430,1395.042846,1511.885131,11.678435,0.000000,0.000000,-90.000000,3},
    {19370,1397.156250,1513.406616,13.512515,0.000000,90.000000,0.000000,3},
    {19449,1414.966674,1523.005493,15.168431,0.000000,0.000000,0.000000,3},
    {19449,1414.966674,1513.383422,15.168424,0.000000,0.000000,0.000000,3},
    {19379,1388.866943,1522.998779,13.512515,0.000000,90.000000,0.000000,3},
    {19462,1390.591674,1513.552001,13.512515,0.000000,90.000000,270.000000,3},
    {19462,1390.591674,1517.032836,13.512515,0.000000,90.000000,270.000000,3},
    {19370,1384.045410,1513.406616,13.512515,0.000000,90.000000,0.000000,3},
    {19449,1383.703491,1523.005493,15.168426,0.000000,0.000000,0.000000,3},
    {19449,1383.703491,1513.375122,15.168426,0.000000,0.000000,0.000000,3},
    {19449,1407.782470,1508.654907,15.158441,0.000000,0.000000,90.000000,3},
    {19357,1414.204345,1508.654541,15.158438,0.000000,0.000000,90.000000,3},
    {19449,1398.182006,1508.654907,15.158441,0.000000,0.000000,90.000000,3},
    {19449,1388.591796,1508.654907,15.158441,0.000000,0.000000,90.000000,3},
    {19449,1388.542968,1527.735717,15.168425,0.000000,0.000000,90.000000,3},
    {19449,1398.162231,1527.735717,15.168425,0.000000,0.000000,90.000000,3},
    {19449,1407.793579,1527.735717,15.168425,0.000000,0.000000,90.000000,3},
    {19357,1414.204345,1527.735717,15.168425,0.000000,0.000000,90.000000,3},
    {19379,1388.848754,1513.377441,16.992519,0.000000,90.000000,0.000000,3},
    {19379,1388.848754,1523.007690,16.992519,0.000000,90.000000,0.000000,3},
    {19379,1399.318115,1522.998779,16.992519,0.000000,90.000000,0.000000,3},
    {19379,1399.318115,1513.377441,16.992519,0.000000,90.000000,0.000000,3},
    {19379,1409.817871,1522.998779,16.992519,0.000000,90.000000,0.000000,3},
    {19379,1409.817749,1513.377441,9.872499,0.000000,90.000000,0.000000,3},
    {1502,1403.000488,1518.127197,9.938437,0.000000,0.000000,-180.000000,3},
    {1502,1402.281005,1509.533569,9.938437,0.000000,0.000000,-270.000000,3},
    {19370,1384.044799,1516.577636,13.512515,0.000000,90.000000,0.000000,3},
    {19357,1385.401733,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19387,1388.611816,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19357,1391.822875,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19387,1395.031616,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19357,1401.432861,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19357,1398.232177,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19387,1404.621215,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19357,1407.833740,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19357,1411.033813,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19387,1414.241210,1518.273803,15.178421,0.000000,0.000000,90.000000,3},
    {19449,1393.243164,1523.046752,15.178421,0.000000,0.000000,0.000000,3},
    {19449,1402.263916,1523.046752,15.178421,0.000000,0.000000,0.000000,3},
    {19449,1411.655273,1523.046752,15.178421,0.000000,0.000000,0.000000,3},
    {1502,1389.360107,1518.306274,13.418445,0.000000,0.000000,-180.000000,3},
    {1502,1395.781005,1518.306274,13.418445,0.000000,0.000000,-180.000000,3},
    {1502,1405.360839,1518.306274,13.418445,0.000000,0.000000,-180.000000,3},
    {1502,1414.991333,1518.306274,13.418445,0.000000,0.000000,-180.000000,3},
    {1504,1383.777343,1518.188476,9.948436,0.000000,0.000000,90.000000,3},
    {1504,1383.777343,1518.219482,9.948436,0.000000,0.000000,270.000000,3}
};

/*stock const Float:arrHospitalSpawns[6][4] = {
    {-2655.1240, 638.6232, 14.4531, 180.0000},
    {-318.8799, 1049.2433, 20.3403, 0.0000},
    {1607.4869, 1816.0693, 10.8203, 0.0000},
    {1172.8372, -1325.3186, 15.4000, 270.0000},
    {2034.0670, -1402.6815, 17.2938, 180.0000},
    {1241.6802, 326.4038, 19.7555, 335.0000}
};*/

/*stock const Float:arrHospitalSpawn[2][4] = {
    {1182.8778,-1324.2023,13.5784,269.8747},
    {2028.7529,-1419.9445,16.9922,133.3715}
};*/

/*new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
    {300.5000, -137.0286, 1004.0625},
    {300.5000, -135.5336, 1004.0625},
    {300.5000, -134.0436, 1004.0625},
    {300.5000, -132.5637, 1004.0625},
    {300.5000, -131.0782, 1004.0625},
    {300.5000, -129.5582, 1004.0625},
    {300.5000, -128.0786, 1004.0625}
};*/

/*==============================================================================
    Module Script
==============================================================================*/
//#include "modules/demo/fueltruck.pwn"

#include "modules/dynamic/cargo.pwn"
#include "modules/misc/animations.pwn"

//#include "modules/misc/tune.pwn"
//#include "modules/misc/weaponsystem.pwn"
//#include "modules/misc/dropweapon.pwn"

/*==============================================================================
    Callback
==============================================================================*/

SQL_CheckAccount(playerid) 
{
    new query[256];
    format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1;", ReturnName(playerid));
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "ddd", playerid, THREAD_FIND_USERNAME, g_MysqlRaceCheck[playerid]);

    return 1;
}

SQL_CheckAccountChar(playerid) {
    new query[512];
    format(query,sizeof(query),"SELECT * FROM `characters` WHERE `Character` = '%s' LIMIT 1", ReturnName(playerid));
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "ddd", playerid, THREAD_FIND_CHARACTER, g_MysqlRaceCheck[playerid]);
    return 1;
}

VehicleDealer_GetCount(dealer)
{
    new 
        count = 0,
        Cache:count_query;

    count_query = mysql_query(g_iHandle, sprintf("SELECT COUNT(ID) AS jumlah FROM dealervehicle WHERE Dealer = '%d'", DealershipData[dealer][dID]));
    cache_get_value_int(0, "jumlah", count);

    cache_delete(count_query);
    return count;
}

ClearPlayerChat(playerid, line)
{
    for (new i = 0; i < line; i ++) {
        SendClientMessage(playerid, -1,"");
    }
}

SetPlayerHunger(playerid, Float:hunger)
{
    PlayerData[playerid][pHunger] = hunger;

    if(PlayerData[playerid][pHunger] > 100)
        PlayerData[playerid][pHunger] = 100;

    else if(PlayerData[playerid][pHunger] < 0)
        PlayerData[playerid][pHunger] = 0;

    if(!PlayerData[playerid][pTogHud]) {
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                SetPlayerProgressBarValue(playerid, PlayerData[playerid][hungry], PlayerData[playerid][pHunger]);
                SetPlayerProgressBarColour(playerid, PlayerData[playerid][hungry], ConvertHBEColor(floatround(PlayerData[playerid][pHunger])));
            }
            case 2: {
                PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], ConvertHBEColor(floatround(PlayerData[playerid][pHunger])));
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], sprintf("%.0f%",PlayerData[playerid][pHunger]));
            }
        }
    }
    return 1;
}

SetPlayerEnergy(playerid, Float:energi)
{
    PlayerData[playerid][pEnergy] = energi;

    if(PlayerData[playerid][pEnergy] > 100)
        PlayerData[playerid][pEnergy] = 100;

    else if(PlayerData[playerid][pEnergy] < 0)
        PlayerData[playerid][pEnergy] = 0;

    if(!PlayerData[playerid][pTogHud]) {
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                SetPlayerProgressBarValue(playerid, PlayerData[playerid][energy], PlayerData[playerid][pEnergy]);
                SetPlayerProgressBarColour(playerid, PlayerData[playerid][energy], ConvertHBEColor(floatround(PlayerData[playerid][pEnergy])));
            }
            case 2: {
                PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], ConvertHBEColor(floatround(PlayerData[playerid][pEnergy])));
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], sprintf("%.0f%",PlayerData[playerid][pEnergy]));
            }
        }
    }
    return 1;
}

GetTickCountDifference(newtick, oldtick)
{
    if(oldtick < 0 && newtick >= 0)
        return newtick - oldtick;

    else if(oldtick >= 0 && newtick < 0 || oldtick > newtick)
        return (cellmax - oldtick + 1) - (cellmin - newtick);

    return newtick - oldtick;
}

SQL_ReturnID(sql) {
    foreach(new i : Player) if(GetPlayerSQLID(i) == sql) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

SQL_IsLogged(playerid) {
    return (IsPlayerConnected(playerid) && AccountData[playerid][pLogged]);
}

SQL_IsCharacterLogged(playerid)  {
    return (IsPlayerConnected(playerid) && PlayerData[playerid][pLogged]);
}

Storage_GUI(playerid, bool:show, const storageName[] = "Storage", const storageAmount[] = "0 Stock") {
    if (show) {
        for (new i = 0; i < 3; i ++) {
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_storage][i]);
        }

        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_storage][1], storageName);
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_storage][2], storageAmount);
    } else {
        for (new i = 0; i < 3; i ++) {
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_storage][i]);
        }
    }
    return 1;
}

Taxi_GUI(playerid, bool:mode)
{
    if(mode)
    {
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][0]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][1]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][2]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_taxi][3]);
    }
    else
    {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][0]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][1]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][2]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_taxi][3]);
    }
    return 1;
}

FixText(text[])
{
    new len = strlen(text);
    if(len > 1)
    {
        for (new i = 0; i < len; i++)
        {
            if(text[i] == 92)
            {
                if(text[i+1] == 'n')
                {
                    text[i] = '\n';
                    for (new j = i+1; j < len; j++) text[j] = text[j+1], text[j+1] = 0;
                    continue;
                }
                if(text[i+1] == 't')
                {
                    text[i] = '\t';
                    for (new j = i+1; j < len-1; j++) text[j] = text[j+1], text[j+1] = 0;
                    continue;
                }
 
                if(text[i+1] == 92)
                {
                    text[i] = 92;
                    for (new j = i+1; j < len-1; j++) text[j] = text[j+1], text[j+1] = 0;
                }
            }
        }
    }
    return 1;
}

ReplaceString(text[])
{
    new replace[128];
    format(replace, sizeof(replace), text);

    strreplace(replace, "(e)", "\n");
    strreplace(replace, "(b)", "{0049FF}");
    strreplace(replace, "(bl)", "{000000}");
    strreplace(replace, "(w)", "{FFFFFF}");
    strreplace(replace, "(r)", "{FF3333}");
    strreplace(replace, "(g)", "{37DB45}");
    strreplace(replace, "(y)", "{F3FF02}");
    return replace;
}

FormatRadio(playerid, text[]) {
    new replace[128];
    format(replace, sizeof(replace), text);

    strreplace(replace, "@", sprintf("%s", PlayerData[playerid][pBadge]));
    strreplace(replace, "~", sprintf("%s", PlayerData[playerid][pUnit]));
    return replace;
}

ColouredText(text[])
{
    new
        pos = -1,
        string[144]
    ;
    strmid(string, text, 0, 128, (sizeof(string) - 16));

    while((pos = strfind(string, "#", true, (pos + 1))) != -1)
    {
        new
            i = (pos + 1),
            hexCount
        ;
        for( ; ((string[i] != 0) && (hexCount < 6)); ++i, ++hexCount)
        {
            if(!(('a' <= string[i] <= 'f') || ('A' <= string[i] <= 'F') || ('0' <= string[i] <= '9')))
            {
                    break;
            }
        }
        if((hexCount == 6) && !(hexCount < 6))
        {
            string[pos] = '{';
            strins(string, "}", i);
        }
    }
    return string;
}

// ViewBillboards(playerid)
// {
//     new
//         string[128];

//     format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
//     mysql_tquery(g_iHandle, string, "OnViewBillboards", "d", playerid);
//     return 1;
// }

AddMissCall(playerid, number)
{
    for(new z = 0; z != 10; z++) if(!strcmp(misscallList[playerid][z], "null")) {
        new 
            hour, minute, second;

        gettime(hour, minute, second);
        format(misscallList[playerid][z], 128, "Miss call at: %02d:%02d - by: %s", hour, minute, GetContactNameByNumber(playerid, number));
        return 1;
    }
    return 0;
}

GetMissCallCount(playerid)
{
    new count;
    for(new z = 0; z != 10; z++) if(strcmp(misscallList[playerid][z], "null")) {
        count++;
    }
    return count;
}

ShowMissCallList(playerid)
{
    if(!GetMissCallCount(playerid))
        return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Miss Call List", "There is nothing miss call on your phone.", "Close", "");

    new 
        misscall[128];

    for(new z = 0; z != 10; z++) if(strcmp(misscallList[playerid][z], "null")) {
        strcat(misscall, sprintf("%s", misscallList[playerid][z]));
        strcat(misscall, "\n");
    }
    Dialog_Show(playerid, MissCallList, DIALOG_STYLE_LIST, "Miss Call List", misscall, "Clear", "Close");
    return 1;
}

SQL_ReturnEscaped(const string[])
{
    new
        entry[256];

    mysql_escape_string(string, entry, sizeof(entry));
    return entry;
}

SQL_SaveAccounts(playerid) 
{
    if (!AccountData[playerid][pLogged])
        return 0;

    new 
        query[2048];

    format(query, sizeof(query), "UPDATE `accounts` SET `Username` = '%s', `IP` = '%s', `LeaveIP` = '%s', `Banned` = '%d', `Admin` = '%d', `AdminHide` = '%d', `ReportPoint` = '%d', `AdminRankName` = '%s', `Volunteer` = '%d' WHERE `ID` = '%d'",
        AccountData[playerid][pUsername],
        AccountData[playerid][pIP],
        AccountData[playerid][pLeaveIP],
        AccountData[playerid][pBanned],
        AccountData[playerid][pAdmin],
        AccountData[playerid][pAdminHide],
        AccountData[playerid][pReportPoint],
        AccountData[playerid][pAdminRankName],
        AccountData[playerid][pVolunteer],
        AccountData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);

    SQL_SaveCharacter(playerid);
    return 1;
}

SQL_SaveCharacter(playerid) {
    if(!PlayerData[playerid][pLogged])
        return 0;

    new
        query[4048];

    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pDrivingTest])
    {
        if (IsPlayerInEvent(playerid)) {
            ResetEventWeapons(playerid);
            eventTeams[playerid] = TEAM_NONE;
            SetPlayerTeam(playerid, NO_TEAM);
        } else {
            PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
            PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

            GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
            GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

            GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
            GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

            if(!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
                PlayerData[playerid][pHealth] = 100.0;
            }
        }
    }
    format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Origin` = '%s', `LoginDate` = '%d', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Cuffed` = '%d', `ModalPertama` = '%d', `Story` = '%d', `Automatic` = '%d|%d|%d|%d|%d|%d', `Married` = '%d', `CoupleName` = '%s', `Accent` = '%s', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `JailTime` = '%d', `Muted` = '%d', `Alias` = '%s'",
        PlayerData[playerid][pCreated],
        PlayerData[playerid][pGender],
        PlayerData[playerid][pBirthdate],
        SQL_ReturnEscaped(PlayerData[playerid][pOrigin]),
        PlayerData[playerid][pLoginDate],
        PlayerData[playerid][pSkin],
        PlayerData[playerid][pPos][0],
        PlayerData[playerid][pPos][1],
        PlayerData[playerid][pPos][2],
        PlayerData[playerid][pPos][3],
        PlayerData[playerid][pHealth],
        PlayerData[playerid][pInterior],
        PlayerData[playerid][pWorld],
        PlayerData[playerid][pHospital],
        PlayerData[playerid][pHospitalInt],
        PlayerData[playerid][pCuffed],
        PlayerData[playerid][pModalPertama],
        PlayerData[playerid][pStory],
        PlayerData[playerid][pAuto][0],
        PlayerData[playerid][pAuto][1],
        PlayerData[playerid][pAuto][2],
        PlayerData[playerid][pAuto][3],
        PlayerData[playerid][pAuto][4],
        PlayerData[playerid][pAuto][5],
        PlayerData[playerid][pMarried],
        SQL_ReturnEscaped(PlayerData[playerid][pCoupleName]),
        SQL_ReturnEscaped(PlayerData[playerid][pAccent]),
        PlayerData[playerid][pMoney],
        PlayerData[playerid][pBankMoney],
        PlayerData[playerid][pOwnsBillboard],
        PlayerData[playerid][pJailTime],
        PlayerData[playerid][pMuted],
        PlayerData[playerid][pAlias]
    );
    format(query, sizeof(query), "%s, `House` = '%d', `Apartment` = '%d', `ApartmentRoom` = '%d', `OwnApartment` = '%d', `FurnStore` = '%d', `Business` = '%d', `Entrance` = '%d', `Phone` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `Hunger` = '%.1f', `Energy` = '%.1f', `PlayingHours` = '%d', `Minutes` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d|%d', `JobLeave` = '%d', `Faction` = '%d', `FactionRank` = '%d', `FactionRankName`='%s', `Prisoned` = '%d', `Injured` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `SpawnPoint` = '%d' WHERE `ID` = '%d'",
        query,
        PlayerData[playerid][pHouse],
        PlayerData[playerid][pApartment],
        PlayerData[playerid][pApartmentRoom],
        PlayerData[playerid][pOwnedApartment],
        PlayerData[playerid][pFurnStore],
        PlayerData[playerid][pBusiness],
        PlayerData[playerid][pEntrance],
        PlayerData[playerid][pPhone],
        PlayerData[playerid][pLottery],
        PlayerData[playerid][pLotteryB],
        PlayerData[playerid][pHunger],
        PlayerData[playerid][pEnergy],
        PlayerData[playerid][pPlayingHours],
        PlayerData[playerid][pMinutes],
        PlayerData[playerid][pArmorStatus],
        PlayerData[playerid][pJob][0],
        PlayerData[playerid][pJob][1],
        PlayerData[playerid][pJobLeave],
        PlayerData[playerid][pFactionID],
        PlayerData[playerid][pFactionRank],
        SQL_ReturnEscaped(PlayerData[playerid][pFactionRankName]),
        PlayerData[playerid][pPrisoned],
        PlayerData[playerid][pInjured],
        PlayerData[playerid][pWarrants],
        PlayerData[playerid][pChannel],
        PlayerData[playerid][pBleeding],
        PlayerData[playerid][pSpawnPoint],
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `characters` SET `Warnings` = '%d', `MaskID` = '%d', `Rekening` = '%d', `FactionMod` = '%d', `Capacity` = '%d', `pScore` = '%d', `JailReason`= '%s', `JailedBy` = '%s', `FactionDuty` = '%d', `SkinFaction`= '%d', `Vip` = '%d', `VipTime` = '%d', `Gold` = '%d', `CustomGate` = '%d', `CustomMapping` = '%d'",
        PlayerData[playerid][pWarnings],
        PlayerData[playerid][pMaskID],
        PlayerData[playerid][pRekening],
        PlayerData[playerid][pFactionMod],
        PlayerData[playerid][pCapacity],
        PlayerData[playerid][pScore],
        SQL_ReturnEscaped(PlayerData[playerid][pJailReason]),
        SQL_ReturnEscaped(PlayerData[playerid][pJailedBy]),
        PlayerData[playerid][pOnDuty],
        PlayerData[playerid][pSkinFaction],
        PlayerData[playerid][pVip],
        PlayerData[playerid][pVipTime],
        PlayerData[playerid][pGold],
        PlayerData[playerid][pClaims][0],
        PlayerData[playerid][pClaims][1]
    );
    format(query, sizeof(query), "%s, `Streamer` = '%d', `Paycheck` = '%d', `DrivingLicense`='%d', `DrivingLicenseExpired`='%d', `BusinessLicense`='%d', `BusinessLicenseExpired`='%d', `WorkshopLicense`='%d', `WorkshopLicenseExpired`='%d', `FirearmLicense`='%d|%d', `FirearmLicenseExpired`='%d', `LumberLicense`='%d', `LumberLicenseExpired`='%d', `TruckerLicense`='%d', `TruckerLicenseExpired`='%d', `FarmLicense`='%d|%d', `BoatLicense`='%d|%d', `FlyingLicense`='%d|%d', `Played`='%d|%d|%d', `Work`='%d', `DelayTruck`='%d' WHERE `ID` = '%d'",
        query,
        PlayerData[playerid][pCanPaycheck],
        PlayerData[playerid][pStreamer],
        PlayerData[playerid][pDrivingLicense],
        PlayerData[playerid][pDrivingLicenseExpired],
        PlayerData[playerid][pBusinessLicense],
        PlayerData[playerid][pBusinessLicenseExpired],
        PlayerData[playerid][pWorkshopLicense],
        PlayerData[playerid][pWorkshopLicenseExpired],
        PlayerData[playerid][pFirearmLicense],
        PlayerData[playerid][pFirearmLicenseType],
        PlayerData[playerid][pFirearmLicenseExpired],
        PlayerData[playerid][pLumberLicense],
        PlayerData[playerid][pLumberLicenseExpired],
        PlayerData[playerid][pTruckerLicense],
        PlayerData[playerid][pTruckerLicenseExpired],
        PlayerData[playerid][pFarmLicense],
        PlayerData[playerid][pFarmLicenseExpired],
        PlayerData[playerid][pBoatLicense],
        PlayerData[playerid][pBoatLicenseExpired],
        PlayerData[playerid][pFlyingLicense],
        PlayerData[playerid][pFlyingLicenseExpired],
        PlayerData[playerid][pSecond],
        PlayerData[playerid][pMinute],
        PlayerData[playerid][pHour],
        PlayerData[playerid][pWork],
        PlayerData[playerid][pDelayTruck],
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `characters` SET `RegisterDate`='%d', `AdjWep`='%d'", PlayerData[playerid][pRegisterDate], PlayerData[playerid][pHidegun]);
    for (new i = 0; i < MAX_FISH; i ++) {
        format(query, sizeof(query), "%s, `Fish%d` = '%s|%.3f'", query, i, FishName[playerid][i], FishWeight[playerid][i]);
    }
    format(query,sizeof(query),"%s, `Toggle` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d'", query, PlayerData[playerid][pDisableOOC], PlayerData[playerid][pDisablePM], PlayerData[playerid][pDisableBC], PlayerData[playerid][pDisableFaction], PlayerData[playerid][pLoginLog], PlayerData[playerid][pTogHud], PlayerData[playerid][pDisableAdmin], PlayerData[playerid][pDisableAPM], PlayerData[playerid][pDisableAtalk], PlayerData[playerid][pDisableSpeedCam], PlayerData[playerid][pTogVipchat], PlayerData[playerid][pDisableAWarn], PlayerData[playerid][pDisableReport], PlayerData[playerid][pDisableAsk], PlayerData[playerid][pTogAdmCmd], PlayerData[playerid][pDisableWT]);
    for (new i = 0; i < 10; i ++) {
        format(query, sizeof(query), "%s, `Damage%d` = '%s'", query, i, damageList[playerid][i]);
    }
    format(query, sizeof(query), "%s, `WoodDelay`='%d', `LumberDelay`='%d', `Badge`='%s', `Cough`='%d', `MigrainTime`='%d', `MigrainRate`='%d', `Fever`='%d', `CoughPills`='%d', `MigrainPills`='%d', `FiverPills`='%d', `UsePills`='%d', `DutyTime` = '%d', `FightStyle`='%d|%d|%d|%d', `AdsDelay`='%d', `ForagerDelay`='%d' WHERE `ID`='%d'", 
        query, 
        PlayerData[playerid][pWoodDelay], 
        PlayerData[playerid][pLumberDelay], 
        SQL_ReturnEscaped(PlayerData[playerid][pBadge]),
        PlayerData[playerid][pCough],
        PlayerData[playerid][pMigrainTime],
        PlayerData[playerid][pMigrainRate],
        PlayerData[playerid][pFever],
        PlayerData[playerid][pCoughPills],
        PlayerData[playerid][pMigrainPills],
        PlayerData[playerid][pFiverPills],
        PlayerData[playerid][pUsePills],
        PlayerData[playerid][pDutyTime],
        PlayerData[playerid][pFightStyle][0],
        PlayerData[playerid][pFightStyle][1],
        PlayerData[playerid][pFightStyle][2],
        PlayerData[playerid][pUsedFightStyle],
        PlayerData[playerid][pPlaceAd],
        PlayerData[playerid][pDelayForager],
        PlayerData[playerid][pID]);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `characters` SET `MigrainUsed`='%d', `FeverUsed`='%d', `Garage`='%d', `GunAuthority`='%d', `DMVTime` = '%d', `SweeperDelay` = '%d', `BusDelay` = '%d', `DelayFishing` = '%d', `DelaySorter` = '%d', `DelayUnloader` = '%d', `DelayMiner` = '%d', `DelayFarmer` = '%d', `DelayMissions` = '%d', `SmugglerDelay` = '%d', `GYMMember`='%d|%d', `FitnessRating`='%.2f|%.2f|%.2f|%.2f|%.2f|%.2f', `MaxHealth`='%.1f', `IDCard`='%d', `HUD`='%d', `Livemode`='%d' WHERE ID='%d'",
        PlayerData[playerid][pMigrainUsed], 
        PlayerData[playerid][pFeverUsed],
        PlayerData[playerid][pGarage],
        PlayerData[playerid][pGunAuthority],
        PlayerData[playerid][pDMVTime],
        PlayerData[playerid][pSweeperDelay],
        PlayerData[playerid][pBusDelay],
        PlayerData[playerid][pDelayFishing],
        PlayerData[playerid][pSorterDelay],
        PlayerData[playerid][pUnloaderDelay],
        PlayerData[playerid][pMinerDelay],
        PlayerData[playerid][pFarmerDelay],
        PlayerData[playerid][pMissionsDelay],
        PlayerData[playerid][pSmugglerDelay],
        PlayerData[playerid][pGYMMember],
        PlayerData[playerid][pGYMMemberTime],
        PlayerData[playerid][pFitnessRating][0],
        PlayerData[playerid][pFitnessRating][1],
        PlayerData[playerid][pFitnessRating][2],
        PlayerData[playerid][pFitnessRating][3],
        PlayerData[playerid][pFitnessRating][4],
        PlayerData[playerid][pFitnessRating][5],
        PlayerData[playerid][pMaxHealth],
        PlayerData[playerid][pIDCard],
        PlayerData[playerid][pHUD],
        PlayerData[playerid][pLiveMode],
        PlayerData[playerid][pID]
    );
    mysql_tquery(g_iHandle, query);
    return 1;
}

GetInitials(const string[])
{
    new
        ret[32],
        index = 0;

    for (new i = 0, l = strlen(string); i != l; i ++)
    {
        if(('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
        ret[index++] = string[i];
    }
    return ret;
}

GetCoupleName(playerid) {
    new couple[MAX_PLAYER_NAME];

    if (PlayerData[playerid][pMarried]) {
        format(couple, sizeof(couple), "%s", PlayerData[playerid][pCoupleName]);
    } else format(couple, sizeof(couple), "None");
    return couple;
}

GetPlayerCallsign(playerid) {
    new callsign[24];

    if (PlayerData[playerid][pOnDuty]) {
        if (!strcmp(PlayerData[playerid][pUnit], "None", true)) format(callsign, sizeof(callsign), RED"UNASSIGNED");
        else format(callsign, sizeof(callsign), "%s", PlayerData[playerid][pUnit]);
    } else format(callsign, sizeof(callsign), GREY"OFF");
    return callsign;
}

GetWarnType(type) {
    new str[24];
    switch (type) {
        case 1: format(str,sizeof(str),""YELLOW"[WARN]");
        case 2: format(str,sizeof(str),""YELLOW"[JAIL]");
        case 3: format(str,sizeof(str),""GREEN"[KICK]");
        case 4: format(str,sizeof(str),""GREEN"[BANNED]");
    }
    return str;
}

IsPlayerInModshop(playerid, Float:range = 3.0)
{
    for(new i = 0; i != sizeof(arrModshop); i++) if(SQL_IsCharacterLogged(playerid) && IsPlayerInRangeOfPoint(playerid, range, arrModshop[i][0], arrModshop[i][1], arrModshop[i][2])) {
        return i;
    }
    return -1;
}

// IsPlayerInWater(playerid)
// {
//     new animlib[32],tmp[32];
//     GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,tmp,32);
//     if( !strcmp(animlib, "SWIM") && !IsPlayerInAnyVehicle(playerid) ) return true;
//     return false;
// }

stock Float:GetDistanceBetweenVehicles(vehicleid1, vehicleid2) {
    if (!IsValidVehicle(vehicleid1) || !IsValidVehicle(vehicleid2)) {
		return FLOAT_INFINITY;
	}

	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid2, x, y, z);

	return GetVehicleDistanceFromPoint(vehicleid1, x, y, z);
}

stock GetClosestVehicleToVehicle(vehicleid, ignoredid = INVALID_VEHICLE_ID) {
    new Float:distance = 5.0, closestid = INVALID_VEHICLE_ID, Float:distance2, vw = GetVehicleVirtualWorld(vehicleid);

    foreach (new i : Vehicle) {
		if (vehicleid == i || i == ignoredid || vw != GetVehicleVirtualWorld(i)) {
            continue;
        }

        if ((distance2 = GetDistanceBetweenVehicles(vehicleid, i)) < distance) {
            distance = distance2;
            closestid = i;
        }
    }

    return closestid;
}

// IsVehicleInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
// {
//     if(GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= range) {
//         return 1;
//     }
//     return 0;
// }

/* IsPlayerWithWeapon(playerid,weaponid)
{
    new wd[2][13];
    for(new i; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, wd[0][i], wd[1][i]);
        if(weaponid == wd[0][i]) return 1;
    }
    return 0;
} */

PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
    if(vehicleid != INVALID_VEHICLE_ID && seatid != 128)
    {
        PlayerData[playerid][pLastVehicle] = vehicleid;
    }

    PutPlayerInVehicle(playerid, vehicleid, seatid);
    return 1;
}

/* GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
} */

/* Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
    new
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fDistance;

    fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

    fX = fVectorX * fDistance + fCameraX;
    fY = fVectorY * fDistance + fCameraY;
    fZ = fVectorZ * fDistance + fCameraZ;

    return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
} */

PlayerHasTazer(playerid)
{
    return (GetPlayerWeapon(playerid) == WEAPON_SILENCED && PlayerData[playerid][pTazer]);
}

Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    x1 -= x2;
    y1 -= y2;
    z1 -= z2;
    return floatsqroot((x1 * x1) + (y1 * y1) + (z1 * z1));
}

SetPlayerToFacePlayer(playerid, targetid) {
    new
        Float:x[2],
        Float:y[2],
        Float:z[2],
        Float:angle;

    GetPlayerPos(targetid, x[0], y[0], z[0]);
    GetPlayerPos(playerid, x[1], y[1], z[1]);

    angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
    SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
    PlayerTextDrawHide(playerid, textid);

    SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

    return 1;
}

SetVehicleLock(vehicleid, status)
{
    static 
        engine, 
        lights, 
        alarm, 
        doors,
        bonnet, 
        boot, 
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, alarm, status, bonnet, boot, objective);
    return 1;
}

SendVehicleOwnedMessage(id, text[]) {
    foreach(new i : Player) if(VehicleData[id][cOwner] == PlayerData[i][pID]) {
        SendClientMessage(i, X11_LIGHTBLUE, text);
        return 1;
    }
    return 0;
}

Vehicle_GetOwner(id) {
    foreach(new i : Player) if(VehicleData[id][cOwner] == PlayerData[i][pID]) {
        return i;
    }
    return 0;
}

Vehicle_IsOwner(playerid, carid)
{
    if (!Iter_Contains(DynamicVehicles, carid)) return 0;
    
    if (PlayerData[playerid][pLogged] && VehicleData[carid][cOwner] == PlayerData[playerid][pID])
        return 1;

    return 0;
}

AddFish(playerid, name[], Float:weight)
{
    for(new i = 0; i < 10; i++) if(!FishWeight[playerid][i]) {
        FishWeight[playerid][i] = weight;
        format(FishName[playerid][i], 32, name);
        SendServerMessage(playerid, "Anda mendapatkan ikan "COL_LIGHTRED"%s "WHITE"dengan berat "YELLOW"%.3f lbs"WHITE". (/myfish untuk melihat ikan yang di dapat).", name, weight);
        PlayerData[playerid][pEnergy] -= RandomFloat(5);
        return 1;
    }
    SendServerMessage(playerid, "Anda tidak bisa menampung ikan lagi, atau anda dapat melepas kembali ikan yang didapatkan (/myfish).");
    return 1;
}

Bodypart_Name(model)
{
    new name[37];
    for(new i; i < 181; i++) if(BodyWork[i][Id] == model) {
        strunpack(name, BodyWork[i][Model], sizeof(name));
        return name;
    }
    strunpack(name, "Unknown");
    return name;
}

TerminateConnection(playerid)
{
    foreach(new id : Player) if(PlayerData[id][pSpectator] == playerid && GetPlayerState(id) == PLAYER_STATE_SPECTATING)
    {
        SendServerMessage(id, "Player %s telah keluar dari server pada saat anda mengawasinya.", ReturnName2(playerid));
        cmd_spectate(id, "off");
    }

    for (new id = 0; id != MAX_DAMAGE; id++) if(DamageData[playerid][id][damageExists]) {
        Damage_Save(playerid, id);
    }

    for (new id = 0; id != MAX_ACC; id++) if(AccData[playerid][id][accExists]) {
        Aksesoris_Save(playerid, id);
    }

    for (new i = 0; i != MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i)) {
        if (Vehicle_IsOwner(playerid,i)) {
            Vehicle_Save(i);
            Vehicle_Reset(i);
        }

        if (!VehicleData[i][cOwner] && (VehicleData[i][cRent] && VehicleData[i][cRentOwned] == PlayerData[playerid][pID])) {
            Vehicle_Save(i);
            Vehicle_Reset(i);
        }
    }
    if(PlayerData[playerid][pOnDrag] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pOnDrag], "Player yang mengangkatmu keluar dari server.");
        StopDragging(PlayerData[playerid][pOnDrag]);
    }

    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag])) {
        DestroyDynamic3DTextLabel(PlayerData[playerid][pAdoTag]);

        PlayerData[playerid][pAdoTag] = Text3D:INVALID_STREAMER_ID;
    }

    if(BoomboxData[playerid][boomboxPlaced]) {
        Boombox_Destroy(playerid);
    }

    if(PlayerHasWeapon(playerid, 41)) {
        ResetWeaponID(playerid, 41);
    }

    if(PlayerData[playerid][pFirstAid]) {
        KillTimer(PlayerData[playerid][pAidTimer]);
    }

    if(PlayerData[playerid][pDrivingTest])
    {
        DestroyVehicle(PlayerData[playerid][pTestCar]);
        PlayerData[playerid][pTestCar] = INVALID_VEHICLE_ID;
    }

    if(PlayerData[playerid][pShowFooter]) {
        KillTimer(PlayerData[playerid][pFooterTimer]);
    }

    if(PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID) {
        LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
    }

    if(PlayerData[playerid][pFreeze]) {
        stop PlayerData[playerid][pFreezeTimer];
    }

    foreach (new i : Player)
    {
        if(PlayerData[i][pSTNKUserid] == playerid) {
            PlayerData[i][pSTNKUserid]  = INVALID_PLAYER_ID;
            PlayerData[i][pSTNKPrice]   = 0;
            PlayerData[i][pSTNKVehicle] = 0;
        }
        if(PlayerData[i][pPlateID] == playerid) {
            PlayerData[i][pCustomPlate] = 0;
        }
        if(PlayerData[i][pLastShot] == playerid) {
            PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pGarageSeller] == playerid) {
            PlayerData[i][pGarageSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pGarageOffered] = -1;
        }
        if(PlayerData[i][pHouseSeller] == playerid) {
            PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pHouseOffered] = -1;
        }
        if(PlayerData[i][pBusinessSeller] == playerid) {
            PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pBusinessOffered] = -1;
        }
        if(PlayerData[i][pBodySeller] == playerid) {
            PlayerData[i][pBodySeller] = INVALID_PLAYER_ID;
            PlayerData[i][pBodyOffered] = -1;
        }
        if(PlayerData[i][pWorkshopSeller] == playerid) {
            PlayerData[i][pWorkshopSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pWorkshopOffered] = -1;
        }
        if(PlayerData[i][pFurnstoreSeller] == playerid) {
            PlayerData[i][pFurnstoreSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pFurnstoreOffered] = -1;
        }
        if(PlayerData[i][pFlatSeller] == playerid) {
            PlayerData[i][pFlatSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pFlatOffered] = -1;
        }
        if(PlayerData[i][pCarSeller] == playerid) {
            PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pCarOffered] = -1;
        }
        if(PlayerData[i][pVehTradedPlayer] == playerid) {
            PlayerData[i][pVehTradedPlayer] = INVALID_PLAYER_ID;
            PlayerData[i][pVehTraded] = -1;
        }
        if(PlayerData[i][pShakeOffer] == playerid) {
            PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
            PlayerData[i][pShakeType] = 0;
        }
        if (PlayerData[i][pSharelocOffer] == playerid) {
            PlayerData[i][pSharelocOffer] = INVALID_PLAYER_ID;
        }
        if (PlayerData[i][pMarriageOffer] == playerid) {
            PlayerData[i][pMarriageOffer] = INVALID_PLAYER_ID;
        }
        if (PlayerData[i][pDivorceOffer] == playerid) {
            PlayerData[i][pDivorceOffer] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pFriskOffer] == playerid) {
            PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pFoodSeller] == playerid) {
            PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
            PlayerData[i][pFoodType] = 0;
        }
        if(PlayerData[i][pFactionOffer] == playerid) {
            PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
            PlayerData[i][pFactionOffered] = -1;
        }
        if(PlayerData[i][pMDCPlayer] == playerid) {
            PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
            PlayerData[i][pTrackTime] = 0;
        }
        if(PlayerData[i][pNewsGuest] == playerid) {
            PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pGiveItem] == playerid) {
            PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
        }
        if(PlayerData[i][pTakeItems] == playerid) {
            PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
        }
        if (PlayerData[i][pMenuSeller] == playerid) {
            PlayerData[i][pOfferMenu] = -1;
            PlayerData[i][pMenuSeller] = INVALID_PLAYER_ID;
        }
        if (PlayerData[i][pSMS] == playerid) {
            PlayerData[i][pSMS] = INVALID_PLAYER_ID;
        }
    }
    stop AccountData[playerid][pLoginTimer];
    stop AccountData[playerid][pEmailTimer];
    stop PlayerData[playerid][pRepairTime];
    stop PlayerData[playerid][pUpgradeTimer];
    stop PlayerData[playerid][pSprayTimer];
    stop PlayerData[playerid][pPayphoneTimer];
    stop PlayerData[playerid][pForagerTimer];
    stop productionTimer[playerid];
    stop PlayerData[playerid][pJobDutyTime];
    stop PlayerData[playerid][pWashMoney];

    if (PlayerData[playerid][pUnloader]) {
        SetUnloaderDelay(playerid, 1800);
        if (IsForkliftVehicle(GetPlayerVehicleID(playerid))) SetVehicleToRespawn(GetPlayerVehicleID(playerid));
    }

    if (PlayerData[playerid][pMiner]) {
        SetMinerDelay(playerid, 1500);
    }

    if (PlayerData[playerid][pSorter]) {
        SetSorterDelay(playerid, 900);
    }

    if (PlayerData[playerid][pFitnessTimer]) {
        new id = GetPVarInt(playerid, "holdingGYMEquip"), bizid = Business_Inside(playerid);
        if (bizid != -1) {
            ClearAnimations(playerid, 1);
            GYMObject[id][objectStatus] = 1;
            GYMObject_Refresh(id, bizid);
            DeletePVar(playerid, "holdingGYMEquip");
            PlayerData[playerid][pFitnessTimer] = 0;
            PlayerData[playerid][pFitnessType] = 0;
        }
    }

    KillTimer(PlayerData[playerid][pRepair]);
    Advertisement_Remove(playerid);
    
    SQL_SaveCharacter(playerid);
    SQL_SaveAccounts(playerid);
    Report_Clear(playerid);
    Ask_Clear(playerid);
    ResetNameTag(playerid);
    
    ResetStatistics(playerid);
    return 1;
}

/*IsBleedableWeapon(weaponid)
{
    switch (weaponid) {
        case 4, 8, 9, 22..38: return 1;
    }
    return 0;
}*/

/*CreateBlood(playerid)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);
    SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

    return 1;
}
*/

Speed_Refresh(speedid)
{
    if(speedid != -1 && SpeedData[speedid][speedExists])
    {
        new
        string[64];

        if(!IsValidDynamicObject(SpeedData[speedid][speedObject])) SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
        Speed_ObjectUpdate(speedid);

        if(IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
            DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

        format(string, sizeof(string), "[Camera %d]\n"WHITE"Speed Limit: %.0f mph", speedid, SpeedData[speedid][speedLimit]);

        SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
    }
    return 1;
}

Speed_ObjectUpdate(speedid) {
    new objectid = SpeedData[speedid][speedObject];

    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, SpeedData[speedid][speedPos][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, SpeedData[speedid][speedPos][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, SpeedData[speedid][speedPos][2]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Z, SpeedData[speedid][speedPos][3]);
    return 1;
}

Speed_Save(speedid)
{
    new
        query[255];

    format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
        SpeedData[speedid][speedRange],
        SpeedData[speedid][speedLimit],
        SpeedData[speedid][speedPos][0],
        SpeedData[speedid][speedPos][1],
        SpeedData[speedid][speedPos][2],
        SpeedData[speedid][speedPos][3],
        SpeedData[speedid][speedID]
    );
    return mysql_tquery(g_iHandle, query);
}

Speed_Nearest(playerid)
{
    new id = -1;
    for (new i = 0, j = MAX_SPEED_CAMERAS; i < j; i ++) if(IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2])) {
        id = i;
    }

    return id;
}

Speed_UpdateSuspect(speedid, vehicleid) {
    if(speedid != -1 && SpeedData[speedid][speedExists]) {
        if (vehicleid != INVALID_VEHICLE_ID) {
            new plate[24];
            GetVehicleNumberPlate(vehicleid, plate);
            SpeedData[speedid][speedVehicle] = GetVehicleModel(vehicleid);
            format(SpeedData[speedid][speedVehPlate], 24, "%s", plate);
            SpeedData[speedid][speedVehSpeed] = floatround(GetVehicleSpeed(vehicleid, false));

            if(IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D])) {
                new direction[12];

                GetVehicleDirection(vehicleid, direction);
                UpdateDynamic3DTextLabelText(SpeedData[speedid][speedText3D], COLOR_CLIENT, sprintf("[Camera %d]\n"WHITE"Last Vehicle: "GREEN"%s\n"WHITE"Plate: "GREEN"%s\n"WHITE"Heading: "GREEN"%s\n"WHITE"Speed: "GREEN"%d mph/%.0f mph", speedid, GetVehicleNameByModel(SpeedData[speedid][speedVehicle]), SpeedData[speedid][speedVehPlate], direction, SpeedData[speedid][speedVehSpeed], SpeedData[speedid][speedLimit]));
            }
        }
    }
    return 1;
}

Speed_Delete(speedid)
{
    if(speedid != -1 && SpeedData[speedid][speedExists])
    {
        new
            string[64];

        if(IsValidDynamicObject(SpeedData[speedid][speedObject]))
            DestroyDynamicObject(SpeedData[speedid][speedObject]);

        if(IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
            DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

        format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
        mysql_tquery(g_iHandle, string);

        SpeedData[speedid][speedExists] = false;
        SpeedData[speedid][speedLimit] = 0.0;
        SpeedData[speedid][speedRange] = 0.0;
        SpeedData[speedid][speedID] = 0;

        SpeedData[speedid][speedObject] = INVALID_STREAMER_ID;
        SpeedData[speedid][speedText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

Speed_Create(playerid, Float:limit, Float:range)
{
    new
            Float:x,
        Float:y,
        Float:z,
        Float:angle;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if(!SpeedData[i][speedExists])
    {
        SpeedData[i][speedExists] = true;
        SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

        SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
        SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
        SpeedData[i][speedPos][2] = z - 1.2;
        SpeedData[i][speedPos][3] = angle;

        Speed_Refresh(i);
        mysql_tquery(g_iHandle, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
        return i;
    }
    return -1;
}

IsPlayerOnPhone(playerid)
{
    if(PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pNonEmergency] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
        return 1;

    return 0;
}

FlipVehicle(vehicleid)
{
    new
        Float:fAngle;

    GetVehicleZAngle(vehicleid, fAngle);

    SetVehicleZAngle(vehicleid, fAngle);
    SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

StopVehicleRadio(vehicleid)
{
    if((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
    {
        CoreVehicles[vehicleid][vehRadio] = 0;

        foreach (new i : Player)
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                StopAudioStreamForPlayer(i);
                PlayerData[i][pPlayRadio] = 0;
            }
        }
    }
    return 1;
}

SetVehicleRadio(vehicleid, url[])
{
    if(IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
    {
        CoreVehicles[vehicleid][vehRadio] = 1;
        strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

        foreach (new i : Player)
        {
            if(IsPlayerInVehicle(i, vehicleid))
            {
                PlayerData[i][pPlayRadio] = 1;

                StopAudioStreamForPlayer(i);
                if (!PlayerData[i][pTogBoombox]) PlayAudioStreamForPlayer(i, url);
            }
        }
    }
    return 1;
}

Vehicle_Reset(i)
{
    VehicleData[i][cID] = VehicleData[i][cModel] = VehicleData[i][cOwner] = VehicleData[i][cNeon] = VehicleData[i][cNeonToggle] = 0;
    VehicleData[i][cPos][0] = VehicleData[i][cPos][1] = VehicleData[i][cPos][2] = VehicleData[i][cPos][3] = 0;
    VehicleData[i][cDamage][0] = VehicleData[i][cDamage][1] = VehicleData[i][cDamage][2] = VehicleData[i][cDamage][3] = 0;
    VehicleData[i][cColor1] = VehicleData[i][cColor2] = VehicleData[i][cKeys] = 0;
    VehicleData[i][cImpoundPrice] = VehicleData[i][cImpoundDelay] = VehicleData[i][cLumber] = VehicleData[i][cFood] = VehicleData[i][cGarage] = VehicleData[i][cInt] = 0;
    VehicleData[i][cPlant] = VehicleData[i][cPlantObjectUsed] = VehicleData[i][cPlantType] = VehicleData[i][cComponent] = 0;
    VehicleData[i][cVw] = VehicleData[i][cRentTime] = VehicleData[i][cRentOwned] = VehicleData[i][cRentPrice] = VehicleData[i][cRent] = VehicleData[i][cGarageApart] = VehicleData[i][cTireLock] = VehicleData[i][cStatic] = 0;
    VehicleData[i][cDespawn] = VehicleData[i][cEngineUpgrade] = VehicleData[i][cBodyUpgrade] = 0;

    VehicleData[i][cLocked] = 1;
    VehicleData[i][cImpounded] = VehicleData[i][cPaintjob] = -1;

    for (new slot = 0; slot < MAX_VEHICLE_OBJECT+5; slot++) if(VehicleObjects[i][slot][object_exists]) {
        Vehicle_ObjectReset(i, slot);
    }

    if (IsValidDynamicObject(VehicleData[i][cPlantObject]))
        DestroyDynamicObject(VehicleData[i][cPlantObject]);

    VehicleData[i][cPlantObject] = INVALID_STREAMER_ID;

    if (IsValidDynamicObject(VehicleData[i][cComponentObject]))
        DestroyDynamicObject(VehicleData[i][cComponentObject]);

    VehicleData[i][cComponentObject] = INVALID_STREAMER_ID;

    if (IsValidDynamic3DTextLabel(VehicleData[i][cText]))
        DestroyDynamic3DTextLabel(VehicleData[i][cText]);

    VehicleData[i][cText] = Text3D:INVALID_3DTEXT_ID;

    if (IsValidDynamicObject(VehicleData[i][cNeonObject][0]))
        DestroyDynamicObject(VehicleData[i][cNeonObject][0]);

    if (IsValidDynamicObject(VehicleData[i][cNeonObject][1]))
        DestroyDynamicObject(VehicleData[i][cNeonObject][1]);

    VehicleData[i][cNeonObject][0] = VehicleData[i][cNeonObject][1] = INVALID_STREAMER_ID;

    for (new j; j < 14; j++)  {
        if(j < 5) {
            if (VehicleData[i][cWeapons][j]) {
                VehicleData[i][cWeapons][j]     = 0;
                VehicleData[i][cAmmo][j]        = 0;
                VehicleData[i][cDurability][j]  = 0;
            }
        }
        VehicleData[i][cMods][j] = 0;
    }

    foreach (new slot : CarsStorage[i]) {
        CarStorage[i][slot][cItemModel] = 0;
        CarStorage[i][slot][cItemQuantity] = 0;
    }

    Iter_Clear(CarsStorage[i]);

    if (VehicleData[i][cVehicle] != INVALID_VEHICLE_ID) {
        if(IsValidVehicle(VehicleData[i][cVehicle]))
            DestroyVehicle(VehicleData[i][cVehicle]);
        
        VehicleData[i][cVehicle] = INVALID_VEHICLE_ID;
    }

    new current = i,
        next = Iter_Next(DynamicVehicles, current);

    Iter_Remove(DynamicVehicles, current);

    i = next;
    return 1;
}

ResetVehicle(vehicleid)
{
    if(1 <= vehicleid <= MAX_VEHICLES)
    {
        if(CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject])) {
            DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);

            CoreVehicles[vehicleid][vehSirenObject] = INVALID_STREAMER_ID;
        }

        if(CoreVehicles[vehicleid][vehTemporary])
            CoreVehicles[vehicleid][vehFuel] = 100.0;

        CoreVehicles[vehicleid][vehWindowsDown] = false;
        CoreVehicles[vehicleid][vehTemporary] = 0;
        CoreVehicles[vehicleid][vehLoads] = 0;
        CoreVehicles[vehicleid][vehLoadType] = 0;
        CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
        CoreVehicles[vehicleid][vehTrash] = 0;
        CoreVehicles[vehicleid][vehRepairing] = 0;
        CoreVehicles[vehicleid][vehSirenOn] = 0;
        CoreVehicles[vehicleid][vehRadio] = 0;
        CoreVehicles[vehicleid][vehWood] = 0;

        DisableVehicleSpeedCap(vehicleid);
        KillTimer(FlashTime[vehicleid]);
        vehicle_handbreak[vehicleid] = false;

        for(new i; i < 5; i++) {
            if(IsValidDynamicObject(CoreVehicles[vehicleid][vehWoodObject][i]))
                DestroyDynamicObject(CoreVehicles[vehicleid][vehWoodObject][i]);

            CoreVehicles[vehicleid][vehWoodObject][i] = INVALID_STREAMER_ID;
        }
    }
    return 1;
}

RespawnVehicle(vehicleid)
{
    new i = Vehicle_GetID(vehicleid);

    if(i != -1) {
        Vehicle_GetStatus(i);
        Vehicle_Spawn(i);
    }
    else {
        if(IsValidVehicle(vehicleid))
        {
            SetVehicleToRespawn(vehicleid);
        }
    }
    ResetVehicle(vehicleid);
    return 1;
}

/* GetWeaponCount(playerid)
{
    new
        count,
        weapon,
        ammo;

    for (new i = 0; i < 12; i ++)
    {
        GetPlayerWeaponData(playerid, i, weapon, ammo);

        if(weapon > 0 && ammo > 0) count++;
    }
    return count;
} */

Boombox_Place(playerid)
{
    new
        Float:angle;

    GetPlayerFacingAngle(playerid, angle);

    strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
    GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

    BoomboxData[playerid][boomboxPlaced] = true;
    BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
    BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel("[Boombox]\n"WHITE"/boombox to use this boombox.", COLOR_CLIENT, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

    return 1;
}

Boombox_Nearest(playerid)
{
    foreach (new i : Player) if(BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

Boombox_SetURL(playerid, url[])
{
    if(BoomboxData[playerid][boomboxPlaced])
    {
        strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

        foreach (new i : Player) if(PlayerData[i][pBoombox] == playerid) {
            StopAudioStreamForPlayer(i);
            if (!PlayerData[i][pTogBoombox]) PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
        }
    }
    return 1;
}

Boombox_Destroy(playerid)
{
    if(BoomboxData[playerid][boomboxPlaced])
    {
        if(IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
            DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

        if(IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
            DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

        foreach (new i : Player) if(PlayerData[i][pBoombox] == playerid) {
            StopAudioStreamForPlayer(i);
        }
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
        BoomboxData[playerid][boomboxObject] = INVALID_STREAMER_ID;
        BoomboxData[playerid][boomboxText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

Mechanic_ShowCalls(playerid)
{
    static
        string[2048];

    string[0] = 0;

    foreach (new i : Player) if(PlayerData[i][pMechanicCalled]) {
        format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
    }
    if(!strlen(string)) SendErrorMessage(playerid, "There are no Mechanic calls to accept.");
    else Dialog_Show(playerid, AcceptMechanic, DIALOG_STYLE_LIST, "Mechanic Calls", string, "Accept", "Cancel");

    return 1;
}

Taxi_ShowCalls(playerid)
{
    static
        string[2048];

    string[0] = 0;

    foreach (new i : Player) if(PlayerData[i][pTaxiCalled]) {
        format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
    }
    if(!strlen(string)) SendErrorMessage(playerid, "There are no taxi calls to accept.");
    else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Taxi Calls", string, "Accept", "Cancel");

    return 1;
}

IsShipmentAccepted(businessid)
{
    foreach (new i : Player) if((GetPlayerJob(i, 0) == JOB_COURIER || GetPlayerJob(i, 1) == JOB_COURIER) && PlayerData[i][pShipment] == businessid) {
        return 1;
    }
    return 0;
}

CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;
    DisableWaypoint(playerid);

    if(PlayerData[playerid][pDeliverShipment])
    {
        PlayerData[playerid][pDeliverShipment] = 0;
        DisablePlayerCheckpoint(playerid);
    }
    return 1;
}

ShowShipments(playerid)
{
    new
        string[1024],
        count = 0;

    strcat(string, "#\tType\tDistance\tStock\n");

    for (new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && BusinessData[i][bizOwner] && BusinessData[i][bizShipment] && !BusinessData[i][bizLocked] && !IsShipmentAccepted(i)) {
        strcat(string, sprintf("%d\t%s\t%.1f\t%d\n", i, Business_Type(i), GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]), BusinessData[i][bizProducts]));
        count++;
    }
    if(!count) SendErrorMessage(playerid, "There are no shipments to accept.");
    else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_TABLIST_HEADERS, "Shipments", string, "Accept", "Cancel");
    return 1;
}

GetVehicleNumberPlate(vehicleid, dest[], len = sizeof(dest)) {
    new id = -1;
    if ((id = Vehicle_GetID(vehicleid)) != -1) {
        format(dest,len,"%s",VehicleData[id][cPlate]);
    } else format(dest,len,"STATIC");
}

SetVehicleColorEx(vehicleid, color1, color2)
{
    new id = Vehicle_GetID(vehicleid);

    if(id != -1)
    {
        VehicleData[id][cColor1] = color1;
        VehicleData[id][cColor2] = color2;
        Vehicle_Save(id);
    }
    return ChangeVehicleColor(vehicleid, color1, color2);
}

SetVehiclePaintjob(vehicleid, paintjobid)
{
    new id = Vehicle_GetID(vehicleid);

    if(id != -1)
    {
        VehicleData[id][cPaintjob] = paintjobid;
        Vehicle_Save(id);
    }
    return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock RemoveComponent(vehicleid, componentid)
{
    if(!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
        return 0;

    new
        id = Vehicle_GetID(vehicleid);

    if(id != -1)
    {
        VehicleData[id][cMods][GetVehicleComponentType(componentid)] = 0;
        Vehicle_Save(id);
    }
    return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
    if(!IsValidVehicle(vehicleid))
        return 0;

    new
        id = Vehicle_GetID(vehicleid);

    if(id != -1)
    {
        VehicleData[id][cMods][GetVehicleComponentType(componentid)] = componentid;
        Vehicle_Save(id);
    }
    return AddVehicleComponent(vehicleid, componentid);
}

static stock const gVehicleComponentName[194][64] = {
	!"Pro Spoiler",
	!"Win Spoiler",
	!"Drag Spoiler",
	!"Alpha Spoiler",
	!"Champ Scoop Hood",
	!"Fury Scoop Hood",
	!"Roof Scoop",
	!"Right Sideskirt",
	!"5x Nitro",
	!"2x Nitro",
	!"10x Nitro",
	!"Race Scoop Hood",
	!"Worx Scoop Hood",
	!"Round Fog Lamps",
	!"Champ Spoiler",
	!"Race Spoiler",
	!"Worx Spoiler",
	!"Left Sideskirt",
	!"Upswept Exhaust",
	!"Twin Exhaust",
	!"Large Exhaust",
	!"Medium Exhaust",
	!"Small Exhaust",
	!"Fury Spoiler",
	!"Square Fog Lamps",
	!"Offroad Wheels",
	!"Right Alien Sideskirt \"Sultan\"",
	!"Left Alien Sideskirt \"Sultan\"",
	!"Alien Exhaust \"Sultan\"",
	!"X-Flow Exhaust \"Sultan\"",
	!"Left X-Flow Sideskirt \"Sultan\"",
	!"Right X-Flow Sideskirt \"Sultan\"",
	!"Alien Roof Vent \"Sultan\"",
	!"X-Flow Roof Vent \"Sultan\"",
	!"Alien Exhaust \"Elegy\"",
	!"X-Flow Roof Vent \"Elegy\"",
	!"Right Alien Sideskirt \"Elegy\"",
	!"X-Flow Exhaust \"Elegy\"",
	!"Alien Roof Vent \"Elegy\"",
	!"Right X-Flow Sideskirt \"Elegy\"",
	!"Left Alien Sideskirt \"Elegy\"",
	!"Right X-Flow Sideskirt \"Elegy\"",
	!"Right Chrome Sideskirt \"Broadway\"",
	!"Slamin Exhaust \"Broadway\"",
	!"Chrome Exhaust \"Broadway\"",
	!"X-Flow Exhaust \"Flash\"",
	!"Alien Exhaust \"Flash\"",
	!"Right Alien Sideskirt \"Flash\"",
	!"Right X-Flow Sideskirt \"Flash\"",
	!"Alien Spoiler \"Flash\"",
	!"X-Flow Spoiler \"Flash\"",
	!"Left Alien Sideskirt \"Flash\"",
	!"Left X-Flow Sideskirt \"Flash\"",
	!"X-Flow Roof \"Flash\"",
	!"Alien Roof \"Flash\"",
	!"Alien Roof \"Stratum\"",
	!"Right Alien Sideskirt \"Stratum\"",
	!"Right X-Flow Sideskirt \"Stratum\"",
	!"Alien Spoiler \"Stratum\"",
	!"X-Flow Exhaust \"Stratum\"",
	!"X-Flow Spoiler \"Stratum\"",
	!"X-Flow Roof \"Stratum\"",
	!"Left Alien Sideskirt \"Stratum\"",
	!"Left X-Flow Sideskirt \"Stratum\"",
	!"Alien Exhaust \"Stratum\"",
	!"Alien Exhaust \"Jester\"",
	!"X-Flow Exhaust \"Jester\"",
	!"Alien Roof \"Jester\"",
	!"X-Flow Roof \"Jester\"",
	!"Right Alien Sideskirt \"Jester\"",
	!"Right X-Flow Sideskirt \"Jester\"",
	!"Left Alien Sideskirt \"Jester\"",
	!"Left X-Flow Sideskirt \"Jester\"",
	!"Shadow Wheels",
	!"Mega Wheels",
	!"Rimshine Wheels",
	!"Wires Wheels",
	!"Classic Wheels",
	!"Twist Wheels",
	!"Cutter Wheels",
	!"Switch Wheels",
	!"Grove Wheels",
	!"Import Wheels",
	!"Dollar Wheels",
	!"Trance Wheels",
	!"Atomic Wheels",
	!"Stereo Sound",
	!"Hydraulics",
	!"Alien Roof \"Uranus\"",
	!"X-Flow Exhaust \"Uranus\"",
	!"Right Alien Sideskirt \"Uranus\"",
	!"X-Flow Roof \"Uranus\"",
	!"Alien Exhaust \"Uranus\"",
	!"Right X-Flow Sideskirt \"Uranus\"",
	!"Left Alien Sideskirt \"Uranus\"",
	!"Right X-Flow Sideskirt \"Uranus\"",
	!"Ahab Wheels",
	!"Virtual Wheels",
	!"Access Wheels",
	!"Left Chrome Sideskirt \"Broadway\"",
	!"Chrome Grill Bullbar \"Remington\"",
	!"Left \"Chrome Flames\" Sideskirt \"Remington\"",
	!"Left \"Chrome Strip\" Sideskirt \"Savanna\"",
	!"Corvetible Roof \"Blade\"",
	!"Chrome Exhaust \"Blade\"",
	!"Slamin Exhaust \"Blade\"",
	!"Right \"Chrome Arches\" Sideskirt \"Remington\"",
	!"Left \"Chrome Strip\" Sideskirt \"Blade\"",
	!"Right \"Chrome Strip\" Sideskirt \"Blade\"",
	!"Chrome Rear Bullbars \"Slamvan\"",
	!"Slamin Rear Bullbars \"Slamvan\"",
	!"Little Front Sign? \"Slamvan\"",
	!"Little Front Sign? \"Slamvan\"",
	!"Chrome Exhaust \"Slamvan\"",
	!"Slamin Exhaust \"Slamvan\"",
	!"Chrome Front Bullbars \"Slamvan\"",
	!"Slamin Front Bullbars \"Slamvan\"",
	!"Chrome Front Bumper \"Slamvan\"",
	!"Right \"Chrome Trim\" Sideskirt \"Slamvan\"",
	!"Right \"Wheelcovers\" Sideskirt \"Slamvan\"",
	!"Left \"Chrome Trim\" Sideskirt \"Slamvan\"",
	!"Left \"Wheelcovers\" Sideskirt \"Slamvan\"",
	!"Right \"Chrome Flames\" Sideskirt \"Remington\"",
	!"Bullbar Chrome Bars \"Remington\"",
	!"Left \"Chrome Arches\" Sideskirt \"Remington\"",
	!"Bullbar Chrome Lights \"Remongton\"",
	!"Chrome Exhaust \"Remington\"",
	!"Slamin Exhaust \"Remington\"",
	!"Vinyl Hardtop \"Blade\"",
	!"Chrome Exhaust \"Savanna\"",
	!"Hardtop Roof \"Savanna\"",
	!"Softtop Roof \"Savanna\"",
	!"Slamin Exhaust \"Savanna\"",
	!"Right \"Chrome Strip\" Sideskirt \"Savanna\"",
	!"Right \"Chrome Strip\" Sideskirt \"Blade\"",
	!"Slamin Exhaust \"Blade\"",
	!"Chrome Exhaust \"Blade\"",
	!"Left \"Chrome Strip\" Sideskirt \"Blade\"",
	!"Alien Spoiler \"Sultan\"",
	!"X-Flow Spoiler \"Sultan\"",
	!"X-Flow Rear Bumper \"Sultan\"",
	!"Alien Rear Bumper \"Sultan\"",
	!"Left Oval Vents",
	!"Right Oval Vents",
	!"Left Square Vents",
	!"Right Square Vents",
	!"X-Flow Spoiler \"Elegy\"",
	!"Alien Spoiler \"Elegy\"",
	!"X-Flow Rear Bumper \"Elegy\"",
	!"Alien Rear Bumper \"Elegy\"",
	!"Alien Rear Bumper \"Flash\"",
	!"X-Flow Rear Bumper \"Flash\"",
	!"X-Flow Front Bumper \"Flash\"",
	!"Alien Front Bumper \"Flash\"",
	!"Alien Rear Bumper \"Stratum\"",
	!"Alien Front Bumper \"Stratum\"",
	!"X-Flow Rear Bumper \"Stratum\"",
	!"X-Flow Front Bumper \"Stratum\"",
	!"X-Flow Spoiler \"Jester\"",
	!"Alien Rear Bumper \"Jester\"",
	!"Alien Front Bumper \"Jester\"",
	!"X-Flow Rear Bumper \"Jester\"",
	!"Alien Spoiler \"Jester\"",
	!"X-Flow Spoiler \"Uranus\"",
	!"Alien Spoiler \"Uranus\"",
	!"X-Flow Front Bumper \"Uranus\"",
	!"Alien Front Bumper \"Uranus\"",
	!"X-Flow Rear Bumper \"Uranus\"",
	!"Alien Rear Bumper \"Uranus\"",
	!"Alien Front Bumper \"Sultan\"",
	!"X-Flow Front Bumper \"Sultan\"",
	!"Alien Front Bumper \"Elegy\"",
	!"X-Flow Front Bumper \"Elegy\"",
	!"X-Flow Front Bumper \"Jester\"",
	!"Chrome Front Bumper \"Broadway\"",
	!"Slamin Front Bumper \"Broadway\"",
	!"Chrome Rear Bumper \"Broadway\"",
	!"Slamin Rear Bumper \"Broadway\"",
	!"Slamin Rear Bumper \"Remington\"",
	!"Chrome Front Bumper \"Remington\"",
	!"Chrome Rear Bumper \"Remington\"",
	!"Slamin Front Bumper \"Blade\"",
	!"Chrome Front Bumper \"Blade\"",
	!"Slamin Rear Bumper \"Blade\"",
	!"Chrome Rear Bumper \"Blade\"",
	!"Slamin Front Bumper \"Remington\"",
	!"Slamin Rear Bumper \"Savanna\"",
	!"Chrome Rear Bumper \"Savanna\"",
	!"Slamin Front Bumper \"Savanna\"",
	!"Chrome Front Bumper \"Savanna\"",
	!"Slamin Front Bumper \"Blade\"",
	!"Chrome Front Bumper \"Blade\"",
	!"Chrome Rear Bumper \"Blade\"",
	!"Slamin Rear Bumper \"Blade\""
};

stock GetVehicleComponentName(componentid, name[], size = sizeof(name))
{
	new idx = componentid - 1000;

	if (!(0 <= idx <= 194)) {
		return 0;
	}
	return strunpack(name, gVehicleComponentName[idx], size);
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
    if(PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "You can't use animation while injured.");
            
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

    PlayerData[playerid][pLoopAnim] = true;
    ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");

    return 1;
}

AnimationCheck(playerid)
{
    return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] /*&& !PlayerData[playerid][pCuffed]*/ && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && !PlayerData[playerid][pFitnessTimer]);
}

PreloadAnimations(playerid)
{
    for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
        ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

Garbage_Create(playerid, type)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(!GarbageData[i][garbageExists])
    {
        switch (type) {
            case 1: GarbageData[i][garbageModel] = 1236;
            case 2: GarbageData[i][garbageModel] = 1300;
        }
        GarbageData[i][garbageExists] = true;
        GarbageData[i][garbageCapacity] = 0;

        GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
        GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

        switch (type) {
            case 1: {
                GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
                GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
            }
            case 2: {
                GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
                GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
            }
        }
        GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
        GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

        Garbage_Refresh(i);
        mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
        return i;
    }
    return -1;
}

Garbage_Delete(garbageid)
{
    if(garbageid != -1 && GarbageData[garbageid][garbageExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
            DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

        GarbageData[garbageid][garbageExists] = false;
        GarbageData[garbageid][garbageCapacity] = 0;
        GarbageData[garbageid][garbageID] = 0;
        GarbageData[garbageid][garbageObject] = INVALID_STREAMER_ID;
    }
    return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
    {
        if(GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
        return i;
    }
    return -1;
}

Garbage_Refresh(garbageid)
{
    if(garbageid != -1 && GarbageData[garbageid][garbageExists])
    {
        if(!IsValidDynamicObject(GarbageData[garbageid][garbageObject])) GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
        Garbage_ObjectUpdate(garbageid);
    }
    return 1;
}

Garbage_ObjectUpdate(garbageid) {
    new objectid = GarbageData[garbageid][garbageObject];

    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, GarbageData[garbageid][garbagePos][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, GarbageData[garbageid][garbagePos][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6));
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Z, GarbageData[garbageid][garbagePos][3]);

    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID, GarbageData[garbageid][garbageWorld]);
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID, GarbageData[garbageid][garbageInterior]);
    return 1;
}

Garbage_Save(garbageid)
{
    new
        query[300];

    format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
        GarbageData[garbageid][garbageModel],
        GarbageData[garbageid][garbageCapacity],
        GarbageData[garbageid][garbagePos][0],
        GarbageData[garbageid][garbagePos][1],
        GarbageData[garbageid][garbagePos][2],
        GarbageData[garbageid][garbagePos][3],
        GarbageData[garbageid][garbageInterior],
        GarbageData[garbageid][garbageWorld],
        GarbageData[garbageid][garbageID]
    );
    return mysql_tquery(g_iHandle, query);
}

ATM_Delete(atmid)
{
    if(atmid != -1 && ATMData[atmid][atmExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]));

        if(IsValidDynamicObject(ATMData[atmid][atmObject]))
            DestroyDynamicObject(ATMData[atmid][atmObject]);

        if(IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
            DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

        ATMData[atmid][atmExists] = false;
        ATMData[atmid][atmID] = 0;
        ATMData[atmid][atmObject] = INVALID_STREAMER_ID;
        ATMData[atmid][atmText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if(ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
    {
        if(GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
            return i;
    }
    return -1;
}

Dealer_Nearest(playerid)
{
    for (new i = 0; i != MAX_DEALER; i ++) if(DealershipData[i][dExists] && IsPlayerInRangeOfPoint(playerid, 2.5, DealershipData[i][dPos][0], DealershipData[i][dPos][1], DealershipData[i][dPos][2]))
    {
        return i;
    }
    return -1;
}

ATM_Create(playerid)
{
    new
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i < MAX_ATM_MACHINES; i ++) if(!ATMData[i][atmExists])
        {
            ATMData[i][atmExists] = true;

            x += 1.0 * floatsin(-angle, degrees);
            y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

            ATM_Refresh(i);
            mysql_tquery(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", "OnATMCreated", "d", i);

            return i;
        }
    }
    return -1;
}

ATM_Refresh(atmid)
{
    if(atmid != -1 && ATMData[atmid][atmExists])
    {
        if(!IsValidDynamicObject(ATMData[atmid][atmObject])) ATMData[atmid][atmObject] = CreateDynamicObject(2942, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
        ATM_ObjectUpdate(atmid);

        if(IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
            DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

        ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(sprintf("[ATM %d]\n"WHITE"/atm to use this machine.", atmid), X11_LIGHTBLUE, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);

        return 1;
    }
    return 0;
}

ATM_ObjectUpdate(atmid) {
    new objectid = ATMData[atmid][atmObject];

    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, ATMData[atmid][atmPos][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, ATMData[atmid][atmPos][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, ATMData[atmid][atmPos][2]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Z, ATMData[atmid][atmPos][3]);

    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID, ATMData[atmid][atmWorld]);
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID, ATMData[atmid][atmInterior]);
    return 1;
}

ATM_Save(atmid)
{
    new
            query[1024];

    format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%f', `atmY` = '%f', `atmZ` = '%f', `atmA` = '%f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
        ATMData[atmid][atmPos][0],
        ATMData[atmid][atmPos][1],
        ATMData[atmid][atmPos][2],
        ATMData[atmid][atmPos][3],
        ATMData[atmid][atmInterior],
        ATMData[atmid][atmWorld],
        ATMData[atmid][atmID]
    );
    return mysql_tquery(g_iHandle, query);
}

IsVehicleTrashmaster(vehicleid)
{
    for (new i = 0; i != 4; i ++) if(VehicleTrashmaster[i] == vehicleid) {
        return 1;
    }
    return 0;
}

/*IsVehicleImpounded(vehicleid)
{
    new id = Vehicle_GetID(vehicleid);

    if(id != -1 && VehicleData[id][cImpounded] != -1 && VehicleData[id][cImpoundPrice] > 0)
        return 1;

    return 0;
}
*/
Impound_Delete(impoundid)
{
    if(impoundid != -1 && ImpoundData[impoundid][impoundExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]));
        mysql_tquery(g_iHandle, sprintf("UPDATE player_vehicles SET `Impound` = '-1', `ImpoundPrice` = '0', `ImpoundDelay` = '0' WHERE `Impound` = '%d'", ImpoundData[impoundid][impoundID]));

        if(IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
            DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

        if(IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
            DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

        if(IsValidDynamic3DTextLabel(ImpoundData[impoundid][releaseText3D]))
            DestroyDynamic3DTextLabel(ImpoundData[impoundid][releaseText3D]);

        if(IsValidDynamicPickup(ImpoundData[impoundid][releasePickup]))
            DestroyDynamicPickup(ImpoundData[impoundid][releasePickup]);

        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cImpounded] == ImpoundData[impoundid][impoundID]) {
            VehicleData[i][cImpounded] = -1;
            VehicleData[i][cImpoundPrice] = 0;
            VehicleData[i][cImpoundDelay] = 0;
            Vehicle_Spawn(i);
        }
        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
        ImpoundData[impoundid][impoundText3D] = Text3D:INVALID_STREAMER_ID;
        ImpoundData[impoundid][impoundPickup] = INVALID_STREAMER_ID;
        ImpoundData[impoundid][releaseText3D] = Text3D:INVALID_STREAMER_ID;
        ImpoundData[impoundid][releasePickup] = INVALID_STREAMER_ID;
    }
    return 1;
}

GetImpoundByID(sqlid)
{
    for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if(ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
        return i;
    }
    return -1;
}

Impound_Nearest(playerid)
{
    for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if(ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
        return i;
    }
    return -1;
}

ImpoundRelease_Nearest(playerid) {
    for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if(ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 5.0, ImpoundData[i][impoundRelease][0], ImpoundData[i][impoundRelease][1], ImpoundData[i][impoundRelease][2])) {
        return i;
    }
    return -1;
}

Impound_Create(Float:x, Float:y, Float:z)
{
    for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if(!ImpoundData[i][impoundExists])
    {
        ImpoundData[i][impoundExists] = true;
        ImpoundData[i][impoundLot][0] = x;
        ImpoundData[i][impoundLot][1] = y;
        ImpoundData[i][impoundLot][2] = z;
        ImpoundData[i][impoundRelease][0] = 0.0;
        ImpoundData[i][impoundRelease][1] = 0.0;
        ImpoundData[i][impoundRelease][2] = 0.0;

        mysql_tquery(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
        Impound_Refresh(i);

        return i;
    }
    return -1;
}

Impound_Refresh(impoundid)
{
    if(impoundid != -1 && ImpoundData[impoundid][impoundExists])
    {
        new
        string[64];

        if(IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
            DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

        if(IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
            DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

        if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][releaseText3D]))
            DestroyDynamic3DTextLabel(ImpoundData[impoundid][releaseText3D]);

        if (IsValidDynamicPickup(ImpoundData[impoundid][releasePickup]))
            DestroyDynamicPickup(ImpoundData[impoundid][releasePickup]);

        format(string, sizeof(string), "[Impound %d]\n"WHITE"/impound to impound a vehicle.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
        ImpoundData[impoundid][releasePickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundRelease][0], ImpoundData[impoundid][impoundRelease][1], ImpoundData[impoundid][impoundRelease][2], -1, 0);
        ImpoundData[impoundid][releaseText3D] = CreateDynamic3DTextLabel("[Car Release]\n"WHITE"Type "YELLOW"/releasecar "WHITE"to release a vehicle.", COLOR_CLIENT, ImpoundData[impoundid][impoundRelease][0], ImpoundData[impoundid][impoundRelease][1], ImpoundData[impoundid][impoundRelease][2]+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
    }
    return 1;
}

Impound_Save(impoundid)
{
    new
        query[300];

    format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
    );
    return mysql_tquery(g_iHandle, query);
}

/*Backpack_Items(playerid, id)
{
    if(id != -1 && BackpackData[id][backpackExists])
    {
        new
        string[MAX_BACKPACK_CAPACITY * 32],
            count = 0;

        for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
        {
            if(BackpackItems[i][bItemQuantity] == 1) format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);
            else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

            BackpackListed[playerid][count++] = i;
        }
        strcat(string, "Take Backpack");

        PlayerData[playerid][pBackpackLoot] = id;
        Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Backpack", string, "Select", "Cancel");
    }
    return 1;
}

Backpack_Open(playerid)
{
    new id = GetPlayerBackpack(playerid);

    if(id != -1)
    {
        new
            string[MAX_BACKPACK_CAPACITY * 32],
            count = 0;

        format(string,sizeof(string), "Add Item\n");

        for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
        {
            if(BackpackItems[i][bItemQuantity] == 1) format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);
            else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

            BackpackListed[playerid][count++] = i;
        }
        Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "My Backpack", string, "Select", "Cancel");
    }
    return 1;
}

Backpack_GetItems(id)
{
    new count;

    for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
        count++;
    }
    return count;
}

Backpack_GetFreeID()
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(!BackpackData[i][backpackExists]) {
        return i;
    }
    return -1;
}

Backpack_Refresh(id)
{
    if(id != -1 && BackpackData[id][backpackExists])
    {
        if(IsValidDynamicObject(BackpackData[id][backpackObject]))
            DestroyDynamicObject(BackpackData[id][backpackObject]);

        if(IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
            DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        if(!BackpackData[id][backpackPlayer]) {
            BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
            BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("[Backpack]\n"WHITE"Press 'N' to view the items.", COLOR_CLIENT | 0xAA, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
        }
    }
    return 1;
}

Backpack_GetItemID(id, name[])
{
    for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if(BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
        return i;
    }
    return -1;
}

Backpack_GetFreeItem()
{
    for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if(!BackpackItems[i][bItemExists]) {
        return i;
    }
    return -1;
}

Backpack_HasItem(id, name[])
{
    if(id != -1 && BackpackData[id][backpackExists])
        return Backpack_GetItemID(id, name) != -1;

    return 0;
}

Backpack_Count(id, name[])
{
    new itemid;

    if(id != -1 && BackpackData[id][backpackExists])
    {
        itemid = Backpack_GetItemID(id, name);

        if(itemid != -1)
                return BackpackItems[itemid][bItemQuantity];
    }
    return 0;
}

Backpack_Add(id, name[], model, quantity = 1)
{
    new
        query[128];

    if(id != -1 && BackpackData[id][backpackExists])
    {
        new itemid = Backpack_GetItemID(id, name);

        if(itemid != -1)
        {
            format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
            mysql_tquery(g_iHandle, query);

            return BackpackItems[itemid][bItemQuantity] += quantity;
        }
        else if((itemid = Backpack_GetFreeItem()) != -1)
        {
            format(BackpackItems[itemid][bItemName], 32, name);

            BackpackItems[itemid][bItemBackpack] = id;
            BackpackItems[itemid][bItemExists] = true;
            BackpackItems[itemid][bItemModel] = model;
            BackpackItems[itemid][bItemQuantity] = quantity;

            format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
            mysql_tquery(g_iHandle, query, "OnBackpackAdd", "dd", id, itemid);

            return 1;
        }
    }
    return 0;
}

Backpack_Remove(id, name[], quantity = 1)
{
    new
            query[128];

    if(id != -1 && BackpackData[id][backpackExists])
    {
        new itemid = Backpack_GetItemID(id, name);

        if(itemid != -1)
        {
            if(BackpackItems[itemid][bItemQuantity] > 0)
            {
                BackpackItems[itemid][bItemQuantity] -= quantity;
            }
            if(BackpackItems[itemid][bItemQuantity] < 1)
            {
                format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
                mysql_tquery(g_iHandle, query);

                BackpackItems[itemid][bItemBackpack] = -1;
                BackpackItems[itemid][bItemExists] = false;
                BackpackItems[itemid][bItemModel] = 0;
                BackpackItems[itemid][bItemQuantity] = 0;
            }
            else
            {
                format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
                mysql_tquery(g_iHandle, query);
            }
            return 1;
        }
    }
    return 0;
}*/

/*GetHouseBackpack(houseid)
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
        return i;
    }
    return -1;
}

GetVehicleBackpack(carid)
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == VehicleData[carid][cID]) {
        return i;
    }
    return -1;
}

GetPlayerBackpack(playerid)
{
    for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
        return i;
    }
    return -1;
}

Backpack_Create(playerid)
{
    new id = Backpack_GetFreeID();

    if(id != -1)
    {
        BackpackData[id][backpackExists] = true;
        BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
        BackpackData[id][backpackPos][0] = 0.0;
        BackpackData[id][backpackPos][1] = 0.0;
        BackpackData[id][backpackPos][2] = 0.0;

        mysql_tquery(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", "OnBackpackCreated", "d", id);
        return id;
    }
    return -1;
}

Backpack_Delete(id)
{
    if(id != -1 && BackpackData[id][backpackExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]));

        if(IsValidDynamicObject(BackpackData[id][backpackObject]))
            DestroyDynamicObject(BackpackData[id][backpackObject]);

        if(IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
            DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        BackpackData[id][backpackExists] = false;
        BackpackData[id][backpackID] = 0;
        BackpackData[id][backpackPlayer] = 0;
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
    }
    return 1;
}

Backpack_Save(id)
{
    new
        query[256];

    format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.1f', `backpackY` = '%.1f', `backpackZ` = '%.1f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
        BackpackData[id][backpackPlayer],
        BackpackData[id][backpackHouse],
        BackpackData[id][backpackVehicle],
        BackpackData[id][backpackPos][0],
        BackpackData[id][backpackPos][1],
        BackpackData[id][backpackPos][2],
        BackpackData[id][backpackInterior],
        BackpackData[id][backpackWorld],
        BackpackData[id][backpackID]
    );
    return mysql_tquery(g_iHandle, query);
}*/

/* IsValidObjectModel(modelid)
{
    if(modelid < 0 || modelid > 20000)
        return 0;

    switch (modelid)
    {
        case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
        return 1;
    }
    new const g_arrModelData[] =
    {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
                -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
                127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
             -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
             -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
             -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
             -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
             -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
             -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
             -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
             -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
             2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
             -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
             1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
             2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
             -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
             -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
             -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
             -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
             -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
             -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
             -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
             -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
             33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
             0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
             92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
    };
    return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
} */

ChangeName(playerid, name[], bool:logging = true)
{
    new
        query[1024],
        oldname[24];

    GetPlayerName(playerid, oldname, sizeof(oldname));

    if(logging)
    {
        format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", SQL_ReturnEscaped(oldname), SQL_ReturnEscaped(name), ReturnDate());
        mysql_tquery(g_iHandle, query);
    }
    format(NormalName(playerid), MAX_PLAYER_NAME + 1, name);
    SetPlayerName(playerid, name);

    format(query, sizeof(query), "UPDATE `characters` SET `Character` = '%s' WHERE `Character` = '%s'", SQL_ReturnEscaped(name), SQL_ReturnEscaped(oldname));
    mysql_tquery(g_iHandle, query);

    return 1;
}

Tax_Percent(price) {
    return floatround((float(price) / 100) * 85);
}

Tax_AddMoney(amount) {
    g_TaxVault = g_TaxVault + amount;
    Server_Save();
    return 0;
}

Tax_AddPercent(price)
{
    new money = (price - Tax_Percent(price));

    g_TaxVault = g_TaxVault + money;

    Server_Save();
    return 1;
}

file_parse_int(File:handle, const field[]) {
    new
        str[16];

    return (file_parse(handle, field, str), strval(str));
}

file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
    if(!handle)
        return 0;

    new
        str[128],
        pos = strlen(field);

    fseek(handle, 0, seek_start);

    while (fread(handle, str)) if(strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
    {
        strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

        if((pos = strfind(dest, "\r")) != -1)
            dest[pos] = '\0';
        else if((pos = strfind(dest, "\n")) != -1)
            dest[pos] = '\0';

        return 1;
    }
    return 0;
}

// stock Float:cache_get_field_float(row, const field_name[])
// {
//     new
//         str[16];

//     cache_get_value(row, field_name, str, sizeof(str));
//     return floatstr(str);
// }

// stock cache_get_field_int(row, const field_name[]) {
//     new result;
//     result = cache_get_value_int(row, field_name, g_iHandle);
//     return result;
// }

Ticket_Add(playerid, suspectid, price, reason[])
{
    new
        string[255];

    for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if(!TicketData[suspectid][i][ticketExists])
    {
        TicketData[suspectid][i][ticketExists] = true;
        TicketData[suspectid][i][ticketFee] = price;

        format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
        format(TicketData[suspectid][i][ticketReason], 64, reason);
        format(TicketData[suspectid][i][ticketIssuer], 24, ReturnName(playerid, 0));

        format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`, `ticketIssuer`) VALUES('%d', '%d', '%s', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason), TicketData[suspectid][i][ticketIssuer]);
        mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);

        return i;
    }
    return -1;
}

Ticket_Remove(playerid, ticketid)
{
    if(ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
    {
        new
        string[90];

        format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
        mysql_tquery(g_iHandle, string);
        TicketData[playerid][ticketid][ticketExists] = false;
        TicketData[playerid][ticketid][ticketID] = 0;
        TicketData[playerid][ticketid][ticketFee] = 0;
    }
    return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
    new
            query[192];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(!LocationData[playerid][i][locationExists])
    {
        LocationData[playerid][i][locationExists] = true;
        format(LocationData[playerid][i][locationName], 32, name);

        LocationData[playerid][i][locationPos][0] = x;
        LocationData[playerid][i][locationPos][1] = y;
        LocationData[playerid][i][locationPos][2] = z;

        format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
        mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

        return i;
    }
    return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
    }
    return -1;
}

Location_Delete(playerid, name[])
{
    new
            query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
    {
        LocationData[playerid][i][locationExists] = false;

        LocationData[playerid][i][locationPos][0] = 0.0;
        LocationData[playerid][i][locationPos][1] = 0.0;
        LocationData[playerid][i][locationPos][2] = 0.0;

        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
        mysql_tquery(g_iHandle, query);
        return 1;
    }
    return 0;
}

stock SetPlayerLookAt(playerid, Float:x, Float:y)
{
    new Float:Px, Float:Py, Float: Pa;
    GetPlayerPos(playerid, Px, Py, Pa);
    Pa = floatabs(atan((y-Py)/(x-Px)));
    if(x <= Px && y >= Py) Pa = floatsub(180, Pa);
    else if(x < Px && y < Py) Pa = floatadd(Pa, 180);
    else if(x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
    Pa = floatsub(Pa, 90.0);
    if(Pa >= 360.0) Pa = floatsub(Pa, 360.0);
    SetPlayerFacingAngle(playerid, Pa);
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 1000)
{
    if(PlayerData[playerid][pFreeze])
    {
        stop PlayerData[playerid][pFreezeTimer];
        PlayerData[playerid][pFreeze] = 0;
        TogglePlayerControllable(playerid, 1);
    }
    Streamer_ToggleIdleUpdate(playerid,1);
    TogglePlayerControllable(playerid, 0);
    Streamer_UpdateEx(playerid, x, y, z);
    SetCameraBehindPlayer(playerid);
    PlayerData[playerid][pFreeze] = 1;
    SetPlayerPos(playerid, x, y, z + 0.5);
    PlayerData[playerid][pFreezeTimer] = defer SetPlayerToUnfreeze[time](playerid);
    Player_ToggleTelportAntiCheat(playerid, true);
    return 1;
}

Player_ToggleTelportAntiCheat(playerid, bool:toggle)
{
    if (!IsPlayerConnected(playerid))
    {
        return 0;
    }

    EnableAntiCheatForPlayer(playerid, 2, toggle);
    EnableAntiCheatForPlayer(playerid, 3, toggle);
    return 1;
}

Player_ToggleAntiHealthHack(playerid, bool:toggle)
{
    EnableAntiCheatForPlayer(playerid, 11, toggle);
    EnableAntiCheatForPlayer(playerid, 12, toggle);
    EnableAntiCheatForPlayer(playerid, 13, toggle);
    return 1;
}

Player_ToggleAntiAmmoHack(playerid, bool:toggle) {
    EnableAntiCheatForPlayer(playerid, 16, toggle);
    EnableAntiCheatForPlayer(playerid, 17, toggle);
    return 1;
}

// stock SetPlayerArmour(playerid, Float:armour) {
//     PlayerData[playerid][pArmorStatus] = armour;
//     return SetPlayerArmour(playerid, armour);
// }

// stock SetPlayerHealth(playerid, Float:health) {
//     PlayerData[playerid][pHealth] = health;
//     return SetPlayerHealth(playerid, health);
// }

/*Function:SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
        return 0;

    PlayerData[playerid][pFreeze] = 0;
    SetPlayerPos(playerid, x, y, z);
    TogglePlayerControllable(playerid, 1);
    return 1;
}*/

Function:OnLightFlash(vehicleid)
{
    new panels, doors, lights, tires;
    new id = -1;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

    switch(Flash[vehicleid])
    {
        case 0: {
            if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) UpdateVehicleDamageStatus(vehicleid, 0, 0, 2, tires);
            else UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
        }
        case 1: {
            if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) UpdateVehicleDamageStatus(vehicleid, 0, 0, 5, tires);
            else UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
        }
        case 2: {
            if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) UpdateVehicleDamageStatus(vehicleid, 0, 0, 2, tires);
            else UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
        }
        case 3: {
            if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) UpdateVehicleDamageStatus(vehicleid, 0, 0, 4, tires);
            else UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
        }
        case 4: {
            if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) UpdateVehicleDamageStatus(vehicleid, 0, 0, 5, tires);
            else UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
        }
        case 5: {
            if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) UpdateVehicleDamageStatus(vehicleid, 0, 0, 4, tires);
            else UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
        }
    }
    if (Flash[vehicleid] >= 5) Flash[vehicleid] = 0;
    else Flash[vehicleid] ++;
    return 1;
}

// public OnVehicleMod(playerid, vehicleid, componentid)
// {    
//     return 1;
// }


/*// forward OnIncomingPacket(playerid, packetid, BitStream:bs)
public OnIncomingPacket(playerid, packetid, BitStream:bs)
{
    printf("Incoming packet with playerid [%d], packetid [%d], BitStream [%s]", playerid, packetid, bs);
    return 1;
}

//forward OnIncomingRPC(playerid, rpcid, BitStream:bs)
public OnIncomingRPC(playerid, rpcid, BitStream:bs)

{
    printf("Incoming packet with playerid [%d], packetid [%d], BitStream [%s]", playerid, rpcid, bs);
    return 1;
}

public OnOutcomingPacket(playerid, packetid, BitStream:bs)
{
    printf("Outcoming packet with playerid [%d], packetid [%d], BitStream [%s]", playerid, packetid, bs);
    return 1;
}

public OnOutcomingRPC(playerid, rpcid, BitStream:bs);
{
    printf("Outcoming packet with playerid [%d], packetid [%d], BitStream [%s]", playerid, rpcid, bs);
    return 1;
}*/

Function:RefillUpdate(playerid, vehicleid)
{
    if(!PlayerData[playerid][pFuelCan] || GetNearestVehicleToPlayer(playerid,4.0,false) != vehicleid)
        return 0;

    CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15.0 >= 100.0) ? (100.0) : (CoreVehicles[vehicleid][vehFuel] + 15.0);

    PlayerData[playerid][pFuelCan] = 0;
    SendServerMessage(playerid, "You have filled up your vehicle with a can of fuel.");
    return 1;
}

ViewCharges(playerid, name[])
{
    new
        string[128];

    format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
    mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
    return 1;
}

AddWarrant(targetid, playerid, const description[])
{
    new
        string[512];

    format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
    mysql_tquery(g_iHandle, string);
}

ShowCharacterMenu(playerid)
{
    new character_list[MAX_CHARACTERS * 100], character_count, Cache:check, lastlogin, level;


    strcat(character_list, "Name\tLevel\tLast Login\n");
    for (new i; i < MAX_CHARACTERS; i ++) if(CharacterList[playerid][i][0] != EOS) {
        check = mysql_query(g_iHandle, sprintf("SELECT `LoginDate`, `pScore` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(CharacterList[playerid][i])));
        
        for (new j = 0; j < cache_num_rows(); j ++) {
            cache_get_value_int(j, "LoginDate", lastlogin);
            cache_get_value_int(j, "pScore", level);
            strcat(character_list, sprintf("%s\t%d\t%s\n", CharacterList[playerid][i], level, ConvertTimestamp(Time:lastlogin)));
            character_count++;
        }

        cache_delete(check);
    }

    if(character_count < MAX_CHARACTERS)
        strcat(character_list, "<New Character>");

    Dialog_Show(playerid, SelectCharacter, DIALOG_STYLE_TABLIST_HEADERS, "Character List", character_list, "Select", "Quit");
    return 1;
}

Dialog:SelectCharacter(playerid, response, listitem, inputtext[]) 
{
    if (!response)  
        return KickEx(playerid);

    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(AccountData[i][pUsername][0] != EOS)
    {
        if(!strcmp(AccountData[i][pUsername], ReturnName(playerid)) && i != playerid)
        {
            SendServerMessage(playerid, "Seseorang sedang login menggunakan UCP yang sama.");
            KickEx(playerid);
            return 1;
        }
    }

    if (listitem != -1) {
        if (CharacterList[playerid][listitem][0] == EOS)
            return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Masukkan nama karakter, maksimal 24 karakter\n\nContoh: "YELLOW"George_Kenword, Dylan_Carter, Paul_Raymond, Bam_Mazino dan lainnya.", "Create", "Back");

        PlayerData[playerid][pCharacter] = listitem;
        SetPlayerName(playerid, CharacterList[playerid][listitem]);

        if(!Blacklist_Check(playerid, "Characters", ReturnName(playerid))) {
            mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s' ORDER BY `ID` ASC LIMIT 1;", SQL_ReturnEscaped(CharacterList[playerid][PlayerData[playerid][pCharacter]])), "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTERS);
        }
    }
    return 1;
}

Dialog:CreateChar(playerid, response, listitem, inputtext[]) 
{
    if (!response)
        return ShowCharacterMenu(playerid);
    
    if (!IsValidRoleplayName(inputtext) || strlen(inputtext) <= 3) {
        SendClientMessage(playerid, COLOR_WHITE, "Nama harus sesuai dengan aturan Roleplay, contoh: Eddison_Murphy, Paul_Raymond, Isbella_Charlotte");
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Masukkan nama karakter, maksimal 24 karakter\n\nContoh: "YELLOW"Eddison_Murphy, Paul_Raymond, Isbella_Charlotte dan lainnya.", "Create", "Back");
    }

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character` = '%s' LIMIT 1;", inputtext), "OnCharacterCheck", "is", playerid, inputtext);
    return 1;
}

Function:OnCharacterCheck(playerid, charaname[]) 
{
    if (!cache_num_rows()) 
    {
        new create_char[1024];

        mysql_format(g_iHandle, create_char, sizeof(create_char), "INSERT INTO `characters` (`Username`, `password`, `salt`, `Character`, `CreateDate`) VALUES ('%s', '%s', '%s', '%s', '%i')", SQL_ReturnEscaped(AccountData[playerid][pUsername]), SQL_ReturnEscaped(AccountData[playerid][pPassword]), SQL_ReturnEscaped(AccountData[playerid][pSalt]), SQL_ReturnEscaped(charaname), gettime());
        mysql_tquery(g_iHandle, create_char);

        for (new i; i < MAX_CHARACTERS; i ++) if(CharacterList[playerid][i][0] == EOS) {
            strcat(CharacterList[playerid][i], charaname);
            break;
        }

        ShowCharacterMenu(playerid);
        SendServerMessage(playerid, "Karakter baru telah dibuat, kami akan memuat ulang semua karaktermu.");
        return 1;
    }

    SendClientMessage(playerid, COLOR_WHITE, "Nama tersebut sudah terpakai! Silahkan ganti nama yang lain.");
    Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Create Character", WHITE"Masukkan nama karakter, maksimal 24 karakter\n\nContoh: "YELLOW"Eddison_Murphy, Paul_Raymond, Isbella_Charlotte dan lainnya.", "Create", "Back");
    return 1;
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
    new
        id = -1;

    if((id = House_Inside(playerid)) != -1)
    {
        fX = HouseData[id][housePos][0];
        fY = HouseData[id][housePos][1];
        fZ = HouseData[id][housePos][2];
    }
    else if((id = Business_Inside(playerid)) != -1)
    {
        fX = BusinessData[id][bizPos][0];
        fY = BusinessData[id][bizPos][1];
        fZ = BusinessData[id][bizPos][2];
    }
    else if((id = Entrance_Inside(playerid)) != -1)
    {
        fX = EntranceData[id][entrancePos][0];
        fY = EntranceData[id][entrancePos][1];
        fZ = EntranceData[id][entrancePos][2];
    }
    else GetPlayerPos(playerid, fX, fY, fZ);
    return 1;
}

GetPlayerLocation(playerid)
{
    new
        Float:fX,
        Float:fY,
        Float:fZ,
        string[32],
        id = -1;

    if((id = House_Inside(playerid)) != -1)
    {
        fX = HouseData[id][housePos][0];
        fY = HouseData[id][housePos][1];
        fZ = HouseData[id][housePos][2];
    }
    else if((id = Business_Inside(playerid)) != -1)
    {
        fX = BusinessData[id][bizPos][0];
        fY = BusinessData[id][bizPos][1];
        fZ = BusinessData[id][bizPos][2];
    }
    else if((id = Entrance_Inside(playerid)) != -1)
    {
        fX = EntranceData[id][entrancePos][0];
        fY = EntranceData[id][entrancePos][1];
        fZ = EntranceData[id][entrancePos][2];
    }
    else GetPlayerPos(playerid, fX, fY, fZ);

    format(string, 32, GetLocation(fX, fY, fZ));
    return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
    {
        e_ZoneName[32 char],
        Float:e_ZoneArea[6]
    };
    static const g_arrZoneData[][e_ZoneData] =
    {
        {!"The Big Ear",                {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
        {!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
        {!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
        {!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
        {!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
        {!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
        {!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
        {!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
        {!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
        {!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
        {!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
        {!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
        {!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
        {!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
        {!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
        {!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
        {!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
        {!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
        {!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
        {!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
        {!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
        {!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
        {!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
        {!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
        {!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
        {!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
        {!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
        {!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
        {!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
        {!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
        {!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
        {!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
        {!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
        {!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
        {!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
        {!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
        {!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
        {!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
        {!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
        {!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
        {!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
        {!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
        {!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
        {!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
        {!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
        {!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
        {!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
        {!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
        {!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
        {!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
        {!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
        {!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
        {!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
        {!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
        {!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
        {!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
        {!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
        {!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
        {!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
        {!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
        {!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
        {!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
        {!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
        {!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
        {!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
        {!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
        {!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
        {!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
        {!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
        {!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
        {!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
        {!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
        {!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
        {!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
        {!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
        {!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
        {!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
        {!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
        {!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
        {!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
        {!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
        {!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
        {!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
        {!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
        {!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
        {!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
        {!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
        {!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
        {!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
        {!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
        {!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
        {!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
        {!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
        {!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
        {!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
        {!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
        {!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
        {!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
        {!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
        {!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
        {!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
        {!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
        {!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
        {!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
        {!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
        {!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
        {!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
        {!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
        {!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
        {!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
        {!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
        {!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
        {!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
        {!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
        {!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
        {!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
        {!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
        {!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
        {!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
        {!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
        {!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
        {!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
        {!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
        {!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
        {!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
        {!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
        {!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
        {!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
        {!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
        {!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
        {!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
        {!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
        {!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
        {!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
        {!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
        {!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
        {!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
        {!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
        {!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
        {!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
        {!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
        {!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
        {!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
        {!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
        {!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
        {!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
        {!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
        {!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
        {!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
        {!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
        {!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
        {!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
        {!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
        {!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
        {!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
        {!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
        {!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
        {!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
        {!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
        {!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
        {!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
        {!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
        {!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
        {!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
        {!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
        {!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
        {!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
        {!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
        {!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
        {!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
        {!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
        {!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
        {!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
        {!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
        {!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
        {!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
        {!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
        {!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
        {!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
        {!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
        {!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
        {!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
        {!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
        {!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
        {!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
        {!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
        {!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
        {!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
        {!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
        {!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
        {!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
        {!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
        {!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
        {!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
        {!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
        {!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
        {!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
        {!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
        {!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
        {!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
        {!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
        {!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
        {!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
        {!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
        {!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
        {!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
        {!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
        {!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
        {!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
        {!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
        {!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
        {!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
        {!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
        {!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
        {!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
        {!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
        {!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
        {!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
        {!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
        {!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
        {!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
        {!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
        {!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
        {!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
        {!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
        {!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
        {!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
        {!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
        {!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
        {!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
        {!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
        {!"Valley Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
        {!"Valley Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
        {!"Valley Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
        {!"Valley Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
        {!"Valley Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
        {!"Valley Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
        {!"Valley Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
        {!"Valley Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
        {!"Valley Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
        {!"Valley Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
        {!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
        {!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
        {!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
        {!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
        {!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
        {!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
        {!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
        {!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
        {!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
        {!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
        {!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
        {!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
        {!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
        {!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
        {!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
        {!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
        {!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
        {!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
        {!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
        {!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
        {!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
        {!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
        {!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
        {!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
        {!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
        {!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
        {!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
        {!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
        {!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
        {!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
        {!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
        {!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
        {!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
        {!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
        {!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
        {!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
        {!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
        {!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
        {!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
        {!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
        {!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
        {!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
        {!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
        {!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
        {!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
        {!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
        {!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
        {!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
        {!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
        {!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
        {!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
        {!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
        {!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
        {!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
        {!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
        {!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
        {!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
        {!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
        {!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
        {!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
        {!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
        {!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
        {!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
        {!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
        {!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
        {!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
        {!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
        {!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
        {!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
        {!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
        {!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
        {!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
        {!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
        {!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
        {!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
        {!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
        {!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
        {!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
        {!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
        {!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
        {!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
        {!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
        {!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
        {!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
        {!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
        {!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
        {!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
        {!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
        {!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
        {!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
        {!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
        {!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
        {!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
        {!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
        {!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
        {!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
        {!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
        {!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
        {!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
        {!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
        {!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
        {!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
        {!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
        {!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
        {!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
        {!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
        {!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
        {!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
        {!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
        {!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
        {!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
        {!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
        {!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
        {!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
        {!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
        {!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
        {!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
        {!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
        {!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
        {!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
        {!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
        {!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
        {!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
        {!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
    };
    new
        name[32] = "San Andreas";

    for (new i = 0; i != sizeof(g_arrZoneData); i ++) if((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
        strunpack(name, g_arrZoneData[i][e_ZoneName]);

        break;
    }
    return name;
}

SelectTextDrawEx(playerid, hovercolor)
{
    PlayerTemp[playerid][temp_selecttextdraw] = true;
    SelectTextDraw(playerid, hovercolor);
    return 1;
}

CancelSelectTextDrawEx(playerid)
{
    PlayerTemp[playerid][temp_selecttextdraw] = false;
    CancelSelectTextDraw(playerid);
    return 1;
}

DestroyPlayerTextDraws(playerid)
{
    for(new i; i < sizeof(PlayerTextdraws[]); i++)
    {
        if(Text:PlayerTextdraws[playerid][playerTextraws:i] == Text:INVALID_TEXT_DRAW) continue;
        PlayerTextDrawDestroy(playerid, PlayerText:PlayerTextdraws[playerid][playerTextraws:i]);
        PlayerTextdraws[playerid][playerTextraws:i] = _:INVALID_TEXT_DRAW;
    }
    return 1;
}

ShowClothesTextdraw(playerid)
{
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][0]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][1]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][2]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][3]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][4]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_clothes][5]);
    return 1;
}

HideClothesTextdraw(playerid)
{
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][0]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][1]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][2]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][3]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][4]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_clothes][5]);

    CancelSelectTextDrawEx(playerid);
    return 1;
}

Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(targetid, x, y, z);
    return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

// Detector_Delete(id)
// {
//     if(id != -1 && MetalDetectors[id][detectorExists])
//     {
//         DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
//         DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

//         mysql_tquery(g_iHandle, sprintf("DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]));

//         MetalDetectors[id][detectorID] = 0;
//         MetalDetectors[id][detectorExists] = 0;
//         MetalDetectors[id][detectorObject][0] = MetalDetectors[id][detectorObject][1] = INVALID_STREAMER_ID;
//     }
//     return 1;
// }

// Detector_Refresh(id)
// {
//     if(id != -1 && MetalDetectors[id][detectorExists])
//     {
//         MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
//         MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
//     }
//     return 1;
// }

// Detector_Nearest(playerid)
// {
//     for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if(MetalDetectors[i][detectorExists])
//     {
//         if(IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
//         return i;
//     }
//     return -1;
// }

/* IsPlayerArmed(playerid)
{
    new
        weapon,
        ammo;

    for (new i = 0; i < 13; i ++) {
        GetPlayerWeaponData(playerid, i, weapon, ammo);

        if(ammo > 0) {
            switch (weapon) {
                    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
            }
        }
    }
    return 0;
} */

PlayerPlaySoundEx(playerid, sound, forall = 0)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    if(forall) return PlayerPlaySound(playerid, sound, x, y, z);

    foreach (new i : Player) if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
        PlayerPlaySound(i, sound, x, y, z);
    }
    return 1;
}

CancelCall(playerid)
{
    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
    {
        PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
        PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

        PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
        PlayerData[playerid][pIncomingCall] = 0;
    }
    return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
    switch (weaponid)
    {
        case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
        case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
        case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
        case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
        case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
        case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
        case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
    }
    return 1;
}

LeaveTaxi(playerid, driverid)
{
    if(driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
    {
        GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
        GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

        SendCustomMessage(playerid, "TAXI","Anda telah membayar "GREEN"%s"WHITE" kepada pengemudi taxi.", FormatNumber(PlayerData[playerid][pTaxiFee]));
        SendCustomMessage(driverid, "TAXI","Anda mendapat bayaran "GREEN"%s"WHITE" dari "YELLOW"%s "WHITE"sebagai penumpang.", FormatNumber(PlayerData[playerid][pTaxiFee]), ReturnName(playerid, 0));

        Log_Write("logs/leavetaxi.txt", "[%s] %s turun dari taxi dengan pengemudi %s. bayaran %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(driverid, 0), FormatNumber(PlayerData[playerid][pTaxiFee]));

        PlayerData[playerid][pTaxiFee] = 0;
        PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pTaxiRunDistance] = 0;
    }
    return 1;
}

IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
    }
    return 0;
}

GetFurnitureNameByModel(model)
{
    new
        name[32];

    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(g_aFurnitureData[i][e_FurnitureModel] == model) {
        strcat(name, g_aFurnitureData[i][e_FurnitureName]);

        break;
    }
    return name;
}

GetStructureNameByModel(model) {
    new name[32];

    for (new i = 0; i < sizeof(g_aHouseStructure); i ++) if (g_aHouseStructure[i][e_StructureModel] == model) {
        strcat(name, g_aHouseStructure[i][e_StructureName]);
        break;
    }
    return name;
}

GetAksesorisNameByModel(model)
{
    new
        name[32];

    for (new i = 0; i < sizeof(accList); i ++) if(accList[i][accListModel] == model) {
        strcat(name, accList[i][accListName]);

        break;
    }
    return name;
}

IsPumpOccupied(pumpid)
{
    foreach (new i : Player) if(PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
        if(PlayerData[i][pGasPump] == pumpid) return 1;
    }
    return 0;
}

ShowHungerTextdraw(playerid)
{
    if(PlayerData[playerid][pTogHud] == 1)
    {
        PlayerData[playerid][pTogHud] = 0;

        TogglePlayerGUI(playerid, true);

        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                ShowPlayerProgressBar(playerid, PlayerData[playerid][hungry]);
                ShowPlayerProgressBar(playerid, PlayerData[playerid][energy]);
            }
            case 2: {
                PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], ConvertHBEColor(floatround(PlayerData[playerid][pHunger])));
                PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], ConvertHBEColor(floatround(PlayerData[playerid][pEnergy])));
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], sprintf("%.0f%",PlayerData[playerid][pHunger]));
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], sprintf("%.0f%",PlayerData[playerid][pEnergy]));
            }
        }

        //Map update
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_map]);

        //Time GUI
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_timegui][0]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_timegui][1]);
    } 
    else
    {
        PlayerData[playerid][pTogHud] = 1;

        TogglePlayerGUI(playerid, false);
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                HidePlayerProgressBar(playerid, PlayerData[playerid][hungry]);
                HidePlayerProgressBar(playerid, PlayerData[playerid][energy]);
            }
            case 2: {
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
            }
        }

        //Map Update
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_map]);

        //Time GUI
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_timegui][0]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_timegui][1]);
    }
    return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
    new
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(targetid, x, y, z);

    if(IsPlayerInAnyVehicle(playerid))
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
    }
    else
    {
        SetPlayerPosEx(playerid, x + 1, y, z);
    }
    SetPlayerInterior(playerid, GetPlayerInterior(targetid));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

    PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
    PlayerData[playerid][pApartment] = PlayerData[targetid][pApartment];
    PlayerData[playerid][pApartmentRoom] = PlayerData[targetid][pApartmentRoom];
    PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
    PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
    PlayerData[playerid][pGarage] = PlayerData[targetid][pGarage];
    PlayerData[playerid][pFurnStore] = PlayerData[targetid][pFurnStore];
    PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
    return 1;
}

StopRefilling(playerid)
{
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pRefillPrice] = 0;
}

SetAccessories(playerid)
{
    if(Inventory_HasItem(playerid, "Backpack")) SetPlayerAttachedObject(playerid, 8, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
    else RemovePlayerAttachedObject(playerid, 8);
}

// GetClosestEntrance(playerid, type)
// {
//     new
//         Float:fDistance[2] = {99999.0, 0.0},
//         iIndex = -1
//     ;
//     for (new i = 0; i < MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
//     {
//         fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

//         if(fDistance[1] < fDistance[0])
//         {
//             fDistance[0] = fDistance[1];
//             iIndex = i;
//         }
//     }
//     return iIndex;
// }

// GetClosestJob(playerid, type)
// {
//     new
//         Float:fDistance[2] = {99999.0, 0.0},
//         iIndex = -1
//     ;
//     for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
//     {
//         fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

//         if(fDistance[1] < fDistance[0])
//         {
//             fDistance[0] = fDistance[1];
//             iIndex = i;
//         }
//     }
//     return iIndex;
// }

/*GetClosestHospital(playerid)
{
    new
        Float:fDistance[2] = {99999.0, 0.0},
        iIndex = -1
    ;
    for (new i = 0; i < sizeof(arrHospitalSpawn); i ++)
    {
        fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawn[i][0], arrHospitalSpawn[i][1], arrHospitalSpawn[i][2]);

        if(fDistance[1] < fDistance[0])
        {
            fDistance[0] = fDistance[1];
            iIndex = i;
        }
    }
    return iIndex;
}*/

IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
        0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
        325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
        353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
        367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if(g_aWeaponModels[i] == model) {
        return 1;
    }
    return 0;
}

GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
        0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
        325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
        353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
        367, 368, 368, 371
    };
    if(0 < weaponid < 46)
        return g_aWeaponModels[weaponid];

    return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
    if(itemid == -1 || !InventoryData[playerid][itemid][invExists])
        return 0;

    new
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        string[32];

    strunpack(string, InventoryData[playerid][itemid][invItem]);

    if(InventoryData[playerid][itemid][invQuantity] < 2)
    {
        if(!strcmp(string, "Cellphone") && PlayerData[playerid][pPhone])
            PlayerData[playerid][pPhone] = 0;
    }
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
    Inventory_Remove(playerid, string, quantity);

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
    SendServerMessage(playerid, "You have "YELLOW"dropped"WHITE" a \"%s\".", string);
    return 1;
}

DropItem(item[], player[], model, quantity = 0, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0, durability = 0)
{
    new
        query[1024];

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(!DroppedItems[i][droppedModel])
    {
        format(DroppedItems[i][droppedItem], 32, item);
        format(DroppedItems[i][droppedPlayer], 24, player);

        DroppedItems[i][droppedModel] = model;
        DroppedItems[i][droppedQuantity] = quantity;
        DroppedItems[i][droppedWeaponId] = weaponid;
        DroppedItems[i][droppedAmmo] = ammo;
        DroppedItems[i][droppedDurability] = durability;
        DroppedItems[i][droppedPos][0] = x;
        DroppedItems[i][droppedPos][1] = y;
        DroppedItems[i][droppedPos][2] = z;

        DroppedItems[i][droppedInt] = interior;
        DroppedItems[i][droppedWorld] = world;

        DroppedItems[i][droppedTime] = gettime();

        if(IsWeaponModel(model)) {
            DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
        } else {
            DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
        }
        if(strcmp(item, "Kunci Gubuk") != 0)
        {
            format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`, `itemTime`, `itemDurability`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world, DroppedItems[i][droppedTime], durability);
            mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
        }
        DroppedItems[i][droppedLabel] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], 0xFFFFFFAA, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 5, _, _, _, DroppedItems[i][droppedWorld],DroppedItems[i][droppedInt]);
        //DroppedItems[i][droppedLabel2] = CreateDynamic3DTextLabel("Press "YELLOW"C"WHITE" to squat and press"YELLOW"N"WHITE"to get your items" , 0xFFFFFFAA, DroppedItems[i][droppedPos][0] + 2, DroppedItems[i][droppedPos][1] + 2, DroppedItems[i][droppedPos][2] + 2, 5, _, _, _,  DroppedItems[i][droppedWorld],DroppedItems[i][droppedInt]);
        //DroppedItems[i][droppedLabel] = CreateDynamic3DTextLabel(sprintf("Press ""C""to squat down and press ""Y""to get your items!");
        return i;
    }
    return -1;
}

DropPlayerWeapon(playerid, weaponid, ammo, durability) {
    new Float:pos[3],
        vw = GetPlayerVirtualWorld(playerid),
        int = GetPlayerInterior(playerid),
        model = GetWeaponModel(weaponid);

    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    DropItem(sprintf("%s", ReturnWeaponName(weaponid)), ReturnName(playerid, 0), model, 1, pos[0], pos[1], pos[2]-0.9, int, vw, weaponid, ammo, durability);
    ResetWeaponID(playerid, weaponid);
    return 1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
    {
        if(GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
        return i;
    }
    return -1;
}

Item_SetQuantity(itemid, amount)
{
    new
        string[256];

    if(itemid != -1 && DroppedItems[itemid][droppedModel])
    {
        DroppedItems[itemid][droppedQuantity] = amount;

        format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
        mysql_tquery(g_iHandle, string);
    }
    return 1;
}

Item_Delete(itemid)
{
    if(itemid != -1 && DroppedItems[itemid][droppedModel])
    {
        DroppedItems[itemid][droppedModel] = 0;
        DroppedItems[itemid][droppedQuantity] = 0;
        DroppedItems[itemid][droppedPos][0] = 0.0;
        DroppedItems[itemid][droppedPos][1] = 0.0;
        DroppedItems[itemid][droppedPos][2] = 0.0;
        DroppedItems[itemid][droppedInt] = 0;
        DroppedItems[itemid][droppedWorld] = 0;
        DroppedItems[itemid][droppedTime] = 0;
        DroppedItems[itemid][droppedWeaponId] = 0;
        DroppedItems[itemid][droppedAmmo] = 0;
        DroppedItems[itemid][droppedDurability] = 0;

        DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
        DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedLabel]);

        DroppedItems[itemid][droppedObject] = INVALID_STREAMER_ID;
        DroppedItems[itemid][droppedLabel] = Text3D:INVALID_STREAMER_ID;

        mysql_tquery(g_iHandle, sprintf("DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]));
    }
    return 1;
}

PickupItem(playerid, itemid)
{
    if(itemid != -1 && DroppedItems[itemid][droppedModel])
    {
        new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any inventory slots left.");

        Item_Delete(itemid);
    }
    return 1;
}

/*SetFactionMarker(playerid, type, color)
{
        foreach (new i : Player) if(GetFactionType(i) == type) {
            SetPlayerMarkerForPlayer(i, playerid, color);
    }

    PlayerData[playerid][pMarker] = 1;
    SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
    return 1;
}*/

Faction_GetName(playerid)
{
    new
        factionid = PlayerData[playerid][pFaction],
        name[32] = "None";

    if(factionid == -1)
        return name;

    format(name, 32, FactionData[factionid][factionName]);
    return name;
}

Faction_GetRank(playerid)
{
    new
        factionid = PlayerData[playerid][pFaction],
        rank[24] = "None";

    if(factionid == -1)
        return rank;

    format(rank, 24, "%s", PlayerData[playerid][pFactionRankName]);
    return rank;
}

/*Faction_GetDataRank(factid, rankid) {
    new
        rank[32] = "None";

    if(factid == -1)
        return rank;

    format(rank, 32, FactionRanks[factid][rankid <= 0 ? 0 : rankid - 1]);
    return rank;
}*/

Arrest_Delete(arrestid)
{
    if(arrestid != -1 && ArrestData[arrestid][arrestExists])
    {
        static
            string[64];

        if(IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
            DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

        if(IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
            DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

        format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
        mysql_tquery(g_iHandle, string);

        ArrestData[arrestid][arrestExists] = false;
        ArrestData[arrestid][arrestID] = 0;
        ArrestData[arrestid][arrestPickup] = INVALID_STREAMER_ID;
        ArrestData[arrestid][arrestText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
    for (new i = 0; i < MAX_ARREST_POINTS; i ++) if(!ArrestData[i][arrestExists])
    {
        ArrestData[i][arrestExists] = true;
        ArrestData[i][arrestPos][0] = x;
        ArrestData[i][arrestPos][1] = y;
        ArrestData[i][arrestPos][2] = z;
        ArrestData[i][arrestInterior] = interior;
        ArrestData[i][arrestWorld] = world;

        mysql_tquery(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
        Arrest_Refresh(i);
        return i;
    }
    return -1;
}

Arrest_Save(arrestid)
{
    static
        query[220];

    format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
        ArrestData[arrestid][arrestPos][0],
        ArrestData[arrestid][arrestPos][1],
        ArrestData[arrestid][arrestPos][2],
        ArrestData[arrestid][arrestInterior],
        ArrestData[arrestid][arrestWorld],
        ArrestData[arrestid][arrestID]
    );
    return mysql_tquery(g_iHandle, query);
}

Arrest_Refresh(arrestid)
{
    if(arrestid != -1 && ArrestData[arrestid][arrestExists])
    {
        static
            string[64];

        if(IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
            DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

        if(IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
            DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

        format(string, sizeof(string), "[Arrest %d]\n"WHITE"/arrest to arrest the suspect.", arrestid);

        ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
        ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
    }
    return 1;
}

// Rack_Save(rackid)
// {
//     static
//         query[512];

//     format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
//         RackData[rackid][rackHouse],
//         RackData[rackid][rackPos][0],
//         RackData[rackid][rackPos][1],
//         RackData[rackid][rackPos][2],
//         RackData[rackid][rackPos][3],
//         RackData[rackid][rackInterior],
//         RackData[rackid][rackWorld],
//         RackData[rackid][rackWeapons][0],
//         RackData[rackid][rackWeapons][1],
//         RackData[rackid][rackWeapons][2],
//         RackData[rackid][rackWeapons][3],
//         RackData[rackid][rackAmmo][0],
//         RackData[rackid][rackAmmo][1],
//         RackData[rackid][rackAmmo][2],
//         RackData[rackid][rackAmmo][3],
//         RackData[rackid][rackID]
//     );
//     return mysql_tquery(g_iHandle, query);
// }

// Rack_Nearest(playerid)
// {
//     for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if(RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
//     {
//         if(GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
//         return i;
//     }
//     return -1;
// }

/* Rack_Count(houseid)
{
    new count;

    for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if(RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
        count++;
    }
    return count;
} */

/* Rack_ShowGuns(playerid, rackid)
{
    if(rackid != -1 && RackData[rackid][rackExists])
    {
        new
        string[128];

        for (new i = 0; i < 4; i ++)
        {
            if(!RackData[rackid][rackWeapons][i])
                format(string, sizeof(string), "%s%d: Empty Slot\n", string, i + 1);

            else format(string, sizeof(string), "%s%d: %s - %d bullets\n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
        }
        Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Weapon Rack", string, "Select", "Cancel");
    }
    return 1;
} */

// Rack_Delete(rackid)
// {
//     if(rackid != -1 && RackData[rackid][rackExists])
//     {
//         mysql_tquery(g_iHandle, sprintf("DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]));

//         for (new i = 0; i < 5; i ++) if(IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
//             DestroyDynamicObject(RackData[rackid][rackObjects][i]);
//             RackData[rackid][rackObjects][i] = INVALID_STREAMER_ID;
//         }

//         if(IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) 
//             DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);

//         RackData[rackid][rackExists] = false;
//         RackData[rackid][rackID] = 0;
//         RackData[rackid][rackHouse] = 0;
//         RackData[rackid][rackText3D] = Text3D:INVALID_STREAMER_ID;
//     }
//     return 1;
// }

// Rack_Create(playerid, houseid)
// {
//     static
//         Float:x,
//         Float:y,
//         Float:z,
//         Float:angle;

//     if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
//     {
//         for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if(!RackData[i][rackExists])
//         {
//             x += 1.5 * floatsin(-angle, degrees);
//             y += 1.5 * floatcos(-angle, degrees);

//             RackData[i][rackExists] = true;
//             RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

//             RackData[i][rackPos][0] = x;
//             RackData[i][rackPos][1] = y;
//             RackData[i][rackPos][2] = z;
//             RackData[i][rackPos][3] = angle;
//             RackData[i][rackInterior] = GetPlayerInterior(playerid);
//             RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

//             Rack_Refresh(i);
//             mysql_tquery(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

//             return i;
//         }
//     }
//     return -1;
// }

// Rack_RefreshGuns(rackid)
// {
//     if(rackid != -1 && RackData[rackid][rackExists])
//     {
//         new
//             Float:x,
//         Float:y,
//         Float:z;

//         z = RackData[rackid][rackPos][2] + 2.19;

//         for (new i = 0; i < 4; i ++) if(IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
//             DestroyDynamicObject(RackData[rackid][rackObjects][i]);
//             RackData[rackid][rackObjects][i] = INVALID_STREAMER_ID;
//         }
//         for (new i = 0; i < 4; i ++)
//         {
//             if(RackData[rackid][rackWeapons][i])
//             {
//                 x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
//                 y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

//                 RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
//             }
//             else RackData[rackid][rackObjects][i] = INVALID_STREAMER_ID;

//             z = z - 0.69;
//         }
//     }
//     return 1;
// }

// Rack_Refresh(rackid)
// {
//     if(rackid != -1 && RackData[rackid][rackExists])
//     {
//         if(IsValidDynamicObject(RackData[rackid][rackObjects][4])) 
//             DestroyDynamicObject(RackData[rackid][rackObjects][4]);

//         if(IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) 
//             DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);

//         RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(sprintf("[Rack %d]\n"WHITE"/gunrack to use this rack.", rackid), COLOR_CLIENT, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

//         Rack_RefreshGuns(rackid);
//         RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
//     }
//     return 1;
// }
//-------------------------------------------

// Function:Detector_Load()
// {
//     static
//         rows,
//         fields;

//     cache_get_data(rows, fields, g_iHandle);

//     for (new i = 0; i < rows; i ++) if(i < MAX_METAL_DETECTORS)
//     {
//         MetalDetectors[i][detectorExists] = 1;
//         MetalDetectors[i][detectorID] = cache_get_value_int(i, "detectorID");
//         MetalDetectors[i][detectorPos][0] = cache_get_value_float(i, "detectorX");
//         MetalDetectors[i][detectorPos][1] = cache_get_value_float(i, "detectorY");
//         MetalDetectors[i][detectorPos][2] = cache_get_value_float(i, "detectorZ");
//         MetalDetectors[i][detectorPos][3] = cache_get_value_float(i, "detectorAngle");
//         MetalDetectors[i][detectorInterior] = cache_get_value_int(i, "detectorInterior");
//         MetalDetectors[i][detectorWorld] = cache_get_value_int(i, "detectorWorld");

//         Detector_Refresh(i);
//     }
//     printf("*** [RV:RP Database: Loaded] detector data (%d count).", rows);
//     return 1;
// }

Function:Speed_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_SPEED_CAMERAS)
    {
        SpeedData[i][speedExists] = true;
        cache_get_value_int(i, "speedID", SpeedData[i][speedID]);
        cache_get_value_float(i, "speedRange", SpeedData[i][speedRange]);
        cache_get_value_float(i, "speedLimit", SpeedData[i][speedLimit]);
        cache_get_value_float(i, "speedX", SpeedData[i][speedPos][0]);
        cache_get_value_float(i, "speedY", SpeedData[i][speedPos][1]);
        cache_get_value_float(i, "speedZ", SpeedData[i][speedPos][2]);
        cache_get_value_float(i, "speedAngle", SpeedData[i][speedPos][3]);

        Speed_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] speedcam data (%d count).", rows);
    return 1;
}

// Function:Rack_Load()
// {
//     static
//         rows,
//         fields,
//         str[24];

//     cache_get_data(rows, fields, g_iHandle);

//     for (new i = 0; i < rows; i ++) if(i < MAX_WEAPON_RACKS)
//     {
//         RackData[i][rackExists] = true;
//         RackData[i][rackID] = cache_get_value_int(i, "rackID");
//         RackData[i][rackHouse] = cache_get_value_int(i, "rackHouse");
//         RackData[i][rackPos][0] = cache_get_value_float(i, "rackX");
//         RackData[i][rackPos][1] = cache_get_value_float(i, "rackY");
//         RackData[i][rackPos][2] = cache_get_value_float(i, "rackZ");
//         RackData[i][rackPos][3] = cache_get_value_float(i, "rackA");
//         RackData[i][rackInterior] = cache_get_value_int(i, "rackInterior");
//         RackData[i][rackWorld] = cache_get_value_int(i, "rackWorld");

//         for (new j = 0; j < 4; j ++) {
//             format(str, 24, "rackWeapon%d", j + 1);
//             RackData[i][rackWeapons][j] = cache_get_value_int(i, str);

//             format(str, 24, "rackAmmo%d", j + 1);
//             RackData[i][rackAmmo][j] = cache_get_value_int(i, str);
//         }
//         Rack_Refresh(i);
//     }
//     printf("*** [RV:RP Database: Loaded] rack data (%d count).", rows);
//     return 1;
// }

Function:Garbage_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_GARBAGE_BINS)
    {
        GarbageData[i][garbageExists] = true;
        cache_get_value_int(i, "garbageID", GarbageData[i][garbageID]);
        cache_get_value_int(i, "garbageModel", GarbageData[i][garbageModel]);
        cache_get_value_int(i, "garbageCapacity", GarbageData[i][garbageCapacity]);
        cache_get_value_float(i, "garbageX", GarbageData[i][garbagePos][0]);
        cache_get_value_float(i, "garbageY", GarbageData[i][garbagePos][1]);
        cache_get_value_float(i, "garbageZ", GarbageData[i][garbagePos][2]);
        cache_get_value_float(i, "garbageA", GarbageData[i][garbagePos][3]);
        cache_get_value_int(i, "garbageInterior", GarbageData[i][garbageInterior]);
        cache_get_value_int(i, "garbageWorld", GarbageData[i][garbageWorld]);

        Garbage_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] garbage data (%d count).", rows);
    return 1;
}

Function:ATM_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_ATM_MACHINES)
    {
        ATMData[i][atmExists] = true;
        cache_get_value_int(i, "atmID", ATMData[i][atmID]);
        cache_get_value_float(i, "atmX", ATMData[i][atmPos][0]);
        cache_get_value_float(i, "atmY", ATMData[i][atmPos][1]);
        cache_get_value_float(i, "atmZ", ATMData[i][atmPos][2]);
        cache_get_value_float(i, "atmA", ATMData[i][atmPos][3]);
        cache_get_value_int(i, "atmInterior", ATMData[i][atmInterior]);
        cache_get_value_int(i, "atmWorld", ATMData[i][atmWorld]);
        ATM_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] atm data (%d count).", rows);
    return 1;
}

Function:Impound_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_IMPOUND_LOTS)
    {
        ImpoundData[i][impoundExists] = true;
        cache_get_value_int(i, "impoundID", ImpoundData[i][impoundID]);
        cache_get_value_float(i, "impoundLotX", ImpoundData[i][impoundLot][0]);
        cache_get_value_float(i, "impoundLotY", ImpoundData[i][impoundLot][1]);
        cache_get_value_float(i, "impoundLotZ", ImpoundData[i][impoundLot][2]);
        cache_get_value_float(i, "impoundReleaseX", ImpoundData[i][impoundRelease][0]);
        cache_get_value_float(i, "impoundReleaseY", ImpoundData[i][impoundRelease][1]);
        cache_get_value_float(i, "impoundReleaseZ", ImpoundData[i][impoundRelease][2]);
        cache_get_value_float(i, "impoundReleaseA", ImpoundData[i][impoundRelease][3]);

        Impound_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] impound data (%d count).", rows);
    return 1;
}

/*Function:Backpack_Load()
{
    static
        rows,
        fields,
        str[64];

    cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i ++) if(i < MAX_BACKPACKS)
    {
        BackpackData[i][backpackExists] = true;
        BackpackData[i][backpackID] = cache_get_value_int(i, "backpackID");
        BackpackData[i][backpackPlayer] = cache_get_value_int(i, "backpackPlayer");
        BackpackData[i][backpackHouse] = cache_get_value_int(i, "backpackHouse");
        BackpackData[i][backpackVehicle] = cache_get_value_int(i, "backpackVehicle");
        BackpackData[i][backpackPos][0] = cache_get_value_float(i, "backpackX");
        BackpackData[i][backpackPos][1] = cache_get_value_float(i, "backpackY");
        BackpackData[i][backpackPos][2] = cache_get_value_float(i, "backpackZ");
        BackpackData[i][backpackInterior] = cache_get_value_int(i, "backpackInterior");
        BackpackData[i][backpackWorld] = cache_get_value_int(i, "backpackWorld");

        if(!BackpackData[i][backpackPlayer]) {
                Backpack_Refresh(i);
        }
    }
    for (new i = 0; i < MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists]) {
        format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

        mysql_tquery(g_iHandle, str, "OnLoadBackpack", "d", i);
    }
    printf("*** [RV:RP Database: Loaded] backpack data (%d count).", rows);
    return 1;
}*/

Function:Arrest_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_ARREST_POINTS)
    {
            ArrestData[i][arrestExists] = true;

            cache_get_value_int(i, "arrestID", ArrestData[i][arrestID]);
            cache_get_value_float(i, "arrestX", ArrestData[i][arrestPos][0]);
            cache_get_value_float(i, "arrestY", ArrestData[i][arrestPos][1]);
            cache_get_value_float(i, "arrestZ", ArrestData[i][arrestPos][2]);
            cache_get_value_int(i, "arrestInterior", ArrestData[i][arrestInterior]);
            cache_get_value_int(i, "arrestWorld", ArrestData[i][arrestWorld]);

            Arrest_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] arrest data (%d count).", rows);
    return 1;
}

Function:Faction_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_FACTIONS)
    {
        FactionData[i][factionExists] = true;
        cache_get_value_int(i, "factionID", FactionData[i][factionID]);

        cache_get_value(i, "factionName", FactionData[i][factionName], 32);
        cache_get_value(i, "factionWithdraw", FactionData[i][factionWithdraw], MAX_PLAYER_NAME);
        cache_get_value(i, "factionDeposit", FactionData[i][factionDeposit], MAX_PLAYER_NAME);
        cache_get_value(i, "factionMotd", FactionData[i][factionMotd], 225);

        cache_get_value_int(i, "factionColor", FactionData[i][factionColor]);
        cache_get_value_int(i, "factionType", FactionData[i][factionType]);
        cache_get_value_int(i, "factionRanks", FactionData[i][factionRanks]);
        // cache_get_value_float(i, "factionLockerX", FactionData[i][factionLockerPos][0]);
        // cache_get_value_float(i, "factionLockerY", FactionData[i][factionLockerPos][1]);
        // cache_get_value_float(i, "factionLockerZ", FactionData[i][factionLockerPos][2]);
        // cache_get_value_int(i, "factionLockerInt", FactionData[i][factionLockerInt]);
        // cache_get_value_int(i, "factionLockerWorld", FactionData[i][factionLockerWorld]);
        cache_get_value_int(i, "factionMoney", FactionData[i][factionMoney]);
        cache_get_value_int(i, "factionWithdrawMoney", FactionData[i][factionWithdrawMoney]);
        cache_get_value_int(i, "factionDepositMoney", FactionData[i][factionDepositMoney]);

        // //vehicle spawning
        // cache_get_value_float(i, "vehSpawnX", FactionData[i][vehSpawnX]);
        // cache_get_value_float(i, "vehSpawnY", FactionData[i][vehSpawnY]);
        // cache_get_value_float(i, "vehSpawnZ", FactionData[i][vehSpawnZ]);
        // cache_get_value_int(i, "vehSpawnInterior", FactionData[i][vehSpawnInterior]);
        // cache_get_value_int(i, "vehSpawnVW", FactionData[i][vehSpawnVW]);

        cache_get_value_int(i, "factionSkin1", FactionData[i][factionSkins][0]);
        cache_get_value_int(i, "factionSkin2", FactionData[i][factionSkins][1]);
        cache_get_value_int(i, "factionSkin3", FactionData[i][factionSkins][2]);
        cache_get_value_int(i, "factionSkin4", FactionData[i][factionSkins][3]);
        cache_get_value_int(i, "factionSkin5", FactionData[i][factionSkins][4]);
        cache_get_value_int(i, "factionSkin6", FactionData[i][factionSkins][5]);
        cache_get_value_int(i, "factionSkin7", FactionData[i][factionSkins][6]);
        cache_get_value_int(i, "factionSkin8", FactionData[i][factionSkins][7]);
        cache_get_value_int(i, "factionSkin9", FactionData[i][factionSkins][8]);
        cache_get_value_int(i, "factionSkin10", FactionData[i][factionSkins][9]);
        
        cache_get_value_int(i, "factionWeapon1", FactionData[i][factionWeapons][0]);
        cache_get_value_int(i, "factionWeapon2", FactionData[i][factionWeapons][1]);
        cache_get_value_int(i, "factionWeapon3", FactionData[i][factionWeapons][2]);
        cache_get_value_int(i, "factionWeapon4", FactionData[i][factionWeapons][3]);
        cache_get_value_int(i, "factionWeapon5", FactionData[i][factionWeapons][4]);
        cache_get_value_int(i, "factionWeapon6", FactionData[i][factionWeapons][5]);
        cache_get_value_int(i, "factionWeapon7", FactionData[i][factionWeapons][6]);
        cache_get_value_int(i, "factionWeapon8", FactionData[i][factionWeapons][7]);
        cache_get_value_int(i, "factionWeapon9", FactionData[i][factionWeapons][8]);
        cache_get_value_int(i, "factionWeapon10", FactionData[i][factionWeapons][9]);

        cache_get_value_int(i, "factionAmmo1", FactionData[i][factionAmmo][0]);
        cache_get_value_int(i, "factionAmmo2", FactionData[i][factionAmmo][1]);
        cache_get_value_int(i, "factionAmmo3", FactionData[i][factionAmmo][2]);
        cache_get_value_int(i, "factionAmmo4", FactionData[i][factionAmmo][3]);
        cache_get_value_int(i, "factionAmmo5", FactionData[i][factionAmmo][4]);
        cache_get_value_int(i, "factionAmmo6", FactionData[i][factionAmmo][5]);
        cache_get_value_int(i, "factionAmmo7", FactionData[i][factionAmmo][6]);
        cache_get_value_int(i, "factionAmmo8", FactionData[i][factionAmmo][7]);
        cache_get_value_int(i, "factionAmmo9", FactionData[i][factionAmmo][8]);
        cache_get_value_int(i, "factionAmmo10", FactionData[i][factionAmmo][9]);

        cache_get_value_int(i, "factionDurability1", FactionData[i][factionDurability][0]);
        cache_get_value_int(i, "factionDurability2", FactionData[i][factionDurability][1]);
        cache_get_value_int(i, "factionDurability3", FactionData[i][factionDurability][2]);
        cache_get_value_int(i, "factionDurability4", FactionData[i][factionDurability][3]);
        cache_get_value_int(i, "factionDurability5", FactionData[i][factionDurability][4]);
        cache_get_value_int(i, "factionDurability6", FactionData[i][factionDurability][5]);
        cache_get_value_int(i, "factionDurability7", FactionData[i][factionDurability][6]);
        cache_get_value_int(i, "factionDurability8", FactionData[i][factionDurability][7]);
        cache_get_value_int(i, "factionDurability9", FactionData[i][factionDurability][8]);
        cache_get_value_int(i, "factionDurability10", FactionData[i][factionDurability][9]);

        cache_get_value_int(i, "factionGunRank1", FactionData[i][factionGunRank][0]);
        cache_get_value_int(i, "factionGunRank2", FactionData[i][factionGunRank][1]);
        cache_get_value_int(i, "factionGunRank3", FactionData[i][factionGunRank][2]);
        cache_get_value_int(i, "factionGunRank4", FactionData[i][factionGunRank][3]);
        cache_get_value_int(i, "factionGunRank5", FactionData[i][factionGunRank][4]);
        cache_get_value_int(i, "factionGunRank6", FactionData[i][factionGunRank][5]);
        cache_get_value_int(i, "factionGunRank7", FactionData[i][factionGunRank][6]);
        cache_get_value_int(i, "factionGunRank8", FactionData[i][factionGunRank][7]);
        cache_get_value_int(i, "factionGunRank9", FactionData[i][factionGunRank][8]);
        cache_get_value_int(i, "factionGunRank10", FactionData[i][factionGunRank][9]);
        
        cache_get_value(i, "factionRank1", FactionRanks[i][0], 32);
        cache_get_value(i, "factionRank2", FactionRanks[i][1], 32);
        cache_get_value(i, "factionRank3", FactionRanks[i][2], 32);
        cache_get_value(i, "factionRank4", FactionRanks[i][3], 32);
        cache_get_value(i, "factionRank5", FactionRanks[i][4], 32);
        cache_get_value(i, "factionRank6", FactionRanks[i][5], 32);
        cache_get_value(i, "factionRank7", FactionRanks[i][6], 32);
        cache_get_value(i, "factionRank8", FactionRanks[i][7], 32);
        cache_get_value(i, "factionRank9", FactionRanks[i][8], 32);
        cache_get_value(i, "factionRank10", FactionRanks[i][9], 32);
        cache_get_value(i, "factionRank11", FactionRanks[i][10], 32);
        cache_get_value(i, "factionRank12", FactionRanks[i][11], 32);
        cache_get_value(i, "factionRank13", FactionRanks[i][12], 32);
        cache_get_value(i, "factionRank14", FactionRanks[i][13], 32);
        cache_get_value(i, "factionRank15", FactionRanks[i][14], 32);
        // Faction_Refresh(i);

        //Loaded faction vehicle
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `player_vehicles` WHERE `Owner`='0' AND `Faction`='%d' ORDER BY `ID` DESC", FactionData[i][factionID]), "Vehicle_Load", "");
    }
    printf("*** [RV:RP Database: Loaded] faction data (%d count).", rows);
    return 1;
}

Function:Plant_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_PLANTS)
    {
        PlantData[i][plantExists] = true;
        cache_get_value_int(i, "plantID", PlantData[i][plantID]);
        cache_get_value_int(i, "plantType", PlantData[i][plantType]);
        cache_get_value_int(i, "plantDrugs", PlantData[i][plantDrugs]);
        cache_get_value_float(i, "plantX", PlantData[i][plantPos][0]);
        cache_get_value_float(i, "plantY", PlantData[i][plantPos][1]);
        cache_get_value_float(i, "plantZ", PlantData[i][plantPos][2]);
        cache_get_value_float(i, "plantA", PlantData[i][plantPos][3]);
        cache_get_value_int(i, "plantInterior", PlantData[i][plantInterior]);
        cache_get_value_int(i, "plantWorld", PlantData[i][plantWorld]);
        cache_get_value_int(i, "plantFarm", PlantData[i][plantFarm]);
        Plant_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] plant data (%d count).", rows);
    return 1;
}

// Function:Crate_Load()
// {
//     new
//         rows = cache_num_rows();

//     for (new i = 0; i < rows; i ++) if(i < MAX_CRATES)
//     {
//         CrateData[i][crateExists] = true;
//         cache_get_value_int(i, "crateID", CrateData[i][crateID]);
//         cache_get_value_int(i, "crateType", CrateData[i][crateType]);
//         cache_get_value_float(i, "crateX", CrateData[i][cratePos][0]);
//         cache_get_value_float(i, "crateY", CrateData[i][cratePos][1]);
//         cache_get_value_float(i, "crateZ", CrateData[i][cratePos][2]);
//         cache_get_value_float(i, "crateA", CrateData[i][cratePos][3]);
//         cache_get_value_int(i, "crateInterior", CrateData[i][crateInterior]);
//         cache_get_value_int(i, "crateWorld", CrateData[i][crateWorld]);
//         CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

//         Crate_Refresh(i);
//     }
//     printf("*** [RV:RP Database: Loaded] crates data (%d count).", rows);
//     return 1;
// }

Function:Job_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_DYNAMIC_JOBS)
    {
        JobData[i][jobExists] = true;
        cache_get_value_int(i, "jobID", JobData[i][jobID]);
        cache_get_value_int(i, "jobType", JobData[i][jobType]);
        cache_get_value_float(i, "jobPosX", JobData[i][jobPos][0]);
        cache_get_value_float(i, "jobPosY", JobData[i][jobPos][1]);
        cache_get_value_float(i, "jobPosZ", JobData[i][jobPos][2]);
        cache_get_value_int(i, "jobInterior", JobData[i][jobInterior]);
        cache_get_value_int(i, "jobWorld", JobData[i][jobWorld]);
        cache_get_value_float(i, "jobPointX", JobData[i][jobPoint][0]);
        cache_get_value_float(i, "jobPointY", JobData[i][jobPoint][1]);
        cache_get_value_float(i, "jobPointZ", JobData[i][jobPoint][2]);
        cache_get_value_float(i, "jobDeliverX", JobData[i][jobDeliver][0]);
        cache_get_value_float(i, "jobDeliverY", JobData[i][jobDeliver][1]);
        cache_get_value_float(i, "jobDeliverZ", JobData[i][jobDeliver][2]);
        cache_get_value_int(i, "jobPointInt", JobData[i][jobPointInt]);
        cache_get_value_int(i, "jobPointWorld", JobData[i][jobPointWorld]);
        cache_get_value_int(i, "jobStock", JobData[i][jobStock]);
        Job_Refresh(i);

        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `player_vehicles` WHERE `Owner`='0' AND `Job`='%d' ORDER BY `ID` DESC", JobData[i][jobType]), "Vehicle_Load", "");
    }
    printf("*** [RV:RP Database: Loaded] job data (%d count).", rows);
    return 1;
}

Function:Entrance_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_ENTRANCES)
    {
        EntranceData[i][entranceExists] = true;
        cache_get_value_int(i, "entranceID", EntranceData[i][entranceID]);

        cache_get_value(i, "entranceName", EntranceData[i][entranceName], 128);
        cache_get_value(i, "entrancePass", EntranceData[i][entrancePass], 32);

        cache_get_value_int(i, "entranceIcon", EntranceData[i][entranceIcon]);
        cache_get_value_int(i, "entranceLocked", EntranceData[i][entranceLocked]);
        cache_get_value_float(i, "entrancePosX", EntranceData[i][entrancePos][0]);
        cache_get_value_float(i, "entrancePosY", EntranceData[i][entrancePos][1]);
        cache_get_value_float(i, "entrancePosZ", EntranceData[i][entrancePos][2]);
        cache_get_value_float(i, "entrancePosA", EntranceData[i][entrancePos][3]);
        cache_get_value_float(i, "entranceIntX", EntranceData[i][entranceInt][0]);
        cache_get_value_float(i, "entranceIntY", EntranceData[i][entranceInt][1]);
        cache_get_value_float(i, "entranceIntZ", EntranceData[i][entranceInt][2]);
        cache_get_value_float(i, "entranceIntA", EntranceData[i][entranceInt][3]);
        cache_get_value_int(i, "entranceInterior", EntranceData[i][entranceInterior]);
        cache_get_value_int(i, "entranceExterior", EntranceData[i][entranceExterior]);
        cache_get_value_int(i, "entranceExteriorVW", EntranceData[i][entranceExteriorVW]);
        cache_get_value_int(i, "entranceType", EntranceData[i][entranceType]);
        cache_get_value_int(i, "entranceCustom", EntranceData[i][entranceCustom]);
        cache_get_value_int(i, "entranceFaction", EntranceData[i][entranceFaction]);
        cache_get_value_int(i, "entranceWorld", EntranceData[i][entranceWorld]);
        cache_get_value_int(i, "entranceVehAble", EntranceData[i][entranceVehAble]);

        // if(EntranceData[i][entranceType] == 3)
        //     CreateForklifts(i);

        Entrance_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] entrance data (%d count).", rows);
    return 1;
}

Function:OnDealership_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_DEALER)
    {
        DealershipData[i][dExists] = true;

        cache_get_value_int(i, "ID", DealershipData[i][dID]);
        cache_get_value_int(i, "Stock", DealershipData[i][dStock]);
        cache_get_value_int(i, "Lock", DealershipData[i][dLock]);

        cache_get_value(i, "Name", DealershipData[i][dName], 32);

        cache_get_value_float(i, "PosX", DealershipData[i][dPos][0]);
        cache_get_value_float(i, "PosY", DealershipData[i][dPos][1]);
        cache_get_value_float(i, "PosZ", DealershipData[i][dPos][2]);

        cache_get_value_float(i, "spawnX", DealershipData[i][dSpawnPos][0]);
        cache_get_value_float(i, "spawnY", DealershipData[i][dSpawnPos][1]);
        cache_get_value_float(i, "spawnZ", DealershipData[i][dSpawnPos][2]);
        cache_get_value_float(i, "spawnRX", DealershipData[i][dSpawnPos][3]);

        cache_get_value_int(i, "Type", DealershipData[i][dType]);

        Dealership_Refresh(i);
    }
    printf("*** [RV:RP Database: Loaded] dealership data (%d count).", rows);
    return 1;
}

Dealership_Refresh(id)
{
    if(id != -1 && DealershipData[id][dExists])
    {
        if(IsValidDynamicPickup(DealershipData[id][dPickup]))
            DestroyDynamicPickup(DealershipData[id][dPickup]);

        if(IsValidDynamicMapIcon(DealershipData[id][dIcon]))
            DestroyDynamicMapIcon(DealershipData[id][dIcon]);
                    
        DealershipData[id][dPickup] = CreateDynamicPickup(1239, 23, DealershipData[id][dPos][0], DealershipData[id][dPos][1], DealershipData[id][dPos][2]);
        DealershipData[id][dIcon] = CreateDynamicMapIcon(DealershipData[id][dPos][0], DealershipData[id][dPos][1], DealershipData[id][dPos][2], 55, 10);
        
        Dealership_Save(id);
    }
    return 1;
}

Function:Dropped_Load()
{
    new
        rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if(i < MAX_DROPPED_ITEMS)
    {
        cache_get_value_int(i, "ID", DroppedItems[i][droppedID]);

        cache_get_value(i, "itemName", DroppedItems[i][droppedItem], 32);
        cache_get_value(i, "itemPlayer", DroppedItems[i][droppedPlayer], 24);

        cache_get_value_int(i, "itemModel", DroppedItems[i][droppedModel]);
        cache_get_value_int(i, "itemQuantity", DroppedItems[i][droppedQuantity]);
        cache_get_value_int(i, "itemWeapon", DroppedItems[i][droppedWeaponId]);
        cache_get_value_int(i, "itemAmmo", DroppedItems[i][droppedAmmo]);
        cache_get_value_int(i, "itemDurability", DroppedItems[i][droppedDurability]);
        cache_get_value_float(i, "itemX", DroppedItems[i][droppedPos][0]);
        cache_get_value_float(i, "itemY", DroppedItems[i][droppedPos][1]);
        cache_get_value_float(i, "itemZ", DroppedItems[i][droppedPos][2]);
        cache_get_value_int(i, "itemInt", DroppedItems[i][droppedInt]);
        cache_get_value_int(i, "itemWorld", DroppedItems[i][droppedWorld]);
        cache_get_value_int(i, "itemTime", DroppedItems[i][droppedTime]);

        if(IsWeaponModel(DroppedItems[i][droppedModel])) {
            DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
        } else {
            DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
        }
        DroppedItems[i][droppedLabel] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], 0xFFFFFFAA, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 2.5, _, _, _, DroppedItems[i][droppedWorld],DroppedItems[i][droppedInt]);
    }
    printf("*** [RV:RP Database: Loaded] dropped item data (%d count).", rows);
    return 1;
}

Function:Business_Load()
{
    new
        rows = cache_num_rows(),
        str[64];

    for (new i = 0; i < rows; i ++) if(i < MAX_BUSINESSES)
    {
        BusinessData[i][bizExists] = true;
        cache_get_value_int(i, "bizID", BusinessData[i][bizID]);

        cache_get_value(i, "bizName", BusinessData[i][bizName], 32);
        cache_get_value(i, "bizMessage", BusinessData[i][bizMessage], 128);
        cache_get_value(i, "bOwnerName", BusinessData[i][bOwnerName], 128);

        cache_get_value_int(i, "bizOwner", BusinessData[i][bizOwner]);
        cache_get_value_int(i, "bizType", BusinessData[i][bizType]);
        cache_get_value_int(i, "bizPrice", BusinessData[i][bizPrice]);
        cache_get_value_float(i, "bizPosX", BusinessData[i][bizPos][0]);
        cache_get_value_float(i, "bizPosY", BusinessData[i][bizPos][1]);
        cache_get_value_float(i, "bizPosZ", BusinessData[i][bizPos][2]);
        cache_get_value_float(i, "bizPosA", BusinessData[i][bizPos][3]);
        cache_get_value_float(i, "bizIntX", BusinessData[i][bizInt][0]);
        cache_get_value_float(i, "bizIntY", BusinessData[i][bizInt][1]);
        cache_get_value_float(i, "bizIntZ", BusinessData[i][bizInt][2]);
        cache_get_value_float(i, "bizIntA", BusinessData[i][bizInt][3]);
        cache_get_value_float(i, "bizSpawnX", BusinessData[i][bizSpawn][0]);
        cache_get_value_float(i, "bizSpawnY", BusinessData[i][bizSpawn][1]);
        cache_get_value_float(i, "bizSpawnZ", BusinessData[i][bizSpawn][2]);
        cache_get_value_float(i, "bizSpawnA", BusinessData[i][bizSpawn][3]);
        cache_get_value_float(i, "bizDeliverX", BusinessData[i][bizDeliver][0]);
        cache_get_value_float(i, "bizDeliverY", BusinessData[i][bizDeliver][1]);
        cache_get_value_float(i, "bizDeliverZ", BusinessData[i][bizDeliver][2]);
        cache_get_value_int(i, "bizShipment", BusinessData[i][bizShipment]);
        cache_get_value_int(i, "bizInterior", BusinessData[i][bizInterior]);
        cache_get_value_int(i, "bizExterior", BusinessData[i][bizExterior]);
        cache_get_value_int(i, "bizExteriorVW", BusinessData[i][bizExteriorVW]);
        cache_get_value_int(i, "bizLocked", BusinessData[i][bizLocked]);
        cache_get_value_int(i, "bizVault", BusinessData[i][bizVault]);
        cache_get_value_int(i, "bizProducts", BusinessData[i][bizProducts]);
        cache_get_value_int(i, "bizSeal", BusinessData[i][bizSeal]);
        cache_get_value_int(i, "bizCargo", BusinessData[i][bizCargo]);
        cache_get_value_int(i, "bizLastVisited", BusinessData[i][bizLastVisited]);

        cache_get_value_int(i, "bizPrice1", BusinessData[i][bizPrices][0]);
        cache_get_value_int(i, "bizPrice2", BusinessData[i][bizPrices][1]);
        cache_get_value_int(i, "bizPrice3", BusinessData[i][bizPrices][2]);
        cache_get_value_int(i, "bizPrice4", BusinessData[i][bizPrices][3]);
        cache_get_value_int(i, "bizPrice5", BusinessData[i][bizPrices][4]);
        cache_get_value_int(i, "bizPrice6", BusinessData[i][bizPrices][5]);
        cache_get_value_int(i, "bizPrice7", BusinessData[i][bizPrices][6]);
        cache_get_value_int(i, "bizPrice8", BusinessData[i][bizPrices][7]);
        cache_get_value_int(i, "bizPrice9", BusinessData[i][bizPrices][8]);
        cache_get_value_int(i, "bizPrice10", BusinessData[i][bizPrices][9]);
        cache_get_value_int(i, "bizPrice11", BusinessData[i][bizPrices][10]);
        cache_get_value_int(i, "bizPrice12", BusinessData[i][bizPrices][11]);
        cache_get_value_int(i, "bizPrice13", BusinessData[i][bizPrices][12]);
        cache_get_value_int(i, "bizPrice14", BusinessData[i][bizPrices][13]);
        cache_get_value_int(i, "bizPrice15", BusinessData[i][bizPrices][14]);
        cache_get_value_int(i, "bizPrice16", BusinessData[i][bizPrices][15]);
        cache_get_value_int(i, "bizPrice17", BusinessData[i][bizPrices][16]);
        cache_get_value_int(i, "bizPrice18", BusinessData[i][bizPrices][17]);
        cache_get_value_int(i, "bizPrice19", BusinessData[i][bizPrices][18]);
        cache_get_value_int(i, "bizPrice20", BusinessData[i][bizPrices][19]);

        Business_Refresh(i);
    }
    for (new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists])
    {
        if(BusinessData[i][bizType] == 5) {
            format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

            mysql_tquery(g_iHandle, str, "Business_LoadCars", "d", i);
        }
        else if(BusinessData[i][bizType] == 6) {
            format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

            mysql_tquery(g_iHandle, str, "Pump_Load", "d", i);
        } else if (BusinessData[i][bizType] == 4) {
            mysql_tquery(g_iHandle, sprintf("SELECT * FROM `player_vehicles` WHERE `Owner`='0' AND `Biz`='%d' ORDER BY `ID` DESC", BusinessData[i][bizID]), "Vehicle_Load", "");
        } else if (BusinessData[i][bizType] == 9) {
            mysql_tquery(g_iHandle, sprintf("SELECT * FROM `gymobjects` WHERE `BizID` = '%d'", BusinessData[i][bizID]), "GYMObject_Load", "d", i);
        }
    }
    printf("*** [RV:RP Database: Loaded] business data (%d count).", rows);
    return 1;
}

Function:House_Load()
{
    new
        rows = cache_num_rows(),
        str[128];

    if (rows) {
        for (new i = 0; i < rows; i ++)
        {
            Iter_Add(Houses, i);

            HouseData[i][houseLights] = false;

            cache_get_value_int(i, "houseID", HouseData[i][houseID]);
            cache_get_value_int(i, "houseOwner", HouseData[i][houseOwner]);
            cache_get_value_int(i, "housePrice", HouseData[i][housePrice]);

            cache_get_value(i, "houseAddress", HouseData[i][houseAddress], 32);
            cache_get_value(i, "houseOwnerName", HouseData[i][houseOwnerName], 32);

            cache_get_value_float(i, "housePosX", HouseData[i][housePos][0]);
            cache_get_value_float(i, "housePosY", HouseData[i][housePos][1]);
            cache_get_value_float(i, "housePosZ", HouseData[i][housePos][2]);
            cache_get_value_float(i, "housePosA", HouseData[i][housePos][3]);
            cache_get_value_float(i, "houseIntX", HouseData[i][houseInt][0]);
            cache_get_value_float(i, "houseIntY", HouseData[i][houseInt][1]);
            cache_get_value_float(i, "houseIntZ", HouseData[i][houseInt][2]);
            cache_get_value_float(i, "houseIntA", HouseData[i][houseInt][3]);
            cache_get_value_int(i, "houseInterior", HouseData[i][houseInterior]);
            cache_get_value_int(i, "houseExterior", HouseData[i][houseExterior]);
            cache_get_value_int(i, "houseExteriorVW", HouseData[i][houseExteriorVW]);
            cache_get_value_int(i, "houseLocked", HouseData[i][houseLocked]);
            cache_get_value_int(i, "houseMoney", HouseData[i][houseMoney]);
            cache_get_value_int(i, "houseLastVisited", HouseData[i][houseLastVisited]);
            cache_get_value_int(i, "houseBuilder", HouseData[i][houseBuilder]);
            cache_get_value_int(i, "houseBuilderTime", HouseData[i][houseBuilderTime]);
            cache_get_value_int(i, "houseType", HouseData[i][houseType]);
            cache_get_value_int(i, "houseSeal", HouseData[i][houseSeal]);

            House_Refresh(i);
        }
        foreach (new j : Houses) {
            format(str, sizeof(str), "SELECT * FROM `weapon_houses` WHERE `houseid` = '%d' ORDER BY `id` DESC LIMIT 5", HouseData[j][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadWeapon", "d", j);

            format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[j][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", j);

            format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[j][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", j);

            format(str, sizeof(str), "SELECT * FROM `housestruct` WHERE `HouseID` = '%d'", HouseData[j][houseID]);
            mysql_tquery(g_iHandle, str, "OnLoadHouseStructure", "d", j);
        }
    }
    printf("*** [RV:RP Database: Loaded] house data (%d count).", rows);
    return 1;
}

CreateHouseInterior(houseid) {
    new id = cellmin;
    for (new i = 0; i < sizeof(g_aHouseInteriors); i ++) if (g_aHouseInteriors[i][e_Type] == HouseData[houseid][houseType]) {
        id = HouseStructure_Add(houseid, g_aHouseInteriors[i][e_ObjModel], g_aHouseInteriors[i][e_ObjPosX], g_aHouseInteriors[i][e_ObjPosY], g_aHouseInteriors[i][e_ObjPosZ], g_aHouseInteriors[i][e_ObjRotX], g_aHouseInteriors[i][e_ObjRotY], g_aHouseInteriors[i][e_ObjRotZ], 1);

        if (id == cellmin) break;
    }
    return 1;
}

Vehicle_GetID(vehicleid)
{
    if (!IsValidVehicle(vehicleid))
        return -1;

    foreach (new i : DynamicVehicles) if (VehicleData[i][cImpounded] == -1 && !VehicleData[i][cInsideInsurance] && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cGarageFlat] && VehicleData[i][cVehicle] == vehicleid) {
        return i;
    }
    return -1;
}

// Vehicle_GetFreeID()
// {
//     for(new i = 0; i != MAX_DYNAMIC_VEHICLES; i++) if(!VehicleData[i][cExists]) {
//         return i;
//     }
//     return -1;
// }

Function:Vehicle_Load()
{
    new
        rows = cache_num_rows();

    if (rows) {
        for (new i = 0; i < rows; i ++)
        {
            new id = Iter_Free(DynamicVehicles);

            if (id != cellmin) {
                //String
                cache_get_value(i, "Plate", VehicleData[id][cPlate], 24);

                //Float
                cache_get_value_float(i, "Pos1", VehicleData[id][cPos][0]);
                cache_get_value_float(i, "Pos2", VehicleData[id][cPos][1]);
                cache_get_value_float(i, "Pos3", VehicleData[id][cPos][2]);
                cache_get_value_float(i, "Pos4", VehicleData[id][cPos][3]);
                cache_get_value_float(i, "Health", VehicleData[id][cHealth]);
                cache_get_value_float(i, "MaxHealth", VehicleData[id][cMaxHealth]);

                //Integer
                cache_get_value_int(i, "ID", VehicleData[id][cID]);
                cache_get_value_int(i, "Model", VehicleData[id][cModel]);
                cache_get_value_int(i, "Owner", VehicleData[id][cOwner]);
                cache_get_value_int(i, "Paintjob", VehicleData[id][cPaintjob]);
                cache_get_value_int(i, "Locked", VehicleData[id][cLocked]);
                cache_get_value_int(i, "TireLock", VehicleData[id][cTireLock]);
                cache_get_value_int(i, "Impound", VehicleData[id][cImpounded]);
                cache_get_value_int(i, "ImpoundPrice", VehicleData[id][cImpoundPrice]);
                cache_get_value_int(i, "ImpoundDelay", VehicleData[id][cImpoundDelay]);
                cache_get_value_int(i, "Damage1", VehicleData[id][cDamage][0]);
                cache_get_value_int(i, "Damage2", VehicleData[id][cDamage][1]);
                cache_get_value_int(i, "Damage3", VehicleData[id][cDamage][2]);
                cache_get_value_int(i, "Damage4", VehicleData[id][cDamage][3]);
                cache_get_value_int(i, "Lumber", VehicleData[id][cLumber]);
                cache_get_value_int(i, "Food", VehicleData[id][cFood]);
                cache_get_value_int(i, "Color1", VehicleData[id][cColor1]);
                cache_get_value_int(i, "Color2", VehicleData[id][cColor2]);
                cache_get_value_int(i, "Faction", VehicleData[id][cFaction]);
                cache_get_value_int(i, "Job", VehicleData[id][cJob]);
                cache_get_value_int(i, "Workshop", VehicleData[id][cWorkshop]);
                cache_get_value_int(i, "Biz", VehicleData[id][cBiz]);
                cache_get_value_int(i, "Int", VehicleData[id][cInt]);
                cache_get_value_int(i, "Vw", VehicleData[id][cVw]);
                cache_get_value_int(i, "Garage", VehicleData[id][cGarage]);
                cache_get_value_int(i, "GarageApart", VehicleData[id][cGarageApart]);
                cache_get_value_int(i, "GarageFlat", VehicleData[id][cGarageFlat]);

                cache_get_value_int(i, "Rental", VehicleData[id][cRent]);
                cache_get_value_int(i, "RentalOwned", VehicleData[id][cRentOwned]);
                cache_get_value_int(i, "RentalPrice", VehicleData[id][cRentPrice]);
                cache_get_value_int(i, "RentalTime", VehicleData[id][cRentTime]);

                cache_get_value_int(i, "Neon", VehicleData[id][cNeon]);
                cache_get_value_int(i, "NeonToggle", VehicleData[id][cNeonToggle]);
                cache_get_value_int(i, "Insurance", VehicleData[id][cInsurance]);
                cache_get_value_int(i, "Sirine", VehicleData[id][cSirine]);
                cache_get_value_int(i, "STNK", VehicleData[id][cSTNK]);
                cache_get_value_int(i, "InsideInsurance", VehicleData[id][cInsideInsurance]);
                cache_get_value_int(i, "InsuranceTime", VehicleData[id][cInsuranceTime]);
                cache_get_value_int(i, "EngineUpgrade", VehicleData[id][cEngineUpgrade]);
                cache_get_value_int(i, "BodyUpgrade", VehicleData[id][cBodyUpgrade]);
                // cache_get_value_int(i, "SecurityAlarm", VehicleData[id][cAlarm]);

                cache_get_value_float(i, "Fuel", VehicleData[id][cFuel]);
                cache_get_value_int(i, "Plant", VehicleData[id][cPlant]);
                cache_get_value_int(i, "PlantType", VehicleData[id][cPlantType]);
                cache_get_value_int(i, "Component", VehicleData[id][cComponent]);
                cache_get_value_int(i, "Static", VehicleData[id][cStatic]);
                
                cache_get_value_int(i, "Mods1", VehicleData[id][cMods][0]);
                cache_get_value_int(i, "Mods2", VehicleData[id][cMods][1]);
                cache_get_value_int(i, "Mods3", VehicleData[id][cMods][2]);
                cache_get_value_int(i, "Mods4", VehicleData[id][cMods][3]);
                cache_get_value_int(i, "Mods5", VehicleData[id][cMods][4]);
                cache_get_value_int(i, "Mods6", VehicleData[id][cMods][5]);
                cache_get_value_int(i, "Mods7", VehicleData[id][cMods][6]);
                cache_get_value_int(i, "Mods8", VehicleData[id][cMods][7]);
                cache_get_value_int(i, "Mods9", VehicleData[id][cMods][8]);
                cache_get_value_int(i, "Mods10", VehicleData[id][cMods][9]);
                cache_get_value_int(i, "Mods11", VehicleData[id][cMods][10]);
                cache_get_value_int(i, "Mods12", VehicleData[id][cMods][11]);
                cache_get_value_int(i, "Mods13", VehicleData[id][cMods][12]);
                cache_get_value_int(i, "Mods14", VehicleData[id][cMods][13]);
                
                cache_get_value_int(i, "Weapon1", VehicleData[id][cWeapons][0]);
                cache_get_value_int(i, "Weapon2", VehicleData[id][cWeapons][1]);
                cache_get_value_int(i, "Weapon3", VehicleData[id][cWeapons][2]);
                cache_get_value_int(i, "Weapon4", VehicleData[id][cWeapons][3]);
                cache_get_value_int(i, "Weapon5", VehicleData[id][cWeapons][4]);

                cache_get_value_int(i, "Ammo1", VehicleData[id][cAmmo][0]);
                cache_get_value_int(i, "Ammo2", VehicleData[id][cAmmo][1]);
                cache_get_value_int(i, "Ammo3", VehicleData[id][cAmmo][2]);
                cache_get_value_int(i, "Ammo4", VehicleData[id][cAmmo][3]);
                cache_get_value_int(i, "Ammo5", VehicleData[id][cAmmo][4]);

                cache_get_value_int(i, "Durability1", VehicleData[id][cDurability][0]);
                cache_get_value_int(i, "Durability2", VehicleData[id][cDurability][1]);
                cache_get_value_int(i, "Durability3", VehicleData[id][cDurability][2]);
                cache_get_value_int(i, "Durability4", VehicleData[id][cDurability][3]);
                cache_get_value_int(i, "Durability5", VehicleData[id][cDurability][4]);

                Iter_Add(DynamicVehicles, id);

                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `vehicle_object` WHERE vehicle='%d' ORDER BY `id` ASC LIMIT %d", VehicleData[id][cID], MAX_VEHICLE_OBJECT+5), "Vehicle_ObjectLoad", "d", id);

                mysql_tquery(g_iHandle, sprintf("SELECT * FROM `carstorage` WHERE `ID` = '%d'", VehicleData[id][cID]), "OnLoadCarStorage", "d", id);

                Vehicle_Spawn(id);

                if(IsValidVehicle(VehicleData[id][cVehicle]))
                {
                    cache_get_value_float(i, "Fuel", CoreVehicles[VehicleData[id][cVehicle]][vehFuel]);
                }
            }
            else printf("Can't loaded more vehicle, there is max of vehicles.");
        }
    }
    return 1;
}

Vehicle_Spawn(id, bool:sync = false)
{
    if(Iter_Contains(DynamicVehicles, id))
    {
        if(sync == false)
        {
            if (IsValidVehicle(VehicleData[id][cVehicle]))
                DestroyVehicle(VehicleData[id][cVehicle]), VehicleData[id][cVehicle] = INVALID_VEHICLE_ID;
        }
                
        if(VehicleData[id][cColor1] == -1) {
            VehicleData[id][cColor1] = random(127);
        }

        if(VehicleData[id][cColor2] == -1) {
            VehicleData[id][cColor2] = random(127);
        }

        if(sync == false)
        {
            if(VehicleData[id][cImpounded] == -1 && VehicleData[id][cInsideInsurance] == 0 && VehicleData[id][cGarage] == 0 && VehicleData[id][cGarageApart] == 0 && VehicleData[id][cStatic] == 0 && VehicleData[id][cGarageFlat] == 0)
            {
                VehicleData[id][cVehicle] = CreateVehicle(VehicleData[id][cModel], VehicleData[id][cPos][0], VehicleData[id][cPos][1], VehicleData[id][cPos][2], VehicleData[id][cPos][3], VehicleData[id][cColor1], VehicleData[id][cColor2], -1, VehicleData[id][cSirine]);
            } else VehicleData[id][cVehicle] = INVALID_VEHICLE_ID;
        }

        if(IsValidVehicle(VehicleData[id][cVehicle]))
        {
            SetVehicleNumberPlate(VehicleData[id][cVehicle], VehicleData[id][cPlate]);

            if (VehicleData[id][cOwner]) {
                new vehicleid = GetClosestVehicleToVehicle(VehicleData[id][cVehicle]), vehid = -1;
                
                if (vehicleid != INVALID_VEHICLE_ID && vehicleid != VehicleData[id][cVehicle]) {
                    if ((vehid = Vehicle_GetID(vehicleid)) != -1 && VehicleData[vehid][cDespawn] == 0) {
                        if (VehicleData[vehid][cOwner]) {
                            if (IsVehicleOccupied(VehicleData[vehid][cVehicle])) {
                                new vehname[32];

                                GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
                                LinkVehicleToInterior(VehicleData[id][cVehicle], VehicleData[id][cInt]);
                                SetVehicleVirtualWorld(VehicleData[id][cVehicle], VehicleData[id][cID]);
                                SendVehicleOwnedMessage(id, sprintf("VEHICLE: "WHITE"Your "CYAN"%s "WHITE"has been despawned due to conflict with other vehicle.", vehname));
                                VehicleData[id][cDespawn] = 1;
                            } else {
                                new vehname[32];

                                GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
                                LinkVehicleToInterior(VehicleData[vehid][cVehicle], VehicleData[vehid][cInt]);
                                SetVehicleVirtualWorld(VehicleData[vehid][cVehicle], VehicleData[vehid][cID]);
                                SendVehicleOwnedMessage(vehid, sprintf("VEHICLE: "WHITE"Your "CYAN"%s "WHITE"has been despawned due to conflict with other vehicle.", vehname));
                                VehicleData[vehid][cDespawn] = 1;
                            }
                        }
                    }
                } else {
                    LinkVehicleToInterior(VehicleData[id][cVehicle], VehicleData[id][cInt]);
                    SetVehicleVirtualWorld(VehicleData[id][cVehicle], VehicleData[id][cVw]);
                }
            } else {
                LinkVehicleToInterior(VehicleData[id][cVehicle], VehicleData[id][cInt]);
                SetVehicleVirtualWorld(VehicleData[id][cVehicle], VehicleData[id][cVw]);
            }

            SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cHealth]);
            UpdateVehicleDamageStatus(VehicleData[id][cVehicle], VehicleData[id][cDamage][0], VehicleData[id][cDamage][1], VehicleData[id][cDamage][2], VehicleData[id][cDamage][3]);

            if(VehicleData[id][cFaction]) 
            {
                RepairVehicle(VehicleData[id][cVehicle]);
                SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cMaxHealth]);
                CoreVehicles[VehicleData[id][cVehicle]][vehFuel] = 100.0;
            }
            if(VehicleData[id][cWorkshop]) 
            {
                RepairVehicle(VehicleData[id][cVehicle]);
                SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cMaxHealth]);
                CoreVehicles[VehicleData[id][cVehicle]][vehFuel] = 100.0;
            }
            if(VehicleData[id][cBiz]) 
            {
                RepairVehicle(VehicleData[id][cVehicle]);
                SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cMaxHealth]);
                CoreVehicles[VehicleData[id][cVehicle]][vehFuel] = 100.0;
            }
            if(VehicleData[id][cJob]) 
            {
                RepairVehicle(VehicleData[id][cVehicle]);
                SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cMaxHealth]);
                CoreVehicles[VehicleData[id][cVehicle]][vehFuel] = 100.0;
            }

            if(VehicleData[id][cPaintjob] != -1) {
                ChangeVehiclePaintjob(VehicleData[id][cVehicle], VehicleData[id][cPaintjob]);
            }
            if(VehicleData[id][cLocked])
            {
                new
                    engine, lights, alarm, doors, bonnet, boot, objective;

                GetVehicleParamsEx(VehicleData[id][cVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(VehicleData[id][cVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
            }
            if (VehicleData[id][cTireLock]) {
                if (IsValidDynamic3DTextLabel(VehicleData[id][cText]))
                    DestroyDynamic3DTextLabel(VehicleData[id][cText]);

                new Float:pos[3];
                GetVehiclePos(VehicleData[id][cVehicle], pos[0], pos[1], pos[2]);
                VehicleData[id][cText] = CreateDynamic3DTextLabel("* Tire Locked *", X11_WHITE, pos[0], pos[1], pos[2], 10.0, INVALID_PLAYER_ID, VehicleData[id][cVehicle], 0, GetVehicleVirtualWorld(VehicleData[id][cVehicle]));
            }
            for (new l = 0; l < 14; l ++)
            {
                if(VehicleData[id][cMods][l] > 0) AddComponent(VehicleData[id][cVehicle], VehicleData[id][cMods][l]);
            }

            for (new i = 0; i < MAX_VEHICLE_OBJECT+5; i++) if(VehicleObjects[id][i][object_exists]) 
            {
                Vehicle_ObjectUpdate(id, i);
            }
            CreateVehiclePlant(id);
            CreateVehicleComponent(id);
            ResetVehicle(VehicleData[id][cVehicle]);
            if (VehicleData[id][cNeon]) VehicleData[id][cNeonToggle] = 0;
            ReloadVehicleNeon(id);
        }
    }
    return 1;
}

CreateVehiclePlant(id) {
    if (IsValidVehicle(VehicleData[id][cVehicle])) {
        if (VehicleData[id][cOwner] && GetVehiclePlantStorage(id) > 0) {
            if(GetVehicleModel(VehicleData[id][cVehicle]) == 543 || GetVehicleModel(VehicleData[id][cVehicle]) == 554 || GetVehicleModel(VehicleData[id][cVehicle]) == 422) {
                if (IsValidDynamicObject(VehicleData[id][cPlantObject]))
                    DestroyDynamicObject(VehicleData[id][cPlantObject]), VehicleData[id][cPlantObject] = INVALID_STREAMER_ID;

                VehicleData[id][cPlantObject] = CreateDynamicObject(1454,0,0,-1000,0,0,0,100);
                AttachDynamicObjectToVehicle(VehicleData[id][cPlantObject], VehicleData[id][cVehicle], 0.000000,-1.650000,0.400000,-89.999992,-0.000000,0.000000);

                VehicleData[id][cPlantObjectUsed] = 1;
            }
        }
    }
}

CreateVehicleComponent(id) {
    if (IsValidVehicle(VehicleData[id][cVehicle])) {
        if (VehicleData[id][cOwner] && VehicleData[id][cComponent] > 0) {
            if(GetVehicleModel(VehicleData[id][cVehicle]) == 543 || GetVehicleModel(VehicleData[id][cVehicle]) == 554 || GetVehicleModel(VehicleData[id][cVehicle]) == 422 || GetVehicleModel(VehicleData[id][cVehicle]) == 525) {
                if (IsValidDynamicObject(VehicleData[id][cComponentObject]))
                    DestroyDynamicObject(VehicleData[id][cComponentObject]), VehicleData[id][cComponentObject] = INVALID_STREAMER_ID;

                if (GetVehicleModel(VehicleData[id][cVehicle]) == 525) {
                    VehicleData[id][cComponentObject] = CreateDynamicObject(964,0,0,-1000,0,0,0,100);
                    AttachDynamicObjectToVehicle(VehicleData[id][cComponentObject], VehicleData[id][cVehicle], 0.000000,-0.50000,0.400000,-270.000000,-0.000000,0.000000);
                } else {
                    VehicleData[id][cComponentObject] = CreateDynamicObject(964,0,0,-1000,0,0,0,100);
                    AttachDynamicObjectToVehicle(VehicleData[id][cComponentObject], VehicleData[id][cVehicle], 0.000000,-1.650000,-0.300000,0.000000,-0.000000,0.000000);
                }
            }
        }
    }
}

ReloadVehicleNeon(id)
{
    if(IsValidVehicle(VehicleData[id][cVehicle]))
    {
        if(VehicleData[id][cID] && VehicleData[id][cOwner])
        {
            DestroyDynamicObject(VehicleData[id][cNeonObject][0]);
            DestroyDynamicObject(VehicleData[id][cNeonObject][1]);
            for (new i = 0; i < 2; i ++) {
                VehicleData[id][cNeonObject][i] = INVALID_STREAMER_ID;
            }

            if(IsDoorVehicle(VehicleData[id][cVehicle]) && VehicleData[id][cNeon] && VehicleData[id][cNeonToggle])
            {
                new
                    Float:x,
                    Float:y,
                    Float:z;

                GetVehicleModelInfo(VehicleData[id][cModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

                VehicleData[id][cNeonObject][0] = CreateDynamicObject(VehicleData[id][cNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 30, 30);
                VehicleData[id][cNeonObject][1] = CreateDynamicObject(VehicleData[id][cNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 30, 30);

                AttachDynamicObjectToVehicle(VehicleData[id][cNeonObject][0], VehicleData[id][cVehicle], -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(VehicleData[id][cNeonObject][1], VehicleData[id][cVehicle], x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
            }
        }
    }
}

static IsVehicleSeatUsed(vehicleid, seat)
{
    foreach (new i : Player) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
        return 1;
    }
    return 0;
}

static RemoveFromVehicle(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        static
        Float:fX,
        Float:fY,
        Float:fZ;

        GetPlayerPos(playerid, fX, fY, fZ);
        SetPlayerPos(playerid, fX, fY, fZ + 1.5);
    }
    return 1;
}

static GetAvailableSeat(vehicleid, start = 1)
{
    new seats = GetVehicleMaxSeats(vehicleid);

    for (new i = start; i < seats; i ++) if(!IsVehicleSeatUsed(vehicleid, i)) {
        return i;
    }
    return -1;
}

static GetVehicleFromBehind(vehicleid)
{
    static
        Float:fCoords[7];

    GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
    GetVehicleZAngle(vehicleid, fCoords[3]);

    for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
    {
        if(floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
        return i;
    }
    return INVALID_VEHICLE_ID;
}

Function:HarvestPlant(playerid, plantid)
{
    PlayerData[playerid][pHarvesting] = 0;

    if(Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
        return 0;

    switch (PlantData[plantid][plantType])
    {
        case 1:
        {
            new id = Inventory_Add(playerid, "Marijuana", 1578, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d marijuana", PlantData[plantid][plantDrugs]);
        }
        case 2:
        {
            new id = Inventory_Add(playerid, "Cocaine", 1575, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d cocaine", PlantData[plantid][plantDrugs]);
        }
        case 3:
        {
            new id = Inventory_Add(playerid, "Heroin", 1577, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d heroin", PlantData[plantid][plantDrugs]);
        }
        case 4:
        {
            new id = Inventory_Add(playerid, "Pumpkin", 19320, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d pumpkin", PlantData[plantid][plantDrugs]);
        }
        case 5:
        {
            new id = Inventory_Add(playerid, "Mushroom", 1577, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d mushroom", PlantData[plantid][plantDrugs]);
        }
        case 6:
        {
            new id = Inventory_Add(playerid, "Cucumber", 1577, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d cucumber", PlantData[plantid][plantDrugs]);
        }
        case 7:
        {
            new id = Inventory_Add(playerid, "Egg Plant", 1577, PlantData[plantid][plantDrugs]);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any room in your inventory.");

            SendServerMessage(playerid, "You have harvested %d Egg Plant", PlantData[plantid][plantDrugs]);
        }
    }
    Plant_Delete(plantid);
    return 1;
}

/*forward CraftParts(playerid, crateid);
public CraftParts(playerid, crateid)
{
    if(PlayerData[playerid][pCarryCrate] != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pCrafting])
        return 0;

    PlayerData[playerid][pCrafting] = 0;
    PlayerData[playerid][pCarryCrate] = -1;

    TogglePlayerControllable(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    RemovePlayerAttachedObject(playerid, JOB_SLOT);
    Log_Write("logs/craft_log.txt", "[%s] %s has crafted a %s crate.", ReturnDate(), ReturnName(playerid, 0), Crate_GetType(CrateData[crateid][crateType]));

    switch (CrateData[crateid][crateType])
    {
        case 1:
        {
            if(Inventory_Items(playerid) >= MAX_INVENTORY - 4)
                return SendErrorMessage(playerid, "You don't have any room in your inventory for 4 melee parts.");

            Inventory_Add(playerid, "Knife", 335);
            Inventory_Add(playerid, "Shovel", 337);

            Crate_Delete(crateid);
            SendServerMessage(playerid, "You have crafted 4 melee weapons (added to inventory).");
        }
        case 2:
        {
            if(Inventory_Items(playerid) >= MAX_INVENTORY - 2)
                return SendErrorMessage(playerid, "You don't have any room in your inventory for 2 pistols.");

            Inventory_Add(playerid, "Colt 45", 346);
            Inventory_Add(playerid, "Desert Eagle", 348);

            Crate_Delete(crateid);
            SendServerMessage(playerid, "You have crafted 2 pistols from pistol parts (added to inventory).");
        }
        case 3:
        {
            if(Inventory_Items(playerid) >= MAX_INVENTORY - 3)
                return SendErrorMessage(playerid, "You don't have any room in your inventory for 3 SMG's.");

            Inventory_Add(playerid, "Micro SMG", 352);
            Inventory_Add(playerid, "Tec-9", 372);
            Inventory_Add(playerid, "MP5", 353);

            Crate_Delete(crateid);
            SendServerMessage(playerid, "You have crafted 3 SMG's from SMG parts (added to inventory).");
        }
        case 4:
        {
            if(Inventory_Items(playerid) >= MAX_INVENTORY - 2)
                return SendErrorMessage(playerid, "You don't have any room in your inventory for 2 shotguns.");

            Inventory_Add(playerid, "Shotgun", 349);

            Crate_Delete(crateid);
            SendServerMessage(playerid, "You have crafted a shotgun from Shotgun parts (added to inventory).");
        }
        case 5:
        {
            if(Inventory_Items(playerid) >= MAX_INVENTORY - 3)
                return SendErrorMessage(playerid, "You don't have any room in your inventory for 3 Rifles.");

            Inventory_Add(playerid, "AK-47", 355);
            Inventory_Add(playerid, "Rifle", 357);
            Inventory_Add(playerid, "Sniper", 358);

            Crate_Delete(crateid);
            SendServerMessage(playerid, "You have crafted 3 rifles from Rifle parts (added to inventory).");
        }
    }
    return 1;
}*/

Function:FirstAidUpdate(playerid)
{
    static
        Float:health;

    GetPlayerHealth(playerid, health);

    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
        ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

    if(health >= PlayerData[playerid][pMaxHealth])
    {
        SetPlayerHealth(playerid, PlayerData[playerid][pMaxHealth]);
        SendServerMessage(playerid, "Your first aid kit has been used up.");

        if(!IsPlayerInAnyVehicle(playerid)) {
            PlayerData[playerid][pLoopAnim] = true;
            ShowPlayerFooter(playerid, "Press ~y~SPRINT~w~ to stop the animation.");
        }
        PlayerData[playerid][pBleeding] = 0;
        PlayerData[playerid][pBleedTime] = 0;

        PlayerData[playerid][pFirstAid] = false;
        KillTimer(PlayerData[playerid][pAidTimer]);
    }
    else {
        SetPlayerHealth(playerid, floatadd(health, 4.0));
    }
    return 1;
}

Function:RepairCar(playerid, vehicleid)
{
    if(PlayerData[playerid][pMekanik] && (GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC))
    {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
        GameTextForPlayer(playerid, "~g~~h~Repair Failed!", 1500, 3);
        PlayerData[playerid][pMekanik] = 0;
        SendServerMessage(playerid, "You have failed while repairing the vehicle!");
        KillTimer(PlayerData[playerid][pRepair]);
        CoreVehicles[vehicleid][vehRepairing] = false;
        SetHoodStatus(vehicleid,false);
    }
    else
    {
        new
            string[128], 
            id = -1, 
            Float:maxhealth,
            vehid = Vehicle_GetID(vehicleid);
        
        if (VehicleData[vehid][cEngineUpgrade] && !IsABike(vehicleid)) maxhealth = 2000.0;
        else if (VehicleData[vehid][cEngineUpgrade] && IsABike(vehicleid)) maxhealth = 1500.0;
        else maxhealth = 1000.0;

        if(ReturnVehicleHealth(vehicleid) <= maxhealth)
        {
            // if((id = Workshop_Nearest(playerid) != -1)) count = WorkshopData[id][wComponent];
            // else count = Inventory_Count(playerid, "Component");
            if((id = Workshop_Nearest(playerid) != -1))
            {
                if (WorkshopData[id][wComponent] > 2) {
                    WorkshopData[id][wComponent] -= 2;
                    format(string,sizeof(string),"~g~~h~Repair Vehicle~n~~y~~h~Waiting for health progress ~r~%d.~n~~y~~h~This workshop have %d component now", ReturnVehicleHealth(vehicleid), WorkshopData[id][wComponent]);
                } else {
                    GameTextForPlayer(playerid, "~g~~h~don't have enough component!", 1500, 3);
                    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
                    PlayerData[playerid][pMekanik] = 0;
                    KillTimer(PlayerData[playerid][pRepair]);
                    CoreVehicles[vehicleid][vehRepairing] = false;
                    SetHoodStatus(vehicleid,false);
                }
            }
            else {
                if (Inventory_Count(playerid, "Component") > 2) {
                    Inventory_Remove(playerid, "Component", 2);
                    format(string,sizeof(string),"~g~~h~Repair Vehicle~n~~y~~h~Waiting for health progress ~r~%d.~n~~y~~h~You have %d component now", ReturnVehicleHealth(vehicleid), Inventory_Count(playerid, "Component"));
                } else {
                    GameTextForPlayer(playerid, "~g~~h~don't have enough component!", 1500, 3);
                    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
                    PlayerData[playerid][pMekanik] = 0;
                    KillTimer(PlayerData[playerid][pRepair]);
                    CoreVehicles[vehicleid][vehRepairing] = false;
                    SetHoodStatus(vehicleid,false);
                }
            }
            SetVehicleHealth(vehicleid, (ReturnVehicleHealth(vehicleid)+25));
            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_footer], string);
            ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
        }
        else
        {
            GameTextForPlayer(playerid, "~g~~h~Repair Done!", 1500, 3);
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
            PlayerData[playerid][pMekanik] = 0;
            SetVehicleHealth(vehicleid, maxhealth);
            SendServerMessage(playerid, "You have successfully repair the vheicle!");
            KillTimer(PlayerData[playerid][pRepair]);
            CoreVehicles[vehicleid][vehRepairing] = false;
            SetHoodStatus(vehicleid,false);
        }
    }
    return 1;
}

Function:Business_LoadCars(bizid)
{
    new
        rows = cache_num_rows();

    for (new i = 0; i != rows; i ++) {
        cache_get_value_int(i, "vehID", DealershipCars[bizid][i][vehID]);
        cache_get_value_int(i, "vehModel", DealershipCars[bizid][i][vehModel]);
        cache_get_value_int(i, "vehPrice", DealershipCars[bizid][i][vehPrice]);
    }
    return 1;
}

Function:GYMObject_Load(bizid) {
    new rows = cache_num_rows(),
        slot = cellmin,
        string[128];

    if (rows) {
        for (new i = 0; i < rows; i ++) if ((slot = Iter_Free(GYMObjects)) != cellmin) {
            Iter_Add(GYMObjects, slot);

            cache_get_value_int(i, "ID", GYMObject[slot][objectID]);
            cache_get_value_int(i, "BizID", GYMObject[slot][objectBiz]);
            cache_get_value_int(i, "Model", GYMObject[slot][objectModel]);
            
            cache_get_value(i, "Position", string);
            sscanf(string, "p<|>fff", GYMObject[slot][objectPos][0], GYMObject[slot][objectPos][1], GYMObject[slot][objectPos][2]);

            cache_get_value(i, "Rotation", string);
            sscanf(string, "p<|>fff", GYMObject[slot][objectRot][0], GYMObject[slot][objectRot][1], GYMObject[slot][objectRot][2]);

            cache_get_value_int(i, "Type", GYMObject[slot][objectType]);
            cache_get_value_int(i, "Condition", GYMObject[slot][objectCondition]);

            GYMObject[slot][objectStatus] = 1;

            GYMObject_Refresh(slot, bizid);
        }
    }
    return 1;
}

Function:OnGYMObjectCreated(id) {
    GYMObject[id][objectID] = cache_insert_id();
    GYMObject_Save(id);
    return 1;
}

GYMObject_Refresh(id, bizid) {
    if (!Iter_Contains(GYMObjects, id))
        return 0;

    if (!IsValidDynamicObject(GYMObject[id][object])) {
        GYMObject[id][object] = CreateDynamicObject(GYMObject[id][objectModel], GYMObject[id][objectPos][0], GYMObject[id][objectPos][1], GYMObject[id][objectPos][2], GYMObject[id][objectRot][0], GYMObject[id][objectRot][1], GYMObject[id][objectRot][2], BusinessData[bizid][bizID] + 6000, BusinessData[bizid][bizInterior]);
    }
    GYMObject_Update(id, bizid);
    
    if (IsValidDynamic3DTextLabel(GYMObject[id][objectLabel]))
        DestroyDynamic3DTextLabel(GYMObject[id][objectLabel]);

    GYMObject[id][objectLabel] = CreateDynamic3DTextLabel(sprintf("[ID:%d]\n%s\n"YELLOW"%d/5000",id,GetGYMObjectStatus(id),GYMObject[id][objectCondition]), X11_LIGHTBLUE, GYMObject[id][objectPos][0], GYMObject[id][objectPos][1], GYMObject[id][objectPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizID] + 6000, BusinessData[bizid][bizInterior]);
    return 1;
}

GetGYMObjectStatus(id) {
    new output[24];
    switch (GYMObject[id][objectStatus]) {
        case 1: format(output,sizeof(output),GREEN"Available");
        case 2: format(output,sizeof(output),RED"Unavailable");
        case 3: format(output,sizeof(output),RED"Broken");
    }
    return output;
}

GYMObject_Update(id, bizid) {
    new objectid = GYMObject[id][object];

    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, GYMObject[id][objectPos][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, GYMObject[id][objectPos][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, GYMObject[id][objectPos][2]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_X, GYMObject[id][objectRot][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Y, GYMObject[id][objectRot][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Z, GYMObject[id][objectRot][2]);
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID, BusinessData[bizid][bizID] + 6000);
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID, BusinessData[bizid][bizInterior]);
    return 1;
}

GYMObject_Add(bizid, modelid, type, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0) {
    if (!BusinessData[bizid][bizExists])
        return 0;

    static
        string[64],
        id = cellmin;

    if ((id = Iter_Free(GYMObjects)) != cellmin) {
        Iter_Add(GYMObjects, id);

        GYMObject[id][objectModel] = modelid;
        GYMObject[id][objectBiz] = BusinessData[bizid][bizID];
        GYMObject[id][objectPos][0] = x;
        GYMObject[id][objectPos][1] = y;
        GYMObject[id][objectPos][2] = z;
        GYMObject[id][objectRot][0] = rx;
        GYMObject[id][objectRot][1] = ry;
        GYMObject[id][objectRot][2] = rz;
        GYMObject[id][objectType] = type;
        GYMObject[id][objectCondition] = 5000;
        GYMObject[id][objectStatus] = 1;
        
        GYMObject_Refresh(id, bizid);

        format(string,sizeof(string),"INSERT INTO `gymobjects` (`Model`) VALUES ('%d')", GYMObject[id][objectModel]);
        mysql_tquery(g_iHandle, string, "OnGYMObjectCreated", "d", id);

        return id;
    }
    return cellmin;
}

GYMObject_Save(id) {
    new query[512];
    format(query, sizeof(query), "UPDATE `gymobjects` SET `Model`='%d', `BizID`='%d', `Position`='%.2f|%.2f|%.2f', `Rotation`='%.2f|%.2f|%.2f', `Condition`='%d', `Type`='%d' WHERE `ID`='%d'",
        GYMObject[id][objectModel],
        GYMObject[id][objectBiz],
        GYMObject[id][objectPos][0],
        GYMObject[id][objectPos][1],
        GYMObject[id][objectPos][2],
        GYMObject[id][objectRot][0],
        GYMObject[id][objectRot][1],
        GYMObject[id][objectRot][2],
        GYMObject[id][objectCondition],
        GYMObject[id][objectType],
        GYMObject[id][objectID]
    );
    mysql_tquery(g_iHandle, query);
    return 1;
}

GYMObject_Destroy(id) {
    if (!Iter_Contains(GYMObjects, id))
        return 0;

    if (IsValidDynamicObject(GYMObject[id][object]))
        DestroyDynamicObject(GYMObject[id][object]);

    if (IsValidDynamic3DTextLabel(GYMObject[id][objectLabel]))
        DestroyDynamic3DTextLabel(GYMObject[id][objectLabel]);

    GYMObject[id][object] = INVALID_STREAMER_ID;
    GYMObject[id][objectLabel] = INVALID_3DTEXT_ID;

    mysql_tquery(g_iHandle, sprintf("DELETE FROM `gymobjects` WHERE `ID`='%d'", GYMObject[id][objectID]));
    Iter_Remove(GYMObjects, id);
    return 1;
}

GYMObject_Nearest(playerid) {
    foreach (new i : GYMObjects) if (IsPlayerInRangeOfPoint(playerid, 3.0, GYMObject[i][objectPos][0], GYMObject[i][objectPos][1], GYMObject[i][objectPos][2])) {
        return i;
    }
    return -1;
}

Function:OnLoadHouseStructure(houseid) {
    new rows = cache_num_rows(),
        id = cellmin;

    Iter_Init(HouseStruct);
    if (rows) {
        for (new i = 0; i < rows; i ++) if ((id = Iter_Free(HouseStruct[houseid])) != cellmin) {
            Iter_Add(HouseStruct[houseid], id);

            cache_get_value_int(i, "ID", HouseStructure[houseid][id][structureID]);
            cache_get_value_int(i, "Model", HouseStructure[houseid][id][structureModel]);
            cache_get_value_float(i, "PosX", HouseStructure[houseid][id][structurePos][0]);
            cache_get_value_float(i, "PosY", HouseStructure[houseid][id][structurePos][1]);
            cache_get_value_float(i, "PosZ", HouseStructure[houseid][id][structurePos][2]);
            cache_get_value_float(i, "RotX", HouseStructure[houseid][id][structureRot][0]);
            cache_get_value_float(i, "RotY", HouseStructure[houseid][id][structureRot][1]);
            cache_get_value_float(i, "RotZ", HouseStructure[houseid][id][structureRot][2]);
            cache_get_value_int(i, "Material", HouseStructure[houseid][id][structureMaterial]);
            cache_get_value_int(i, "Color", HouseStructure[houseid][id][structureColor]);
            cache_get_value_int(i, "Type", HouseStructure[houseid][id][structureType]);

            HouseStructure_Refresh(id, houseid);
        }
    }
    return 1;
}

Function:OnLoadFurniture(houseid)
{
    new
        rows = cache_num_rows(),
        id = cellmin,
        str[32];

    Iter_Init(HouseFurnitures);
    if (rows) {
        for (new i = 0; i != rows; i ++) if((id = Iter_Free(HouseFurnitures[houseid])) != cellmin) {
            Iter_Add(HouseFurnitures[houseid], id);

            cache_get_value(i, "furnitureName", FurnitureData[houseid][id][furnitureName], 32);
            cache_get_value_int(i, "furnitureID", FurnitureData[houseid][id][furnitureID]);
            cache_get_value_int(i, "furnitureModel", FurnitureData[houseid][id][furnitureModel]);
            cache_get_value_int(i, "furnitureUnused", FurnitureData[houseid][id][furnitureUnused]);
            cache_get_value_float(i, "furnitureX", FurnitureData[houseid][id][furniturePos][0]);
            cache_get_value_float(i, "furnitureY", FurnitureData[houseid][id][furniturePos][1]);
            cache_get_value_float(i, "furnitureZ", FurnitureData[houseid][id][furniturePos][2]);
            cache_get_value_float(i, "furnitureRX", FurnitureData[houseid][id][furnitureRot][0]);
            cache_get_value_float(i, "furnitureRY", FurnitureData[houseid][id][furnitureRot][1]);
            cache_get_value_float(i, "furnitureRZ", FurnitureData[houseid][id][furnitureRot][2]);

            cache_get_value(i, "furnitureMaterials", str, 32);
            sscanf(str, "p<|>dddddddddddddddd", 
                FurnitureData[houseid][id][furnitureMaterials][0],
                FurnitureData[houseid][id][furnitureMaterials][1],
                FurnitureData[houseid][id][furnitureMaterials][2],
                FurnitureData[houseid][id][furnitureMaterials][3],
                FurnitureData[houseid][id][furnitureMaterials][4],
                FurnitureData[houseid][id][furnitureMaterials][5],
                FurnitureData[houseid][id][furnitureMaterials][6],
                FurnitureData[houseid][id][furnitureMaterials][7],
                FurnitureData[houseid][id][furnitureMaterials][8],
                FurnitureData[houseid][id][furnitureMaterials][9],
                FurnitureData[houseid][id][furnitureMaterials][10],
                FurnitureData[houseid][id][furnitureMaterials][11],
                FurnitureData[houseid][id][furnitureMaterials][12],
                FurnitureData[houseid][id][furnitureMaterials][13],
                FurnitureData[houseid][id][furnitureMaterials][14],
                FurnitureData[houseid][id][furnitureMaterials][15]
            );

            Furniture_Refresh(id, houseid);
        }
    }
    return 1;
}

HouseStructure_CopyObject(id, houseid) {
    new current = HouseStructure[houseid][id][structureObject],
        model,
        Float:curPos[3],
        Float:curRot[3],
        matModel,
        txdName[32],
        textureName[32],
        matColor,
        textureID = 0;

    model = Streamer_GetIntData(STREAMER_TYPE_OBJECT, current, E_STREAMER_MODEL_ID);
    Streamer_GetFloatData(STREAMER_TYPE_OBJECT, current, E_STREAMER_X, curPos[0]);
    Streamer_GetFloatData(STREAMER_TYPE_OBJECT, current, E_STREAMER_Y, curPos[1]);
    Streamer_GetFloatData(STREAMER_TYPE_OBJECT, current, E_STREAMER_Z, curPos[2]);
    Streamer_GetFloatData(STREAMER_TYPE_OBJECT, current, E_STREAMER_R_X, curRot[0]);
    Streamer_GetFloatData(STREAMER_TYPE_OBJECT, current, E_STREAMER_R_Y, curRot[1]);
    Streamer_GetFloatData(STREAMER_TYPE_OBJECT, current, E_STREAMER_R_Z, curRot[2]);

    if (HouseStructure[houseid][id][structureMaterial] > 0) {
        GetDynamicObjectMaterial(current, 0, matModel, txdName, textureName, matColor);
        textureID = HouseStructure[houseid][id][structureMaterial];
    }

    new copyId = HouseStructure_Add(houseid, model, curPos[0], curPos[1], curPos[2], curRot[0], curRot[1], curRot[2]);

    if (copyId == cellmin)
        return cellmin;

    if (textureID != 0) SetDynamicObjectMaterial(HouseStructure[houseid][copyId][structureObject], 0, matModel, txdName, textureName, matColor), HouseStructure[houseid][copyId][structureMaterial] = textureID, HouseStructure_Save(copyId, houseid);

    return copyId;
}

HouseStructure_GetCount(houseid) {
    new count;

    foreach (new i : HouseStruct[houseid]) if (HouseStructure[houseid][i][structureType] == 0) count++;

    return count;
}

Furniture_GetCount(houseid) {
    return Iter_Count(HouseFurnitures[houseid]);
}

Furniture_GetMaxItems(houseid) {
    new maxItems = 0;

    switch (HouseData[houseid][houseType]) {
        case 1: maxItems = 100; // Small house
        case 2: maxItems = 150; // Medium house
        case 3: maxItems = 200; // Big house
    }

    return maxItems;
}

HouseStructure_Refresh(id, houseid) {
    if (Iter_Contains(HouseStruct[houseid], id)) {
        if (!IsValidDynamicObject(HouseStructure[houseid][id][structureObject])) {
            HouseStructure[houseid][id][structureObject] = CreateDynamicObject(HouseStructure[houseid][id][structureModel], HouseStructure[houseid][id][structurePos][0], HouseStructure[houseid][id][structurePos][1], HouseStructure[houseid][id][structurePos][2], HouseStructure[houseid][id][structureRot][0], HouseStructure[houseid][id][structureRot][1], HouseStructure[houseid][id][structureRot][2], HouseData[houseid][houseID] + 5000, HouseData[houseid][houseInterior]);
        }
        HouseStructure_ObjectUpdate(id, houseid);

        foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 5.0, HouseStructure[houseid][id][structurePos][0], HouseStructure[houseid][id][structurePos][1], HouseStructure[houseid][id][structurePos][2])) {
            Streamer_Update(i);
        }
    }
    return 1;
}

HouseStructure_ObjectUpdate(id, houseid) {
    if (Iter_Contains(HouseStruct[houseid], id)) {
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_X, HouseStructure[houseid][id][structurePos][0]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_Y, HouseStructure[houseid][id][structurePos][1]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_Z, HouseStructure[houseid][id][structurePos][2]);

		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_R_X, HouseStructure[houseid][id][structureRot][0]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_R_Y, HouseStructure[houseid][id][structureRot][1]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_R_Z, HouseStructure[houseid][id][structureRot][2]);

		Streamer_SetIntData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_WORLD_ID, HouseData[houseid][houseID] + 5000);
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, HouseStructure[houseid][id][structureObject], E_STREAMER_INTERIOR_ID, HouseData[houseid][houseInterior]);
        
        if (HouseStructure[houseid][id][structureMaterial] > 0) {
            if (HouseStructure[houseid][id][structureModel] == 1502 || HouseStructure[houseid][id][structureModel] == 14414) SetDynamicObjectMaterial(HouseStructure[houseid][id][structureObject], 1, GetTModel(HouseStructure[houseid][id][structureMaterial]), GetTXDName(HouseStructure[houseid][id][structureMaterial]), GetTextureName(HouseStructure[houseid][id][structureMaterial]), HouseStructure[houseid][id][structureColor]);
            else SetDynamicObjectMaterial(HouseStructure[houseid][id][structureObject], 0, GetTModel(HouseStructure[houseid][id][structureMaterial]), GetTXDName(HouseStructure[houseid][id][structureMaterial]), GetTextureName(HouseStructure[houseid][id][structureMaterial]), HouseStructure[houseid][id][structureColor]);
        }
		return 1;
    }
    return 0;
}

Furniture_Refresh(furnitureid, houseid)
{
    if(Iter_Contains(HouseFurnitures[houseid], furnitureid))
    {
        if(!IsValidDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject])) {
            if(FurnitureData[houseid][furnitureid][furnitureUnused] == 0)
            {
                FurnitureData[houseid][furnitureid][furnitureObject] = CreateDynamicObject(
                    FurnitureData[houseid][furnitureid][furnitureModel],
                    FurnitureData[houseid][furnitureid][furniturePos][0],
                    FurnitureData[houseid][furnitureid][furniturePos][1],
                    FurnitureData[houseid][furnitureid][furniturePos][2],
                    FurnitureData[houseid][furnitureid][furnitureRot][0],
                    FurnitureData[houseid][furnitureid][furnitureRot][1],
                    FurnitureData[houseid][furnitureid][furnitureRot][2],
                    HouseData[houseid][houseID] + 5000,
                    HouseData[houseid][houseInterior]
                );
            }
        }
        Furniture_Update(furnitureid, houseid);

        foreach(new i : Player) if(SQL_IsLogged(i) && IsPlayerInRangeOfPoint(i, 5, FurnitureData[houseid][furnitureid][furniturePos][0], FurnitureData[houseid][furnitureid][furniturePos][1], FurnitureData[houseid][furnitureid][furniturePos][2])) {
			Streamer_Update(i);
		}
    }
    return 1;
}

Furniture_Update(furnitureid, houseid) {
    if(Iter_Contains(HouseFurnitures[houseid], furnitureid)) {
        if (!IsValidDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]))
            return 0;

        if (FurnitureData[houseid][furnitureid][furnitureUnused] == 1) {
            DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);
            FurnitureData[houseid][furnitureid][furnitureObject] = INVALID_STREAMER_ID;
            
            return 1;
        }

		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_X, FurnitureData[houseid][furnitureid][furniturePos][0]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_Y,FurnitureData[houseid][furnitureid][furniturePos][1]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_Z, FurnitureData[houseid][furnitureid][furniturePos][2]);

		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_R_X, FurnitureData[houseid][furnitureid][furnitureRot][0]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_R_Y, FurnitureData[houseid][furnitureid][furnitureRot][1]);
		Streamer_SetFloatData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_R_Z, FurnitureData[houseid][furnitureid][furnitureRot][2]);

		Streamer_SetIntData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_WORLD_ID, HouseData[houseid][houseID] + 5000);
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, FurnitureData[houseid][furnitureid][furnitureObject], E_STREAMER_INTERIOR_ID, HouseData[houseid][houseInterior]);

        for(new i = 0; i != MAX_MATERIALS; i++) if(FurnitureData[houseid][furnitureid][furnitureMaterials][i] > 0) {
            SetDynamicObjectMaterial(FurnitureData[houseid][furnitureid][furnitureObject], i, 
                GetTModel(FurnitureData[houseid][furnitureid][furnitureMaterials][i]), 
                GetTXDName(FurnitureData[houseid][furnitureid][furnitureMaterials][i]), 
                GetTextureName(FurnitureData[houseid][furnitureid][furnitureMaterials][i]), 0
            );
        }

        return 1;
    }
    return 0;
}

HouseStructure_Save(id, houseid) {
    if (Iter_Contains(HouseStruct[houseid], id)) {
        static
            query[600];

        format(query, sizeof(query), "UPDATE `housestruct` SET `HouseID`='%d', `Model`='%d', `PosX`='%.4f', `PosY`='%.4f', `PosZ`='%.4f', `RotX`='%.4f', `RotY`='%.4f', `RotZ`='%.4f', `Material`='%d', `Color`='%d', `Type`='%d' WHERE `ID`='%d'",
            HouseData[houseid][houseID],
            HouseStructure[houseid][id][structureModel],
            HouseStructure[houseid][id][structurePos][0],
            HouseStructure[houseid][id][structurePos][1],
            HouseStructure[houseid][id][structurePos][2],
            HouseStructure[houseid][id][structureRot][0],
            HouseStructure[houseid][id][structureRot][1],
            HouseStructure[houseid][id][structureRot][2],
            HouseStructure[houseid][id][structureMaterial],
            HouseStructure[houseid][id][structureColor],
            HouseStructure[houseid][id][structureType],
            HouseStructure[houseid][id][structureID]
        );
        return mysql_tquery(g_iHandle, query);
    }
    return 0;
}

Furniture_Save(furnitureid, houseid)
{
    static
        string[1024];

    format(string, sizeof(string), "UPDATE `furniture` SET `ID` = '%d', `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f', `furnitureUnused` = '%d', `furnitureMaterials` = '%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d' WHERE `furnitureID` = '%d'",
        HouseData[houseid][houseID],
        FurnitureData[houseid][furnitureid][furnitureModel],
        SQL_ReturnEscaped(FurnitureData[houseid][furnitureid][furnitureName]),
        FurnitureData[houseid][furnitureid][furniturePos][0],
        FurnitureData[houseid][furnitureid][furniturePos][1],
        FurnitureData[houseid][furnitureid][furniturePos][2],
        FurnitureData[houseid][furnitureid][furnitureRot][0],
        FurnitureData[houseid][furnitureid][furnitureRot][1],
        FurnitureData[houseid][furnitureid][furnitureRot][2],
        FurnitureData[houseid][furnitureid][furnitureUnused],
        FurnitureData[houseid][furnitureid][furnitureMaterials][0],
        FurnitureData[houseid][furnitureid][furnitureMaterials][1],
        FurnitureData[houseid][furnitureid][furnitureMaterials][2],
        FurnitureData[houseid][furnitureid][furnitureMaterials][3],
        FurnitureData[houseid][furnitureid][furnitureMaterials][4],
        FurnitureData[houseid][furnitureid][furnitureMaterials][5],
        FurnitureData[houseid][furnitureid][furnitureMaterials][6],
        FurnitureData[houseid][furnitureid][furnitureMaterials][7],
        FurnitureData[houseid][furnitureid][furnitureMaterials][8],
        FurnitureData[houseid][furnitureid][furnitureMaterials][9],
        FurnitureData[houseid][furnitureid][furnitureMaterials][10],
        FurnitureData[houseid][furnitureid][furnitureMaterials][11],
        FurnitureData[houseid][furnitureid][furnitureMaterials][12],
        FurnitureData[houseid][furnitureid][furnitureMaterials][13],
        FurnitureData[houseid][furnitureid][furnitureMaterials][14],
        FurnitureData[houseid][furnitureid][furnitureMaterials][15],
        FurnitureData[houseid][furnitureid][furnitureID]
    );
    return mysql_tquery(g_iHandle, string);
}

HouseStructure_Add(houseid, modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, type = 0) {
    static
        id = cellmin;

    if(!Iter_Contains(Houses, houseid))
        return 0;

    if ((id = Iter_Free(HouseStruct[houseid])) != cellmin) {
        Iter_Add(HouseStruct[houseid], id);
        
        HouseStructure[houseid][id][structureModel] = modelid;
        HouseStructure[houseid][id][structurePos][0] = x;
        HouseStructure[houseid][id][structurePos][1] = y;
        HouseStructure[houseid][id][structurePos][2] = z;
        HouseStructure[houseid][id][structureRot][0] = rx;
        HouseStructure[houseid][id][structureRot][1] = ry;
        HouseStructure[houseid][id][structureRot][2] = rz;
        HouseStructure[houseid][id][structureMaterial] = 0;
        HouseStructure[houseid][id][structureColor] = 0;
        HouseStructure[houseid][id][structureType] = type;

        HouseStructure_Refresh(id, houseid);
        mysql_tquery(g_iHandle, sprintf("INSERT INTO `housestruct` (`HouseID`) VALUES ('%d')", HouseData[houseid][houseID]), "OnHouseStructureCreated", "dd", id, houseid);

        return id;
    }

    return cellmin;
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, unused = 1)
{
    static
        id = cellmin;

    if(!Iter_Contains(Houses, houseid))
        return 0;

    if((id = Iter_Free(HouseFurnitures[houseid])) != cellmin)
    {
        Iter_Add(HouseFurnitures[houseid], id);

        format(FurnitureData[houseid][id][furnitureName], 32, name);
        FurnitureData[houseid][id][furnitureModel] = modelid;
        FurnitureData[houseid][id][furniturePos][0] = x;
        FurnitureData[houseid][id][furniturePos][1] = y;
        FurnitureData[houseid][id][furniturePos][2] = z;
        FurnitureData[houseid][id][furnitureRot][0] = rx;
        FurnitureData[houseid][id][furnitureRot][1] = ry;
        FurnitureData[houseid][id][furnitureRot][2] = rz;
        FurnitureData[houseid][id][furnitureUnused] = unused;

        Furniture_Refresh(id, houseid);
        mysql_tquery(g_iHandle, sprintf("INSERT INTO `furniture` (`ID`) VALUES('%d')", HouseData[houseid][houseID]), "OnFurnitureCreated", "dd", id, houseid);

        return id;
    }
    return cellmin;
}

HouseStructure_DeleteAll(houseid) {
    if (Iter_Contains(Houses, houseid)) {
        foreach (new id : HouseStruct[houseid]) if (HouseStructure[houseid][id][structureType] == 0) {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `housestruct` WHERE `ID`='%d'", HouseStructure[houseid][id][structureID]));

            if (IsValidDynamicObject(HouseStructure[houseid][id][structureObject])) {
                DestroyDynamicObject(HouseStructure[houseid][id][structureObject]);
                HouseStructure[houseid][id][structureObject] = INVALID_STREAMER_ID;
            }

            new tmp_houseStructure[houseStructure];
            HouseStructure[houseid][id] = tmp_houseStructure;

            new current = id;
            Iter_SafeRemove(HouseStruct[houseid], current, id);
        }
    }
    return 1;
}

HouseStructure_Delete(id, houseid) {
    if (Iter_Contains(HouseStruct[houseid], id)) {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `housestruct` WHERE `ID`='%d'", HouseStructure[houseid][id][structureID]));

        if (IsValidDynamicObject(HouseStructure[houseid][id][structureObject])) {
            DestroyDynamicObject(HouseStructure[houseid][id][structureObject]);
            HouseStructure[houseid][id][structureObject] = INVALID_STREAMER_ID;
        }

        Iter_Remove(HouseStruct[houseid], id);

        new tmp_houseStructure[houseStructure];
        HouseStructure[houseid][id] = tmp_houseStructure;
    }
    return 1;
}

Furniture_Delete(furnitureid, houseid)
{
    if(Iter_Contains(HouseFurnitures[houseid], furnitureid))
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `furniture` WHERE `furnitureID` = '%d'", FurnitureData[houseid][furnitureid][furnitureID]));

        if (IsValidDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject])) {
            DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);
            FurnitureData[houseid][furnitureid][furnitureObject] = INVALID_STREAMER_ID;
        }

        Iter_Remove(HouseFurnitures[houseid], furnitureid);

        new tmp_furniture[furnitureData];
        FurnitureData[houseid][furnitureid] = tmp_furniture;
    }
    return 1;
}

Function:OnLoadCarStorage(carid)
{
    new
        rows = cache_num_rows(),
        slot = cellmin,
        str[32];

    Iter_Init(CarsStorage);
    for (new i = 0; i != rows; i ++) if ((slot = Iter_Free(CarsStorage[carid])) != cellmin) {
        Iter_Add(CarsStorage[carid], slot);

        cache_get_value_int(i, "itemID", CarStorage[carid][slot][cItemID]);
        cache_get_value_int(i, "itemModel", CarStorage[carid][slot][cItemModel]);
        cache_get_value_int(i, "itemQuantity", CarStorage[carid][slot][cItemQuantity]);

        cache_get_value(i, "itemName", str, sizeof(str));
        strpack(CarStorage[carid][slot][cItemName], str, 32 char);
    }
    return 1;
}

Function:OnLoadWeapon(houseid)
{
    new
        rows = cache_num_rows();

    for (new i = 0; i != rows; i ++) {
        cache_get_value_int(i, "weaponid", HouseData[houseid][houseWeapons][i]);
        cache_get_value_int(i, "ammo", HouseData[houseid][houseAmmo][i]);
        cache_get_value_int(i, "durability", HouseData[houseid][houseDurability][i]);
    }
    return 1;
}

Function:OnLoadStorage(houseid)
{
    new
        rows = cache_num_rows(),
        str[32],
        slot = cellmin;

    Iter_Init(HousesStorage);
    for (new i = 0; i != rows; i ++) if((slot = Iter_Free(HousesStorage[houseid])) != cellmin) {
        Iter_Add(HousesStorage[houseid], slot);

        cache_get_value_int(i, "itemID", HouseStorage[houseid][slot][hItemID]);
        cache_get_value_int(i, "itemModel", HouseStorage[houseid][slot][hItemModel]);
        cache_get_value_int(i, "itemQuantity", HouseStorage[houseid][slot][hItemQuantity]);

        cache_get_value(i, "itemName", str, sizeof(str));
        strpack(HouseStorage[houseid][slot][hItemName], str, 32 char);
    }
    return 1;
}

/*Function:OnLoadBackpack(id)
{
    static
        rows,
        fields,
        itemid = -1;

    cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i != rows; i ++) if((itemid = Backpack_GetFreeItem()) != -1) {
        BackpackItems[itemid][bItemExists] = true;
        BackpackItems[itemid][bItemBackpack] = id;
        BackpackItems[itemid][bItemID] = cache_get_value_int(i, "itemID");
        BackpackItems[itemid][bItemModel] = cache_get_value_int(i, "itemModel");
        BackpackItems[itemid][bItemQuantity] = cache_get_value_int(i, "itemQuantity");

        cache_get_value(i, "itemName", BackpackItems[itemid][bItemName], 32);
    }
    return 1;
}*/

Dealership_Save(id)
{
    static
        query[1024];

    format(query, sizeof(query), "UPDATE `dealership` SET `Lock` = '%d', `Stock` = '%d', `Name` = '%s', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `spawnX` = '%.4f', `spawnY` = '%.4f', `spawnZ` = '%.4f', `spawnRX` = '%.4f', `Type` = '%d' WHERE `ID`='%d'",
        DealershipData[id][dLock],
        DealershipData[id][dStock],
        SQL_ReturnEscaped(DealershipData[id][dName]),
        DealershipData[id][dPos][0],
        DealershipData[id][dPos][1],
        DealershipData[id][dPos][2],
        DealershipData[id][dSpawnPos][0],
        DealershipData[id][dSpawnPos][1],
        DealershipData[id][dSpawnPos][2],
        DealershipData[id][dSpawnPos][3],
        DealershipData[id][dType],
        DealershipData[id][dID]
            
    );
    return mysql_tquery(g_iHandle, query);
}

House_Save(houseid)
{
    static
        query[1536];

    format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
        HouseData[houseid][houseOwner],
        HouseData[houseid][housePrice],
        SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
        HouseData[houseid][housePos][0],
        HouseData[houseid][housePos][1],
        HouseData[houseid][housePos][2],
        HouseData[houseid][housePos][3],
        HouseData[houseid][houseInt][0],
        HouseData[houseid][houseInt][1],
        HouseData[houseid][houseInt][2],
        HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
    );
    format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d', `houseOwnerName` = '%s', `houseLastVisited` = '%d', `houseBuilder` = '%d', `houseBuilderTime` = '%d', `houseType` = '%d', `houseSeal` = '%d' WHERE `houseID` = '%d'",
        query,
        HouseData[houseid][houseLocked],
        HouseData[houseid][houseMoney],
        HouseData[houseid][houseOwnerName],
        HouseData[houseid][houseLastVisited],
        HouseData[houseid][houseBuilder],
        HouseData[houseid][houseBuilderTime],
        HouseData[houseid][houseType],
        HouseData[houseid][houseSeal],
        HouseData[houseid][houseID]
    );
    return mysql_tquery(g_iHandle, query);
}

House_Inside(playerid)
{
    if(PlayerData[playerid][pHouse] != -1)
    {
        foreach (new i : Houses) if(HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
            return i;
        }
    }
    return -1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if(ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
    {
        if(GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
        return i;
    }
    return -1;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++) if(PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 6.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
            return i;
    }
    return -1;
}

Plant_Nearest(playerid)
{
    for (new i = 0; i != MAX_PLANTS; i ++) if(PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
    {
        if(GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
        return i;
    }
    return -1;
}

// Crate_Highest(crateid)
// {
//     new
//         Float:height = -1.0,
//         id = -1;

//     for (new i = 0; i != MAX_CRATES; i ++) if(i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
//     {
//         if(CrateData[i][cratePos][2] > height)
//         {
//             height = CrateData[i][cratePos][2];
//             id = i;
//         }
//     }
//     return id;
// }

// Crate_Nearest(playerid, Float:radius = 2.5)
// {
//     if(PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
//         return PlayerData[playerid][pCarryCrate];

//     for (new i = 0; i != MAX_CRATES; i ++) if(CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
//     {
//         if(GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
//         return i;
//     }
//     return -1;
// }

House_Nearest(playerid)
{
    foreach (new i : Houses) if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
    {
        if(GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
        return i;
    }
    return -1;
}

House_GetGarageCount(houseid) {
    new
        count = 0;

    for (new i = 0; i != MAX_GARAGE; i ++) if (GarageData[i][garageExists] && GarageData[i][garageHouseLink] == HouseData[houseid][houseID]) {
        count += GarageData[i][garageType];
    }

    return count;
}

House_Refresh(houseid)
{
    if(Iter_Contains(Houses, houseid))
    {
        if(IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
            DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

        if(IsValidDynamicPickup(HouseData[houseid][housePickup]))
            DestroyDynamicPickup(HouseData[houseid][housePickup]);

        if(IsValidDynamicCP(HouseData[houseid][houseCheckpoint]))
            DestroyDynamicCP(HouseData[houseid][houseCheckpoint]);

        new
            string[512];

        if(!HouseData[houseid][houseOwner])
        {
            format(string, sizeof(string), "[ID: %d]\n"GREEN"This house for sell\n"YELLOW"%s\n"WHITE"Price: "YELLOW"%s\n"WHITE"Garage Count: "YELLOW"%d\n"WHITE"Type /buy to purchase", houseid, HouseData[houseid][houseAddress], FormatNumber(HouseData[houseid][housePrice]), House_GetGarageCount(houseid));
            HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]+0.2, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior], _, 15);
        }
        else
        {
            if (HouseData[houseid][houseSeal]) {
                format(string, sizeof(string), "[ID: %d]\n"WHITE"Owner: "YELLOW"%s\n"GREY"%s\n"WHITE"Garage Count: "YELLOW"%d\n"WHITE"This house is sealed by "RED"authority", houseid, HouseData[houseid][houseOwnerName], HouseData[houseid][houseAddress], House_GetGarageCount(houseid));
            } else {
                format(string, sizeof(string), "[ID: %d]\n"WHITE"Owner: "YELLOW"%s\n"GREY"%s\n"WHITE"Garage Count: "YELLOW"%d\n"WHITE"Press '"RED"~k~~GROUP_CONTROL_BWD~"WHITE"' to enter", houseid, HouseData[houseid][houseOwnerName], HouseData[houseid][houseAddress], House_GetGarageCount(houseid));
            }
            HouseData[houseid][housePickup] = CreateDynamicPickup(19132, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]+0.2, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior], _, 15);
            HouseData[houseid][houseCheckpoint] = CreateDynamicCP(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 1.5, _, _, _, 3);
        }
        HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]+0.5, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
    }
    return 1;
}

FactionMember_GetCount(factionid, type = 0)
{
    new
        count = 0;

    foreach(new i : Player) if(PlayerData[i][pFaction] == factionid)
    {
        if(!type)
            count++;
        else if(type && PlayerData[i][pOnDuty])
            count++;
    }
    return count;
}

// Vehicle_ObjectCount(vehicleid)
// {
//     new 
//         count = 0;

//     for (new i = 0; i < MAX_VEHICLE_OBJECT; i++) if(VehicleData[vehicleid][cExists] && VehicleObjects[vehicleid][i][object_model]) {
//         count++;
//     }
//     return count;
// }

GetPlayerVehicle(playerid) {
    new slot;
    if (PlayerData[playerid][pVip] == 3 && PlayerData[playerid][pVipTime]) {
        slot = MAX_PLAYER_VEHICLE+1;
    } else if (PlayerData[playerid][pVip] == 4 && PlayerData[playerid][pVipTime]) {
        slot = MAX_OWNABLE_CARS;
    } else {
        if (Vehicle_GetCount(playerid) > MAX_PLAYER_VEHICLE) {
            slot = Vehicle_GetCount(playerid);
        } else {
            slot = MAX_PLAYER_VEHICLE;
        }
    }
    return slot;
}

Properties_GetCount(playerid) {
    new count = 0, string[32], maxProperties;

    foreach (new i : Houses) if(House_IsOwner(playerid, i)) {
        count++;
    }
    for (new i = 0; i < MAX_BUSINESSES; i ++) if(Business_IsOwner(playerid, i)) {
        count++;
    }
    for (new i = 0; i < MAX_WORKSHOP; i ++) if(Workshop_IsOwner(playerid, i)) {
        count++;
    }
    for(new i = 0; i != MAX_GARAGE; i++) if(Garage_IsOwner(playerid, i) && !GarageData[i][garageHouseLink]) {
        count++;
    }
    foreach (new i : ApartRooms) if (ApartRoom_IsOwner(playerid, i)) {
        count++;
    }
    foreach (new i : Farms) if (Farm_IsOwner(playerid, i)) {
        count++;
    }

    if (PlayerData[playerid][pVipTime] && PlayerData[playerid][pVip] == 2) maxProperties = MAX_OWNABLE_HOUSES+1+MAX_OWNABLE_GARAGE;
    else if (PlayerData[playerid][pVipTime] && PlayerData[playerid][pVip] == 3) maxProperties = MAX_OWNABLE_HOUSES+2+MAX_OWNABLE_GARAGE+1+MAX_OWNABLE_BUSINESSES+1+MAX_OWNABLE_WORKSHOP+1;
    else if (PlayerData[playerid][pVipTime] && PlayerData[playerid][pVip] == 4) maxProperties = MAX_OWNABLE_HOUSES+3+MAX_OWNABLE_GARAGE+1+MAX_OWNABLE_BUSINESSES+1+MAX_OWNABLE_WORKSHOP+1;
    else maxProperties = MAX_OWNABLE_HOUSES+MAX_OWNABLE_GARAGE+MAX_OWNABLE_BUSINESSES+MAX_OWNABLE_WORKSHOP;

    format(string, sizeof(string), ""YELLOW"%d"WHITE"/"RED"%d", count, maxProperties);

    return string;
}

IsVehicleOnGarage(id) {
    if (!Iter_Contains(DynamicVehicles, id))
        return 0;

    if (VehicleData[id][cGarage] || VehicleData[id][cGarageApart] || VehicleData[id][cGarageFlat])
        return 1;

    return 0;
}

Vehicle_GetCount(playerid)
{
    new
        count = 0;

    if (playerid != INVALID_PLAYER_ID)
    {
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cOwner] == PlayerData[playerid][pID] && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cGarageFlat] && !VehicleData[i][cInsideInsurance])
        {
            count++;
        }
    }

    return count;
}

House_GetCount(playerid)
{
    new
        count = 0;

    foreach (new i : Houses) if(House_IsOwner(playerid, i))
    {
        count++;
    }
    return count;
}

House_IsBuilder(playerid) {
    foreach (new i : Houses) if (HouseData[i][houseBuilder] == PlayerData[playerid][pID]) {
        return 1;
    }
    return 0;
}

Business_GetCount(playerid)
{
    new
        count = 0;

    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
    {
        count++;
    }
    return count;
}

Business_VehGetCount(bizid) {
    new count = 0;

    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[bizid][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
        count++;
    }

    return count;
}

Car_WeaponStorage(playerid, carid)
{
    if(!Iter_Contains(DynamicVehicles, carid))
        return 0;

    static
        string[164];

    string[0] = 0;

    strcat(string, "Weapon\tAmmo\tDurability\n");
    for (new i = 0; i < 3; i ++)
    {
        if(22 <= VehicleData[carid][cWeapons][i] <= 38) {
            strcat(string, sprintf("%s\t%d\t%d\n", ReturnWeaponName(VehicleData[carid][cWeapons][i]), VehicleData[carid][cAmmo][i], VehicleData[carid][cDurability][i]));
        }
        else {
            strcat(string, sprintf("{%s}%s\t \t \n", (VehicleData[carid][cWeapons][i]) ? ("C0C0C0") : ("FFFFFF"), (VehicleData[carid][cWeapons][i]) ? (ReturnWeaponName(VehicleData[carid][cWeapons][i])) : (""WHITE"Empty Slot")));
        }
    }
    Dialog_Show(playerid, Trunk_WeaponStorage, DIALOG_STYLE_TABLIST_HEADERS, "Car Trunk", string, "Select", "Cancel");
    return 1;
}

Car_ShowTrunk(playerid)
{
    Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Car Storage", "Item Storage\nWeapon Storage", "Select", "Cancel");
    return 1;
}

static IsNearFactionLocker(playerid)
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1)
        return 0;

    foreach (new i : Lockers) if (LockerData[i][lFaction] == GetFactionSQLID(playerid)) {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, LockerData[i][lPos][0], LockerData[i][lPos][1], LockerData[i][lPos][2]) && GetPlayerInterior(playerid) == LockerData[i][lInterior] && GetPlayerVirtualWorld(playerid) == LockerData[i][lWorld])
            return 1;
    }

    return 0;
}

static IsPlayerNearVehSpawnPoint(playerid) {
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1)
        return -1;
    
    foreach (new i : SpawnPoints) if (VehSpawnPoint[i][sFaction] == FactionData[factionid][factionID]) {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, VehSpawnPoint[i][sPos][0], VehSpawnPoint[i][sPos][1], VehSpawnPoint[i][sPos][2]) && GetPlayerInterior(playerid) == VehSpawnPoint[i][sInterior] && GetPlayerVirtualWorld(playerid) == VehSpawnPoint[i][sWorld]) return i;
    }

    return -1;
}

stock GetFactionByID(sqlid)
{
    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
        return i;

    return -1;
}

SetFaction(playerid, id)
{
    if(id != -1 && FactionData[id][factionExists])
    {
        PlayerData[playerid][pFaction] = id;
        PlayerData[playerid][pFactionID] = FactionData[id][factionID];
    }
    return 1;
}

SetFactionColor(playerid)
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid != -1)
        return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

    return 0;
}

Faction_Update(factionid)
{
    if(factionid != -1 || FactionData[factionid][factionExists])
    {
        foreach (new i : Player) if(PlayerData[i][pFaction] == factionid)
        {
            if(GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
                SetFactionColor(i);
        }
    }
    return 1;
}

// Faction_Refresh(factionid)
// {
//     if(factionid != -1 && FactionData[factionid][factionExists])
//     {
//         static
//             string[256];

//         // if(IsValidDynamicPickup(FactionData[factionid][factionPickup]))
//         //     DestroyDynamicPickup(FactionData[factionid][factionPickup]);

//         // if(IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
//         //     DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

//         if (IsValidDynamicPickup(FactionData[factionid][vehPointPickup]))
//             DestroyDynamicPickup(FactionData[factionid][vehPointPickup]);

//         if(IsValidDynamic3DTextLabel(FactionData[factionid][vehPointText]))
//             DestroyDynamic3DTextLabel(FactionData[factionid][vehPointText]);

//         // FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

//         // format(string, sizeof(string), "[Locker:%d]\n"GREEN"%s\n"WHITE"/flocker to access the locker.", factionid, FactionData[factionid][factionName]);
//         // FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

//         if (FactionData[factionid][vehSpawnX] != 0.0) {
//             FactionData[factionid][vehPointPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][vehSpawnX], FactionData[factionid][vehSpawnY], FactionData[factionid][vehSpawnZ], FactionData[factionid][vehSpawnVW], FactionData[factionid][vehSpawnInterior]);

//             format(string, sizeof(string), "[Vehicle Spawn Point]\n"GREEN"%s\n"WHITE"Type /spawn to spawning static vehicle\nType /despawn to despawning your current vehicle", FactionData[factionid][factionName]);
//             FactionData[factionid][vehPointText] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, FactionData[factionid][vehSpawnX], FactionData[factionid][vehSpawnY], FactionData[factionid][vehSpawnZ], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, FactionData[factionid][vehSpawnVW], FactionData[factionid][vehSpawnInterior]);
//         }
//     }
//     return 1;
// }

Faction_Save(factionid)
{
    static
        query[2048];

    format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d'",
        SQL_ReturnEscaped(FactionData[factionid][factionName]),
        FactionData[factionid][factionColor],
        FactionData[factionid][factionType],
        FactionData[factionid][factionRanks]
        // FactionData[factionid][factionLockerPos][0],
        // FactionData[factionid][factionLockerPos][1],
        // FactionData[factionid][factionLockerPos][2],
        // FactionData[factionid][factionLockerInt],
        // FactionData[factionid][factionLockerWorld],
        // FactionData[factionid][vehSpawnX],
        // FactionData[factionid][vehSpawnY],
        // FactionData[factionid][vehSpawnZ],
        // FactionData[factionid][vehSpawnInterior],
        // FactionData[factionid][vehSpawnVW]
    );
    for (new i = 0; i < 10; i ++)
    {
        format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d', `factionGunRank%d` = '%d', `factionDurability%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i], i + 1, FactionData[factionid][factionGunRank][i], i + 1, FactionData[factionid][factionDurability][i]);
    }
    format(query, sizeof(query), "%s, `factionMoney` = '%d', `factionWithdraw`='%s', `factionWithdrawMoney`='%d', `factionDeposit`='%s', `factionDepositMoney`='%d', `factionMotd`='%s' WHERE `factionID` = '%d'",
        query,
        FactionData[factionid][factionMoney],
        FactionData[factionid][factionWithdraw],
        FactionData[factionid][factionWithdrawMoney],
        FactionData[factionid][factionDeposit],
        FactionData[factionid][factionDepositMoney],
        SQL_ReturnEscaped(FactionData[factionid][factionMotd]),
        FactionData[factionid][factionID]
    );
    return mysql_tquery(g_iHandle, query);
}

static Faction_SaveRanks(factionid)
{
    static
        query[1000];

    format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
        SQL_ReturnEscaped(FactionRanks[factionid][0]),
        SQL_ReturnEscaped(FactionRanks[factionid][1]),
        SQL_ReturnEscaped(FactionRanks[factionid][2]),
        SQL_ReturnEscaped(FactionRanks[factionid][3]),
        SQL_ReturnEscaped(FactionRanks[factionid][4]),
        SQL_ReturnEscaped(FactionRanks[factionid][5]),
        SQL_ReturnEscaped(FactionRanks[factionid][6]),
        SQL_ReturnEscaped(FactionRanks[factionid][7]),
        SQL_ReturnEscaped(FactionRanks[factionid][8]),
        SQL_ReturnEscaped(FactionRanks[factionid][9]),
        SQL_ReturnEscaped(FactionRanks[factionid][10]),
        SQL_ReturnEscaped(FactionRanks[factionid][11]),
        SQL_ReturnEscaped(FactionRanks[factionid][12]),
        SQL_ReturnEscaped(FactionRanks[factionid][13]),
        SQL_ReturnEscaped(FactionRanks[factionid][14]),
        FactionData[factionid][factionID]
    );
    return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
    if(factionid != -1 && FactionData[factionid][factionExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
        mysql_tquery(g_iHandle, string);

        format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
        mysql_tquery(g_iHandle, string);

        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cFaction] == FactionData[factionid][factionID]) {
            Vehicle_Delete(i);
        }
        foreach (new i : Player)
        {
            if(PlayerData[i][pFaction] == factionid) {
                PlayerData[i][pFaction] = -1;
                PlayerData[i][pFactionID] = -1;
                PlayerData[i][pFactionRank] = -1;
                format(PlayerData[i][pFactionRankName], 24, "NULL");
            }
            if(PlayerData[i][pFactionEdit] == factionid) {
                PlayerData[i][pFactionEdit] = -1;
            }
        }
        if(IsValidDynamicPickup(FactionData[factionid][factionPickup]))
            DestroyDynamicPickup(FactionData[factionid][factionPickup]);

        if(IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
            DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

        FactionData[factionid][factionExists] = false;
        FactionData[factionid][factionType] = 0;
        FactionData[factionid][factionID] = 0;
        FactionData[factionid][factionPickup] = INVALID_STREAMER_ID;
        FactionData[factionid][factionText3D] = Text3D:INVALID_STREAMER_ID;
    }
    return 1;
}

GetFactionType(playerid)
{
    if(PlayerData[playerid][pFaction] == -1)
        return 0;

    return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

GetFactionSQLID(playerid)
{
    if(PlayerData[playerid][pFaction] == -1)
        return 0;

    return (FactionData[PlayerData[playerid][pFaction]][factionID]);
}

Faction_ShowRanks(playerid, factionid)
{
    if(factionid != -1 && FactionData[factionid][factionExists])
    {
        static
            string[640];

        string[0] = 0;

        for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
            format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

        PlayerData[playerid][pFactionEdit] = factionid;
        Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
    }
    return 1;
}

// Faction_ShowDivision(playerid, factionid) {
//     if (factionid != -1 && FactionData[factionid][factionExists]) {
//         static
//             string[640];

//         
//     }
// }

Faction_Create(name[], type)
{
    for (new i = 0; i != MAX_FACTIONS; i ++) if(!FactionData[i][factionExists])
    {
        format(FactionData[i][factionName], 32, name);

        FactionData[i][factionExists] = true;
        if(type == FACTION_GANG)
           FactionData[i][factionColor] = X11_LIGHTBLUE; 
        else
           FactionData[i][factionColor] = 0xFFFFFF00;

        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;

        // FactionData[i][factionLockerPos][0] = 0.0;
        // FactionData[i][factionLockerPos][1] = 0.0;
        // FactionData[i][factionLockerPos][2] = 0.0;
        // FactionData[i][factionLockerInt] = 0;
        // FactionData[i][factionLockerWorld] = 0;

        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionSkins][j] = 0;
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
            FactionData[i][factionDurability][j] = 0;
        }
        for (new j = 0; j < 15; j ++) {
            format(FactionRanks[i][j], 32, "Rank %d", j + 1);
        }
        mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
        return i;
    }
    return -1;
}

Plant_Delete(plantid)
{
    if(plantid != -1 && PlantData[plantid][plantExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]));

        if(IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
            DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

        if(IsValidDynamicObject(PlantData[plantid][plantObject]))
            DestroyDynamicObject(PlantData[plantid][plantObject]);

        PlantData[plantid][plantExists] = false;
        PlantData[plantid][plantID] = 0;
        PlantData[plantid][plantDrugs] = 0;
        PlantData[plantid][plantText3D] = Text3D:INVALID_STREAMER_ID;
        PlantData[plantid][plantObject] = INVALID_STREAMER_ID;
    }
    return 1;
}

Plant_Create(playerid, type, farm = -1)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_PLANTS; i ++) if(!PlantData[i][plantExists])
        {
            PlantData[i][plantExists] = true;
            PlantData[i][plantType] = type;
            PlantData[i][plantDrugs] = 0;

            PlantData[i][plantPos][0] = x;
            PlantData[i][plantPos][1] = y;
            PlantData[i][plantPos][2] = z;
            PlantData[i][plantPos][3] = angle;
            PlantData[i][plantInterior] = GetPlayerInterior(playerid);
            PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);
            PlantData[i][plantFarm] = farm;

            mysql_tquery(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", "OnPlantCreated", "d", i);
            Plant_Refresh(i);
            return i;
        }
    }
    return -1;
}

Plant_MaxGrams(type)
{
    new grams;

    switch (type)
    {
        case 1: grams = 40; // Marijuana plant
        case 2: grams = 30; // Cocaine plant
        case 3: grams = 25; // Heroin plant
        case 4..7: grams = 50; // Plant Farmer
        default: grams = 0;
    }
    return grams;
}

Plant_Save(plantid)
{
    static
        query[256];

    format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d', `plantFarm` = '%d' WHERE `plantID` = '%d'",
        PlantData[plantid][plantType],
        PlantData[plantid][plantDrugs],
        PlantData[plantid][plantPos][0],
        PlantData[plantid][plantPos][1],
        PlantData[plantid][plantPos][2],
        PlantData[plantid][plantPos][3],
        PlantData[plantid][plantInterior],
        PlantData[plantid][plantWorld],
        PlantData[plantid][plantFarm],
        PlantData[plantid][plantID]
    );
    return mysql_tquery(g_iHandle, query);
}

Plant_GetType(type)
{
    static
        str[16];

    switch (type) {
        case 1: str = "Marijuana";
        case 2: str = "Cocaine";
        case 3: str = "Heroin";
        case 4: str = "Pumpkin";
        case 5: str = "Mushroom";
        case 6: str = "Cucumber";
        case 7: str = "Egg Plant";
    }
    return str;
}

GetPlantName(carid) {
    new str[24];

    switch (VehicleData[carid][cPlantType]) {
        case 1: format(str,sizeof(str),"Pumpkin");
        case 2: format(str,sizeof(str),"Mushroom");
        case 3: format(str,sizeof(str),"Cucumber");
        case 4: format(str,sizeof(str),"Egg Plant");
    }

    return str;
}

GetPlantType(itemName[]) {
    new type;
    if (!strcmp(itemName, "Pumpkin")) type = 1;
    else if (!strcmp(itemName, "Mushroom")) type = 2;
    else if (!strcmp(itemName, "Cucumber")) type = 3;
    else if (!strcmp(itemName, "Egg Plant")) type = 4;

    return type;
}

GetVehiclePlantStorage(carid) {
    new count = 0;

    if (VehicleData[carid][cPlant]) count = VehicleData[carid][cPlant];

    return count;
}

StorePlantIntoVehicle(playerid, carid, itemName[]) {
    new type = GetPlantType(itemName),
        count = Inventory_Count(playerid, itemName);

    if (VehicleData[carid][cPlantType] == 0 || VehicleData[carid][cPlantType] == type) {
        new vehname[32];

        GetVehicleNameByVehicle(VehicleData[carid][cVehicle], vehname);
        VehicleData[carid][cPlantType] = type;
        VehicleData[carid][cPlant] += count;
        Inventory_Remove(playerid, itemName, count);
        if (VehicleData[carid][cPlantObjectUsed] == 0) {
            CreateVehiclePlant(carid);
        }
        SendCustomMessage(playerid, "VEHICLE", "You've been stored "YELLOW"%d gram(s)"WHITE" of %s into your "CYAN"%s"WHITE". Total: "YELLOW"%d gram(s)", count, itemName, vehname, VehicleData[carid][cPlant]);
    } else SendErrorMessage(playerid, "This vehicle has already stored other plant!");
    return 1;
}

StoreComponentIntoVehicle(carid, amount) {
    VehicleData[carid][cComponent] += amount;
    if (!IsValidDynamicObject(VehicleData[carid][cComponentObject])) CreateVehicleComponent(carid);
    return 1;
}

GetServerPlantPrice(name[]) {
    new price;
    if (!strcmp(name, "Pumpkin", true)) price = ServerData[pumpkinPrice];
    else if (!strcmp(name, "Mushroom", true)) price = ServerData[mushroomPrice];
    else if (!strcmp(name, "Cucumber", true)) price = ServerData[cucumberPrice];
    else if (!strcmp(name, "Egg Plant", true)) price = ServerData[eggplantPrice];
    return price;
}

Plant_Refresh(plantid)
{
    if(plantid != -1 && PlantData[plantid][plantExists])
    {
        if(!IsValidDynamicObject(PlantData[plantid][plantObject])) PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
        Plant_ObjectUpdate(plantid);

        if(IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
            DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

        PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(sprintf("[Plant %d]\n"WHITE"%s - %d/%d Grams", plantid, Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType])), COLOR_CLIENT, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 10.0, 
            INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 1, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
    }
    return 1;
}

Plant_ObjectUpdate(plantid) {
    new objectid = PlantData[plantid][plantObject];

    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, PlantData[plantid][plantPos][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, PlantData[plantid][plantPos][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, PlantData[plantid][plantPos][2] - 1.80);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Z, PlantData[plantid][plantPos][3]);

    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID, PlantData[plantid][plantWorld]);
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID, PlantData[plantid][plantInterior]);
    return 1;
}

// Crate_Refresh(crateid)
// {
//     if(crateid != -1 && CrateData[crateid][crateExists])
//     {
//         static
//             string[128];

//         if(IsValidDynamicObject(CrateData[crateid][crateObject]))
//             DestroyDynamicObject(CrateData[crateid][crateObject]);

//         if(IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
//             DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

//         CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

//         if(CrateData[crateid][crateType] != 6) {
//             format(string, sizeof(string), "[Crate %d]\n"WHITE"%s Parts (press 'H' to pickup)", crateid, Crate_GetType(CrateData[crateid][crateType]));
//         }
//         else {
//             format(string, sizeof(string), "[Crate %d]\n"WHITE"Drug Seeds (press 'H' to pickup)", crateid);
//         }
//         CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
//     }
//     return 1;
// }

// Crate_Delete(crateid)
// {
//     if(crateid != -1 && CrateData[crateid][crateExists])
//     {
//         mysql_tquery(g_iHandle, sprintf("DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]));

//         if(IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
//             DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

//         if(IsValidDynamicObject(CrateData[crateid][crateObject]))
//             DestroyDynamicObject(CrateData[crateid][crateObject]);

//         foreach (new i : Player) if(PlayerData[i][pCarryCrate] == crateid) {
//             PlayerData[i][pCarryCrate] = -1;

//             RemovePlayerAttachedObject(i, JOB_SLOT);
//             SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
//         }
//         CrateData[crateid][crateExists] = false;
//         CrateData[crateid][crateID] = 0;
//         CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;

//         CrateData[crateid][crateText3D] = Text3D:INVALID_STREAMER_ID;
//         CrateData[crateid][crateObject] = INVALID_STREAMER_ID;
//     }
//     return 1;
// }

// Crate_Drop(playerid, Float:radius = 0.0)
// {
//     static
//         Float:x,
//         Float:y,
//         Float:z,
//         Float:angle,
//         id = -1;

//     if((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
//     {
//         GetPlayerPos(playerid, x, y, z);
//         GetPlayerFacingAngle(playerid, angle);

//         if(radius != 0.0) {
//             x += radius * floatsin(-angle, degrees);
//             y += radius * floatcos(-angle, degrees);
//         }
//         CrateData[id][cratePos][0] = x;
//         CrateData[id][cratePos][1] = y;
//         CrateData[id][cratePos][2] = z - 0.9;
//         CrateData[id][cratePos][3] = angle;
//         CrateData[id][crateInterior] = GetPlayerInterior(playerid);
//         CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

//         Crate_Refresh(id);
//         Crate_Save(id);
//     }
//     PlayerData[playerid][pCarryCrate] = -1;
//     RemovePlayerAttachedObject(playerid, JOB_SLOT);
//     return 1;
// }

// Crate_Save(crateid)
// {
//     static
//         query[255];

//     format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
//         CrateData[crateid][crateType],
//         CrateData[crateid][cratePos][0],
//         CrateData[crateid][cratePos][1],
//         CrateData[crateid][cratePos][2],
//         CrateData[crateid][cratePos][3],
//         CrateData[crateid][crateInterior],
//         CrateData[crateid][crateWorld],
//         CrateData[crateid][crateID]
//     );
//     return mysql_tquery(g_iHandle, query);
// }

// Crate_GetType(type)
// {
//     static
//         str[24];

//     switch (type) {
//         case 1: str = "Melee";
//         case 2: str = "Pistol";
//         case 3: str = "SMG";
//         case 4: str = "Shotgun";
//         case 5: str = "Rifle";
//         case 6: str = "Drug Seeds";
//         default: str = "None";
//     }
//     return str;
// }

// Crate_Create(playerid, type, Float:x, Float:y, Float:z, Float:a)
// {
//     for (new i = 0; i != MAX_CRATES; i ++) if(!CrateData[i][crateExists])
//     {        
//         if(Crate_Nearest(playerid, 2.5) != -1) {
//             z = floatsub(z, 0.1);
//         }
//         CrateData[i][crateExists] = true;
//         CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
//         CrateData[i][crateType] = type;
//         CrateData[i][cratePos][0] = x;
//         CrateData[i][cratePos][1] = y;
//         CrateData[i][cratePos][2] = z - 0.9;
//         CrateData[i][cratePos][3] = a;

//         CrateData[i][crateInterior] = GetPlayerInterior(playerid);
//         CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

//         mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
//         Crate_Refresh(i);
//         return i;
//     }
//     return -1;
// }

Job_Save(jobid)
{
    static
        query[512];

    format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d', `jobStock`='%d' WHERE `jobID` = '%d'",
        JobData[jobid][jobType],
        JobData[jobid][jobPos][0],
        JobData[jobid][jobPos][1],
        JobData[jobid][jobPos][2],
        JobData[jobid][jobInterior],
        JobData[jobid][jobWorld],
        JobData[jobid][jobPoint][0],
        JobData[jobid][jobPoint][1],
        JobData[jobid][jobPoint][2],
        JobData[jobid][jobDeliver][0],
        JobData[jobid][jobDeliver][1],
        JobData[jobid][jobDeliver][2],
        JobData[jobid][jobPointInt],
        JobData[jobid][jobPointWorld],
        JobData[jobid][jobStock],
        JobData[jobid][jobID]
    );
    return mysql_tquery(g_iHandle, query);
}

Job_GetName(type) {
    static
        str[24];

    switch (type)
    {
        case 1: format(str,sizeof(str),"Trucker");
        case 2: format(str,sizeof(str),"Mechanic");
        case 3: format(str,sizeof(str),"Taxi Driver");
        case 4: format(str,sizeof(str),"Cargo Unloader");
        case 5: format(str,sizeof(str),"Miner");
        case 6: format(str,sizeof(str),"Food Vendor");
        case 7: format(str,sizeof(str),"Package Sorter");
        case 8: format(str,sizeof(str),"Arms Dealer");
        case 9: format(str,sizeof(str),"Lumberjack");
        case 10: format(str,sizeof(str),"Smuggler");
        case 11: format(str,sizeof(str),"Farmer");
        case 12: format(str,sizeof(str),"Builder");
        default: format(str,sizeof(str),"None");
    }

    return str;
}

GetPlayerJobName(playerid)
{
    static
        str[24],
        str2[24],
        job[24];
    
    format(str,sizeof(str),"%s",Job_GetName(GetPlayerJob(playerid, 0)));
    format(str2,sizeof(str2),"%s",Job_GetName(GetPlayerJob(playerid, 1)));

    if (GetPlayerJob(playerid, 0) == JOB_NONE && GetPlayerJob(playerid, 1) == JOB_NONE) {
      format(job,sizeof(job),"Unemployed");
    } else if (GetPlayerJob(playerid, 0) != JOB_NONE && GetPlayerJob(playerid, 1) == JOB_NONE) {
        format(job,sizeof(job),"%s",(!strcmp(str,"None")) ? ("Unemployed") : (str));
    } else if (GetPlayerJob(playerid, 1) != JOB_NONE && GetPlayerJob(playerid, 0) == JOB_NONE) {
        format(job,sizeof(job),"%s",(!strcmp(str2,"None")) ? ("Unemployed") : (str2));
    } else {
        format(job,sizeof(job),"%s%s",str,sprintf(", %s", str2));
    }
    return job;
}

// Billboard_Save(bbid)
// {
//     static query[2048];
//     format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
//         SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
//         SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
//         BillBoardData[bbid][bbOwner],
//         BillBoardData[bbid][bbPrice],
//         BillBoardData[bbid][bbRange],
//         BillBoardData[bbid][bbPos][0],
//         BillBoardData[bbid][bbPos][1],
//         BillBoardData[bbid][bbPos][2],
//         BillBoardData[bbid][bbID]
//     );
//     return mysql_tquery(g_iHandle, query);
// }

// Billboard_Refresh(bizid)
// {
//     if(bizid != -1 && BillBoardData[bizid][bbExists])
//     {
//         if(IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
//             DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

//         static
//             string[128];

//         if(!BillBoardData[bizid][bbOwner]) {
//             format(string, sizeof(string), "[%i] - [%s]\n%s", bizid, FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
//             BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
//         }
//         else if(BillBoardData[bizid][bbOwner]) {
//             format(string, sizeof(string), "[%i]\n%s\n%s", bizid, BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
//             BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
//         }
//     }
//     return 1;
// }

// Billboard_Create(playerid, price)
// {
//     static
//         Float:x,
//         Float:y,
//         Float:z;

//     if(GetPlayerPos(playerid, x, y, z))
//     {
//         for (new i = 0; i != MAX_BILLBOARDS; i ++)
//         {
//             if(!BillBoardData[i][bbExists])
//             {
//                 BillBoardData[i][bbExists] = true;
//                 BillBoardData[i][bbOwner] = 0;
//                 BillBoardData[i][bbPrice] = price;
//                 BillBoardData[i][bbRange] = 10;

//                 format(BillBoardData[i][bbName], 32, "Unnamed Billboard");

//                 BillBoardData[i][bbPos][0] = x;
//                 BillBoardData[i][bbPos][1] = y;
//                 BillBoardData[i][bbPos][2] = z;

//                 Billboard_Refresh(i);
//                 mysql_tquery(g_iHandle, "INSERT INTO `billboards` (`bbOwner`) VALUES(0)", "OnBillboardCreated", "d", i);
//                 return i;
//             }
//         }
//     }
//     return -1;
// }

// Billboard_Delete(bizid)
// {
//     if(bizid != -1 && BillBoardData[bizid][bbExists])
//     {
//         new
//         string[82];

//         format(string, sizeof(string), "DELETE FROM `billboards` WHERE `bbID` = '%d'", BillBoardData[bizid][bbID]);
//         mysql_tquery(g_iHandle, string);

//         if(IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
//             DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

//         BillBoardData[bizid][bbExists] = false;
//         BillBoardData[bizid][bbOwner] = 0;
//         BillBoardData[bizid][bbID] = 0;

//         BillBoardData[bizid][bbText3D] = Text3D:INVALID_STREAMER_ID;
//     }
//     return 1;
// }

Job_Refresh(jobid)
{
    if(jobid != -1 && JobData[jobid][jobExists])
    {
        for (new i = 0; i < 3; i ++) {
            if(IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
                DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

            if(IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
                DestroyDynamicPickup(JobData[jobid][jobPickups][i]);

        }
        if(IsValidDynamicMapIcon(JobData[jobid][jobIcon]))
            DestroyDynamicMapIcon(JobData[jobid][jobIcon]);

        new
            strings[200];

        if(JobData[jobid][jobType] == JOB_MINER) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Mining]\n"WHITE"Type "YELLOW"/mine "WHITE"to begin mining.", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

            JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Mining]\n"WHITE"Deliver your mining rocks at this spot.", COLOR_CLIENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]+0.5, 7.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
            JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
        }
        else if(JobData[jobid][jobType] == JOB_MECHANIC) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Component Warehouse]\n"WHITE"Type "YELLOW"/buycomponent "WHITE"to buy a component\nComponent price: "GREEN"$1 / 1 component.", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_FARMER) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Seeds Shop]\n"WHITE"Type "YELLOW"/buyseeds "WHITE"to buy a seeds", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_SORTER) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Package Sorting]\n"WHITE"Type "YELLOW"/sorting "WHITE"to begin sorting packages.", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

            JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Package Sorting]\n"WHITE"Deliver your packages "YELLOW"here "WHITE"for sorting.", COLOR_CLIENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]+0.5, 7.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
            JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
        }
        else if(JobData[jobid][jobType] == JOB_ARMS_DEALER) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Materials Warehouse]\n"WHITE"Type "YELLOW"/buymaterials"WHITE" to buy materials", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_LUMBERJACK) {
            format(strings, sizeof(strings),"[Lumberjack Point]\n"WHITE"Type "YELLOW"/buychainsaw "WHITE"to buy a chainsaw.\nType "YELLOW"/unloadtree "WHITE"to sell\nType "YELLOW"/getwood "WHITE"for wood courier\nWarehouse Stock "GREEN"%d.", JobData[jobid][jobStock]);
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel(strings, COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        else if(JobData[jobid][jobType] == JOB_FOOD_VENDOR) {
            JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Food Vendor Point]\n"WHITE"Type "YELLOW"/buyfood "WHITE"to buy a raw food.", COLOR_CLIENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
            JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
        }
        JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(sprintf("[JOB:%d]\n"YELLOW"%s\n"WHITE"Type "YELLOW"/takejob [primary/secondary] confirm "WHITE"to acquire this job!", jobid, Job_GetName(JobData[jobid][jobType])), COLOR_CLIENT, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);

    }
    return 1;
}
    

Job_Delete(jobid)
{
    if(jobid != -1 && JobData[jobid][jobExists])
    {
        new
        string[64];

        format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
        mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
            if(IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i])) {
                DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

                JobData[jobid][jobText3D][i] = Text3D:INVALID_STREAMER_ID;
            }

            if(IsValidDynamicPickup(JobData[jobid][jobPickups][i])) {                
                DestroyDynamicPickup(JobData[jobid][jobPickups][i]);

                JobData[jobid][jobPickups][i] = INVALID_STREAMER_ID;
            }

        }

        if(IsValidDynamicMapIcon(JobData[jobid][jobIcon]))
            DestroyDynamicMapIcon(JobData[jobid][jobIcon]);

        JobData[jobid][jobExists] = false;
        JobData[jobid][jobType] = 0;
        JobData[jobid][jobID] = 0;
        JobData[jobid][jobStock] = 0;
        JobData[jobid][jobIcon] = INVALID_STREAMER_ID;
    }
    return 1;
}

Job_Create(playerid, type)
{
    static
        Float:x,
        Float:y,
        Float:z;

    if(GetPlayerPos(playerid, x, y, z))
    {
        for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
        {
            if(!JobData[i][jobExists])
            {
                JobData[i][jobExists] = true;
                JobData[i][jobType] = type;

                JobData[i][jobPos][0] = x;
                JobData[i][jobPos][1] = y;
                JobData[i][jobPos][2] = z;
                JobData[i][jobPoint][0] = 0.0;
                JobData[i][jobPoint][1] = 0.0;
                JobData[i][jobPoint][2] = 0.0;
                JobData[i][jobDeliver][0] = 0.0;
                JobData[i][jobDeliver][1] = 0.0;
                JobData[i][jobDeliver][2] = 0.0;

                JobData[i][jobInterior] = GetPlayerInterior(playerid);
                JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;
                JobData[i][jobStock] = 0;

                Job_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

Vehicle_Create(ownerid = 0, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, faction = 0, plate[], job = 0, workshop = 0, biz = 0)
{
    new 
        string[225],
        i = cellmin;

    if ((i = Iter_Free(DynamicVehicles)) != cellmin) {
        if(color1 == -1)
            color1 = random(127);

        if(color2 == -1)
            color2 = random(127);

        Iter_Add(DynamicVehicles, i);

        VehicleData[i][cOwner] = ownerid;
        VehicleData[i][cModel] = modelid;
        
        format(VehicleData[i][cPlate],24, plate);

        VehicleData[i][cPos][0] = x;
        VehicleData[i][cPos][1] = y;
        VehicleData[i][cPos][2] = z;
        VehicleData[i][cPos][3] = angle;

        VehicleData[i][cColor1] = color1;
        VehicleData[i][cColor2] = color2;

        VehicleData[i][cFaction] = faction;
        VehicleData[i][cJob] = job;
        VehicleData[i][cWorkshop] = workshop;
        VehicleData[i][cBiz] = biz;

        VehicleData[i][cPaintjob] = -1;
        VehicleData[i][cLocked] = false;
        VehicleData[i][cTireLock] = 0;
        VehicleData[i][cImpounded] = -1;
        VehicleData[i][cImpoundPrice] = 0;
        VehicleData[i][cMaxHealth] = 1000.0;

        VehicleData[i][cInsurance] = 3;

        for (new j = 0; j < 14; j ++)
        {
            if(j < 5)
            {
                VehicleData[i][cWeapons][j] = 0;
                VehicleData[i][cAmmo][j] = 0;
                VehicleData[i][cDurability][j] = 0;
            }
            VehicleData[i][cMods][j] = 0;
        }
        VehicleData[i][cVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);
                
        SetVehicleNumberPlate(VehicleData[i][cVehicle],VehicleData[i][cPlate]);
        CoreVehicles[VehicleData[i][cVehicle]][vehFuel] = 100.0;

        VehicleData[i][cNeon] = 0;
        VehicleData[i][cNeonToggle] = 0;
        ReloadVehicleNeon(i);
        DisableVehicleSpeedCap(VehicleData[i][cVehicle]);

        mysql_format(g_iHandle,string,sizeof(string),"INSERT INTO `player_vehicles` (`Owner`) VALUES (%d)",ownerid);
        mysql_tquery(g_iHandle, string, "OnPlayerCarCreated", "d", i);
        
        ResetVehicle(VehicleData[i][cVehicle]);
        return i;
    }
    return cellmin;
}

Vehicle_Delete(carid)
{
    if(Iter_Contains(DynamicVehicles, carid))
    {
        new
            string[128];

        format(string, sizeof(string), "DELETE FROM `player_vehicles` WHERE `ID` = '%d'", VehicleData[carid][cID]);
        mysql_tquery(g_iHandle, string);

        for (new i = 0; i < MAX_GARAGE; i ++) if(GarageData[i][garageExists] && GarageData[i][garageID] == VehicleData[carid][cID]) {
            GarageData[i][garageInside] --;
            Garage_Sync(i);
        }
        Car_RemoveAllItems(carid);
        for (new slot = 0; slot < MAX_VEHICLE_OBJECT+5; slot++) if(VehicleObjects[carid][slot][object_exists]) {
            Vehicle_ObjectReset(carid, slot, true);
        }

        Vehicle_Reset(carid);
    }
    return 1;
}

Vehicle_Invalid(carid) {
    if (!Iter_Contains(DynamicVehicles, carid))
        return 0;
    
    if (IsValidVehicle(VehicleData[carid][cVehicle]))
        return 0;
    
    if (VehicleData[carid][cInsideInsurance] || VehicleData[carid][cImpounded] != -1 || VehicleData[carid][cGarage] || VehicleData[carid][cGarageApart] || VehicleData[carid][cGarageFlat] || VehicleData[carid][cStatic]) {
        return 1;
    }
    
    return 0;
}

Vehicle_Save(carid)
{
    new
        query[2545];

    Vehicle_GetStatus(carid);

    format(query, sizeof(query), "UPDATE `player_vehicles` SET `Model` = '%d', `Pos1` = '%.4f', `Pos2` = '%.4f', `Pos3` = '%.4f', `Pos4` = '%.4f', `Color1` = '%d', `Color2` = '%d', `Paintjob` = '%d', `Locked` = '%d', `Lumber`='%d', `Food`='%d', `Plant`='%d', `PlantType`='%d', `Component`='%d', `STNK`='%d'",
        VehicleData[carid][cModel],
        VehicleData[carid][cPos][0],
        VehicleData[carid][cPos][1],
        VehicleData[carid][cPos][2],
        VehicleData[carid][cPos][3],
        VehicleData[carid][cColor1],
        VehicleData[carid][cColor2],
        VehicleData[carid][cPaintjob],
        VehicleData[carid][cLocked],
        VehicleData[carid][cLumber],
        VehicleData[carid][cFood],
        VehicleData[carid][cPlant],
        VehicleData[carid][cPlantType],
        VehicleData[carid][cComponent],
        VehicleData[carid][cSTNK]
    );

    if(VehicleData[carid][cRent] == 0)
    {
        format(query, sizeof(query), "%s, `Mods1` = '%d', `Mods2` = '%d', `Mods3` = '%d', `Mods4` = '%d', `Mods5` = '%d', `Mods6` = '%d', `Mods7` = '%d', `Mods8` = '%d', `Mods9` = '%d', `Mods10` = '%d', `Mods11` = '%d', `Mods12` = '%d', `Mods13` = '%d', `Mods14` = '%d'",
            query,
            VehicleData[carid][cMods][0],
            VehicleData[carid][cMods][1],
            VehicleData[carid][cMods][2],
            VehicleData[carid][cMods][3],
            VehicleData[carid][cMods][4],
            VehicleData[carid][cMods][5],
            VehicleData[carid][cMods][6],
            VehicleData[carid][cMods][7],
            VehicleData[carid][cMods][8],
            VehicleData[carid][cMods][9],
            VehicleData[carid][cMods][10],
            VehicleData[carid][cMods][11],
            VehicleData[carid][cMods][12],
            VehicleData[carid][cMods][13]
        );
    }
    format(query, sizeof(query), "%s, `Owner` ='%d', `Damage1` = '%d', `Damage2` = '%d', `Damage3` = '%d', `Damage4` = '%d', `Plate`='%s'",
        query,
        VehicleData[carid][cOwner],
        VehicleData[carid][cDamage][0],
        VehicleData[carid][cDamage][1],
        VehicleData[carid][cDamage][2],
        VehicleData[carid][cDamage][3],
        SQL_ReturnEscaped(VehicleData[carid][cPlate])
    );
    format(query, sizeof(query), "%s, `TireLock`='%d', `Impound` = '%d', `ImpoundPrice` = '%d', `Weapon1` = '%d', `Weapon2` = '%d', `Weapon3` = '%d', `Weapon4` = '%d', `Weapon5` = '%d', `Ammo1` = '%d', `Ammo2` = '%d', `Ammo3` = '%d', `Ammo4` = '%d', `Ammo5` = '%d', `Health`='%.02f' WHERE `ID` = '%d'",
        query,
        VehicleData[carid][cTireLock],
        VehicleData[carid][cImpounded],
        VehicleData[carid][cImpoundPrice],
        VehicleData[carid][cWeapons][0],
        VehicleData[carid][cWeapons][1],
        VehicleData[carid][cWeapons][2],
        VehicleData[carid][cWeapons][3],
        VehicleData[carid][cWeapons][4],
        VehicleData[carid][cAmmo][0],
        VehicleData[carid][cAmmo][1],
        VehicleData[carid][cAmmo][2],
        VehicleData[carid][cAmmo][3],
        VehicleData[carid][cAmmo][4],
        VehicleData[carid][cHealth],
        VehicleData[carid][cID]
    );

    mysql_tquery(g_iHandle, query);


    format(query, sizeof(query), "UPDATE `player_vehicles` SET `Faction`='%d', `Job`='%d', `Workshop`='%d', `Biz`='%d', `Rental`='%d', `RentalOwned`='%d', `RentalTime`='%d', `RentalPrice`='%d', `Neon`='%d', `NeonToggle`='%d', `Insurance`='%d', `Sirine`='%d', `ImpoundDelay`='%d', `Durability1` = '%d', `Durability2` = '%d', `Durability3` = '%d', `Durability4` = '%d', `Durability5` = '%d', `Static`='%d' WHERE `ID`='%d'", 
        VehicleData[carid][cFaction],
        VehicleData[carid][cJob],
        VehicleData[carid][cWorkshop],
        VehicleData[carid][cBiz],
        VehicleData[carid][cRent],
        VehicleData[carid][cRentOwned],
        VehicleData[carid][cRentTime],
        VehicleData[carid][cRentPrice], 
        VehicleData[carid][cNeon], 
        VehicleData[carid][cNeonToggle], 
        VehicleData[carid][cInsurance], 
        VehicleData[carid][cSirine], 
        VehicleData[carid][cImpoundDelay],
        VehicleData[carid][cDurability][0],
        VehicleData[carid][cDurability][1],
        VehicleData[carid][cDurability][2],
        VehicleData[carid][cDurability][3],
        VehicleData[carid][cDurability][4],
        VehicleData[carid][cStatic],
        VehicleData[carid][cID]
    );

    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "UPDATE `player_vehicles` SET `Fuel`='%.1f', `Int`='%d', `Vw`='%d', `Garage`='%d', `GarageApart`='%d'", (Vehicle_Invalid(carid) == 1) ? (100.0) : (CoreVehicles[VehicleData[carid][cVehicle]][vehFuel]), VehicleData[carid][cInt], (Vehicle_Invalid(carid) == 1) ? (0) : ((VehicleData[carid][cStatic]) ? (VehicleData[carid][cVw]) : GetVehicleVirtualWorld(VehicleData[carid][cVehicle])), VehicleData[carid][cGarage], VehicleData[carid][cGarageApart], VehicleData[carid][cGarageFlat]);
    format(query, sizeof(query), "%s, `MaxHealth`='%1.f', `EngineUpgrade`='%d', `BodyUpgrade`='%d', `InsideInsurance`='%d', `InsuranceTime`='%d' WHERE `ID`='%d'", 
        query,
        VehicleData[carid][cMaxHealth],
        VehicleData[carid][cEngineUpgrade],
        VehicleData[carid][cBodyUpgrade],
        // VehicleData[carid][cAlarm],
        VehicleData[carid][cInsideInsurance],
        VehicleData[carid][cInsuranceTime],
        VehicleData[carid][cID]);

    mysql_tquery(g_iHandle, query);

    return 1;
}

Entrance_Delete(entranceid)
{
    if(entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        new
        string[64];

        format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickupInt]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickupInt]);

        if(IsValidDynamicCP(EntranceData[entranceid][entranceCheckpoint]))
            DestroyDynamicCP(EntranceData[entranceid][entranceCheckpoint]);

        // if(EntranceData[entranceid][entranceType] == 3)
        //     DestroyForklifts(entranceid);

        EntranceData[entranceid][entranceExists] = false;
        EntranceData[entranceid][entranceID] = 0;
        EntranceData[entranceid][entranceText3D] = EntranceData[entranceid][entranceText3DInt] = Text3D:INVALID_STREAMER_ID;
        EntranceData[entranceid][entrancePickup] = EntranceData[entranceid][entrancePickupInt] = EntranceData[entranceid][entranceCheckpoint] = INVALID_STREAMER_ID;
    }
    return 1;
}

Entrance_Save(entranceid)
{
    static
        query[1024];

    format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
        SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
        SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
        EntranceData[entranceid][entranceIcon],
        EntranceData[entranceid][entranceLocked],
        EntranceData[entranceid][entrancePos][0],
        EntranceData[entranceid][entrancePos][1],
        EntranceData[entranceid][entrancePos][2],
        EntranceData[entranceid][entrancePos][3],
        EntranceData[entranceid][entranceInt][0],
        EntranceData[entranceid][entranceInt][1],
        EntranceData[entranceid][entranceInt][2],
        EntranceData[entranceid][entranceInt][3],
        EntranceData[entranceid][entranceInterior],
        EntranceData[entranceid][entranceExterior],
        EntranceData[entranceid][entranceExteriorVW],
        EntranceData[entranceid][entranceType]
    );
    format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceFaction` = '%d', `entranceWorld` = '%d', `entranceVehAble` = '%d' WHERE `entranceID` = '%d'",
        query,
        EntranceData[entranceid][entranceCustom],
        EntranceData[entranceid][entranceFaction],
        EntranceData[entranceid][entranceWorld],
        EntranceData[entranceid][entranceVehAble],
        EntranceData[entranceid][entranceID]
    );
    return mysql_tquery(g_iHandle, query);
}

IsPlayerNearMine(playerid, Float:range = 5.0)
{
    for(new i = 0; i != sizeof(arrMiner); i++) if(SQL_IsCharacterLogged(playerid) && IsPlayerInRangeOfPoint(playerid, range, arrMiner[i][0], arrMiner[i][1], arrMiner[i][2])) {
        return i;
    }
    return -1;
}

IsPlayerNearArrest(playerid)
{
    new
        id = Arrest_Nearest(playerid);

    return (id != -1);
}

IsPlayerInCityHall(playerid)
{
    new
        id = -1;

    if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 4)
        return 1;

    return 0;
}

// IsPlayerInWarehouse(playerid)
// {
//     new
//         id = -1;

//     if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
//         return 1;

//     return 0;
// }

IsPlayerInBank(playerid)
{
    new
        id = -1;

    if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 2 && (IsPlayerInRangeOfPoint(playerid, 2.5, 1408.47, 75.41, 1000.99) || IsPlayerInRangeOfPoint(playerid, 3, 2316.3716,-4.5646,26.7422)))
        return 1;

    return 0;
}

IsPlayerInNewbieSchool(playerid)
{
    new
        id = -1;

    if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 6)
        return 1;

    return 0;
}

IsPlayerInBuyPlatePoint(playerid) {
    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1389.42, -22.71, 1000.99))
        return 1;
    
    else if ((IsPlayerInRangeOfPoint(playerid,3.0,1443.0018,1572.6661,10.9848) && GetPlayerInterior(playerid) == 20))
        return 1;
    
    else return 0;
}

IsPlayerInPayticketPoint(playerid) {
    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1386.82, -22.86, 1000.99))
        return 1;

    else if ((IsPlayerInRangeOfPoint(playerid,3.0,1443.0018,1572.6661,10.9848) && GetPlayerInterior(playerid) == 20))
        return 1;
    
    else return 0;
}

IsPlayerInUnlocktirePoint(playerid) {
    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1389.42, -22.71, 1000.99))
        return 1;
    
    else if (IsPlayerInRangeOfPoint(playerid,3.0,1442.6643,1571.0513,10.9848) && GetPlayerInterior(playerid) == 20)
        return 1;
    
    else return 0;
}

Entrance_UpdateRecentTeleport(playerid)
{
    if (!IsPlayerConnected(playerid))
    {
        return 0;
    }

    PlayerData[playerid][pEntranceTick] = gettime();
    return 1;
}

bool:Entrance_HasRecentTeleport(playerid, seconds = 4)
{
    if (!IsPlayerConnected(playerid))
    {
        return true;
    }

    return ((gettime() - PlayerData[playerid][pEntranceTick]) < seconds);
}

Entrance_Inside(playerid, bool:add = false)
{
    if(add == true)
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, EntranceData[i][entranceVehAble] ? (4.0) : (2.5), EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]) && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld]) {
            return i;
        }
    }
    else 
    {
        if(PlayerData[playerid][pEntrance] != -1)
        {
            for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld]) {
                return i;
            }
        }
    }
    return -1;
}

Entrance_GetLink(playerid)
{
    if(GetPlayerVirtualWorld(playerid) > 0)
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
            return EntranceData[i][entranceID];
    }
    return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
    {
        if(GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
        return i;
    }
    return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
        return i;
    }
    return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
    {
        if(GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
        return i;
    }
    return -1;
}

Entrance_Enter(playerid, id)
{
    if(EntranceData[id][entranceInt][0] == 0.0 && EntranceData[id][entranceInt][1] == 0.0 && EntranceData[id][entranceInt][2] == 0.0) return SendErrorMessage(playerid, "Interior entrance masih kosong, atau tidak memiliki interior.");
    if(EntranceData[id][entranceLocked] && !EntranceData[id][entranceVehAble]) return GameTextForPlayer(playerid, "~r~Locked", 1500, 1);
    if(strlen(EntranceData[id][entrancePass])) return Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Entrance Pass", "Please enter the password for this entrance:", "Submit", "Cancel");
    if (EntranceData[id][entranceFaction] != -1 && PlayerData[playerid][pFaction] != EntranceData[id][entranceFaction]) return SendErrorMessage(playerid, "You don't have any permission to entering this entrance.");
    
    PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
    PlayerData[playerid][pEntranceTick] = gettime();

    if(EntranceData[id][entranceVehAble] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        SetVehicleZAngle(GetPlayerVehicleID(playerid), EntranceData[id][entranceInt][3]);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), EntranceData[id][entranceInterior]);
        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), EntranceData[id][entranceWorld]);

        foreach(new pid : Player) if(SQL_IsCharacterLogged(pid) && IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)) && GetPlayerState(pid) != PLAYER_STATE_DRIVER) {
            PlayerData[pid][pEntrance] = EntranceData[id][entranceID];
            SetPlayerInterior(pid, EntranceData[id][entranceInterior]);
            SetPlayerVirtualWorld(pid, EntranceData[id][entranceWorld]);
            SetCameraBehindPlayer(pid);
        }
    }
    else 
    {

        if(EntranceData[id][entranceCustom]) 
        {
            Player_ToggleTelportAntiCheat(playerid, false);
            SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2], 2500);
        }
        else 
        {
            SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        }
    }

    SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);
    SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
    SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);
    SetCameraBehindPlayer(playerid);

    return 1;
}

Entrance_Exit(playerid, id)
{
    PlayerData[playerid][pEntrance] = -1;
    PlayerData[playerid][pEntranceTick] = gettime();

    if(EntranceData[id][entranceVehAble] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        SetVehiclePos(GetPlayerVehicleID(playerid), EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        SetVehicleZAngle(GetPlayerVehicleID(playerid), EntranceData[id][entrancePos][3]);
        LinkVehicleToInterior(GetPlayerVehicleID(playerid), EntranceData[id][entranceExterior]);
        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), EntranceData[id][entranceExteriorVW]);


        foreach(new pid : Player) if(SQL_IsCharacterLogged(pid) && IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)) && GetPlayerState(pid) != PLAYER_STATE_DRIVER) {
            PlayerData[pid][pEntrance] = EntranceData[id][entranceID];
            SetPlayerInterior(pid, EntranceData[id][entranceInterior]);
            SetPlayerVirtualWorld(pid, EntranceData[id][entranceWorld]);
            SetCameraBehindPlayer(pid);
        }
    }
    else {
        if(EntranceData[id][entranceCustom]) 
        {
            Player_ToggleTelportAntiCheat(playerid, false);
            SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        }
        else 
        {
            SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        }
    }

    SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);
    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
    SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
    SetCameraBehindPlayer(playerid);

    PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
    return 1;
}

Entrance_Refresh(entranceid)
{
    new
        string[255];

    if(entranceid != -1 && EntranceData[entranceid][entranceExists])
    {
        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

        if(IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]))
            DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3DInt]);

        if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickupInt]))
            DestroyDynamicPickup(EntranceData[entranceid][entrancePickupInt]);

        if(IsValidDynamicCP(EntranceData[entranceid][entranceCheckpoint]))
            DestroyDynamicCP(EntranceData[entranceid][entranceCheckpoint]);

        if (EntranceData[entranceid][entranceVehAble]) {
            format(string,sizeof(string),"[PG:%d]\n"YELLOW"%s\n"WHITE"Press '"RED"F"WHITE"' to enter/exit", entranceid, EntranceData[entranceid][entranceName]);
        } else {
            format(string,sizeof(string),"[E:%d]\n"YELLOW"%s\n"WHITE"Press '"RED"F"WHITE"' to enter", entranceid, EntranceData[entranceid][entranceName]);
        }

        if (!EntranceData[entranceid][entranceVehAble]) {
            EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2]+0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
            EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(19130, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior], -1, 10);
            EntranceData[entranceid][entranceCheckpoint] = CreateDynamicCP(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceVehAble] ? (3.0) : (1.5), EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior], -1, 5);
        }

        if(EntranceData[entranceid][entranceInt][0] != 0.0 && EntranceData[entranceid][entranceInt][1] != 0.0 && EntranceData[entranceid][entranceInt][2] != 0.0)
        {
            if (EntranceData[entranceid][entranceVehAble]) {
                format(string,sizeof(string),"[PG:%d]\n"YELLOW"%s\n"WHITE"Press '"RED"F"WHITE"' to enter/exit", entranceid, EntranceData[entranceid][entranceName]);
                EntranceData[entranceid][entranceCheckpoint] = CreateDynamicCP(EntranceData[entranceid][entranceInt][0], EntranceData[entranceid][entranceInt][1], EntranceData[entranceid][entranceInt][2], 3.5, EntranceData[entranceid][entranceWorld], EntranceData[entranceid][entranceInterior], -1, 5);
            } else {
                format(string,sizeof(string),"[E:%d]\n"YELLOW"%s\n"WHITE"Press '"RED"F"WHITE"' to exit", entranceid, EntranceData[entranceid][entranceName]);
            }

            EntranceData[entranceid][entranceText3DInt] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, EntranceData[entranceid][entranceInt][0], EntranceData[entranceid][entranceInt][1], EntranceData[entranceid][entranceInt][2]+0.7, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceWorld], EntranceData[entranceid][entranceInterior]);
            EntranceData[entranceid][entrancePickupInt] = CreateDynamicPickup(19130, 23, EntranceData[entranceid][entranceInt][0], EntranceData[entranceid][entranceInt][1], EntranceData[entranceid][entranceInt][2], EntranceData[entranceid][entranceWorld], EntranceData[entranceid][entranceInterior], -1, 7);
        }
    }
    return 1;
}

IsForkliftVehicle(vehicleid) {
    for (new i = 0; i < 5; i ++) if (ForkliftVehicles[i] == vehicleid) {
        return 1;
    }
    return 0;
}

DestroyForklifts()
{
    for (new i = 0; i < 5; i ++) if (IsValidVehicle(ForkliftVehicles[i])) {
        DestroyVehicle(ForkliftVehicles[i]);
        ForkliftVehicles[i] = INVALID_VEHICLE_ID;
    }
    return 0;
}

CreateForklifts()
{
    ForkliftVehicles[0] = CreateVehicle(530,12.850, -224.022, 5.196, 89.57, 114, 1, -1);
    ForkliftVehicles[1] = CreateVehicle(530,13.072, -228.345, 5.157, 89.57, 114, 1, -1);
    ForkliftVehicles[2] = CreateVehicle(530,12.866, -232.924, 5.164, 89.57, 114, 1, -1);
    ForkliftVehicles[3] = CreateVehicle(530,12.474, -236.830, 5.190, 89.57, 114, 1, -1);
    ForkliftVehicles[4] = CreateVehicle(530,12.298, -241.075, 5.163, 89.57, 114, 1, -1);

    for (new i = 0; i < 5; i ++) if (IsValidVehicle(ForkliftVehicles[i])) {
        CoreVehicles[ForkliftVehicles[i]][vehFuel] = 100.0;
        CoreVehicles[ForkliftVehicles[i]][vehLoadType] = 0;
    }

    print("[FORKLIFT]: Successfull created forklift vehicles.");
    return 1;
}

Entrance_Create(playerid, name[])
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_ENTRANCES; i ++)
        {
            if(!EntranceData[i][entranceExists])
            {
                EntranceData[i][entranceExists] = true;
                EntranceData[i][entranceIcon] = 0;
                EntranceData[i][entranceType] = 0;
                EntranceData[i][entranceCustom] = 0;
                EntranceData[i][entranceFaction] = -1;
                EntranceData[i][entranceLocked] = 0;

                format(EntranceData[i][entranceName], 128, name);
                EntranceData[i][entrancePass][0] = 0;

                EntranceData[i][entrancePos][0] = x;
                EntranceData[i][entrancePos][1] = y;
                EntranceData[i][entrancePos][2] = z;
                EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = 0.0000;
                EntranceData[i][entranceInt][1] = 0.0000;
                EntranceData[i][entranceInt][2] = 0.0000;
                EntranceData[i][entranceInt][3] = 0.0000;

                EntranceData[i][entranceInterior] = 0;
                EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
                EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

                Entrance_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

Business_RemoveVehicle(bizid, modelid)
{
    static
        query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if(DealershipCars[bizid][i][vehModel] == modelid)
    {
        DealershipCars[bizid][i][vehModel] = 0;
        DealershipCars[bizid][i][vehPrice] = 0;

        format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
        mysql_tquery(g_iHandle, query);

        return 1;
    }
    return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
    static
        query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if(!DealershipCars[bizid][i][vehModel])
    {
        DealershipCars[bizid][i][vehModel] = modelid;
        DealershipCars[bizid][i][vehPrice] = price;

        format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
        mysql_tquery(g_iHandle, query, "OnDealerCarCreated", "dd", bizid, i);

        return 1;
    }
    return 0;
}

Business_CarMenu(playerid, bizid)
{
    static
        cars[MAX_DEALERSHIP_CARS],
        price[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
    {
        if(!DealershipCars[bizid][i][vehModel])
            cars[i] = 19300;

        else
        {
            cars[i] = DealershipCars[bizid][i][vehModel];
            price[i] = DealershipCars[bizid][i][vehPrice];
        }
    }
    ShowModelSelectionMenu(playerid, "Purchase Car", MODEL_SELECTION_BUY_CAR, cars, sizeof(cars), -16.0, 0.0, -55.0/*, "Pilih kendaraan yang Kamu inginkan"*/, 0.9, 1, true, price);
    return 1;
}

Business_EditCars(playerid, bizid)
{
    static
        cars[MAX_DEALERSHIP_CARS],
        price[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
    {
        if(!DealershipCars[bizid][i][vehModel])
            cars[i] = 19300;

        else
        {
            cars[i] = DealershipCars[bizid][i][vehModel];                
            price[i] = DealershipCars[bizid][i][vehPrice];
        }
    }
    ShowModelSelectionMenu(playerid, "Dealership Cars", MODEL_SELECTION_DEALER, cars, sizeof(cars), -16.0, 0.0, -55.0, /*"Pilih kendaraan yang Kamu inginkan",*/ 0.9, 1,true, price);
    return 1;
}

Pump_GetFreeID()
{
    for (new i = 0; i < MAX_GAS_PUMPS; i ++) if(!PumpData[i][pumpExists]) {
        return i;
    }
    return -1;
}

Pump_Delete(pumpid)
{
    if(pumpid != -1 && PumpData[pumpid][pumpExists])
    {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]));

        if(IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

        if(IsValidDynamicObject(PumpData[pumpid][pumpObject]))
            DestroyDynamicObject(PumpData[pumpid][pumpObject]);

        foreach (new i : Player) if(PlayerData[i][pGasPump] == pumpid) {
            StopRefilling(i);
        }
        PumpData[pumpid][pumpExists] = false;
        PumpData[pumpid][pumpFuel] = 0;
        PumpData[pumpid][pumpText3D] = Text3D:INVALID_STREAMER_ID;
        PumpData[pumpid][pumpObject] = INVALID_STREAMER_ID;
    }
    return 1;
}

Pump_Create(playerid, bizid)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        string[64],
        id = -1;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        if((id = Pump_GetFreeID()) != -1)
        {
            x += 5.0 * floatsin(-angle, degrees);
            y += 5.0 * floatcos(-angle, degrees);

            PumpData[id][pumpExists] = true;
            PumpData[id][pumpBusiness] = bizid;
            PumpData[id][pumpPos][0] = x;
            PumpData[id][pumpPos][1] = y;
            PumpData[id][pumpPos][2] = z;
            PumpData[id][pumpPos][3] = angle;
            PumpData[id][pumpFuel] = 1000;
            PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

            format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
            mysql_tquery(g_iHandle, string, "OnPumpCreated", "d", id);
            return id;
        }
    }
    return -1;
}

Pump_Refresh(pumpid)
{
    if(pumpid != -1 && PumpData[pumpid][pumpExists])
    {
        if(IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

        if(!IsValidDynamicObject(PumpData[pumpid][pumpObject])) {
            PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
        }
        Pump_ObjectUpdate(pumpid);

        if(PumpData[pumpid][pumpRefilled]) PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(sprintf("[Gas Pump: %d]\n"COL_LIGHTRED"Refilled by someone, can't used now!", pumpid, PumpData[pumpid][pumpFuel]), COLOR_CLIENT, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
        else PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(sprintf("[Gas Pump: %d]\n"WHITE"Fuel Left: %d liters\nType "COL_LIGHTRED"/refuel"WHITE" to fill your vehicle fuel", pumpid, PumpData[pumpid][pumpFuel]), COLOR_CLIENT, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);

        Pump_Save(pumpid);
    }
    return 1;
}

Pump_ObjectUpdate(pumpid) {
    new objectid = PumpData[pumpid][pumpObject];
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, PumpData[pumpid][pumpPos][0]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, PumpData[pumpid][pumpPos][1]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, PumpData[pumpid][pumpPos][2]);
    Streamer_SetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_R_Z, PumpData[pumpid][pumpPos][3]);
    return 1;
}

Pump_Save(pumpid)
{
    static
        query[256];

    format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
        PumpData[pumpid][pumpPos][0],
        PumpData[pumpid][pumpPos][1],
        PumpData[pumpid][pumpPos][2],
        PumpData[pumpid][pumpPos][3],
        PumpData[pumpid][pumpFuel],
        BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
        PumpData[pumpid][pumpID]
    );
    return mysql_tquery(g_iHandle, query);
}

House_Create(playerid, price,address[], type = TYPE_SMALL)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        i = cellmin;

    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        if((i = Iter_Free(Houses)) != cellmin)
        {
            Iter_Add(Houses, i);

            HouseData[i][houseOwner] = 0;
            HouseData[i][housePrice] = price;
            HouseData[i][houseMoney] = 0;

            format(HouseData[i][houseAddress], 32, "%s", address);
            format(HouseData[i][houseOwnerName], 32, "The State");

            HouseData[i][housePos][0] = x;
            HouseData[i][housePos][1] = y;
            HouseData[i][housePos][2] = z;
            HouseData[i][housePos][3] = angle;

            HouseData[i][houseInt][0] = arrHouseInteriors[type][eHouseX];
            HouseData[i][houseInt][1] = arrHouseInteriors[type][eHouseY];
            HouseData[i][houseInt][2] = arrHouseInteriors[type][eHouseZ];
            HouseData[i][houseInt][3] = arrHouseInteriors[type][eHouseAngle];
            HouseData[i][houseInterior] = arrHouseInteriors[type][eHouseInterior];
            HouseData[i][houseType] = type+1;

            HouseData[i][houseExterior] = GetPlayerInterior(playerid);
            HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

            HouseData[i][houseLights] = false;
            HouseData[i][houseLocked] = true;
            HouseData[i][houseSeal] = 0;

            CreateHouseInterior(i);

            House_Refresh(i);
            mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
            return i;
        }
    }
    return cellmin;
}

House_RemoveAllGateAndObject(houseid) {
    if (Iter_Contains(Houses, houseid)) {
        foreach (new id : Gates) if (GateData[id][gateHouse] == HouseData[houseid][houseID]) {
            if(IsValidDynamicObject(GateData[id][gateObject])) {
                DestroyDynamicObject(GateData[id][gateObject]);
                GateData[id][gateObject] = INVALID_STREAMER_ID;
            }
            
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `gates` WHERE `gateID` = '%d';", GateData[id][gateID]));

            new current = id;
            Iter_SafeRemove(Gates, current, id);
        }

        foreach (new i : Obj) if (ObjData[i][oHouse] == HouseData[houseid][houseID]) {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM objects WHERE ID = '%d'", ObjData[i][oID]));

            if (IsValidDynamicObject(ObjData[i][oObject])) {
                DestroyDynamicObject(ObjData[i][oObject]);
                ObjData[i][oObject] = INVALID_STREAMER_ID;
            }

            new tmp_objData[objData];
            ObjData[i] = tmp_objData;

            new current = i;
            Iter_SafeRemove(Obj, current, i);
        }
    }
    return 1;
}

House_RemoveFurniture(houseid)
{
    if(Iter_Contains(Houses, houseid))
    {
        foreach (new furnitureid : HouseFurnitures[houseid]) {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `furniture` WHERE `furnitureID` = '%d'", FurnitureData[houseid][furnitureid][furnitureID]));

            if (IsValidDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject])) {
                DestroyDynamicObject(FurnitureData[houseid][furnitureid][furnitureObject]);
                FurnitureData[houseid][furnitureid][furnitureObject] = INVALID_STREAMER_ID;
            }

            new tmp_furniture[furnitureData];
            FurnitureData[houseid][furnitureid] = tmp_furniture;

            new current = furnitureid;
            Iter_SafeRemove(HouseFurnitures[houseid], current, furnitureid);
        }
    }
    return 1;
}

House_Delete(houseid)
{
    if(Iter_Contains(Houses, houseid))
    {
        new
        string[64];

        format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
        mysql_tquery(g_iHandle, string);

        if(IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
            DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

        if(IsValidDynamicPickup(HouseData[houseid][housePickup]))
            DestroyDynamicPickup(HouseData[houseid][housePickup]);

        if(IsValidDynamicCP(HouseData[houseid][houseCheckpoint]))
            DestroyDynamicCP(HouseData[houseid][houseCheckpoint]);

        /*for (new i = 0; i < MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
            Backpack_Delete(i);
        }*/
        House_RemoveFurniture(houseid);
        House_RemoveAllItems(houseid);
        HouseStructure_DeleteAll(houseid);
        House_RemoveAllGateAndObject(houseid);
        

        Iter_Remove(Houses, houseid);

        HouseData[houseid][houseOwner] = 0;
        HouseData[houseid][houseID] = 0;
        HouseData[houseid][houseText3D] = Text3D:INVALID_3DTEXT_ID;
        HouseData[houseid][housePickup] = HouseData[houseid][houseCheckpoint] = INVALID_STREAMER_ID;
    }
    return 1;
}

House_IsOwner(playerid, houseid)
{
    if(!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
        return 0;

    if((HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
        return 1;

    return 0;
}

GetPlayerHouseAddress(playerid) {
    new output[32];

    if (!House_GetCount(playerid)) {
        format(output, sizeof(output), "Los Santos");
        return output;
    }
    
    foreach (new i : Houses) if (House_IsOwner(playerid, i)) {
        format(output,sizeof(output),"%s",HouseData[i][houseAddress]);
        break;
    }
    return output;
}

GetFirearmLicType(playerid) {
    new type[24];
    switch (PlayerData[playerid][pFirearmLicenseType]) {
        case 1: format(type,sizeof(type),"Small Gun");
        case 2: format(type,sizeof(type),"Heavy Gun");
        case 3: format(type,sizeof(type),"Automatic Gun");
    }
    return type;
}

Business_ProductMenu(playerid, bizid)
{
    if(bizid == -1 || !BusinessData[bizid][bizExists])
        return 0;

    static
        string[512];
        
    switch (BusinessData[bizid][bizType])
    {
        case 1:
        {
            format(string, sizeof(string), "Spray Paint - %s\nLottery Ticket - %s\nBandage - %s\nMask - %s\nFarm Hoe - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 6:
        {
            format(string, sizeof(string), "Can Of Fuel - %s\nSnack - %s\nFrozen Burger - %s\nFuel on 1 liter - %s\nToll Card - %s\nFrozen Pizza - %s\nBottle of Water - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 8:
        {
            format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nPortable Radio - %s\nBoombox - %s\nBaseball Bat - %s\nCamera - %s\nSIM Card - %s\nPhone Credit - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 2:
        {
            format(string, sizeof(string), "Magazine - %s\nAmmo Cartridge - %s\nArmored Vest - %s\nDesert Eagle - %s\nRemington 870 - %s\nM14 Rifle - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 3:
        {
            format(string, sizeof(string), "Clothes - %s\nCap - %s\nBandana - %s\nMask - %s\nHelmet - %s\nWatch - %s\nGlasses - %s\nHairs - %s\nMisc - %s\n",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7]),
                FormatNumber(BusinessData[bizid][bizPrices][8])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 4:
        {
            format(string, sizeof(string), "French Fries - %s\nCheeseburger - %s\nChicken Burger - %s\nChicken Nuggets - %s\nSalad - %s\nSprunk - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 7:
        {
            string[0] = 0;

            for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
                    format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
            }
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
        case 9: {
            format(string, sizeof(string), "GYM Membership (1 hour) - %s\nSprunk - %s\nSnack - %s\nBoxing fightstyle - %s\nKneehead fightstyle - %s\nKungfu fightstyle - %s\nGrabkick fightstyle - %s",
                    FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6])
            );
            Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modify Item", string, "Modify", "Cancel");
        }
    }
    return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
    if(bizid == -1 || !BusinessData[bizid][bizExists])
        return 0;

    static
        string[512];

    switch (BusinessData[bizid][bizType])
    {
        case 1:
        {
            format(string, sizeof(string), "Spray Paint - %s\nLottery Ticket - %s\nBandage - %s\nMask - %s\nFarm Hoe - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 2:
        {
            format(string, sizeof(string), "Magazine - %s\nAmmo Cartridge - %s\nArmored Vest - %s\nDesert Eagle - %s\nRemington 870 - %s\nM14 Rifle - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 3:
        {    
            format(string, sizeof(string), "Clothes - %s\nCap - %s\nBandana - %s\nMask - %s\nHelmet - %s\nWatch - %s\nGlasses - %s\nHairs - %s\nMisc - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7]),
                FormatNumber(BusinessData[bizid][bizPrices][8])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 4:
        {
            format(string, sizeof(string), "French Fries (Hunger +12) - %s\nCheeseburger (Hunger +20) - %s\nChicken Burger (Hunger +26) - %s\nChicken Nuggets (Hunger +30) - %s\nSalad (Hunger +35) - %s\nSprunk (Energy +35) - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 6:
        {
            format(string, sizeof(string), "Can Of Fuel - %s\nSnack - %s\nFrozen Burger - %s\nToll Card - %s\nFrozen Pizza - %s\nBottle of Water - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 7:
        {
            string[0] = 0;

            for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
                format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
            }
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 8:
        {
            format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nPortable Radio - %s\nBoombox - %s\nBaseball Bat - %s\nCamera - %s\nSIM Card - %s\nPhone Credit - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6]),
                FormatNumber(BusinessData[bizid][bizPrices][7])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
        case 9: {
            format(string, sizeof(string), "GYM Membership (1 hour) - %s\nSprunk - %s\nSnack - %s\nBoxing fightstyle - %s\nKneehead fightstyle - %s\nKungfu fightstyle - %s\nGrabkick fightstyle - %s",
                FormatNumber(BusinessData[bizid][bizPrices][0]),
                FormatNumber(BusinessData[bizid][bizPrices][1]),
                FormatNumber(BusinessData[bizid][bizPrices][2]),
                FormatNumber(BusinessData[bizid][bizPrices][3]),
                FormatNumber(BusinessData[bizid][bizPrices][4]),
                FormatNumber(BusinessData[bizid][bizPrices][5]),
                FormatNumber(BusinessData[bizid][bizPrices][6])
            );
            Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Purchase", "Cancel");
        }
    }
    return 1;
}

Business_Save(bizid)
{
    static
        query[2048];

    format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d', `bizSeal` = '%d', `bOwnerName`='%s'",
        SQL_ReturnEscaped(BusinessData[bizid][bizName]),
        SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
        BusinessData[bizid][bizOwner],
        BusinessData[bizid][bizType],
        BusinessData[bizid][bizPrice],
        BusinessData[bizid][bizPos][0],
        BusinessData[bizid][bizPos][1],
        BusinessData[bizid][bizPos][2],
        BusinessData[bizid][bizPos][3],
        BusinessData[bizid][bizInt][0],
        BusinessData[bizid][bizInt][1],
        BusinessData[bizid][bizInt][2],
        BusinessData[bizid][bizInt][3],
        BusinessData[bizid][bizInterior],
        BusinessData[bizid][bizExterior],
        BusinessData[bizid][bizExteriorVW],
        BusinessData[bizid][bizLocked],
        BusinessData[bizid][bizVault],
        BusinessData[bizid][bizProducts],
        BusinessData[bizid][bizSeal],
        BusinessData[bizid][bOwnerName]
    );
    for (new i = 0; i < 20; i ++) {
        format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
    }
    format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d', `bizCargo`='%d', `bizLastVisited` = '%d' WHERE `bizID` = '%d'",
        query,
        BusinessData[bizid][bizSpawn][0],
        BusinessData[bizid][bizSpawn][1],
        BusinessData[bizid][bizSpawn][2],
        BusinessData[bizid][bizSpawn][3],
        BusinessData[bizid][bizDeliver][0],
        BusinessData[bizid][bizDeliver][1],
        BusinessData[bizid][bizDeliver][2],
        BusinessData[bizid][bizShipment],
        BusinessData[bizid][bizCargo],
        BusinessData[bizid][bizLastVisited],
        BusinessData[bizid][bizID]
    );
    return mysql_tquery(g_iHandle, query);
}

Business_RemoveObjects(bizid) {
    foreach (new i : Obj) if (ObjData[i][oBiz] == BusinessData[bizid][bizID]) {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM objects WHERE ID = '%d'", ObjData[i][oID]));

        if (IsValidDynamicObject(ObjData[i][oObject])) {
            DestroyDynamicObject(ObjData[i][oObject]);
            ObjData[i][oObject] = INVALID_STREAMER_ID;
        }

        new tmp_objData[objData];
        ObjData[i] = tmp_objData;

        new current = i;
        Iter_SafeRemove(Obj, current, i);
    }
    return 1;
}

Business_Inside(playerid)
{
    if(PlayerData[playerid][pBusiness] != -1)
    {
        for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
            return i;
        }
    }
    return -1;
}

Vehicle_GetStatus(carid, location = 0)
{
    if(VehicleData[carid][cImpounded] != -1)
        return 0;

    GetVehicleDamageStatus(VehicleData[carid][cVehicle], VehicleData[carid][cDamage][0], VehicleData[carid][cDamage][1], VehicleData[carid][cDamage][2], VehicleData[carid][cDamage][3]);

    GetVehicleHealth(VehicleData[carid][cVehicle], VehicleData[carid][cHealth]);

    if(VehicleData[carid][cOwner]) {
        if(!location)
        {
            GetVehiclePos(VehicleData[carid][cVehicle], VehicleData[carid][cPos][0], VehicleData[carid][cPos][1], VehicleData[carid][cPos][2]);
            GetVehicleZAngle(VehicleData[carid][cVehicle],VehicleData[carid][cPos][3]);
        }
    } else if (VehicleData[carid][cRent] && VehicleData[carid][cRentOwned]) {
        if (!location) {
            GetVehiclePos(VehicleData[carid][cVehicle], VehicleData[carid][cPos][0], VehicleData[carid][cPos][1], VehicleData[carid][cPos][2]);
            GetVehicleZAngle(VehicleData[carid][cVehicle],VehicleData[carid][cPos][3]);
        }
    }
    return 1;
}

Vehicle_Inside(playerid)
{
    new carid;

    if(IsPlayerInAnyVehicle(playerid) && (carid = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1)
        return carid;

    return -1;
}

// Vehicle_Nearest(playerid, Float:range = 3.0)
// {
//     static
//         Float:fX,
//         Float:fY,
//         Float:fZ;

//     for(new i = 1; i != MAX_DYNAMIC_VEHICLES; i++) if(VehicleData[i][cExists]) {
//         GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);
//         if(IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ)) {
//             return i;
//         }
//     }
//     return -1;
// }

Vehicle_Nearest(playerid, Float:range = 5.0) {
    new id = -1, Float: playerdist, Float: tempdist = 9999.0;
    static Float:fX, Float:fY, Float:fZ;

    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i)) {
        GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);
        playerdist = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);
        if(playerdist > range) continue;
        if(playerdist <= tempdist) {
            tempdist = playerdist;
            id = i;
        }
    }
    return id;
}


Business_NearestDeliver(playerid, Float:range = 5.0)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, range, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
    }
    return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
    {
        if(GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
        return i;
    }
    return -1;
}

Business_Refresh(bizid)
{
    if(bizid != -1 && BusinessData[bizid][bizExists])
    {
        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);
                
        static
            string[225];

        if(!BusinessData[bizid][bizOwner]) {
            format(string, sizeof(string), "This business owned by: "YELLOW"Goverment\n"WHITE"Business type: "YELLOW"%s\nBusiness ID:"WHITE"%d\nBusiness price: "YELLOW"%s"WHITE"\nType /buy to purchase this business", Business_Type(bizid), bizid, FormatNumber(BusinessData[bizid][bizPrice]));
        }
        else
        {
            if(BusinessData[bizid][bizSeal]) {
                format(string, sizeof(string), TURQUOISE_1"[id: %d]"GREEN"\n%s\n"WHITE"Owner: "YELLOW"%s\n"WHITE"This business is sealed by "RED"authority", bizid, BusinessData[bizid][bizName], BusinessData[bizid][bOwnerName]);
            }
            else {
                format(string, sizeof(string), TURQUOISE_1"[id: %d]"GREEN"\n%s\n"WHITE"Owner: "YELLOW"%s\n"WHITE"Press '"RED"~k~~GROUP_CONTROL_BWD~"WHITE"' to enter", bizid, BusinessData[bizid][bizName], BusinessData[bizid][bOwnerName]);
            }
        }
        BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, -1, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        BusinessData[bizid][bizPickup] = CreateDynamicPickup(1272, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.2, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        switch(BusinessData[bizid][bizType])
        {
            case 1:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 17, 10);
            }
            case 2:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 6, 10);
            }
            case 3:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 45, 10);
            }
            case 4:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 50, 10);
            }
            case 5:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 55, 10);
            }
            case 6:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 63, 10);
            }
            case 7:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 31, 10);
            }
            case 8:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 16, 10);
            }
            case 9:
            {
                BusinessData[bizid][bizIcon] = CreateDynamicMapIcon(BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 54, 10);
            }
        }
        
        if(BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][1] != 0.0 && BusinessData[bizid][bizDeliver][2] != 0.0)
        {
                format(string, sizeof(string), "%s\nStock: "WHITE"%d\n\n{AAC4E5}Delivery Point", BusinessData[bizid][bizName], BusinessData[bizid][bizProducts]);
                BusinessData[bizid][bizDeliverPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
                BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, X11_YELLOW, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        }
    }
    return 1;
}

Business_Create(playerid, type, price)
{
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle;


    if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
    {
        for (new i = 0; i != MAX_BUSINESSES; i ++)
        {
            if(!BusinessData[i][bizExists])
            {
                BusinessData[i][bizExists] = true;
                BusinessData[i][bizOwner] = 0;
                BusinessData[i][bizPrice] = price;
                BusinessData[i][bizType] = type;

                format(BusinessData[i][bizName], 32, Business_Type(i));

                BusinessData[i][bizPos][0] = x;
                BusinessData[i][bizPos][1] = y;
                BusinessData[i][bizPos][2] = z;
                BusinessData[i][bizPos][3] = angle;

                BusinessData[i][bizSpawn][0] = x;
                BusinessData[i][bizSpawn][1] = y;
                BusinessData[i][bizSpawn][2] = z;
                BusinessData[i][bizSpawn][3] = angle;

                BusinessData[i][bizDeliver][0] = 0.0;
                BusinessData[i][bizDeliver][1] = 0.0;
                BusinessData[i][bizDeliver][2] = 0.0;

                if(type == 1) {
                    BusinessData[i][bizInt][0] = -27.3074;
                    BusinessData[i][bizInt][1] = -30.8741;
                    BusinessData[i][bizInt][2] = 1003.5573;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 4;
                    BusinessData[i][bizPrices][0] = 75;
                    BusinessData[i][bizPrices][1] = 125;
                    BusinessData[i][bizPrices][2] = 15;
                    BusinessData[i][bizPrices][3] = 100;
                    BusinessData[i][bizPrices][4] = 3;
                    BusinessData[i][bizPrices][5] = 2;
                    BusinessData[i][bizPrices][6] = 10;
                    BusinessData[i][bizPrices][7] = 100;
                    BusinessData[i][bizPrices][8] = 20;
                    BusinessData[i][bizPrices][9] = 10;
                    BusinessData[i][bizPrices][10] = 150;
                    BusinessData[i][bizPrices][11] = 200;
                    BusinessData[i][bizPrices][12] = 160;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
                    BusinessData[i][bizPrices][15] = 5;
                    BusinessData[i][bizPrices][16] = 10;
                    BusinessData[i][bizPrices][17] = 5;
                }
                else if(type == 2) {
                    BusinessData[i][bizInt][0] = 316.3963;
                    BusinessData[i][bizInt][1] = -169.8375;
                    BusinessData[i][bizInt][2] = 999.6010;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 6;
                    BusinessData[i][bizPrices][0] = 50;
                    BusinessData[i][bizPrices][1] = 100;
                    BusinessData[i][bizPrices][2] = 200;
                    BusinessData[i][bizPrices][3] = 400;
                    BusinessData[i][bizPrices][4] = 600;
                    BusinessData[i][bizPrices][5] = 800;
                }
                else if(type == 3) {
                    BusinessData[i][bizInt][0] = 161.4801;
                    BusinessData[i][bizInt][1] = -96.5368;
                    BusinessData[i][bizInt][2] = 1001.8047;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 18;
                    BusinessData[i][bizPrices][0] = 25;
                    BusinessData[i][bizPrices][1] = 15;
                    BusinessData[i][bizPrices][2] = 10;
                    BusinessData[i][bizPrices][3] = 10;
                }
                else if(type == 4) {
                    BusinessData[i][bizInt][0] = 363.3402;
                    BusinessData[i][bizInt][1] = -74.6679;
                    BusinessData[i][bizInt][2] = 1001.5078;
                    BusinessData[i][bizInt][3] = 315.0000;
                    BusinessData[i][bizInterior] = 10;
                    BusinessData[i][bizPrices][0] = 2;
                    BusinessData[i][bizPrices][1] = 5;
                    BusinessData[i][bizPrices][2] = 5;
                    BusinessData[i][bizPrices][3] = 10;
                    BusinessData[i][bizPrices][4] = 10;
                    BusinessData[i][bizPrices][5] = 15;
                    BusinessData[i][bizPrices][6] = 10;
                }
                else if(type == 5) {
                    BusinessData[i][bizInt][0] = 1494.5612;
                    BusinessData[i][bizInt][1] = 1304.2061;
                    BusinessData[i][bizInt][2] = 1093.2891;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 3;
                }
                else if(type == 6) {
                    BusinessData[i][bizInt][0] = -27.3383;
                    BusinessData[i][bizInt][1] = -57.6909;
                    BusinessData[i][bizInt][2] = 1003.5469;
                    BusinessData[i][bizInt][3] = 0.0000;
                    BusinessData[i][bizInterior] = 6;
                    BusinessData[i][bizPrices][0] = 75;
                    BusinessData[i][bizPrices][1] = 115;
                    BusinessData[i][bizPrices][2] = 15;
                    BusinessData[i][bizPrices][3] = 90;
                    BusinessData[i][bizPrices][4] = 3;
                    BusinessData[i][bizPrices][5] = 2;
                    BusinessData[i][bizPrices][6] = 10;
                    BusinessData[i][bizPrices][7] = 90;
                    BusinessData[i][bizPrices][8] = 20;
                    BusinessData[i][bizPrices][9] = 10;
                    BusinessData[i][bizPrices][10] = 140;
                    BusinessData[i][bizPrices][11] = 150;
                    BusinessData[i][bizPrices][12] = 50;
                    BusinessData[i][bizPrices][13] = 40;
                    BusinessData[i][bizPrices][14] = 5;
                    BusinessData[i][bizPrices][15] = 10;
                    BusinessData[i][bizPrices][16] = 5;
                }
                else if(type == 7) {
                    BusinessData[i][bizInt][0] = -2240.4954;
                    BusinessData[i][bizInt][1] = 128.3774;
                    BusinessData[i][bizInt][2] = 1035.4210;
                    BusinessData[i][bizInt][3] = 270.0000;
                    BusinessData[i][bizInterior] = 6;

                    BusinessData[i][bizPrices][0] = 75;
                    BusinessData[i][bizPrices][1] = 115;
                    BusinessData[i][bizPrices][2] = 15;
                    BusinessData[i][bizPrices][3] = 1;
                }
                BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
                BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

                BusinessData[i][bizLocked] = true;
                BusinessData[i][bizVault] = 0;
                BusinessData[i][bizProducts] = 100;
                BusinessData[i][bizShipment] = 0;
                BusinessData[i][bizSeal] = 0;

                Business_Refresh(i);
                mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
                return i;
            }
        }
    }
    return -1;
}

static Business_RemoveCars(bizid)
{
    if(BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
    {
        static
        string[32];

        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
        {
            DealershipCars[bizid][i][vehModel] = 0;
            DealershipCars[bizid][i][vehPrice] = 0;
        }
        format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
        mysql_tquery(g_iHandle, string);
    }
    return 1;
}

static Business_RemovePumps(bizid)
{
    if(BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
    {
        foreach (new i : Player) if(PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
        {
            StopRefilling(i);
        }
        for (new i = 0; i != MAX_GAS_PUMPS; i ++) if(PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
        {
            DestroyDynamicObject(PumpData[i][pumpObject]);
            DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);

            PumpData[i][pumpExists] = 0;
            PumpData[i][pumpFuel] = 0;
            PumpData[i][pumpObject] = INVALID_STREAMER_ID;
            PumpData[i][pumpText3D] = Text3D:INVALID_STREAMER_ID;
        }
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]));
    }
    return 1;
}

Business_Delete(bizid)
{
    if(bizid != -1 && BusinessData[bizid][bizExists])
    {
        new
        string[82];
                    
        format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
        mysql_tquery(g_iHandle, string);

        foreach (new i : Player) if(PlayerData[i][pShipment] == bizid) {
            PlayerData[i][pShipment] = -1;
            PlayerData[i][pDeliverShipment] = 0;

            DisablePlayerCheckpoint(i);
        }
        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);
                
        if(IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
            DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

        if(IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizPickup]);
                
        if(IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
            DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

        Business_RemovePumps(bizid);
        Business_RemoveCars(bizid);
        Business_RemoveObjects(bizid);

        BusinessData[bizid][bizExists] = false;
        BusinessData[bizid][bizOwner] = 0;
        BusinessData[bizid][bizID] = 0;
        BusinessData[bizid][bizText3D] = BusinessData[bizid][bizDeliverText3D] = Text3D:INVALID_STREAMER_ID;
        BusinessData[bizid][bizPickup] = BusinessData[bizid][bizDeliverPickup] = INVALID_STREAMER_ID;
    }
    return 1;
}

Business_IsOwner(playerid, bizid)
{
    if(!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
        return 0;

    if((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
        return 1;

    return 0;
}

Business_IsEmployee(playerid, bizid) {
	new str[128], Cache: cache;
	format(str, sizeof(str), "SELECT * FROM `business_employee` WHERE `Name`='%s' AND `Biz`='%d'", NormalName(playerid), BusinessData[bizid][bizID]);
	cache = mysql_query(g_iHandle, str);
	new result = cache_num_rows();
	cache_delete(cache);
	return result;
}

BusinessEmployee_Add(playerid, bizid)
{
	new str[128];
	format(str, sizeof(str), "INSERT INTO `business_employee` SET `Name`='%s', `Biz`='%d', `Time`=UNIX_TIMESTAMP()", NormalName(playerid), BusinessData[bizid][bizID]);
	mysql_tquery(g_iHandle, str);
	return 1;
}

BusinessEmployee_Remove(id)
{
	new query[200];
	format(query,sizeof(query),"DELETE FROM `business_employee` WHERE `ID`='%d'", id);
	mysql_tquery(g_iHandle, query);
	return 1;
}

BusinessEmployee_RemoveAll(bizid)
{
	new query[200];
	format(query,sizeof(query),"DELETE FROM `business_employee` WHERE `Biz`='%d'", BusinessData[bizid][bizID]);
	mysql_tquery(g_iHandle, query);
	return 1;
}

BusinessEmployee_GetCount(bizid)
{
	new query[144], Cache: check, count;
	mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `business_employee` WHERE `Biz` = '%d'", BusinessData[bizid][bizID]);
	check = mysql_query(g_iHandle, query);
	new result = cache_num_rows();
	if(result) {
		for(new i; i != result; i++) {
			count++;
		}
	}
	cache_delete(check);
	return count;
}

Business_ShowEmployee(playerid, id, type = 0)
{
	new query[255], Cache: cache;
	format(query, sizeof(query), "SELECT * FROM `business_employee` WHERE `Biz`='%d'", BusinessData[id][bizID]);
	cache = mysql_query(g_iHandle, query);

	if(!cache_num_rows()) return SendErrorMessage(playerid, "There are no one employee for this business.");
	
	format(query, sizeof(query), "#\tName\tDate Added\n");
	for(new i; i < cache_num_rows(); i++) {
		new biz,
            time,
			name[24];

        cache_get_value_int(i, "ID", biz);
		cache_get_value_int(i, "Time", time);
		cache_get_value(i, "Name", name, sizeof(name));
		format(query, sizeof(query), "%s%d\t%s\t%s\n", query, biz, name, ConvertTimestamp(Time:time));
	}
	if (!type)
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Business Employee", query, "Close", "");
	else
		Dialog_Show(playerid, Business_RemoveEmployee, DIALOG_STYLE_TABLIST_HEADERS, "Remove Employee", query, "Remove", "Close");

	cache_delete(cache);
	return 1;
}

Dialog:Business_RemoveEmployee(playerid, response, listitem, inputtext[]) {
    if (response) {
        BusinessEmployee_Remove(strval(inputtext));
		SendCustomMessage(playerid, "BUSINESS", "You've remove list employee number #%d from your business.", strval(inputtext));
    }
    return 1;
}

Dialog:MyInventory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if (listitem < 0)
        {
            // kasih warning untuk pilih salah 1 di list.
            SendErrorMessage(playerid, "Please select one of the list.");
            OpenInventory(playerid);
            return 1;
        }

        new index = ListedInventory[playerid][listitem];
        if(InventoryData[playerid][index][invExists])
        {
            new
                name[48],
                id = -1;
                //backpack = GetPlayerBackpack(playerid);

            PlayerData[playerid][pInventoryItem] = index;
            strunpack(name, InventoryData[playerid][index][invItem]);

            switch (PlayerData[playerid][pStorageSelect])
            {
                case 1:
                {
                    if((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
                    {
                        if(InventoryData[playerid][index][invQuantity] == 1)
                        {
                            /*if(!strcmp(name, "Backpack") && GetHouseBackpack(id) != -1)
                                return SendErrorMessage(playerid, "You can only store one backpack in your house.");*/

                            House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
                            Inventory_Remove(playerid, name);

                            cmd_ame(playerid, sprintf("stored a \"%s\" into their house storage.", name));
                            House_ShowItems(playerid, id);

                            /*if(!strcmp(name, "Backpack") && backpack != -1)
                            {
                                BackpackData[backpack][backpackPlayer] = 0;
                                BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

                                Backpack_Save(backpack);
                                SetAccessories(playerid);
                            }*/
                        }
                        else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                }
                case 2:
                {
                    if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
                    {
                        if(InventoryData[playerid][index][invQuantity] == 1)
                        {
                            Car_StoreItem(PlayerData[playerid][pStorageItem], id, 1);
                            Inventory_Remove(playerid, name);

                            cmd_ame(playerid, sprintf("stored a \"%s\" into the trunk.", name));
                            Car_ShowTrunk(playerid);
                        }
                        else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Car Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                }
                case 3:
                {
                    /*if(!strcmp(name, "Backpack"))
                        return SendErrorMessage(playerid, "This item cannot be stored.");*/

                    /*if(InventoryData[playerid][index][invQuantity] == 1)
                    {
                        Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][index][invModel], 1);
                        Inventory_Remove(playerid, name);

                        cmd_ame(playerid, sprintf("stored a \"%s\" into their backpack.", name));
                        Backpack_Open(playerid);
                    }
                    else
                    {
                        Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;*/
                    SendServerMessage(playerid, "This option does't work at the moment.");
                }
                case 4: {
                    if((id = ApartRoomInt_Nearest(playerid)) != -1 && ApartRoom_IsOwner(playerid, id))
                    {
                        if(InventoryData[playerid][index][invQuantity] == 1)
                        {
                            Room_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
                            Inventory_Remove(playerid, name);

                            cmd_ame(playerid, sprintf("stored a \"%s\" into their room storage.", name));
                            Room_ShowItems(playerid, id);
                        }
                        else Dialog_Show(playerid, RoomDeposit, DIALOG_STYLE_INPUT, "Room Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                }
                case 5: {
                    if((id = FlatRoom_Inside(playerid)) != -1 && FlatRoom_IsOwner(playerid, id))
                    {
                        if(InventoryData[playerid][index][invQuantity] == 1)
                        {
                            Room_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
                            Inventory_Remove(playerid, name);

                            cmd_ame(playerid, sprintf("stored a \"%s\" into their room storage.", name));
                            Room_ShowItems(playerid, id);
                        }
                        else Dialog_Show(playerid, FlatDeposit, DIALOG_STYLE_INPUT, "Flat Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][index][invQuantity]);
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                }
                default:
                {
                    format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

                    if(Garbage_Nearest(playerid) != -1) Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Use Item\nGive Item\nThrow Out", "Select", "Cancel");
                    else Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Use Item\nGive Item\nDrop Item", "Select", "Cancel");
                }
            }
        }
    }
    return 1;
}

ShowStatsForPlayer(playerid, targetid, livemode = 0)
{

    new 
        //account[24],
        scoremath = ((PlayerData[targetid][pScore])*4),
        count = 0,
        string[2024],
        header[128];

    for (new i = 0; i < MAX_INVENTORY; i ++) if(InventoryData[playerid][i][invExists]) {
        count++;
    }

    if (livemode) {
        format(header,sizeof(header),""YELLOW"%s"WHITE" ("LIGHT_BLUE"%s"WHITE")", ReturnName2(targetid,1), ReturnDate());
        format(string,sizeof(string),""TOMATO"In Character"WHITE"\n");
        format(string,sizeof(string),"%sGender: ["LIGHT_BLUE"%s"WHITE"] | Origin: ["LIGHT_BLUE"%s"WHITE"] | Money: ["GREEN"%s"WHITE"]\n", string,(PlayerData[targetid][pGender] == 2) ? ("Female") : ("Male"),PlayerData[targetid][pOrigin], FormatNumber(PlayerData[targetid][pMoney]));
        format(string,sizeof(string),"%sBirthdate: ["LIGHT_BLUE"%s"WHITE"] | Job: ["LIGHT_BLUE"%s"WHITE"]\n", string,PlayerData[targetid][pBirthdate], GetPlayerJobName(targetid));
        format(string,sizeof(string),"%sPhone Credits: ["LIGHTBLUE"%d points"WHITE"] | Married with: ["LIGHT_BLUE"%s"WHITE"]\n\n", string, Inventory_Count(targetid, "PhoneCredits"), GetCoupleName(targetid));
        format(string,sizeof(string),"%s"TOMATO"Out of Character"WHITE"\n",string);
        format(string,sizeof(string),"%sPaycheck: ["YELLOW"%d/%d"WHITE"] | Inventory: ["YELLOW"%d/%d"WHITE"] | Last Entered Vehicle: ["YELLOW"vid: %d"WHITE"]\n", string, PlayerData[targetid][pPlayingHours],scoremath, count, MAX_INVENTORY,PlayerData[targetid][pLastCar]);
        format(string,sizeof(string),"%sTime Played: ["YELLOW"%d hour(s) %d minute(s) %02d second(s)"WHITE"]\n", string, PlayerData[targetid][pHour], PlayerData[targetid][pMinute], PlayerData[targetid][pSecond]);
        format(string,sizeof(string),"%sInterior: ["YELLOW"%d"WHITE"] | Virtual World: ["YELLOW"%d"WHITE"] | Register Date: ["LIGHT_BLUE"%s"WHITE"]\n", string, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), ConvertTimestamp(Time:PlayerData[targetid][pRegisterDate]));
        format(string,sizeof(string),"%sVip: [%s"WHITE"] | Vip Expired: [%s"WHITE"]\n", string, GetVipType(targetid), GetVipTime(targetid));
        format(string,sizeof(string),"%sHealth: ["RED"%.1f"WHITE"] | Max health: ["LIGHTBLUE"%.1f"WHITE"] | Armour: [%.1f]",string,ReturnHealth2(targetid),PlayerData[targetid][pMaxHealth],ReturnArmour2(targetid));

        Dialog_Show(playerid, ShowStats, DIALOG_STYLE_MSGBOX, header, string, "Close", "");
        return 1;
    }
        

    /*if(AccountData[targetid][pAdmin] > 0) account = "Admin";
    else if(PlayerData[targetid][pHelper] > 0) account = "Helper";
    else account = "Player"; ---- DIHAPUS DARI SHOW STATS, GAK DIPAKE*/
    
    format(header,sizeof(header),""YELLOW"%s"WHITE" ("LIGHT_BLUE"%s"WHITE") (RegPID: %d)", ReturnName2(targetid,1), ReturnDate(), PlayerData[targetid][pID]);
    format(string,sizeof(string),""TOMATO"In Character"WHITE"\n");
    format(string,sizeof(string),"%sGender: ["LIGHT_BLUE"%s"WHITE"] | Origin: ["LIGHT_BLUE"%s"WHITE"] | Money: ["GREEN"%s"WHITE"] | Bank: ["GREEN"%s"WHITE"]\n", string,(PlayerData[targetid][pGender] == 2) ? ("Female") : ("Male"),PlayerData[targetid][pOrigin], FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]));
    format(string,sizeof(string),"%sBirthdate: ["LIGHT_BLUE"%s"WHITE"] | Job: ["LIGHT_BLUE"%s"WHITE"] | Member Faction: ["LIGHT_BLUE"%s"WHITE"] | Bank Account: ["CYAN"%d"WHITE"]\n", string,PlayerData[targetid][pBirthdate], GetPlayerJobName(targetid),(PlayerData[targetid][pFaction] == -1) ? ("Civilian") : (GetInitials(Faction_GetName(targetid))), PlayerData[targetid][pRekening]);
    format(string,sizeof(string),"%sPhone Number: ["LIGHT_BLUE"%d"WHITE"] | Phone Credits: ["LIGHTBLUE"%d points"WHITE"] | Faction Rank: ["LIGHT_BLUE"%s"WHITE"] | Married with: ["LIGHT_BLUE"%s"WHITE"]\n\n", string,PlayerData[targetid][pPhone], Inventory_Count(targetid, "PhoneCredits"), Faction_GetRank(targetid), GetCoupleName(targetid)); //Faction_GetDivision(targetid));
    format(string,sizeof(string),"%s"TOMATO"Out of Character"WHITE"\n",string);
    format(string,sizeof(string),"%sUsername: ["LIGHT_BLUE"%s"WHITE"] | Paycheck: ["YELLOW"%d/%d"WHITE"] | Inventory: ["YELLOW"%d/%d"WHITE"] | Last Entered Vehicle: ["YELLOW"vid: %d"WHITE"]\n", string, AccountData[targetid][pUsername], PlayerData[targetid][pPlayingHours],scoremath, count, MAX_INVENTORY,PlayerData[targetid][pLastCar]);
    format(string,sizeof(string),"%sTime Played: ["YELLOW"%d hour(s) %d minute(s) %02d second(s)"WHITE"] | Vehicle Slot: ["YELLOW"%d"WHITE"/"RED"%d"WHITE"] | Properties: [%s"WHITE"]\n", string, PlayerData[targetid][pHour], PlayerData[targetid][pMinute], PlayerData[targetid][pSecond], Vehicle_GetCount(targetid), GetPlayerVehicle(targetid), Properties_GetCount(targetid));
    format(string,sizeof(string),"%sInterior: ["YELLOW"%d"WHITE"] | Virtual World: ["YELLOW"%d"WHITE"] | Warnings: ["RED"%d/20"WHITE"] | Register Date: ["LIGHT_BLUE"%s"WHITE"]\n", string, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), PlayerData[targetid][pWarnings], ConvertTimestamp(Time:PlayerData[targetid][pRegisterDate]));
    format(string,sizeof(string),"%sVip: [%s"WHITE"] | Vip Expired: [%s"WHITE"] | Gold: ["YELLOW_2"%d"WHITE"] | Story: [%s"WHITE"]\n", string, GetVipType(targetid), GetVipTime(targetid), PlayerData[targetid][pGold], (PlayerData[targetid][pStory]) ? (GREEN"Accepted") : (RED"None"));
    format(string,sizeof(string),"%sHealth: ["RED"%.1f"WHITE"] | Max health: ["LIGHTBLUE"%.1f"WHITE"] | Armour: [%.1f]",string,ReturnHealth2(targetid),PlayerData[targetid][pMaxHealth],ReturnArmour2(targetid));
    if (AccountData[playerid][pAdmin]) {
        format(string,sizeof(string),"%s"TOMATO"\n\nAdmin Only"WHITE"\n", string);
        format(string,sizeof(string),"%sEmail: ["YELLOW"%s"WHITE"]", string, AccountData[targetid][pMail]);
    }

    Dialog_Show(playerid, ShowStats, DIALOG_STYLE_MSGBOX, header, string, "Close", "");
    return 1;
}

stock Inventory_Clear(playerid)
{
    static
        string[64];

    for (new i = 0; i < MAX_INVENTORY; i ++)
    {
        if(InventoryData[playerid][i][invExists])
        {
            InventoryData[playerid][i][invExists] = 0;
            InventoryData[playerid][i][invModel] = 0;
            InventoryData[playerid][i][invQuantity] = 0;
        }
    }
    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
    return mysql_tquery(g_iHandle, string);
}

stock Inventory_Set(playerid, item[], model, amount)
{
    new itemid = Inventory_GetItemID(playerid, item);

    if(itemid == -1 && amount > 0)
        Inventory_Add(playerid, item, model, amount);

    else if(amount > 0 && itemid != -1)
        Inventory_SetQuantity(playerid, item, amount);

    else if(amount < 1 && itemid != -1)
        Inventory_Remove(playerid, item, -1);

    return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
    for (new i = 0; i < MAX_INVENTORY; i ++)
    {
        if(!InventoryData[playerid][i][invExists])
            continue;

        if(!strcmp(InventoryData[playerid][i][invItem], item)) return i;
    }
    return -1;
}

stock Inventory_GetFreeID(playerid)
{
    if(Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
        return -1;

    for (new i = 0; i < MAX_INVENTORY; i ++)
    {
        if(!InventoryData[playerid][i][invExists])
        return i;
    }
    return -1;
}

stock Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if(InventoryData[playerid][i][invExists]) {
        count++;
    }
    return count;
}

stock Inventory_Count(playerid, item[])
{
    new itemid = Inventory_GetItemID(playerid, item);

    if(itemid != -1)
        return InventoryData[playerid][itemid][invQuantity];

    return 0;
}

stock Inventory_HasItem(playerid, item[])
{
    return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
    new
        itemid = Inventory_GetItemID(playerid, item),
        string[128];

    if(itemid != -1)
    {
        format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
        mysql_tquery(g_iHandle, string);

        InventoryData[playerid][itemid][invQuantity] = quantity;
    }
    return 1;
}

stock Inventory_MaxCount(item[])
{
    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true)) {
        return g_aInventoryItems[i][e_InventoryMax];
    }
    return 0;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
    new
        itemid = Inventory_GetItemID(playerid, item),
        string[128];

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true)) {
        if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+quantity) > g_aInventoryItems[i][e_InventoryMax])
        {
            SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], item);
            return -1;
        }
    }

    if(itemid == -1)
    {
        itemid = Inventory_GetFreeID(playerid);

        if(itemid != -1)
        {
            InventoryData[playerid][itemid][invExists] = true;
            InventoryData[playerid][itemid][invModel] = model;
            InventoryData[playerid][itemid][invQuantity] = quantity;

            strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

            if(strcmp(item, "Kunci Gubuk") != 0)
            {
                format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
                mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
            }
            return itemid;
        }
        return -1;
    }
    else
    {
        format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
        mysql_tquery(g_iHandle, string);

        InventoryData[playerid][itemid][invQuantity] += quantity;
    }
    return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
    new
        itemid = Inventory_GetItemID(playerid, item),
        string[128];

    if(itemid != -1)
    {
        if(InventoryData[playerid][itemid][invQuantity] > 0)
        {
            InventoryData[playerid][itemid][invQuantity] -= quantity;
        }
        if(quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
        {
            InventoryData[playerid][itemid][invExists] = false;
            InventoryData[playerid][itemid][invModel] = 0;
            InventoryData[playerid][itemid][invQuantity] = 0;

            format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
        }
        else if(quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
        {
            format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
        }
        return 1;
    }
    return 0;
}

static Paycheck(playerid)
{
    if(!PlayerData[playerid][pCanPaycheck]) return SendErrorMessage(playerid, "Belum bisa mengambil paycheck untuk saat ini.");

    new 
        dialog_string[500],
        salary,
        current_balance,
        paycheck = RandomEx(10, 50),
        gajifaction = (PlayerData[playerid][pDutyTime]) ? (PlayerData[playerid][pDutyTime]*5) : (0),
        parkingFee = 0,
        tax = paycheck-RandomEx(5,15);

    current_balance                     = PlayerData[playerid][pBankMoney];
    PlayerData[playerid][pMinutes]      = 0;
    PlayerData[playerid][pCanPaycheck]  = 0;

    // if (mode) {
    //     format(dialog_string, sizeof(dialog_string), "______________ PAYCHECK ______________");
    //     SendClientMessageEx(playerid, X11_WHITE, dialog_string);
    
    //     GetSalaryMoney(playerid, salary);
    //     SendClientMessageEx(playerid, X11_WHITE, "Your salary: "GREEN"%s", FormatNumber(salary));

    //     SendClientMessageEx(playerid, X11_WHITE, "Bank Interest: "GREEN"%s", FormatNumber(paycheck));
    //     SendClientMessageEx(playerid, X11_WHITE, "Tax: "RED"%s", FormatNumber(tax));

    //     if (GetFactionType(playerid) != FACTION_GANG && PlayerData[playerid][pFaction] != -1) {
    //         SendClientMessageEx(playerid, X11_WHITE, "Faction Salary: "GREEN"%s"WHITE", Duty Time: "YELLOW"%d "WHITE"minute(s)", FormatNumber(gajifaction), PlayerData[playerid][pDutyTime]);
    //     }
        
    //     if(!House_GetCount(playerid))
    //     {
    //         if(Vehicle_GetCount(playerid)) {
    //             parkingFee = Vehicle_GetCount(playerid)*10;
    //             SendClientMessageEx(playerid, X11_WHITE, "Parking fee ("YELLOW"%d vehicle(s)"WHITE"): "RED"%s", Vehicle_GetCount(playerid), FormatNumber(parkingFee));
    //         }
    //     }

    //     PlayerData[playerid][pBankMoney] += ((paycheck+gajifaction)-(parkingFee+tax));
    //     GivePlayerSalary(playerid);
        
    //     SendClientMessageEx(playerid, X11_WHITE, "Your previous balance: "YELLOW"%s", FormatNumber(current_balance));
    //     SendClientMessageEx(playerid, X11_WHITE, "Your current balance: "GREEN"%s", FormatNumber(PlayerData[playerid][pBankMoney]));

    //     if(--PlayerData[playerid][pJobLeave] == 0){
    //         SendClientMessageEx(playerid, X11_LIGHTBLUE, "JOB: "WHITE"Now you can leave your current job!");
    //     }
        
    //     SendClientMessageEx(playerid, X11_WHITE, "|______________________________________|");
    //     Tax_AddPercent(parkingFee+tax);
    //     return 1;
    // }

    format(dialog_string, sizeof(dialog_string), WHITE"______________ PAYCHECK ______________\n\n");
 
    GetSalaryMoney(playerid, salary);
    format(dialog_string, sizeof(dialog_string), "%s"WHITE"Your salary: "GREEN"%s\n", dialog_string, FormatNumber(salary));

    format(dialog_string, sizeof(dialog_string), "%s"WHITE"Bank Interest: "GREEN"%s\n", dialog_string, FormatNumber(paycheck));

    format(dialog_string, sizeof(dialog_string), "%s"WHITE"Tax: "GREEN"%s\n", dialog_string, FormatNumber(tax));

    if (GetFactionType(playerid) != FACTION_GANG && PlayerData[playerid][pFaction] != -1) {
        format(dialog_string, sizeof(dialog_string), "%s"WHITE"Faction Salary: "GREEN"%s"WHITE", Duty Time: "YELLOW"%d "WHITE"minute(s)\n", dialog_string, FormatNumber(gajifaction), PlayerData[playerid][pDutyTime]);
    }
    
    if(!House_GetCount(playerid))
    {
        if(Vehicle_GetCount(playerid)) {
            parkingFee = Vehicle_GetCount(playerid)*10;
            format(dialog_string, sizeof(dialog_string), "%s"WHITE"Parking fee ("YELLOW"%d vehicle(s)"WHITE"): "RED"%s\n", dialog_string, Vehicle_GetCount(playerid), FormatNumber(parkingFee));
        }
    }

    PlayerData[playerid][pBankMoney] += ((paycheck+gajifaction)-(parkingFee+tax));
    GivePlayerSalary(playerid);
    
    format(dialog_string, sizeof(dialog_string), "%s\n"WHITE"Your previous balance: "YELLOW"%s\n", dialog_string, FormatNumber(current_balance));
    format(dialog_string, sizeof(dialog_string), "%s"WHITE"Your current balance: "GREEN"%s\n\n", dialog_string, FormatNumber(PlayerData[playerid][pBankMoney]));

    if(--PlayerData[playerid][pJobLeave] == 0){
        format(dialog_string, sizeof(dialog_string), "%s"LIGHTBLUE"JOB: "WHITE"Now you can work in other job!\n", dialog_string);
    }

    format(dialog_string, sizeof(dialog_string), "%s"WHITE"|______________________________________|", dialog_string);
    PlayerData[playerid][pDutyTime] = 0;
    Tax_AddPercent(parkingFee+tax);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Paycheck", dialog_string, "Close", "");
    return 1;
 }

// Float:GetPlayerSpeed(playerid)
// {
//     static 
//         Float:velocity[3]
//     ;

//     if(IsPlayerInAnyVehicle(playerid)) {
//         GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
//     }
//     else {
//         GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
//     }
//     return floatsqroot(floatpower(velocity[0], 2.0) + floatpower(velocity[1], 2.0) + floatpower(velocity[2], 2.0)) * 180.0;
// }

GetVehicleDirection(vehicleid, dest[], len = sizeof(dest)) {
    new Float:angle;
    GetVehicleZAngle(vehicleid, angle);

    static const directionName[][] = {
        "North",
        "NE",
        "East",
        "SE",
        "South",
        "SW",
        "West",
        "NW"
    };

    new angleConvert = floatround(angle), index = (((angleConvert %= 360) < 0 ? angleConvert + 360 : angleConvert) / 45) % 8;
    format(dest, len, "%s", directionName[index]);
    return 1;
}

// stock SetVehicleSpeed(vehicleid, Float: speed, mode = 0)
// {
//     new
//         Float: vAngle
//     ;
//     GetVehicleZAngle(vehicleid, vAngle);
//     speed = ((!mode) ? (speed / 105.0) : (speed / 170.0));
    
//     return SetVehicleVelocity(vehicleid, speed * floatsin(-vAngle, degrees), speed * floatcos(-vAngle, degrees), 0.0);
// }
// stock Float:GetVehicleSpeed(vehicleid, bool:kmh = true, Float:velx = 0.0, Float:vely = 0.0, Float:velz = 0.0)
// {
//     if( velx == 0.0 &&
//         vely == 0.0 &&
//         velz == 0.0)
//     {
//         GetVehicleVelocity(vehicleid, velx, vely, velz);
//     }
//     return float(floatround((floatsqroot(((velx * velx) + (vely * vely)) + (velz * velz)) * (kmh ? (136.666667) : (85.4166672))), floatround_round));
// }

// stock SetVehicleSpeedCapEx(vehicleid, Float:maxspeed, bool:kmh = true)
// {
// 	gVehicleSpeedCap[vehicleid] = floatround((kmh ? maxspeed : (maxspeed * 1.5999)));
// 	return 1;
// }

// stock Float:GetVehicleSpeedCapEx(vehicleid, bool:kmh = true)
// {
// 	return (kmh ? float(gVehicleSpeedCap[vehicleid]) : (float(gVehicleSpeedCap[vehicleid]) * 0.6250));
// }

// stock DisableVehicleSpeedCapEx(vehicleid)
// {
// 	return SetVehicleSpeedCapEx(vehicleid, 0);
// }

stock GetNearestVehicleToPos(Float:x,Float:y,Float:z,worldid=-1,interiorid=-1,Float:maxdist=0.0,bool:fast=true,except_vid=0){
	new Float:distance = -1.0, foundvid = INVALID_VEHICLE_ID, Float:px, Float:py, Float:pz, Float:tmpdistance;
	foreach (new vehicleid : Vehicle) {
		if(except_vid == vehicleid) continue;
		if(GetVehicleModel(vehicleid) == 590) continue;
		if(worldid != -1 && GetVehicleVirtualWorld(vehicleid) != worldid) continue;
		if(interiorid != -1 && GetVehicleInterior(vehicleid) != interiorid) continue;
		GetVehiclePos(vehicleid,px,py,pz);

		tmpdistance = VectorSize(x-px,y-py,z-pz);
		if(maxdist > 0.0 && tmpdistance > maxdist) continue;
		if(fast && (distance == -1.0 || tmpdistance < distance) && (maxdist == 0.0 || (tmpdistance < maxdist))) return vehicleid;
		if(distance == -1.0 || tmpdistance < distance){
			distance = tmpdistance;
			foundvid = vehicleid;
		}
	}
	return foundvid;
}

stock GetNearestVehicleToPlayer(playerid,Float:maxdist=0.0,bool:fast=false){
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	return GetNearestVehicleToPos(x,y,z,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),maxdist,fast);
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

static CancelDrivingTest(playerid)
{
    if(PlayerData[playerid][pDrivingTest])
    {
        SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
        SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

        SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
        SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

        DisablePlayerCheckpoint(playerid);
        SetCameraBehindPlayer(playerid);

        DestroyVehicle(PlayerData[playerid][pTestCar]);
        PlayerData[playerid][pTestCar] = INVALID_VEHICLE_ID;
        DisablePlayerRaceCheckpoint(playerid);

        PlayerData[playerid][pDMVTime] = (gettime()+3600);
        PlayerData[playerid][pDrivingTest] = false;
    }
    return 1;
}

static House_WeaponStorage(playerid, houseid)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    new
        string[512];

    for (new i = 0; i < 5; i ++)
    {
        if(!HouseData[houseid][houseWeapons][i]) format(string, sizeof(string), "%sEmpty Slot\n", string);
        else format(string, sizeof(string), "%s%s ("YELLOW"Ammo: %d"WHITE") ("CYAN"Durability: %d"WHITE")\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i], HouseData[houseid][houseDurability][i]);
    }
    Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Weapon Storage", string, "Select", "Cancel");
    return 1;
}

static House_ShowItems(playerid, houseid)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    static
        string[MAX_HOUSE_STORAGE * 32],
        name[32];

    string[0] = 0;

    for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
    {
        if(!Iter_Contains(HousesStorage[houseid], i))
            format(string, sizeof(string), "%sEmpty Slot\n", string);

        else {
            strunpack(name, HouseStorage[houseid][i][hItemName]);

            if(HouseStorage[houseid][i][hItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
            }
            else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
        }
    }
    Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Item Storage", string, "Select", "Cancel");
    return 1;
}

static House_OpenStorage(playerid, houseid)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    new
        items[2],
        string[MAX_HOUSE_STORAGE * 32];

    items[0] = Iter_Count(HousesStorage[houseid]);
    for (new i = 0; i < 5; i ++) if(HouseData[houseid][houseWeapons][i]) {
        items[1]++;
    }
    format(string, sizeof(string), "Item Storage (%d/%d)\nWeapon Storage (%d/5)\nMoney Safe (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));
    Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "House Storage", string, "Select", "Cancel");
    return 1;
}

static House_GetItemID(houseid, item[])
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
    {
        if(!Iter_Contains(HousesStorage[houseid], i))
            continue;

        if(!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
    }
    return -1;
}

static House_GetFreeID(houseid)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    new freeid = cellmin;

    if ((freeid = Iter_Free(HousesStorage[houseid])) != cellmin)
        return freeid;

    return cellmin;
}

static House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    new
        itemid = House_GetItemID(houseid, item),
        string[128];

    if(itemid == -1)
    {
        itemid = House_GetFreeID(houseid);

        if(itemid != cellmin)
        {
            if(slotid != -1)
                itemid = slotid;

            Iter_Add(HousesStorage[houseid], itemid);
            HouseStorage[houseid][itemid][hItemModel] = model;
            HouseStorage[houseid][itemid][hItemQuantity] = quantity;

            strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

            format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
            mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

            return itemid;
        }
        return -1;
    }
    else
    {
        format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
        mysql_tquery(g_iHandle, string);

        HouseStorage[houseid][itemid][hItemQuantity] += quantity;
    }
    return itemid;
}

static House_RemoveItem(houseid, item[], quantity = 1)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    new
        itemid = House_GetItemID(houseid, item),
        string[128];

    if(itemid != -1)
    {
        if(HouseStorage[houseid][itemid][hItemQuantity] > 0)
        {
            HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
        }
        if(quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
        {
            HouseStorage[houseid][itemid][hItemModel] = 0;
            HouseStorage[houseid][itemid][hItemQuantity] = 0;

            format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);

            Iter_Remove(HousesStorage[houseid], itemid);
        }
        else if(quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
        {
            format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
        }
        return 1;
    }
    return 0;
}

House_RemoveAllItems(houseid)
{
    for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
    }
    Iter_Clear(HousesStorage[houseid]);
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]));

    for (new i = 0; i < 5; i ++) {
        HouseData[houseid][houseWeapons][i] = 0;
        HouseData[houseid][houseAmmo][i] = 0;
        HouseData[houseid][houseDurability][i] = 0;
    }
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `weapon_houses` WHERE `houseid` = '%d'", HouseData[houseid][houseID]));
    return 1;
}

// static Car_GetItemID(carid, item[])
// {
//     if(!Iter_Contains(DynamicVehicles, carid))
//         return 0;

//     for (new i = 0; i < MAX_CAR_STORAGE; i ++)
//     {
//         if(!CarStorage[carid][i][cItemExists])
//             continue;

//         if(!strcmp(CarStorage[carid][i][cItemName], item)) return i;
//     }
//     return -1;
// }

static Car_GetFreeID(carid)
{
    if(!Iter_Contains(DynamicVehicles, carid))
        return 0;
    
    new freeid = cellmin;
    if ((freeid = Iter_Free(CarsStorage[carid])) != cellmin) {
        return freeid;
    }
    return cellmin;
}

static Car_StoreItem(itemid, carid, quantity = 1) {
    if(!Iter_Contains(DynamicVehicles, carid))
        return 0;
    
    if (itemid != -1) {
        if (CarStorage[carid][itemid][cItemQuantity] >= Inventory_MaxCount(CarStorage[carid][itemid][cItemName]))
            return -1;

        mysql_tquery(g_iHandle, sprintf("UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, VehicleData[carid][cID], CarStorage[carid][itemid][cItemID]));

        CarStorage[carid][itemid][cItemQuantity] += quantity;
    }
    return itemid;
}

static Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
    if(!Iter_Contains(DynamicVehicles, carid))
        return 0;

    new
        itemid = Car_GetFreeID(carid);

    if(itemid != cellmin)
    {
        if(slotid != -1)
            itemid = slotid;

        Iter_Add(CarsStorage[carid], itemid);
        CarStorage[carid][itemid][cItemModel] = model;
        CarStorage[carid][itemid][cItemQuantity] = quantity;

        strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

        mysql_tquery(g_iHandle, sprintf("INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", VehicleData[carid][cID], item, model, quantity), "OnCarStorageAdd", "dd", carid, itemid);
        return itemid;
    }
    return cellmin;
}

static Car_RemoveItem(itemid, carid, quantity = 1)
{
    if(!Iter_Contains(DynamicVehicles, carid))
        return 0;

    if(Iter_Contains(CarsStorage[carid], itemid))
    {
        if(CarStorage[carid][itemid][cItemQuantity] > 0)
        {
            CarStorage[carid][itemid][cItemQuantity] -= quantity;
        }
        if(quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
        {
            CarStorage[carid][itemid][cItemModel] = 0;
            CarStorage[carid][itemid][cItemQuantity] = 0;

            mysql_tquery(g_iHandle, sprintf("DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", VehicleData[carid][cID], CarStorage[carid][itemid][cItemID]));

            Iter_Remove(CarsStorage[carid], itemid);
        }
        else if(quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
        {
            mysql_tquery(g_iHandle, sprintf("UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, VehicleData[carid][cID], CarStorage[carid][itemid][cItemID]));
        }
        return 1;
    }
    return 0;
}

Car_RemoveAllItems(carid)
{
    foreach (new i : CarsStorage[carid]) {
        CarStorage[carid][i][cItemModel] = 0;
        CarStorage[carid][i][cItemQuantity] = 0;
    }
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `carstorage` WHERE `ID` = '%d'", VehicleData[carid][cID]));

    Iter_Clear(CarsStorage[carid]);

    for (new i = 0; i < 5; i ++) {
        VehicleData[carid][cWeapons][i] = 0;
        VehicleData[carid][cAmmo][i] = 0;
        VehicleData[carid][cDurability][i] = 0;
    }
    return 1;
}

FormatNumber(number, prefix[] = "$")
{
    static
        value[32],
        length;

    format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

    if((length = strlen(value)) > 3)
    {
        for (new i = length, l = 0; --i >= 0; l ++) {
            if((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
        }
    }
    if(prefix[0] != 0)
        strins(value, prefix, 0);

    if(number < 0)
        strins(value, "-", 0);

    return value;
}

ResetFaction(playerid)
{
    if(IsPlayerDuty(playerid)) {
        ResetFactionWeapon(playerid);
    }

    if(PlayerData[playerid][pOnDuty]) {
        SetPlayerSkinEx(playerid, PlayerData[playerid][pSkin]);
    }

    SetPlayerColor(playerid, DEFAULT_COLOR);
    PlayerData[playerid][pOnDuty] = 0;
    PlayerData[playerid][pSkinFaction] = 0;
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
    format(PlayerData[playerid][pFactionRankName], 24, "NULL");
    format(PlayerData[playerid][pBadge], 24, "None");
    format(PlayerData[playerid][pUnit], 24, "None");
}

StopDragging(playerid)
{
    if(PlayerData[playerid][pDragged])
    {
        PlayerData[PlayerData[playerid][pDraggedBy]][pOnDrag] = INVALID_PLAYER_ID;

        PlayerData[playerid][pDragged] = 0;
        PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;

        stop PlayerData[playerid][pDragTimer];
    }
    return 1;
}

ResetCooking(playerid)
{
    PlayerData[playerid][pCooking] = 0;
    PlayerData[playerid][pCookingTime] = 0;
    PlayerData[playerid][pCookingHouse] = -1;
    return 1;
}

SetHospitalSpawn(playerid)
{
    PlayerData[playerid][pHospital] = 1;
    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pInjured] = 0;

    PlayerData[playerid][pHospitalTime] = 115;
    PlayerData[playerid][pHunger] = 50;
    PlayerData[playerid][pEnergy] = 50;

    SetPlayerInterior(playerid, ASGH_INSIDE);
    SetPlayerVirtualWorld(playerid, ASGH_INSIDE_WORLD);

    SetPlayerPosEx(playerid, -1196.43, -374.91, 16.71, 5000);
    SetPlayerFacingAngle(playerid, 1.32);

    SetPlayerCameraPos(playerid, -1198.74, -374.89, 16.93);
    SetPlayerCameraLookAt(playerid, -1198.74, -374.89, 16.93);

    TogglePlayerControllable(playerid, 0);

    ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 1, 0, 0, 0, 0);

    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... ~g~~h~30", 15, 3);

    SetPlayerWeather(playerid, 1);
    SetPlayerTime(playerid, 12, 0);
    return 1;
}

ResetPlayer(playerid)
{
    if(PlayerData[playerid][pFirstAid])
        KillTimer(PlayerData[playerid][pAidTimer]);

    if(PlayerData[playerid][pDrivingTest]) {
        DestroyVehicle(PlayerData[playerid][pTestCar]);
        PlayerData[playerid][pTestCar] = INVALID_VEHICLE_ID;
    }

    if(PlayerData[playerid][pOnDrag] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pOnDrag], "Player yang mengangkatmu telah terluka (injured).");
        StopDragging(PlayerData[playerid][pOnDrag]);
    }
    else if(PlayerData[playerid][pDraggedBy] != INVALID_PLAYER_ID) {
        SendServerMessage(PlayerData[playerid][pDraggedBy], "Player yang sedang kamu angkat telah terluka (injured).");
        StopDragging(playerid);
    }
    ResetCooking(playerid);

    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pCarryTrash] = 0;
    PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pCrafting] = 0;
    PlayerData[playerid][pHarvesting] = 0;
    PlayerData[playerid][pDrivingTest] = 0;
    PlayerData[playerid][pFuelCan] = 0;
    PlayerData[playerid][pFingerTime] = 0;
    PlayerData[playerid][pFingerItem] = -1;
    PlayerData[playerid][pFirstAid] = 0;
    PlayerData[playerid][pEmergency] = 0;
    PlayerData[playerid][pNonEmergency] = 0;
    PlayerData[playerid][pTaxiCalled] = 0;
    PlayerData[playerid][pMining] = 0;
    PlayerData[playerid][pMinedRock] = 0;
    PlayerData[playerid][pMineTime] = 0;
    PlayerData[playerid][pBleeding] = 0;
    PlayerData[playerid][pBleedTime] = 0;
    PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;
    PlayerData[playerid][pLoading] = 0;
    PlayerData[playerid][pUnloading] = -1;
    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pCP] = 0;
    PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
    PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pWrong] = 0;
    PlayerData[playerid][pAksesoris] = -1;
    PlayerData[playerid][pPemberitahuan] = 0;
    PlayerData[playerid][pBunnyHopTick] = 0;

    RemovePlayerAttachedObject(playerid, JOB_SLOT);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    DisablePlayerCheckpoint(playerid);
    GameTextForPlayer(playerid, " ", 1, 3);

    HidePlayerFooter(playerid);
    return 1;
}

GiveMoney(playerid, amount)
{
    new Timer:t;
    if (playerid != INVALID_PLAYER_ID)
    {
        PlayerData[playerid][pMoney] += amount;
        GivePlayerMoney(playerid, amount);

        stop t;

        PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], (amount > 0) ? 14053887 : -1523963137);
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], sprintf("%s%s", (amount > 0) ? ("+") : (""), FormatNumber(amount)));
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_moneyhud]);

        t = defer HideHUDMoney(playerid);
    }
    return 1;
}

IsValidPlayerName(const str[])
{
    if(!str[0] || str[0] == '\1')
        return 0;

    for (new i = 0, l = strlen(str); i != l; i ++)
    {
        if((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
            continue;

        if(str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
            continue;

        else
            return 0;
    }
    return 1;
}

IsAnIP(str[])
{
    if(!str[0] || str[0] == '\1')
        return 0;

    for (new i = 0, l = strlen(str); i != l; i ++)
    {
        if((str[i] < '0' || str[i] > '9') && str[i] != '.')
            return 0;

        if(0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
            return 0;
    }
    return 1;
}

Ask_GetCount(playerid) {
    new count = 0;

    for (new i = 0; i < MAX_ASK; i++) if (AskData[i][askExists] && AskData[i][askPlayer] == playerid) {
        count++;
    }
    return count;
}

Ask_Count() {
    new count = 0;

    for (new i = 0; i != MAX_ASK; i ++) if(AskData[i][askExists]) {
        count++;
    }
    return count;
}

Ask_Clear(playerid) {
    for (new i = 0; i < MAX_ASK; i++) if (AskData[i][askExists] && AskData[i][askPlayer] == playerid) {
        Ask_Remove(i);
    }
    return 1;
}

Ask_Add(playerid, const text[])
{
    for (new i = 0; i != MAX_ASK; i ++)
    {
        if(!AskData[i][askExists])
        {
            AskData[i][askExists] = true;
            AskData[i][askPlayer] = playerid;

            strpack(AskData[i][askQuestion], text, 128 char);
            return i;
        }
    }
    return -1;
}

Ask_Remove(askid)
{
    if(askid != -1 && AskData[askid][askExists])
    {
        AskData[askid][askExists] = false;
        AskData[askid][askPlayer] = INVALID_PLAYER_ID;
    }
    return 1;
}

Report_GetCount(playerid)
{
    new count = 0;

    for (new i = 0; i != MAX_REPORTS; i ++) if(ReportData[i][rExists] && ReportData[i][rPlayer] == playerid) {
        count++;
    }
    return count;
}

Report_Count()
{
    new count = 0;

    for (new i = 0; i != MAX_REPORTS; i ++) if(ReportData[i][rExists]) {
        count++;
    }
    return count;
}

Report_Clear(playerid)
{
    for (new i = 0; i != MAX_REPORTS; i ++) if(ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
    {
        Report_Remove(i);
    }
    return 1;
}

Report_Add(playerid, const text[], type = 1)
{
    for (new i = 0; i != MAX_REPORTS; i ++)
    {
        if(!ReportData[i][rExists])
        {
            ReportData[i][rExists] = true;
            ReportData[i][rType] = type;
            ReportData[i][rPlayer] = playerid;

            strpack(ReportData[i][rText], text, 128 char);
            return i;
        }
    }
    return -1;
}

Report_Remove(reportid)
{
    if(reportid != -1 && ReportData[reportid][rExists])
    {
        ReportData[reportid][rExists] = false;
        ReportData[reportid][rPlayer] = INVALID_PLAYER_ID;
    }
    return 1;
}

KickEx(playerid, time = 200)
{
    if(PlayerData[playerid][pKicked])
        return 0;

    if(SQL_IsCharacterLogged(playerid)) {
        SQL_SaveAccounts(playerid);
    }

    PlayerData[playerid][pKicked] = 1;
    SetTimerEx("KickTimer", time, false, "d", playerid);
    return 1;
}

static SetDefaultSpawn(playerid)
{
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);

    if(PlayerData[playerid][pSpawnPoint] == 0) // Market Station
    {
        SetPlayerPosEx(playerid, 823.18, -1362.46, -0.50);
        SetPlayerFacingAngle(playerid, 319.55);
    }
    // if(PlayerData[playerid][pSpawnPoint] == 1) // Faction
    // {
    //     new faction = PlayerData[playerid][pFactionID];
    //     if(PlayerData[playerid][pFactionID] == -1)
    //     {
    //         SendErrorMessage(playerid, "You've been set to civilian spawn.");
    //         SetPlayerPos(playerid, 1642.1957, -2334.4849, 13.5469);
    //         SetPlayerFacingAngle(playerid, 0.0);
    //     }
    //     SetPlayerPosEx(playerid,FactionData[faction][SpawnX],FactionData[faction][SpawnY],FactionData[faction][SpawnZ]);
    //     SetPlayerInterior(playerid,FactionData[faction][SpawnInterior]);
    //     SetPlayerVirtualWorld(playerid, FactionData[faction][SpawnVW]);
    // }
    if(PlayerData[playerid][pSpawnPoint] == 2)
    {
        SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], 5000);
        SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
        SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
        SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
    }

    SetCameraBehindPlayer(playerid);
    TogglePlayerControllable(playerid, 1);
    return 1;
}

static RespawnPlayer(playerid)
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new
            Float:x,
        Float:y,
        Float:z;

        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1);
    }
    SpawnPlayer(playerid);
    SetDefaultSpawn(playerid);
    return 1;
}

static IsPlayerIdle(playerid) {
    new
        index = GetPlayerAnimationIndex(playerid);

    return ((index == 1275) || (1181 <= index <= 1192));
}

/* static IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetDynamicObjectPos(objectid, fX, fY, fZ);

    return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
} */

stock IsPlayerSpawned(playerid)
{
    if(playerid < 0 || playerid >= MAX_PLAYERS)
        return 0;

    return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

IsValidEmail(const email[]) 
{ 
    new at_pos = strfind(email, "@", true) + 1; 
    if(email[0] == '@' || at_pos == -1) 
    { 
        return false; 
    } 

    static const providers[][] = 
    { 
        "hotmail.com", 
        "gmail.com"
    }; 

    for(new i = 0; i < sizeof(providers); i ++) 
    { 
        if(!strcmp(email[at_pos], providers[i], true)) 
        {
            return true; 
        } 
    } 
    return false; 
}  

static GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
        4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
        1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
        2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
        4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
        1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
        4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
        4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
        0, 0
    };
    new
        model = GetVehicleModel(vehicleid);

    if(400 <= model <= 611)
        return g_arrMaxSeats[model - 400];

    return 0;
}

// Truncates a value to the range 0.0 - 360.0
// stock Float:GetAbsoluteAngle(Float:angle) {
// 	// Note that 360 is equal to 0
// 	return ((angle / 360.0) - floatround((angle / 360.0), floatround_floor)) * 360.0;
// }

// 2D Projection position based on distance and angle
// stock GetXYFromAngle(&Float:x, &Float:y, Float:a, Float:distance) {
// 	x += (distance*floatsin(-a,degrees));
// 	y += (distance*floatcos(-a,degrees));
// }

// // 3D Projection position based on distance and angles
// stock GetXYZFromAngle(&Float:x, &Float:y, &Float:z, Float:angle, Float:elevation, Float:distance) {
// 	x += distance * floatsin(angle, degrees) * floatcos(elevation, degrees);
// 	y += distance * floatcos(angle, degrees) * floatcos(elevation, degrees);
// 	z += distance * floatsin(elevation, degrees);
// }

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance) // By Y_Less
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);

    if(GetPlayerVehicleID(playerid))
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    GetPlayerPos(targetid, fX, fY, fZ);

    return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

ConvertTimestamp(Time:timestamp, bool:fullDate = true, bool:onlyTime = false, bool:onlyDate = false)
{
    new output[256], time[e_tm];
    localtime(timestamp, time);

    if (fullDate) strftime(output, sizeof(output), "%a %d %b %Y, %H:%M:%S", time);
    else if (onlyTime) strftime(output, sizeof(output), "%H:%M:%S", time);
    else if (onlyDate) strftime(output, sizeof(output), "%d/%m/%Y", time);

    return output;
}

static ConvertHBEColor(value) {
    new color;
    if(value >= 90 && value <= 100) color = 0x15a014FF;
    else if(value >= 80 && value < 90) color = 0x1b9913FF;
    else if(value >= 70 && value < 80) color = 0x1a7f08FF;
    else if(value >= 60 && value < 70) color = 0x326305FF;
    else if(value >= 50 && value < 60) color = 0x375d04FF;
    else if(value >= 40 && value < 50) color = 0x603304FF;
    else if(value >= 30 && value < 40) color = 0xd72800FF;
    else if(value >= 10 && value < 30) color = 0xfb3508FF;
    else if(value >= 0 && value < 10) color = 0xFF0000FF;
    else color = X11_WHITE;
    return color;
}

// static GetVehicleLastDriver(vehicleid) {
//     foreach (new i : Player) if (PlayerData[i][pLastCar] == vehicleid) {
//         return i;
//     }
//     return INVALID_PLAYER_ID;
// }

static GetVehicleDriver(vehicleid)  {
    foreach(new i : Player) if(GetPlayerState(i) == PLAYER_STATE_DRIVER && IsPlayerInVehicle(i, vehicleid)) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

// IsPlayerNearBoot(playerid, vehicleid)
// {
//     static
//         Float:fX,
//         Float:fY,
//         Float:fZ;

//     GetVehicleBoot(vehicleid, fX, fY, fZ);

//     return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
// }

// IsPlayerNearHood(playerid, vehicleid)
// {
//     static
//         Float:fX,
//         Float:fY,
//         Float:fZ;

//     GetVehicleHood(vehicleid, fX, fY, fZ);

//     return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
// }

/* static Mechanic_Nearest(playerid)
{
    for(new i = 0; i < sizeof(arrMechanic); i++) if(IsPlayerInRangeOfPoint(playerid, 6.0, arrMechanic[i][0], arrMechanic[i][1], arrMechanic[i][2])) {
        return 1;
    }
    return -1;
} */

static NotAllowed(playerid)
{
    SendErrorMessage(playerid, "You aren't now allowed to use this command.");
    return 1;
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 16)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 16); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit CONST.alt 4
        #emit SUB
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(IsPlayerNearPlayer(i, playerid, radius)) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(IsPlayerNearPlayer(i, playerid, radius)) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

stock SendAdminMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAdmin]) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAdmin]) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

stock SendAdminWarning(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAWarn]) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAWarn]) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

stock SendReportMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableReport]) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableReport]) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

stock SendQuestionMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAsk]) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && AccountData[i][pAdmin] >= 1 && !PlayerData[i][pDisableAsk]) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

static SendFactionAlert(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(AccountData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
                    SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(AccountData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

stock SendTesterMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableTester]) && (AccountData[i][pAdmin] > 0) && (!PlayerData[i][pDisableAdmin])) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableTester]) && (AccountData[i][pAdmin] > 0) && (!PlayerData[i][pDisableAdmin])) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

stock SendInfluencerMessage(color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string

        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player)
        {
            if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableInfluentext]) && (AccountData[i][pVolunteer] > 0)) { //sebelumnya pake ini, tapi bug!if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableInfluentext]) || AccountData[i][pVolunteer] > 0) {
                SendClientMessage(i, color, string);
            }
        }
        return 1;
    }
    foreach (new i : Player)
    {
        if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableInfluentext])  && (AccountData[i][pVolunteer] > 0)) { //sebelumnya pake ini, tpai bug!if(SQL_IsCharacterLogged(i) && (!PlayerData[i][pDisableInfluentext])  || AccountData[i][pVolunteer] > 0) {
            SendClientMessage(i, color, str);
        }
    }
    return 1;
}

static SendSpeedCamMessageEx(type, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableSpeedCam]) {
                SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableSpeedCam]) {
        SendClientMessage(i, color, str);
    }
    return 1;
}

static SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
                SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
        SendClientMessage(i, color, str);
    }
    return 1;
}

static SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
                SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
        SendClientMessage(i, color, str);
    }
    return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(GetPlayerJob(i, 0) == jobid || GetPlayerJob(i, 1) == jobid) {
            if (jobid == JOB_MECHANIC || jobid == JOB_TAXI) {
                if (PlayerData[i][pJobDuty]) SendClientMessage(i, color, string);
            } else SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(GetPlayerJob(i, 0) == jobid || GetPlayerJob(i, 1) == jobid) {
        if (jobid == JOB_MECHANIC || jobid == JOB_TAXI) {
            if (PlayerData[i][pJobDuty]) SendClientMessage(i, color, str);
        } else SendClientMessage(i, color, str);
    }
    return 1;
}

static SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) if(GetPlayerVehicleID(i) == vehicleid) {
                SendClientMessage(i, color, string);
        }
        return 1;
    }
    foreach (new i : Player) if(GetPlayerVehicleID(i) == vehicleid) {
        SendClientMessage(i, color, string);
    }
    return 1;
}

static SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        string[144]
    ;
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    if(args > 12)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 12); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 144
        #emit PUSH.C string
        #emit PUSH.C args

        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        foreach (new i : Player) {
            if(Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) {
                if (PlayerData[i][pLiveMode]) SendClientMessage(i, color, sprintf("[RADIO] %s", string));
                else SendClientMessage(i, color, sprintf("[RADIO:%d] %s", frequency, string));
            }

            if(SQL_IsCharacterLogged(i) && (AccountData[i][pAdmin] >= 5) && !PlayerData[i][pDisableWT]) {
                SendClientMessageEx(i, X11_GREEN_YELLOW, "PlyrRadio: [RADIO:%d] %s", frequency, str);
            }
        }
        return 1;
    }
    foreach (new i : Player) {
        if(Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) {
            if (PlayerData[i][pLiveMode]) SendClientMessage(i, color, sprintf("[RADIO] %s", str));
            else SendClientMessage(i, color, sprintf("[RADIO:%d] %s", frequency, str));
        }

        if(SQL_IsCharacterLogged(i) && (AccountData[i][pAdmin] >= 5) && !PlayerData[i][pDisableWT]) {
            SendClientMessageEx(i, X11_GREEN_YELLOW, "PlyrRadio: [RADIO:%d] %s", frequency, str);
        }
    }
    return 1;
}

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
    static
        args,
        str[144];

    /*
         *  Custom Function:that uses #emit to format variables into a string.
         *  This code is very fragile; touching any code here will cause crashing!
    */
    if((args = numargs()) == 3)
    {
        SendClientMessage(playerid, color, text);
    }
    else
    {
        while (--args >= 3)
        {
            #emit LCTRL 5
            #emit LOAD.alt args
            #emit SHL.C.alt 2
            #emit ADD.C 12
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S text
        #emit PUSH.C 144
        #emit PUSH.C str
        #emit PUSH.S 8
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        SendClientMessage(playerid, color, str);

        #emit RETN
    }
    return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
    static
        args,
        str[144];

    /*
         *  Custom Function:that uses #emit to format variables into a string.
         *  This code is very fragile; touching any code here will cause crashing!
    */
    if((args = numargs()) == 2)
    {
        SendClientMessageToAll(color, text);
    }
    else
    {
        while (--args >= 2)
        {
            #emit LCTRL 5
            #emit LOAD.alt args
            #emit SHL.C.alt 2
            #emit ADD.C 12
            #emit ADD
            #emit LOAD.I
            #emit PUSH.pri
        }
        #emit PUSH.S text
        #emit PUSH.C 144
        #emit PUSH.C str
        #emit LOAD.S.pri 8
        #emit ADD.C 4
        #emit PUSH.pri
        #emit SYSREQ.C format
        #emit LCTRL 5
        #emit SCTRL 4

        SendClientMessageToAll(color, str);

        #emit RETN
    }
    return 1;
}

static ProxDetector(playerid, Float:max_range, color, string[], Float:max_ratio = 1.6)
{
    new
        Float:pos_x,
        Float:pos_y,
        Float:pos_z,
        Float:range,
        Float:range_ratio,
        Float:range_with_ratio,
        clr_r, clr_g, clr_b,
        Float:color_r, Float:color_g, Float:color_b;

    if (!GetPlayerPos(playerid, pos_x, pos_y, pos_z)) {
        return 0;
    }

    color_r = float(color >> 24 & 0xFF);
    color_g = float(color >> 16 & 0xFF);
    color_b = float(color >> 8 & 0xFF);
    range_with_ratio = max_range * max_ratio;

#if defined foreach
    foreach (new i : Player) {
#else
    for (new i = GetPlayerPoolSize(); i != -1; i--) {
#endif
        if (!IsPlayerStreamedIn(i, playerid)) {
            continue;
        }

        range = GetPlayerDistanceFromPoint(i, pos_x, pos_y, pos_z);
        if (range > max_range) {
            continue;
        }

        range_ratio = (range_with_ratio - range) / range_with_ratio;
        clr_r = floatround(range_ratio * color_r);
        clr_g = floatround(range_ratio * color_g);
        clr_b = floatround(range_ratio * color_b);

        SendClientMessage(i, (color & 0xFF) | (clr_b << 8) | (clr_g << 16) | (clr_r << 24), string);
    }
    foreach(new i : Player) if(AccountData[i][pAdmin] >= 5 && PlayerData[i][pSpectator] == playerid) {
        SendClientMessageEx(i, X11_TOMATO_1, "( chat ) {C0C0C0}%s", string);
    }
    SendClientMessage(playerid, color, string);
    return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
    static
        args,
        start,
        end,
        File:file,
        string[1024]
    ;
    if((start = strfind(path, "/")) != -1) {
        strmid(string, path, 0, start + 1);

        if(!fexist(string))
            return printf("** Warning: Directory \"%s\" doesn't exist.", string);
    }
    #emit LOAD.S.pri 8
    #emit STOR.pri args

    file = fopen(path, io_append);

    if(!file)
        return 0;

    if(args > 8)
    {
        #emit ADDR.pri str
        #emit STOR.pri start

        for (end = start + (args - 8); end > start; end -= 4)
        {
            #emit LREF.pri end
            #emit PUSH.pri
        }
        #emit PUSH.S str
        #emit PUSH.C 1024
        #emit PUSH.C string
        #emit PUSH.C args
        #emit SYSREQ.C format

        fwrite(file, string);
        fwrite(file, "\r\n");
        fclose(file);

        #emit LCTRL 5
        #emit SCTRL 4
        #emit RETN
    }
    fwrite(file, str);
    fwrite(file, "\r\n");
    fclose(file);

    return 1;
}

IsValidRoleplayName(const name[]) {
    if(!name[0] || strfind(name, "_") == -1)
        return 0;

    else for (new i = 0, len = strlen(name); i != len; i ++) {
    if((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
            return 0;

        else if((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
            return 0;

        else if((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
            return 0;
    }
    return 1;
}

CreateTextDraws(playerid) 
{
    PlayerTextdraws[playerid][textdraw_box] = CreatePlayerTextDraw(playerid, -1.000000, 0.562500, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_box], 0.000000, 49.548995);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_box], 645.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_box], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_box], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_box], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_box], 255);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_box], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_box], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_box], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_box], 1);

    PlayerTextdraws[playerid][textdraw_blindfold] = CreatePlayerTextDraw(playerid, -1.000000, 0.562500, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 0.000000, 49.548995);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 645.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_blindfold], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 255);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_blindfold], 1);

    PlayerTextdraws[playerid][textdraw_sick] = CreatePlayerTextDraw(playerid, 0.500000, -0.312500, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_sick], 0.000000, 49.649990);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_sick], 640.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_sick], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_sick], -16777142);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_sick], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_sick], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_sick], 1);

    PlayerTextdraws[playerid][textdraw_switch] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_switch], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_switch], 0.530000, 51.000000);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_switch], -1);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_switch], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_switch], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_switch], 119);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_switch], -6.000000, 30.000000);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_switch], 0);

    PlayerTextdraws[playerid][textdraw_moneyhud] = CreatePlayerTextDraw(playerid, 607.399047, 97.150001, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 0.350000, 1.240000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 3);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 14053887);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 3);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_moneyhud], 0);

    PlayerTextdraws[playerid][textdraw_clothes][0] = CreatePlayerTextDraw(playerid, 320.000000, 350.000000, "I");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 27.410259, 5.897183);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 145);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][0], 0);

    PlayerTextdraws[playerid][textdraw_clothes][1] = CreatePlayerTextDraw(playerid, 320.000000, 358.000000, "Clothes_Store");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0.361666, 1.400889);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 90);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][1], 0);

    PlayerTextdraws[playerid][textdraw_clothes][2] = CreatePlayerTextDraw(playerid, 320.000000, 377.000000, "BUY");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0.193666, 0.915556);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 10.000000, 34.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 9306312);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_clothes][2], true);

    PlayerTextdraws[playerid][textdraw_clothes][3] = CreatePlayerTextDraw(playerid, 363.000000, 377.000000, "NEXT");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0.193666, 0.915556);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 10.000000, 34.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], -132);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_clothes][3], true);

    PlayerTextdraws[playerid][textdraw_clothes][4] = CreatePlayerTextDraw(playerid, 277.000000, 377.000000, "BACK");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0.193666, 0.915556);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 10.000000, 34.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], -132);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_clothes][4], true);

    PlayerTextdraws[playerid][textdraw_clothes][5] = CreatePlayerTextDraw(playerid, 320.000000, 398.000000, "Skin:_0/0");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0.171666, 0.782815);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], -86);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], 0);

    // New Player GUI
    // Player HUD 1
    PlayerTextdraws[playerid][textdraw_playerGUI][1] = CreatePlayerTextDraw(playerid, 582.000000, 293.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0.600000, 4.299989);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 298.500000, 101.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 135);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);

    // Skin
    /*PlayerTextdraws[playerid][textdraw_playerGUI][1] = CreatePlayerTextDraw(playerid, 462.000000, 366.000000, "Preview_Model");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 5);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 88.500000, 86.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 0);
    PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 286);
    PlayerTextDrawSetPreviewRot(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], -10.000000, 0.000000, -1.000000, 1.019999);
    PlayerTextDrawSetPreviewVehCol(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], 1, 1);*/

    //Hunger
    PlayerTextdraws[playerid][textdraw_playerGUI][2] = CreatePlayerTextDraw(playerid, 531.000000, 292.000000, "Hunger");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 0);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 0.420833, 1.900000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2], 0);

    //energy
    PlayerTextdraws[playerid][textdraw_playerGUI][3] = CreatePlayerTextDraw(playerid, 531.000000, 310.000000, "Energy");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 0);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 0.420833, 1.900000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3], 0);

    //Ini box untuk model character
    /*PlayerTextdraws[playerid][textdraw_playerGUI][4] = CreatePlayerTextDraw(playerid, 507.000000, 359.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 0.600000, 10.300003);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 289.000000, 40.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 0);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 35);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4], 0);*/

    //Ini garis putih -
    /*PlayerTextdraws[playerid][textdraw_playerGUI][5] = CreatePlayerTextDraw(playerid, 585.000000, 359.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 0.633333, 0.600000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 289.000000, 108.500000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 0);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 35);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5], 0);*/

    //ini garis warna hitam -
    /*PlayerTextdraws[playerid][textdraw_playerGUI][6] = CreatePlayerTextDraw(playerid, 564.000000, 357.000000, "-");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 12.595849, 0.599995);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6], 0);*/

    // Player HUD 2
    PlayerTextdraws[playerid][textdraw_playerGUI][7] = CreatePlayerTextDraw(playerid, 586.000000, 394.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 0.600000, 1.349998);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 298.500000, 90.500000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 135);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7], 0);

    PlayerTextdraws[playerid][textdraw_playerGUI][8] = CreatePlayerTextDraw(playerid, 555.000000, 394.000000, "100%");//energy value
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 0.270833, 1.150000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], 0);

   PlayerTextdraws[playerid][textdraw_playerGUI][9] = CreatePlayerTextDraw(playerid, 601.000000, 394.000000, "100%");//hunger value
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 0.270833, 1.150000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], 0);

    PlayerTextdraws[playerid][textdraw_playerGUI][10] = CreatePlayerTextDraw(playerid, 537.000000, 391.000000, "HUD:radar_datefood");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 4);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 18.500000, 18.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10], 0);

    PlayerTextdraws[playerid][textdraw_playerGUI][11] = CreatePlayerTextDraw(playerid, 584.000000, 391.000000, "HUD:radar_diner");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 4);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 18.500000, 18.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11], 0);

    //Speedometer
    //Speedometer 1
    PlayerTextdraws[playerid][textdraw_speedometer][0] = CreatePlayerTextDraw(playerid, 582.000000, 347.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 0.600000, 4.349988);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 298.500000, 101.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 135);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][0], 0);

    /*PlayerTextdraws[playerid][textdraw_speedometer][1] = CreatePlayerTextDraw(playerid, 410.000000, 360.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 0.604165, 0.649999);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 303.500000, 148.500000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 0);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 35);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][1], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][2] = CreatePlayerTextDraw(playerid, 564.000000, 360.000000, "-");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 13.641689, 0.599995);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 255);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][2], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][3] = CreatePlayerTextDraw(playerid, 409.000000, 358.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 0.275000, 1.049998);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][4] = CreatePlayerTextDraw(playerid, 409.000000, 372.000000, "-");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 11.770809, -0.450001);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][4], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][5] = CreatePlayerTextDraw(playerid, 474.000000, 372.000000, "-");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 1.704257, -0.450001);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][5], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][6] = CreatePlayerTextDraw(playerid, 344.000000, 372.000000, "-");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 1.704257, -0.450001);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][6], 0);*/

    PlayerTextdraws[playerid][textdraw_speedometer][7] = CreatePlayerTextDraw(playerid, 532.000000, 364.000000, "Fill");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 0);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 0.420832, 1.899999);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][7], 0);

    /*PlayerTextdraws[playerid][textdraw_speedometer][8] = CreatePlayerTextDraw(playerid, 384.000000, 375.000000, "engine______________:");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 0.254166, 1.100000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 9109759);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][8], 0);*/

    /*PlayerTextdraws[playerid][textdraw_speedometer][9] = CreatePlayerTextDraw(playerid, 383.000000, 408.000000, "_transmissions:");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 0.254166, 1.100000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 9109759);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][9], 0);*/

    /*PlayerTextdraws[playerid][textdraw_speedometer][10] = CreatePlayerTextDraw(playerid, 384.000000, 386.000000, "speed_______________:");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 0.254166, 1.100000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 9109759);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][10], 0);*/

    PlayerTextdraws[playerid][textdraw_speedometer][11] = CreatePlayerTextDraw(playerid, 531.000000, 344.000000, "Health:");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 0);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 0.420832, 1.899999);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][11], 0);

    // ini engine
    /*PlayerTextdraws[playerid][textdraw_speedometer][12] = CreatePlayerTextDraw(playerid, 442.000000, 375.000000, "");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 0.254166, 1.100000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], 0);

    //mph
    PlayerTextdraws[playerid][textdraw_speedometer][13] = CreatePlayerTextDraw(playerid, 450.000000, 387.000000, "");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 0.254166, 1.100000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], 0);

    //masuknya gigi
    PlayerTextdraws[playerid][textdraw_speedometer][15] = CreatePlayerTextDraw(playerid, 445.000000, 408.000000, "");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 2);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 0.254166, 1.100000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], -1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], 0);*/

    //persenan dmage mobil
    PlayerTextdraws[playerid][textdraw_speedometer][14] = CreatePlayerTextDraw(playerid, 572.000000, 347.000000, "");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 0.279166, 1.400000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], 0);

    //speedometer 2
    PlayerTextdraws[playerid][textdraw_speedometer][16] = CreatePlayerTextDraw(playerid, 586.000000, 336.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 0.550000, 5.250000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 293.000000, 86.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 135);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][16], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][17] = CreatePlayerTextDraw(playerid, 540.000000, 351.000000, "HUD:radar_girlfriend");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 4);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 18.500000, 18.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][17], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][18] = CreatePlayerTextDraw(playerid, 541.000000, 366.000000, "HUD:radar_spray");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 4);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 18.500000, 18.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][18], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][19] = CreatePlayerTextDraw(playerid, 540.000000, 332.000000, "HUD:radar_impound");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 4);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 18.500000, 18.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][19], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][20] = CreatePlayerTextDraw(playerid, 573.000000, 337.000000, "70_MPH");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 0.262500, 1.150000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][21] = CreatePlayerTextDraw(playerid, 574.000000, 353.000000, "100%");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 0.270833, 1.150000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][22] = CreatePlayerTextDraw(playerid, 574.000000, 369.000000, "100%");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 0.270833, 1.150000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][23] = CreatePlayerTextDraw(playerid, 585.000000, 313.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 0.600000, 1.349998);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 298.500000, 90.500000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 135);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][23], 0);

    PlayerTextdraws[playerid][textdraw_speedometer][24] = CreatePlayerTextDraw(playerid, 561.000000, 313.000000, "Tow_Truck");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 3);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 0.262500, 1.150000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 0);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], 0);

    //Trash Capacity box
    PlayerTextdraws[playerid][textdraw_trash][0] = CreatePlayerTextDraw(playerid, 35.124458, 316.000030, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0.000000, 1.472914);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 166.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_trash][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 115);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][0], 0);

    PlayerTextdraws[playerid][textdraw_trash][1] = CreatePlayerTextDraw(playerid, 139.136138, 316.633270, "10/10");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0.241171, 1.127500);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_trash][1], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_trash][1], 0);

    //Register fill form
    PlayerTextdraws[playerid][textdraw_registrasi][0] = CreatePlayerTextDraw(playerid, 459.136474, 147.999984, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0.000000, 16.606147);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 615.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 152);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][0], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][1] = CreatePlayerTextDraw(playerid, 459.136474, 128.998825, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0.000000, 1.847732);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 615.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], -5945099);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][1], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][2] = CreatePlayerTextDraw(playerid, 482.562774, 130.499984, "Identifikasi_Akun");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 0.181200, 1.413332);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][3] = CreatePlayerTextDraw(playerid, 462.884368, 150.916778, "Username~n~~y~_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 0.201815, 1.349165);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][4] = CreatePlayerTextDraw(playerid, 463.352905, 179.151885, "~b~~h~Gender~n~~w~...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 0.194787, 1.354998);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][5] = CreatePlayerTextDraw(playerid, 463.353027, 209.437057, "~b~~h~Tanggal Lahir~n~~w~...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 0.190102, 1.249998);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][6] = CreatePlayerTextDraw(playerid, 463.159088, 239.038848, "~b~~h~Asal Karakter~n~~w~...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 0.198067, 1.302498);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 2);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][7] = CreatePlayerTextDraw(playerid, 461.010528, 277.165466, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0.000000, 1.894584);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 613.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], -1378294143);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][7], 0);

    PlayerTextdraws[playerid][textdraw_registrasi][8] = CreatePlayerTextDraw(playerid, 512.547790, 279.066589, "UPDATE");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0.320351, 1.401666);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 553.000000, 10.199999);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 0);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_registrasi][8], 1);
    
    PlayerTextdraws[playerid][textdraw_registrasi][9] = CreatePlayerTextDraw(playerid, -4.117624, -8.916657, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0.000000, 50.894096);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 640.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][9], 0);

    //Spectate textdraws
    PlayerTextdraws[playerid][textdraw_spectate][0] = CreatePlayerTextDraw(playerid, 319.822509, 328.367523, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 0.321001, 1.390000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], 0);

    PlayerTextdraws[playerid][textdraw_spectate][1] = CreatePlayerTextDraw(playerid, 240.336715, 328.249969, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0.000000, 10.046852);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 401.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 195);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_spectate][1], 0);

    //Tickrate and server map uptodate
    PlayerTextdraws[playerid][textdraw_map] = CreatePlayerTextDraw(playerid, 84.000190, 427.600067, "Loading...");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_map], 0.194500, 1.070626);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_map], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_map], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_map], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_map], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_map], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_map], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_map], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_map], 0);

    //Ammo Update
    PlayerTextdraws[playerid][textdraw_ammo] = CreatePlayerTextDraw(playerid, 520.633239, 62.733345, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_ammo], 0.278001, 1.200000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_ammo], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_ammo], -1378294017);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_ammo], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_ammo], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_ammo], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_ammo], 3);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_ammo], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_ammo], 0);

    //Textdraw Time GUI
    PlayerTextdraws[playerid][textdraw_timegui][0] = CreatePlayerTextDraw(playerid, 546.647949, 22.125162, "00:00");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0.324000, 1.430000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], 0);

    PlayerTextdraws[playerid][textdraw_timegui][1] = CreatePlayerTextDraw(playerid, 546.847900, 35.024932, "00/00/0000");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 0.195001, 1.030000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], 0);

    //Prison time
    PlayerTextdraws[playerid][textdraw_prison] = CreatePlayerTextDraw(playerid, 33.000000, 320.000000, "~g~Prison Time:~w~ 00:00:00");
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_prison], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_prison], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_prison], 0.270000, 1.000000);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_prison], -1);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_prison], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_prison], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_prison], 0);

    PlayerTextdraws[playerid][textdraw_supply] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Loaded:~w~ Retail Supplies~n~~b~Loaded Crates:~w~ 6/6");
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_supply], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_supply], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_supply], 0.280000, 1.000000);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_supply], -1);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_supply], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_supply], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_supply], 0);

    //Notifikasi
    PlayerTextdraws[playerid][textdraw_footer] = CreatePlayerTextDraw(playerid, 321.000000, 352.000793, "_");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_footer], 0.214499, 1.031875);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_footer], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_footer], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_footer], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_footer], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_footer], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_footer], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_footer], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_footer], 0);

    //Taxi driver display
    PlayerTextdraws[playerid][textdraw_taxi][0] = CreatePlayerTextDraw(playerid, 22.943038, 232.201629, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0.000000, 6.532943);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 142.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 132);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][0], 0);

    PlayerTextdraws[playerid][textdraw_taxi][1] = CreatePlayerTextDraw(playerid, 22.943038, 218.251388, "box");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0.000000, 1.061944);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 142.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], -1);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], -1378294017);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][1], 0);

    PlayerTextdraws[playerid][textdraw_taxi][2] = CreatePlayerTextDraw(playerid, 37.570774, 218.349929, "TAXI_DRIVER_DISPLAY");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 0.251533, 1.045833);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][2], 0);

    PlayerTextdraws[playerid][textdraw_taxi][3] = CreatePlayerTextDraw(playerid, 23.602195, 231.533264, "Total_pendapatan: ~g~$0~n~Penumpang: -");
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 0.251533, 1.045833);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], -1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 0);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 255);
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], 0);  

    // Storage textdraw
    PlayerTextdraws[playerid][textdraw_storage][0] = CreatePlayerTextDraw(playerid, 576.000000, 121.000000, "_");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 0);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 3.766669, 8.350003);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 313.500000, 100.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 4);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 4);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 2);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_storage][0], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 230);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 1);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_storage][0], 1);

    PlayerTextdraws[playerid][textdraw_storage][1] = CreatePlayerTextDraw(playerid, 616.000000, 128.000000, "Food Storage");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 0);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 0.504166, 1.800000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 1);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 3);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_storage][1], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_storage][1], 0);

    PlayerTextdraws[playerid][textdraw_storage][2] = CreatePlayerTextDraw(playerid, 594.000000, 157.000000, "5 stock");
    PlayerTextDrawFont(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 1);
    PlayerTextDrawLetterSize(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 0.300000, 1.400000);
    PlayerTextDrawTextSize(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 1);
    PlayerTextDrawSetShadow(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 1);
    PlayerTextDrawAlignment(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 3);
    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_storage][2], -1);
    PlayerTextDrawBackgroundColor(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 255);
    PlayerTextDrawBoxColor(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 50);
    PlayerTextDrawUseBox(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 0);
    PlayerTextDrawSetProportional(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerTextdraws[playerid][textdraw_storage][2], 0);
    return 1;

}

ShowPlayerFooter(playerid, string[], time = 3000, sound = 0) {
    if(PlayerData[playerid][pShowFooter]) {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
        KillTimer(PlayerData[playerid][pFooterTimer]);
    }
    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_footer], string);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_footer]);
    PlayerData[playerid][pShowFooter] = true;
    PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);

    if(sound) PlayerPlaySoundEx(playerid, 1085, 1);
    return 1;
}

ResetStatistics(playerid)
{
    static const empty_player[playerData];
    PlayerData[playerid] = empty_player;

    static const empty_tempplayer[playerTemp];
    PlayerTemp[playerid] = empty_tempplayer;

    //dummy reset/dummy array
    static const empty_account[ucpData];
    AccountData[playerid] = empty_account;

    AccountData[playerid][pUsername][0] = EOS;

    for (new i; i < MAX_CHARACTERS; i ++) {
        CharacterList[playerid][i][0] = EOS;
    }

    DestroyPlayerTextDraws(playerid);

    for (new i = 0; i != MAX_INVENTORY; i ++) if(InventoryData[playerid][i][invExists]){
        InventoryData[playerid][i][invExists] = false;
        InventoryData[playerid][i][invModel] = 0;
        InventoryData[playerid][i][invQuantity] = 0;
    }
    for (new i = 0; i < 10; i ++) {
        format(misscallList[playerid][i], 128, "null");
        format(latestInbox[playerid][i], 128, "null");
    }
    for (new i = 0; i < (MAX_OWNABLE_CARS*3); i ++) {
        ListedVehicles[playerid][i] = -1;
    }
    for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) {
        ListedTickets[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_FURNITURE; i ++) {
        ListedFurniture[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_FLAT_FURNITURE; i ++) {
        ListedFlatFurnitures[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_FLAT_STRUCTURE+MAX_STATIC_STRUCTURE; i ++) {
        ListedFlatStructures[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_HOUSE_STRUCTURES; i ++) {
        ListedStructure[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_OWNABLE_HOUSES+4; i ++) {
        ListedHouse[playerid][i] = -1;
    }
    for (new i = 0; i != 2; i ++) {
        ListedFlat[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_OWNABLE_BUSINESSES+1; i ++) {
        ListedBusiness[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_OWNABLE_GARAGE+1; i ++) {
        ListedGarage[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_OWNABLE_WORKSHOP+1; i ++) {
        ListedWorkshop[playerid][i] = -1;
    }
    for (new i = 0; i != 1; i ++) {
        ListedFarm[playerid][i] = -1;
    }
    for (new i = 0; i != 1; i ++) {
        ListedFurnstore[playerid][i] = -1;
    }
    for (new i = 0; i != 10; i ++) {
        ListedAds[playerid][i] = -1;
    }
    for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
        NearestItems[playerid][i] = -1;
    }
    // for (new i = 0; i < MAX_FURNSTORE_OBJECT; i ++) {
    //     ListedFurnObject[playerid][i] = -1;
    // }
    for (new i = 0; i < 100; i ++) {
        ListedFacVehicle[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_CONTACTS; i ++) if(ContactData[playerid][i][contactExists]) {
        ContactData[playerid][i][contactExists] = false;
        ContactData[playerid][i][contactID] = 0;
        ContactData[playerid][i][contactNumber] = 0;
        ListedContacts[playerid][i] = -1;
    }
    for (new i = 0; i != MAX_ACC; i ++) if(AccData[playerid][i][accExists]) {
        AccData[playerid][i][accExists] = false;
        AccData[playerid][i][accID] = 0;
        AccData[playerid][i][accModel] = 0;
        AccData[playerid][i][accBone] = 1;
        AccData[playerid][i][accShow] = 0;

        AccData[playerid][i][accColor1][0] = AccData[playerid][i][accColor1][1] = AccData[playerid][i][accColor1][2] = 0;
        AccData[playerid][i][accColor2][0] = AccData[playerid][i][accColor2][1] = AccData[playerid][i][accColor2][2] = 0;

        AccData[playerid][i][accOffset][0] = AccData[playerid][i][accOffset][1] = AccData[playerid][i][accOffset][2] = 0.0;
        AccData[playerid][i][accRot][0] = AccData[playerid][i][accRot][1] = AccData[playerid][i][accRot][2] = 0.0;
        AccData[playerid][i][accScale][0] = AccData[playerid][i][accScale][1] = AccData[playerid][i][accScale][2] = 0.0;
    }
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists]) {
        LocationData[playerid][i][locationExists] = false;
        LocationData[playerid][i][locationID] = 0;
    }
    for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if(TicketData[playerid][i][ticketExists]) {
        TicketData[playerid][i][ticketID] = 0;
        TicketData[playerid][i][ticketExists] = false;
        TicketData[playerid][i][ticketFee] = 0;
    }
    for (new i = 0; i != MAX_FISH; i++) {
        format(FishName[playerid][i], 32, "none"); 
        FishWeight[playerid][i] = 0.0;
    }

    Damage_Reset(playerid, 1);

    BoomboxData[playerid][boomboxPlaced] = 0;
    BoomboxData[playerid][boomboxPos][0] = 0.0;
    BoomboxData[playerid][boomboxPos][1] = 0.0;
    BoomboxData[playerid][boomboxPos][2] = 0.0;

    PlayerData[playerid][pID] = -1;
    PlayerData[playerid][pGender] = 1;
    PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = -1;
    PlayerData[playerid][pMoney] = 250;
    PlayerData[playerid][pBankMoney] = 250;
    PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
    PlayerData[playerid][pJailReason] = '\0';
    PlayerData[playerid][pJailedBy] = '\0';
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
 
    PlayerData[playerid][pHouse] = -1;
    PlayerData[playerid][pApartment] = -1;
    PlayerData[playerid][pApartmentRoom] = -1;
    PlayerData[playerid][pFurnStore] = -1;
    PlayerData[playerid][pBusiness] = -1;
    PlayerData[playerid][pEntrance] = -1;
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
    
    PlayerData[playerid][pEditPump] = -1;
    PlayerData[playerid][pEditTextObject] = -1;
    PlayerData[playerid][pEditAtm] = -1;
    PlayerData[playerid][pEditObject] = -1;
    PlayerData[playerid][pEditFurniture] = -1;
    PlayerData[playerid][pEditFurnHouse] = -1;
    PlayerData[playerid][pEditFurnFlat] = -1;
    PlayerData[playerid][pEditFlatStructure] = -1;
    PlayerData[playerid][pEditStructure] = -1;
    PlayerData[playerid][pEditHouseStructure] = -1;
    PlayerData[playerid][pEditStaticStructure] = -1;
    PlayerData[playerid][pEditSpeed] = -1;
    SelectStructureType[playerid] = 0;
    SelectFurnitureType[playerid] = 0;
    PlayerData[playerid][pEditGYMObject] = -1;
    PlayerData[playerid][pEditRack] = -1;
    PlayerData[playerid][pEditRoadblock] = -1;
    PlayerData[playerid][pEditLumber] = -1;
    PlayerData[playerid][pFitnessType] = 0;
    PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;

    PlayerData[playerid][pWorkshopOffered] = -1;
    PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pCarOffered] = -1;
    PlayerData[playerid][pVehTraded] = -1;
    PlayerData[playerid][pVehTradedPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pSharelocOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pDivorceOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pFactionOffered] = -1;
    PlayerData[playerid][pMenuSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pOfferMenu] = -1;
    PlayerData[playerid][pSMS] = INVALID_PLAYER_ID;
    PlayerData[playerid][pHunger] = 100;
    PlayerData[playerid][pEnergy] = 100;
    PlayerData[playerid][pTaxiFee] = 0;
    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerData[playerid][pUsedPayphone] = -1;
    PlayerData[playerid][pCarryCrate] = -1;
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionEdit] = -1;
    PlayerData[playerid][pSelectedSlot] = -1;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pBackpackLoot] = -1;
//    PlayerData[playerid][pRangeBooth] = -1;
    PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
    PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
    PlayerData[playerid][pUnloading] = -1;
    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pShipment] = -1;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pAFK] = 0;
    PlayerData[playerid][pPaused] = 0;
    PlayerData[playerid][pLiveMode] = 0;
    PlayerData[playerid][pTogBoombox] = 0;
    for (new i = 0; i < 6; i ++) {
        PlayerData[playerid][pAuto][i] = 0;
    }
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pRekening] = 0;
    PlayerData[playerid][pCapacity] = 18;
    PlayerData[playerid][pPickCar] = -1;
    PlayerData[playerid][pLastVehicle] = -1;
    PlayerData[playerid][pLastCar] = -1;
    PlayerData[playerid][pRob] = 0;
    PlayerData[playerid][pVObject] = -1;
    PlayerData[playerid][pDelivery] = -1;
    PlayerData[playerid][pTestCar] = INVALID_VEHICLE_ID;
    PlayerData[playerid][pPlateID] = INVALID_PLAYER_ID;
    PlayerData[playerid][pPlate] = EOS;
    PlayerData[playerid][pHouseOffered] = -1;
    PlayerData[playerid][pBusinessOffered] = -1;
    PlayerData[playerid][pBodySeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pBodyOffered] = -1;
    PlayerData[playerid][pWorkshopSeller] = INVALID_PLAYER_ID;
    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    PlayerData[playerid][pAdoTag] = Text3D:INVALID_3DTEXT_ID;
    PlayerData[playerid][hungry] = INVALID_PLAYER_BAR_ID;
    PlayerData[playerid][energy] = INVALID_PLAYER_BAR_ID;
    PlayerData[playerid][pCuttingBar] = INVALID_PLAYER_BAR_ID;
    PlayerData[playerid][pAcceptInspect] = INVALID_PLAYER_ID;
    PlayerData[playerid][pOnDrag] = INVALID_PLAYER_ID;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
    PlayerData[playerid][pAcceptDrag] = INVALID_PLAYER_ID;
    PlayerData[playerid][pSorter] = 0;
    PlayerData[playerid][pUnloader] = 0;
    PlayerData[playerid][pMiner] = 0;
    PlayerData[playerid][pSmugglerPick] = 0;
    PlayerData[playerid][pSmugglerFind] = 0;

    selectCategory[playerid] = selectIndex[playerid] = -1; 

    stop PlayerData[playerid][pRepairTime];
    stop PlayerData[playerid][pWashMoney];
    stop PlayerData[playerid][pPayphoneTimer];
    stop PlayerData[playerid][pForagerTimer];
    stop PlayerData[playerid][pUpgradeTimer];
    stop PlayerData[playerid][pSprayTimer];

    format(PlayerData[playerid][pAlias], 24, "(null)");
    format(PlayerData[playerid][pUnit], 24, "None");

    Seatbelt{playerid} = 0;
    Helmet[playerid] = 0;

    KillTimer(PlayerData[playerid][pRepair]);    
    ResetWarnings(playerid);
    return 1;
}

ResetNameTag(playerid)
{
    foreach (new i : Player) {
        ShowPlayerNameTagForPlayer(i, playerid, 1);
    }
    if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
        DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

    PlayerData[playerid][pNameTag] = Text3D:INVALID_STREAMER_ID;
    return 1;
}

ResetWarnings(playerid) {
    PlayerData[playerid][pWarnings] = 0;
    return 1;
}

GetNumberOwner(number)
{
    foreach (new i : Player) if(PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Cellphone")) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

GetMaskOwner(mask) {
    foreach (new i : Player) if (PlayerData[i][pMaskOn] && PlayerData[i][pMaskID] == mask && Inventory_HasItem(i, "Mask")) {
        return i;
    }
    
    return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if(GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
    {
        foreach (new i : Player)
        {
            if((i != playerid) && ((GetPlayerJob(i, 0) == JOB_TAXI || GetPlayerJob(i, 1) == JOB_TAXI) && PlayerData[i][pJobDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
                return 1;
        }
    }
    return 0;
}

IsNumeric(const str[])
{
    for (new i = 0, l = strlen(str); i != l; i ++)
    {
        if(i == 0 && str[0] == '-')
            continue;

        else if(str[i] < '0' || str[i] > '9')
            return 0;
    }
    return 1;
}

GetBodyPartName(bodypart)
{
    new part[11];
    switch(bodypart)
    {
        case BODY_PART_TORSO: part = "Torso";
        case BODY_PART_GROIN: part = "Groin";
        case BODY_PART_LEFT_ARM: part = "Left Arm";
        case BODY_PART_RIGHT_ARM: part = "Right Arm";
        case BODY_PART_LEFT_LEG: part = "Left Leg";
        case BODY_PART_RIGHT_LEG: part = "Right Leg";
        case BODY_PART_HEAD: part = "Head";
        default: part = "None";
    }
    return part;
}

ShowWeaponList(playerid)
{
    new string[666], w_name[24];
    for(new i = 1; i <= 46; i++)
    {
        GetWeaponName(i, w_name, sizeof(w_name));
        format(string, sizeof(string), "%s%d - %s\n", string, i, w_name);
    }
    Dialog_Show(playerid, BM_Weaplist, DIALOG_STYLE_LIST, "Add Weapon", string, "Next", "Cancel");
    return 1;
}

ShowCategories(playerid, mode = 0)
{
    new name[24], Cache:check;

    check = mysql_query(g_iHandle, "SELECT `Name` FROM `category`");

    if(cache_num_rows())
    {
        new string[512];
        
        for(new i; i != cache_num_rows(); i++)
        {
            cache_get_value(i, "Name", name);
            format(string, sizeof(string), "%s%s\n", string, name);
        }

        switch(mode)
        {
            case 1: Dialog_Show(playerid, BM_RemoveCategory, DIALOG_STYLE_LIST, "Remove a Category", string, "Remove", "Close");
            case 2: Dialog_Show(playerid, BM_RenameCategory, DIALOG_STYLE_LIST, "Rename a Category", string, "Rename", "Close");
            case 3: Dialog_Show(playerid, BM_ChooseCategory, DIALOG_STYLE_LIST, "Chosse a Category", string, "Add Weapon", "Back");
            case 4: Dialog_Show(playerid, BM_RemoveWeapon, DIALOG_STYLE_LIST, "Remove a Weapon", string, "Chosse", "Close");
            default: Dialog_Show(playerid, BM_WeaponMenu, DIALOG_STYLE_LIST, "Weapon Menu", string, "Chosse", "Close");
        }
    }
    cache_delete(check);
    return 1;
}

Category_GetWeaponData(catid, index, &weapon, &ammo, &price, &authority)
{
    new Cache:check, query[255];

    format(query, sizeof(query), "SELECT WeaponID, Ammo, Price, Authority FROM `weapons` WHERE Category='%d' ORDER BY WeaponID ASC LIMIT %d, 1", catid, index);
    check = mysql_query(g_iHandle, query);

    if(cache_num_rows()) {
        cache_get_value_int(0, "WeaponID", weapon);
        cache_get_value_int(0, "Ammo", ammo);
        cache_get_value_int(0, "Price", price);
        cache_get_value_int(0, "Authority", authority);
    }

    cache_delete(check);
    return 1;
}

Return_CategoryID(name[])
{
    new Cache:check, id = -1;

    check = mysql_query(g_iHandle, sprintf("SELECT `ID` FROM `category` WHERE `Name`='%s'", name));

    if(!cache_num_rows()) return -1, cache_delete(check);
    else cache_get_value_int(0, "ID", id);

    cache_delete(check);
    return id;
}

ShowWeapons(playerid, removing = 0, admin = 0)
{
    new Cache:check;

    if(!admin) check = mysql_query(g_iHandle, sprintf("SELECT * FROM `weapons` WHERE `Category`='%d' AND Enable = 0 AND Day = DAYOFWEEK(CURDATE()) ORDER BY `WeaponID` ASC", selectCategory[playerid]));
    else check = mysql_query(g_iHandle, sprintf("SELECT * FROM `weapons` WHERE `Category`='%d' ORDER BY `WeaponID` ASC", selectCategory[playerid]));

    if(!cache_num_rows()) return SendErrorMessage(playerid, "There no one weapon in this category."), cache_delete(check);

    new string[400], w_name[24], type[30], auth, weaponid, ammo, price, day, enable;

    format(string, sizeof(string), "Weapon\tAmmo\tPrice\tType-Day-Status\n");
    for(new i = 0; i != cache_num_rows(); i++) 
    {
        cache_get_value_int(i, "Authority", auth);
        switch(auth)
        {
            case 0: type = "Normal Player";
            case 1: type = "Official Family";
            case 2: type = "Verified Member";
        }
        cache_get_value_int(i, "WeaponID", weaponid);
        GetWeaponName(weaponid, w_name, 24);
        cache_get_value_int(i, "Ammo", ammo);
        cache_get_value_int(i, "Price", price);
        cache_get_value_int(i, "Day", day);
        cache_get_value_int(i, "Enable", enable);
        format(string, sizeof(string), "%s%s\t%d\t{2ECC71}%s\t"WHITE"%s-%d-%d\n", string, w_name, ammo, FormatNumber(price), type, day, enable);
    }
    if(removing) Dialog_Show(playerid, BM_RemoveFinal, DIALOG_STYLE_TABLIST_HEADERS, "Select Weapon", string, "Select", "Close");
    else Dialog_Show(playerid, BM_BuyWeapon, DIALOG_STYLE_TABLIST_HEADERS, "Select Weapon", string, "Select", "Close");
    
    cache_delete(check);
    return 1;
}

ReturnWeaponName(weaponid)
{
    new weapon[22];
    switch(weaponid)
    {
        case 0: weapon = "Fist";
        case 18: weapon = "Molotov Cocktail";
        case 44: weapon = "Night Vision Goggles";
        case 45: weapon = "Thermal Goggles";
        case 49: weapon = "Vehicle";
        case 54: weapon = "Splat";
        default: GetWeaponName(weaponid, weapon, sizeof(weapon));
    }
    return weapon;
}

GetVehicleNameByModel(model)
{
    new
        name[32] = "None";

    if(model < 400 || model > 611)
        return name;

    format(name, sizeof(name), g_arrVehicleNames[model - 400]);
    return name;
}

GetVehicleNameByVehicle(vehicleid, dest[], len = sizeof(dest))
{
    new
        model = GetVehicleModel(vehicleid);

    if(model < 400 || model > 611)
        format(dest, len, "None");
    else
        format(dest, len, g_arrVehicleNames[model - 400]);
    
    return 1;
}

GetVehicleModelByName(const name[])
{
    if(IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
        return strval(name);

    for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
    {
        if(strfind(g_arrVehicleNames[i], name, true) != -1)
        {
                    return i + 400;
        }
    }
    return 0;
}

IsWindowedVehicle(vehicleid)
{
    static const g_aWindowStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
        1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid = GetVehicleModel(vehicleid);

    if(modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

// IsNewsVehicle(vehicleid)
// {
//     switch (GetVehicleModel(vehicleid)) {
//         case 488, 582: return 1;
//     }
//     return 0;
// }

IsACruiser(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 523, 427, 490, 528, 596..599, 601: return 1;
    }
    return 0;
}

IsDoorVehicle(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
            return 1;

        case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
            return 1;

        case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
            return 1;
    }
    return 0;
}


IsSpeedoVehicle(vehicleid)
{
    if(GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
        return 0;
    }
    return 1;
}

IsLoadableVehicle(vehicleid)
{
    new modelid = GetVehicleModel(vehicleid);

    if(GetVehicleTrailer(vehicleid))
        modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

    switch (modelid) {
        case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591: return 1;
    }
    return 0;
}

// GetMaxCrates(vehicleid)
// {
//     new crates;

//     switch (GetVehicleModel(vehicleid)) {
//         case 498, 609: crates = 10;
//         case 414: crates = 8;
//         case 456, 499: crates = 6;
//         case 435, 591: crates = 15;
//     }
//     return crates;
// }

// IsCrateInUse(crateid)
// {
//     if(CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
//         return 1;
//     }
//     foreach (new i : Player) if(PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
//         return 1;
//     }
//     return 0;
// }

// GetVehicleCrates(vehicleid)
// {
//     if(!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
//         return 0;

//     new crates;

//     for (new i = 0; i != MAX_CRATES; i ++) if(CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
//         crates++;
//     }
//     return crates;
// }

IsABoat(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1; //452, 453, 454, 472, 473, 484, 493, 595, 430, 446
    }
    return 0;
}

IsABike(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
    }
    return 0;
}

IsAMotor(vehicleid) {
    switch (GetVehicleModel(vehicleid)) {
        case 448, 461..463, 468, 521..523, 581, 586: return 1;
    }
    return 0;
}

IsAPlane(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch (GetVehicleModel(vehicleid)) {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }
    return 0;
}

IsATruck(vehicleid) {
    switch (GetVehicleModel(vehicleid)) {
        case 515, 403, 514: return 1;
    }
    return 0;
}

IsNotFirearmsWeapon(weaponid) {
    switch (weaponid) {
        case 0, 1, 2, 3: return 1;
        case 5..15: return 1;
        case 49, 50, 51: return 1;
        case 53, 54: return 1;
    }
    return 0;
}

// IsFirearmsWeapon(playerid) {
//     new weaponid = GetPlayerWeapon(playerid);

//     switch (weaponid) {
//         case 22, 25, 28..33: return 1;
//     }
//     return 0;
// }

IsVehicleDrivingBackwards(vehicleid) // By Joker
{
    new
        Float:Float[3]
    ;
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90) 
        {
            if(Float[1] > 0 && Float[2] < 0) return true;
        }
        else if(Float[0] < 180) 
        {
            if(Float[1] > 0 && Float[2] > 0) return true;
        }
        else if(Float[0] < 270) 
        {
            if(Float[1] < 0 && Float[2] > 0) return true;
        }
        else if(Float[1] < 0 && Float[2] < 0) return true;
    }
    return false;
}

IsEngineVehicle(vehicleid)
{
    static const g_aEngineStatus[] = {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
    };
    new modelid = GetVehicleModel(vehicleid);

    if(modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

GetHouseByID(sqlid)
{
    foreach (new i : Houses) if(HouseData[i][houseID] == sqlid)
        return i;

    return -1;
}

GetBusinessByID(sqlid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
        return i;

    return -1;
}

/* GetEntranceByID(sqlid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
        return i;

    return -1;
} */

/* GetVehicleByID(sqlid)
{
    for (new i = 0; i != MAX_DYNAMIC_VEHICLES; i ++) if(VehicleData[i][cExists] && VehicleData[i][cID] == sqlid)
        return i;

    return -1;
} */

stock FormatTimeleft(time, dest[], len = sizeof(dest)) {
    static const
		SECONDS_PER_MINUTE = 60,
		SECONDS_PER_HOUR = 3600,
		SECONDS_PER_DAY = 86400,
		SECONDS_PER_MONTH = 2592000;

	new seconds = time;

	if (seconds == 1)
		format(dest, len, "a second");
	else if (seconds < SECONDS_PER_MINUTE)
		format(dest, len, "%i seconds", seconds);
	else if (seconds < (2 * SECONDS_PER_MINUTE))
		format(dest, len, "a minute");
	else if (seconds < (45 * SECONDS_PER_MINUTE))
		format(dest, len, "%i minutes", (seconds / SECONDS_PER_MINUTE));
	else if (seconds < (90 * SECONDS_PER_MINUTE))
		format(dest, len, "an hour");
	else if (seconds < (24 * SECONDS_PER_HOUR))
		format(dest, len, "%i hours", (seconds / SECONDS_PER_HOUR));
	else if (seconds < (48 * SECONDS_PER_HOUR))
		format(dest, len, "a day");
	else if (seconds < (30 * SECONDS_PER_DAY))
		format(dest, len, "%i days", (seconds / SECONDS_PER_DAY));
	else if (seconds < (12 * SECONDS_PER_MONTH)) {
		new months = floatround(seconds / SECONDS_PER_DAY / 30);
      	if (months <= 1)
			format(dest, len, "a month");
      	else
			format(dest, len, "%i months", months);
	}
    else {
      	new years = floatround(seconds / SECONDS_PER_DAY / 365);
      	if (years <= 1)
			format(dest, len, "a year");
      	else
			format(dest, len, "%i years", years);
	}
}

GetElapsedTime(time, &hours, &minutes, &seconds)
{
    hours = 0;
    minutes = 0;
    seconds = 0;

    if(time >= 3600) //jika lebih dari 1 jam (3600 = 1 jam)
    {
        hours = (time / 3600); //pembagian waktu per jam di bagi time/3600
        time -= (hours * 3600); //pengurangan di time , ex 2 jam terpakai maka di kalikan 2 * 3600 = time-7200
    }
    while (time >= 60) //hitungan menit.
    {
        minutes++; //hitungan menit bertambah selama time masih bervalue 60.
        time -= 60; // waktu berkurang per menit hitungan 60 sec dari time.
    }
    return (seconds = time);
}

GetDuration(time)
{
    new
        str[32];

    if(time < 0 || time == gettime()) {
        format(str, sizeof(str), "Never");
        return str;
    }
    else if(time < 60)
        format(str, sizeof(str), "%d seconds", time);

    else if(time >= 0 && time < 60)
        format(str, sizeof(str), "%d seconds", time);

    else if(time >= 60 && time < 3600)
        format(str, sizeof(str), (time >= 120) ? ("%d minutes") : ("%d minute"), time / 60);

    else if(time >= 3600 && time < 86400)
        format(str, sizeof(str), (time >= 7200) ? ("%d hours") : ("%d hour"), time / 3600);

    else if(time >= 86400 && time < 2592000)
        format(str, sizeof(str), (time >= 172800) ? ("%d days") : ("%d day"), time / 86400);

    else if(time >= 2592000 && time < 31536000)
        format(str, sizeof(str), (time >= 5184000) ? ("%d months") : ("%d month"), time / 2592000);

    else if(time >= 31536000)
        format(str, sizeof(str), (time >= 63072000) ? ("%d years") : ("%d year"), time / 31536000);

    strcat(str, " ago");

    return str;
}

GetEngineStatus(vehicleid)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(engine != 1)
        return 0;

    return 1;
}

GetHoodStatus(vehicleid)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(bonnet != 1)
        return 0;

    return 1;
}

GetTrunkStatus(vehicleid)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(boot != 1)
        return 0;

    return 1;
}

GetDoorStatus(vehicleid)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(doors != 1)
        return 0;

    return 1;
}

GetLightStatus(vehicleid)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if(lights != 1)
        return 0;

    return 1;
}

SetEngineStatus(vehicleid, status)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

SetLightStatus(vehicleid, status)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

SetTrunkStatus(vehicleid, status)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

SetHoodStatus(vehicleid, status)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

SetDoorStatus(vehicleid, status)
{
    static
        engine,
        lights,
        alarm,
        doors,
        bonnet,
        boot,
        objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    return SetVehicleParamsEx(vehicleid, engine, lights, alarm, status, bonnet, boot, objective);
}

RandomEx(min, max) //Y_Less
    return random(max - min) + min;

/*Float:RandomFloat(Float:max, Float:m2 = 0.0, dp = 3)
{
    new Float:mn = m2;
    if(m2 > max) {
        mn = max,
        max = m2;
    }
    m2 = floatpower(10.0, dp);
    
    return floatadd(floatdiv(float(random(floatround(floatmul(floatsub(max, mn), m2)))), m2), mn);
}*/

RGBAToARGB(rgba)
    return rgba >>> 8 | rgba << 24;
        
GetRGB(color, &r, &g, &b)
{
    new col[3 char];
    col[0] = color;
    r = col{0};
    g = col{1};
    b = col{2};
}

GetRGBColor(playerid, id, type = 0)
{
    if(!type) return 0;
    else if(type == 1) return AccData[playerid][id][accColor1][0] << 24 | AccData[playerid][id][accColor1][0] << 16 | AccData[playerid][id][accColor1][0] << 8 | 0xFF;
    else if(type == 2) return AccData[playerid][id][accColor2][0] << 24 | AccData[playerid][id][accColor2][0] << 16 | AccData[playerid][id][accColor2][0] << 8 | 0xFF;
    else return 0;
}

Rental_GetCount(playerid)
{
    new count = 0;
    
    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cRentOwned] == PlayerData[playerid][pID]) {
        count++;
    }
    return count;
}

Aksesoris_Attach(playerid, index)
{
    SetPlayerAttachedObject(playerid,index, AccData[playerid][index][accModel], AccData[playerid][index][accBone],
        AccData[playerid][index][accOffset][0], AccData[playerid][index][accOffset][1], AccData[playerid][index][accOffset][2],
        AccData[playerid][index][accRot][0], AccData[playerid][index][accRot][1], AccData[playerid][index][accRot][2],
        AccData[playerid][index][accScale][0], AccData[playerid][index][accScale][1], AccData[playerid][index][accScale][2], RGBAToARGB(GetRGBColor(playerid, index, 1)), RGBAToARGB(GetRGBColor(playerid, index, 2)));
            
    AccData[playerid][index][accShow] = 1;
            
    Aksesoris_Save(playerid, index);
    return 1;
}

Aksesoris_Save(playerid, id)
{
    new query[1024],
        bone = (!AccData[playerid][id][accBone]) ? (1) : (AccData[playerid][id][accBone]);

    format(query,sizeof(query),"UPDATE `aksesoris` SET `Model`='%d',`Bone`='%d',`Color1`='%03d|%03d|%03d',`Color2`='%d|%d|%d',`Offset`='%.04f|%.04f|%.04f',`Rot`='%.04f|%.04f|%.04f'",
        AccData[playerid][id][accModel],
        bone,
        AccData[playerid][id][accColor1][0],
        AccData[playerid][id][accColor1][1],
        AccData[playerid][id][accColor1][2],
        AccData[playerid][id][accColor2][0],
        AccData[playerid][id][accColor2][1],
        AccData[playerid][id][accColor2][2],
        AccData[playerid][id][accOffset][0],
        AccData[playerid][id][accOffset][1],
        AccData[playerid][id][accOffset][2],
        AccData[playerid][id][accRot][0],
        AccData[playerid][id][accRot][1],
        AccData[playerid][id][accRot][2]
    );

    format(query,sizeof(query),"%s,`Scale`='%.04f|%.04f|%.04f', `Type`='%s', `Show`='%d' WHERE `ID` = '%d'",
        query,
        AccData[playerid][id][accScale][0],
        AccData[playerid][id][accScale][1],
        AccData[playerid][id][accScale][2],
        AccData[playerid][id][accName],
        AccData[playerid][id][accShow],
        AccData[playerid][id][accID]
    );

    return mysql_tquery(g_iHandle, query);
}

Aksesoris_GetCount(playerid)
{
    new count;
    for (new i = 0; i != MAX_ACC; i++) if(AccData[playerid][i][accExists]) {
        count++;
    }
    return count;
}

Aksesoris_Create(playerid, model, name[])
{
    new query[128];
    
    for (new i = 0; i != MAX_ACC; i++) if(!AccData[playerid][i][accExists]) {
        AccData[playerid][i][accExists] = 1;
        AccData[playerid][i][accShow] = 1;
        format(AccData[playerid][i][accName], 32, name);
        
        AccData[playerid][i][accModel] = model;
        
        AccData[playerid][i][accBone] = 1;
        
        PlayerData[playerid][pAksesoris] = i;
        AccData[playerid][i][accColor1][0] = AccData[playerid][i][accColor1][1] = AccData[playerid][i][accColor1][2] = 255;
        AccData[playerid][i][accColor2][0] = AccData[playerid][i][accColor2][1] = AccData[playerid][i][accColor2][2] = 255;
        
        AccData[playerid][i][accScale][0] = AccData[playerid][i][accScale][1] = AccData[playerid][i][accScale][2] = 1.0;

        format(query,sizeof(query),"INSERT INTO `aksesoris` (`accID`) VALUES (%d)", PlayerData[playerid][pID]);
        mysql_tquery(g_iHandle, query, "OnAksesorisCreated", "dd", playerid, i);
        
        return i;
    }
    return 1;
}

/*==============================================================================
    Function List
==============================================================================*/

Function:WeaponNoReloadHack(playerid, weaponid, reloadtime)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        SendAdminWarning(X11_TOMATO_1, "AdmWarn: "RED"%s "YELLOW"possible anti weapon reload hack for %s (Reload Diff: %d).", ReturnName(playerid, 0), ReturnWeaponName(weaponid), reloadtime);

        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Anti Reload Weapon (%s).", ReturnName2(playerid), ReturnWeaponName(weaponid));
            KickEx(playerid);
        }
    }
    return 1;
}

Function:OnWeaponHack(playerid, weaponid, ammo)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible spawning weapon hack %s with %d ammo.", ReturnName(playerid, 0), playerid, ReturnWeaponName(weaponid), ammo);

        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Spawn Weapon Hack (%s).", ReturnName2(playerid), ReturnWeaponName(weaponid));
            KickEx(playerid);
        }
    }
    return 1;
}

Function:VehicleHealthHack(playerid, Float:current, Float:hack, vehicleid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        new vehname[32];

        GetVehicleNameByVehicle(vehicleid, vehname);
        SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible vehicle health hack id %d (%s) (%.1f to %.1f).", ReturnName(playerid, 0), playerid, vehicleid, vehname, current, hack);

        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Vehicle Health Hack.", ReturnName2(playerid));
            KickEx(playerid);
        }
    }
    return 1;
}

/*Function:OnHackHealthArmour(type, playerid, health, hack)
{
    if(SQL_IsLogged(playerid))
    {
        switch(type) {
            case 1: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible health hack from %d to %d (diff: %d), ", ReturnName(playerid, 0), playerid, health, hack, (hack-health));
            case 2: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible armor hack from %d to %d (diff: %d), ", ReturnName(playerid, 0), playerid, health, hack, (hack-health));
        }

        PlayerData[playerid][pCheatWarn] ++;

        if(PlayerData[playerid][pCheatWarn] > 2 && AccountData[playerid][pAdmin] < 6) {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Health/Armour Hack.", ReturnName2(playerid));
            KickEx(playerid);
        }
    }
    return 1;
}*/

/*Function:OnPlayerTeleportHack(playerid, Float:distance, type, vehicleid)
{
    if(SQL_IsLogged(playerid))
    {
        PlayerData[playerid][pTWarn] ++;
        switch(type)
        {
            case 1: SendAdminMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible teleport hack. (Distance: %f).", ReturnName(playerid,1), playerid, distance);
            case 2: SendAdminMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible vehicle teleport hack. (Distance: %f | Vehicleid: %d).", ReturnName(playerid,1), playerid, distance, vehicleid);
        }
        if(++PlayerData[playerid][pTWarn] > 3 && AccountData[playerid][pAdmin] < 6)
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s was kicked for: Teleport Hack.", ReturnName(playerid,0));
            KickEx(playerid);
        }
    }
    return 1;
}*/

Function:OnPlayerAirbreak(playerid, Float:ac_vX, Float:ac_vctsize, type, vehicle)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        switch(type)
        {
            case 1: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible using airbreak cheat (speed: %.1f | distance: %f). ", ReturnName(playerid,0), playerid, ac_vX, ac_vctsize);
            case 2: SendTesterMessage(X11_TOMATO_1, "[ANTICHEAT]: %s (%d) possible using vehicle airbreak (speed: %.1f | distance: %f | vehicleid: %d). ", ReturnName(playerid,0), playerid, ac_vX, ac_vctsize, vehicle);
        }
        if (CheckAdmin(playerid, 6))
        {
            SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s have been kicked for: Airbreak Hack.", ReturnName2(playerid));
            KickEx(playerid);
        }
    }
    return 1;
}

Function:OnDMVPassedTest(playerid, passed)
{
    if(passed)
    {
        SetCameraBehindPlayer(playerid), ClearAnimations(playerid, 1);

        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
        PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

        GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
        GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
        GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

        PlayerData[playerid][pTestCar] = CreateVehicle(410, 1134.0536,-1676.1888,13.4710,271.3366, 1, 1, -1);
        PlayerData[playerid][pTestWarns] = 0;

        if(PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
        {
            SetVehicleParamsEx(PlayerData[playerid][pTestCar], 0, 0, 0, 0, 0, 0, 1);
            SetVehicleNumberPlate(PlayerData[playerid][pTestCar], "DMV");

            PlayerData[playerid][pDrivingTest] = true;
            PlayerData[playerid][pTestStage] = 0;

            CoreVehicles[PlayerData[playerid][pTestCar]][vehFuel] = 100.0;
            ResetVehicle(PlayerData[playerid][pTestCar]);

            SendCustomMessage(playerid, "DMV","Anda sukses menjawab tes materi, langkah selanjutnya yaitu tes mengemudi.");
            SendCustomMessage(playerid, "DMV","Keluar dari ruangan ini dan kemudikan kendaraan "YELLOW"Manana "WHITE"di luar.");
        }
    }
    else
    {
        SendErrorMessage(playerid, "Anda gagal dalam tes materi, silahkan coba di lain waktu. Tetap semangat, pantang menyerah.");

        PlayerData[playerid][pDMVTime] = (gettime()+900);
        SetCameraBehindPlayer(playerid), ClearAnimations(playerid, 1);
    }
    return 1;
}

Function:OnPlayerUseInvItem(playerid, itemid, name[])
{
    if(!strcmp(name, "Fish Rod", true)) {
        cmd_fish(playerid, "\1");
    }
    else if (!strcmp(name, "Xmas Ball", true)) {
        switch (random(2)) {
            case 0: {
                new rand = RandomEx(100, 200);

                GiveMoney(playerid, rand);
                SendCustomMessage(playerid, "EVENT", "You got "GREEN"%s "WHITE"from the Xmas Ball.", FormatNumber(rand));
            }
            case 1: {
                new rand = RandomEx(10, 30);

                PlayerData[playerid][pGold] += rand;
                SendCustomMessage(playerid, "EVENT", "You got "GREEN"%d gold "WHITE"from the Xmas Ball.", rand);
            }
        }
        Inventory_Remove(playerid, "Xmas Ball", 1);
    }
    else if (!strcmp(name,"Orange",true)) {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 19574, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+5);
        Inventory_Remove(playerid, "Orange", 2);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a orange and eats it!");
    }
    else if (!strcmp(name,"Tomato",true)) {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 19577, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+5);
        Inventory_Remove(playerid, "Tomato", 2);
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a tomato and eats it!");
    }
    // else if(!strcmp(name, "Magazine", true)) {
    //     cmd_usemag(playerid, "\1");
    // }
    else if(!strcmp(name, "Boombox", true)) {
        cmd_boombox(playerid, "place");
    }
/*    else if(!strcmp(name, "Backpack", true)) {
        cmd_backpack(playerid, "\1");
    }*/
    else if(!strcmp(name, "Bandage", true)) {
        cmd_usebandage(playerid, "\1");
    }
    else if(!strcmp(name, "Cellphone", true)) {
        cmd_phone(playerid, "\1");
    }
    else if(!strcmp(name, "Portable Radio", true)) {
        SendSyntaxMessage(playerid, "Use \"/pr [text]\" to chat with your radio.");
    }
    else if(!strcmp(name, "Fuel Can", true)) {
        cmd_fill(playerid, "\1");
    }
    else if(!strcmp(name, "Spray Can", true)) {
        cmd_paintcar(playerid, "\1");
    }
    else if(!strcmp(name, "GPS System", true)) {
        cmd_gps(playerid, "\1");
    }
    else if(!strcmp(name, "Marijuana", true)) {
        cmd_usedrug(playerid, "marijuana");
    }
    else if(!strcmp(name, "Cocaine", true)) {
        cmd_usedrug(playerid, "cocaine");
    }
    else if(!strcmp(name, "Heroin", true)) {
        cmd_usedrug(playerid, "heroin");
    }
    else if(!strcmp(name, "Steroids", true)) {
        cmd_usedrug(playerid, "steroids");
    }
    else if(!strcmp(name, "Pumpkin", true)) {
        cmd_sellplant(playerid, "pumpkin");
    }
    else if(!strcmp(name, "Mushroom", true)) {
        cmd_sellplant(playerid, "mushroom");
    }
    else if(!strcmp(name, "Cucumber", true)) {
        cmd_sellplant(playerid, "cucumber");
    }
    else if(!strcmp(name, "Egg Plant", true)) {
        cmd_sellplant(playerid, "eggplant");
    }
    else if(!strcmp(name, "Frozen Pizza", true)) {
        cmd_cook(playerid, "pizza");
    }
    else if(!strcmp(name, "Frozen Burger", true)) {
        cmd_cook(playerid, "burger");
    }
    else if(!strcmp(name, "Armored Vest", true)) {
        cmd_vest(playerid, "\1");
    }
/*    else if(!strcmp(name, "Ammo Cartridge", true)) {
        cmd_ammo(playerid, "\1");
    }*/
/*    else if(!strcmp(name, "Colt 45", true)) {
        EquipWeapon(playerid, "Colt 45");
    }
    else if(!strcmp(name, "Desert Eagle", true)) {
        EquipWeapon(playerid, "Desert Eagle");
    }
    else if(!strcmp(name, "Shotgun", true)) {
        EquipWeapon(playerid, "Shotgun");
    }
    else if(!strcmp(name, "Micro SMG", true)) {
        EquipWeapon(playerid, "Micro SMG");
    }
    else if(!strcmp(name, "Tec-9", true)) {
        EquipWeapon(playerid, "Tec-9");
    }
    else if(!strcmp(name, "MP5", true)) {
        EquipWeapon(playerid, "MP5");
    }
    else if(!strcmp(name, "AK-47", true)) {
        EquipWeapon(playerid, "AK-47");
    }
    else if(!strcmp(name, "Rifle", true)) {
        EquipWeapon(playerid, "Rifle");
    }
    else if(!strcmp(name, "Sniper", true)) {
        EquipWeapon(playerid, "Sniper");
    }
    else if(!strcmp(name, "Golf Club", true)) {
        EquipWeapon(playerid, "Golf Club");
    }
    else if(!strcmp(name, "Knife", true)) {
        EquipWeapon(playerid, "Knife");
    }
    else if(!strcmp(name, "Shovel", true)) {
        EquipWeapon(playerid, "Shovel");
    }
    else if(!strcmp(name, "Katana", true)) {
        EquipWeapon(playerid, "Katana");
    }*/
    else if(!strcmp(name, "Marijuana Seeds", true)) {
        cmd_plant(playerid, "Weed");
    }
    else if(!strcmp(name, "Cocaine Seeds", true)) {
        cmd_plant(playerid, "Cocaine");
    }
    else if(!strcmp(name, "Heroin Opium Seeds", true)) {
        cmd_plant(playerid, "Heroin");
    }
    else if(!strcmp(name, "Pumpkin Seeds", true)) {
        cmd_plant(playerid, "pumpkin");
    }
    else if(!strcmp(name, "Mushroom Seeds", true)) {
        cmd_plant(playerid, "mushroom");
    }
    else if(!strcmp(name, "Cucumber Seeds", true)) {
        cmd_plant(playerid, "cucumber");
    }
    else if(!strcmp(name, "Egg Plant Seeds", true)) {
        cmd_plant(playerid, "eggplant");
    }
    // else if (!strcmp(name, "Repair Kit", true)) {
    //     cmd_userepairkit(playerid, "\0");
    // }
    else if(!strcmp(name, "Cooked Pizza", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+12);
        Inventory_Remove(playerid, "Cooked Pizza");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a slice of pizza and eats it!");
    }
    else if(!strcmp(name, "Snack", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2768, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+10);
        Inventory_Remove(playerid, "Snack");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a snack and eats it!");
    }
    else if(!strcmp(name, "Bottle of Water", true))
    {
        if(PlayerData[playerid][pEnergy] > 90)
            return SendErrorMessage(playerid, "You are not thirsty right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 1484, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+10);
        Inventory_Remove(playerid, "Bottle of Water");
        ApplyAnimation(playerid, "VENDING", "VEND_Drink2_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a bottle of water and drinks it!");
    }
    else if(!strcmp(name, "Cooked Burger", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+11);
        Inventory_Remove(playerid, "Cooked Burger");
        ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a cooked burger and eats it!");
    }
    else if(!strcmp(name, "Chicken", true))
    {
        if(PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "You are not hungry right now.");

        if(!IsPlayerAttachedObjectSlotUsed(playerid, WEAPON_SLOT))
        {
            SetPlayerAttachedObject(playerid, WEAPON_SLOT, 2663, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, WEAPON_SLOT);
        }
        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+14);
        Inventory_Remove(playerid, "Chicken");
        ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendServerMessage(playerid, "You have takes a chicken and eats it!");
    }
    return 1;
}

Function:PutInsideVehicle(playerid, vehicleid)
{
    if(!PlayerData[playerid][pDrivingTest])
        return 0;

    RemoveFromVehicle(vehicleid);
    PutPlayerInVehicleEx(playerid, vehicleid, 0);
    return 1;
}

Function:Alias_Check(playerid, ip[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "There are nothing ip same with that.");

    new name[24], str[500];
    for(new i = 0; i < cache_num_rows(); i++) {
        cache_get_value(i, "Username", name);
        strcat(str, sprintf("%s\n", name));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("From: %s", ip), str, "Close", "");
    return 1;
}

/*Function:Account_Check(playerid, ip[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "There are no character anymore with that accounts.");

    new name[24], str[500];
    for(new i = 0; i < cache_num_rows(); i++) {
        cache_get_value(i, "Character", name);
        strcat(str, sprintf("%s\n", name));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("Character: %s", name), str, "Close", "");
    return 1;
}*/

Function:Blacklist_Record(playerid)
{
    new str[255], record, name[24];

    strcat(str, "Administrator\tBans Record\n");

    for(new i=0; i < cache_num_rows(); i++) {
        cache_get_value_int(i, "jumlah", record);
        cache_get_value(i, "BannedBy", name);
        strcat(str, sprintf("%s\t%d\n",name,record));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "10 Bans record", str, "Close", "");
    return 1;
}

Function:OnAksesorisCreated(playerid, id)
{
    AccData[playerid][id][accID] = cache_insert_id();
    Aksesoris_Save(playerid, id);
    Aksesoris_Attach(playerid, id);

    new string[256+1];
    for(new i; i < sizeof(accBones); i++)
    {
        format(string,sizeof(string),"%s%s\n",string,accBones[i]);
    }
    Dialog_Show(playerid, AksesorisBone, DIALOG_STYLE_LIST, "Edit Bone",string,"Select","Close");
    SendCustomMessage(playerid, "ACCESORY","Accessory created, type /acc to edit this accessory.");
    return 1;
}

Function:EngineStatus(playerid, vehicleid)
{
    if(!GetEngineStatus(vehicleid))
    {
        new vehname[32];

        GetVehicleNameByVehicle(GetPlayerVehicleID(playerid), vehname);
        if(PlayerData[playerid][pDrivingTest])
        {
            ClearPlayerChat(playerid, 1);
            ShowPlayerFooter(playerid, "~b~~h~DMV~n~~w~Kemudikan kendaraan dan ikuti checkpoint yang di sediakan, -~n~dan jaga kecepatan kendaraan.", 3000, 1);
        }

        SetEngineStatus(vehicleid, true);
        SetLightStatus(vehicleid, true);
        SendCustomMessage(playerid, "ENGINE", "You have successfully start an engine of %s", vehname);
        DeletePVar(playerid, "TungguMesin");

        if (PlayerData[playerid][pAuto][3]) {
            if (!IsABike(vehicleid) && vehicle_handbreak[vehicleid] == true) {
                vehicle_handbreak[vehicleid] = false;
                SendCustomMessage(playerid, "VEHICLE", "Handbrake "RED"OFF");
            }
        }

        new
            id = -1;

        if ((id = Vehicle_GetID(vehicleid)) != -1) {
            if (VehicleData[id][cNeon]) {
                VehicleData[id][cNeonToggle] = 1;
                ReloadVehicleNeon(id);
            }
        }
    }
    return 1;
}

Function:DestroyObjectGate(playerid)
{
    SetPlayerVirtualWorld(playerid, 0);
    TogglePlayerControllable(playerid, 1);

    if(IsValidDynamicObject(PlayerData[playerid][pTutorialObjectGate]))
        DestroyDynamicObject(PlayerData[playerid][pTutorialObjectGate]);

    PlayerData[playerid][pTutorialObjectGate] = INVALID_STREAMER_ID;
    return 1;
}

Function:OnQueryFinished(extraid, threadid, race_check)
{
    if(!IsPlayerConnected(extraid))
        return 0;

    new rows;

    switch (threadid)
    {
        case THREAD_CREATE_CHAR:
        {
            if (GetPVarInt(extraid, "Verifikasi") == 1) {
                new query[128];

                SetPVarInt(extraid, "Verifikasi", 0);
                AccountData[extraid][pLogged] = 1;

                stop AccountData[extraid][pEmailTimer];
                stop AccountData[extraid][pLoginTimer];

                format(query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `Username` = '%s' LIMIT %d;", ReturnName(extraid), MAX_CHARACTERS);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LIST_CHARACTERS);
            }
            
            if (GetPVarInt(extraid, "UCPRegistration") == 1) {
                AccountData[extraid][pLogged] = 1;
                stop AccountData[extraid][pEmailTimer];
                AccountData[extraid][pID] = cache_insert_id();

                SendClientMessageEx(extraid, COLOR_CLIENT, "-----------------------------------------------------------------------------------");
                SendClientMessageEx(extraid, X11_WHITE, "Selamat datang di "RED"%s"WHITE".", SERVER_NAME);
                SendClientMessageEx(extraid, X11_WHITE, "Akun dengan nama "YELLOW"%s "WHITE"berhasil di buat.", ReturnName(extraid));
                SendClientMessageEx(extraid, X11_WHITE, "Silahkan login untuk melanjutkan ke dalam server.");
                SendClientMessageEx(extraid, COLOR_CLIENT, "-----------------------------------------------------------------------------------");

                SendAdminMessage(X11_OLIVE_DRAB_1, "NEW UCP: %s is login with new account.", ReturnName(extraid));

                SQL_CheckAccount(extraid);
                SetPVarInt(extraid, "UCPRegistration", 0);
            }
        }
        case THREAD_LIST_CHARACTERS: {

            for (new i = 0; i < MAX_CHARACTERS; i ++) {
                CharacterList[extraid][i][0] = EOS;
            }

            for (new i = 0; i < cache_num_rows(); i ++) {
                cache_get_value(i, "Character", CharacterList[extraid][i], MAX_PLAYER_NAME + 1);
            }

            SetPVarInt(extraid, "ACPBlacklist", 1);
            
            if(!Blacklist_Check(extraid, "Username", ReturnAdminName(extraid))) {
                DeletePVar(extraid, "ACPBlacklist");
                ShowCharacterMenu(extraid);
                SendServerMessage(extraid, "Berhasil login, silahkan pilih karakter yang akan dimainkan.");
            }
        }
        case THREAD_LOAD_CHARACTERS:
        {
            rows = cache_num_rows();

            if(rows)
            {
                new query[256];

                cache_get_value_int(0, "ID", PlayerData[extraid][pID]);
                cache_get_value_int(0, "Gender", PlayerData[extraid][pGender]);
                cache_get_value_int(0, "Created", PlayerData[extraid][pCreated]);
                cache_get_value_int(0, "LoginDate", PlayerData[extraid][pLoginDate]);
                cache_get_value(0, "password", PlayerData[extraid][pPassword], 65);
                cache_get_value(0, "salt", PlayerData[extraid][pSalt], 65);

                cache_get_value(0, "Played", query, 64);
                sscanf(query, "p<|>ddd", PlayerData[extraid][pSecond], PlayerData[extraid][pMinute], PlayerData[extraid][pHour]);
                
                cache_get_value(0, "Fish0", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][0], FishWeight[extraid][0]);
                cache_get_value(0, "Fish1", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][1], FishWeight[extraid][1]);
                cache_get_value(0, "Fish2", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][2], FishWeight[extraid][2]);
                cache_get_value(0, "Fish3", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][3], FishWeight[extraid][3]);
                cache_get_value(0, "Fish4", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][4], FishWeight[extraid][4]);
                cache_get_value(0, "Fish5", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][5], FishWeight[extraid][5]);
                cache_get_value(0, "Fish6", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][6], FishWeight[extraid][6]);
                cache_get_value(0, "Fish7", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][7], FishWeight[extraid][7]);
                cache_get_value(0, "Fish8", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][8], FishWeight[extraid][8]);
                cache_get_value(0, "Fish9", query, 24);
                sscanf(query, "p<|>s[12]f", FishName[extraid][9], FishWeight[extraid][9]);
                
                cache_get_value(0, "Toggle", query);
                sscanf(query, "p<|>dddddddddddddddd", PlayerData[extraid][pDisableOOC], PlayerData[extraid][pDisablePM], PlayerData[extraid][pDisableBC], PlayerData[extraid][pDisableFaction], PlayerData[extraid][pLoginLog], PlayerData[extraid][pTogHud], PlayerData[extraid][pDisableAdmin], PlayerData[extraid][pDisableAPM], PlayerData[extraid][pDisableAtalk], PlayerData[extraid][pDisableSpeedCam], PlayerData[extraid][pTogVipchat], PlayerData[extraid][pDisableAWarn], PlayerData[extraid][pDisableReport], PlayerData[extraid][pDisableAsk], PlayerData[extraid][pTogAdmCmd], PlayerData[extraid][pDisableWT]);

                cache_get_value(0, "Damage0", damageList[extraid][0], 128);
                cache_get_value(0, "Damage1", damageList[extraid][1], 128);
                cache_get_value(0, "Damage2", damageList[extraid][2], 128);
                cache_get_value(0, "Damage3", damageList[extraid][3], 128);
                cache_get_value(0, "Damage4", damageList[extraid][4], 128);
                cache_get_value(0, "Damage5", damageList[extraid][5], 128);
                cache_get_value(0, "Damage6", damageList[extraid][6], 128);
                cache_get_value(0, "Damage7", damageList[extraid][7], 128);
                cache_get_value(0, "Damage8", damageList[extraid][8], 128);
                cache_get_value(0, "Damage9", damageList[extraid][9], 128);

                cache_get_value(0, "Birthdate", PlayerData[extraid][pBirthdate], 24);
                cache_get_value(0, "Origin", PlayerData[extraid][pOrigin], 32);
                cache_get_value(0, "JailReason", PlayerData[extraid][pJailReason], 32);
                cache_get_value(0, "JailedBy", PlayerData[extraid][pJailedBy], 32);
                cache_get_value(0, "Alias", PlayerData[extraid][pAlias], 25);

                cache_get_value_int(0, "Skin", PlayerData[extraid][pSkin]);
                cache_get_value_float(0, "PosX", PlayerData[extraid][pPos][0]);
                cache_get_value_float(0, "PosY", PlayerData[extraid][pPos][1]);
                cache_get_value_float(0, "PosZ", PlayerData[extraid][pPos][2]);
                cache_get_value_float(0, "PosA", PlayerData[extraid][pPos][3]);
                cache_get_value_float(0, "Health", PlayerData[extraid][pHealth]);
                cache_get_value_float(0, "Hunger", PlayerData[extraid][pHunger]);
                cache_get_value_float(0, "Energy", PlayerData[extraid][pEnergy]);
                cache_get_value_int(0, "Interior", PlayerData[extraid][pInterior]);
                cache_get_value_int(0, "RegisterDate", PlayerData[extraid][pRegisterDate]);
                cache_get_value_int(0, "World", PlayerData[extraid][pWorld]);
                cache_get_value_int(0, "Hospital", PlayerData[extraid][pHospital]);
                cache_get_value_int(0, "HospitalInt", PlayerData[extraid][pHospitalInt]);
                cache_get_value_int(0, "Money", PlayerData[extraid][pMoney]);
                cache_get_value_int(0, "BankMoney", PlayerData[extraid][pBankMoney]);
                cache_get_value_int(0, "OwnsBillboard", PlayerData[extraid][pOwnsBillboard]);
                cache_get_value_int(0, "JailTime", PlayerData[extraid][pJailTime]);
                cache_get_value_int(0, "Muted", PlayerData[extraid][pMuted]);
                cache_get_value_int(0, "House", PlayerData[extraid][pHouse]);
                cache_get_value_int(0, "Apartment", PlayerData[extraid][pApartment]);
                cache_get_value_int(0, "ApartmentRoom", PlayerData[extraid][pApartmentRoom]);
                cache_get_value_int(0, "OwnApartment", PlayerData[extraid][pOwnedApartment]);
                cache_get_value_int(0, "FurnStore", PlayerData[extraid][pFurnStore]);
                cache_get_value_int(0, "Business", PlayerData[extraid][pBusiness]);
                cache_get_value_int(0, "Entrance", PlayerData[extraid][pEntrance]);
                cache_get_value_int(0, "Phone", PlayerData[extraid][pPhone]);
                cache_get_value_int(0, "Lottery", PlayerData[extraid][pLottery]);
                cache_get_value_int(0, "LotteryB", PlayerData[extraid][pLottery]);
                cache_get_value_int(0, "PlayingHours", PlayerData[extraid][pPlayingHours]);
                cache_get_value_int(0, "Minutes", PlayerData[extraid][pMinutes]);
                cache_get_value_int(0, "FactionDuty", PlayerData[extraid][pOnDuty]);
                cache_get_value_float(0, "ArmorStatus", PlayerData[extraid][pArmorStatus]);
                
                cache_get_value(0, "Job", query, 24);
                sscanf(query, "p<|>dd", PlayerData[extraid][pJob][0], PlayerData[extraid][pJob][1]);

                cache_get_value_int(0, "JobLeave", PlayerData[extraid][pJobLeave]);
                cache_get_value_int(0, "Faction", PlayerData[extraid][pFactionID]);
                cache_get_value_int(0, "FactionRank", PlayerData[extraid][pFactionRank]);
                cache_get_value(0, "FactionRankName", PlayerData[extraid][pFactionRankName]);
                cache_get_value_int(0, "Prisoned", PlayerData[extraid][pPrisoned]);
                cache_get_value_int(0, "Injured", PlayerData[extraid][pInjured]);
                cache_get_value_int(0, "Warrants", PlayerData[extraid][pWarrants]);
                cache_get_value_int(0, "Channel", PlayerData[extraid][pChannel]);
                cache_get_value_int(0, "Bleeding", PlayerData[extraid][pBleeding]);
                cache_get_value_int(0, "Warnings", PlayerData[extraid][pWarnings]);
                cache_get_value_int(0, "MaskID", PlayerData[extraid][pMaskID]);
                cache_get_value_int(0, "Rekening", PlayerData[extraid][pRekening]);
                cache_get_value_int(0, "FactionMod", PlayerData[extraid][pFactionMod]);
                cache_get_value_int(0, "Capacity", PlayerData[extraid][pCapacity]);
                cache_get_value_int(0, "SpawnPoint", PlayerData[extraid][pSpawnPoint]);
                cache_get_value_int(0, "pScore", PlayerData[extraid][pScore]);
                cache_get_value_int(0, "Paycheck", PlayerData[extraid][pCanPaycheck]);
                cache_get_value(0, "Badge", PlayerData[extraid][pBadge], 24);
                cache_get_value_int(0, "DrivingLicense", PlayerData[extraid][pDrivingLicense]);
                cache_get_value_int(0, "DrivingLicenseExpired", PlayerData[extraid][pDrivingLicenseExpired]);
                cache_get_value_int(0, "BusinessLicense", PlayerData[extraid][pBusinessLicense]);
                cache_get_value_int(0, "BusinessLicenseExpired", PlayerData[extraid][pBusinessLicenseExpired]);
                cache_get_value_int(0, "WorkshopLicense", PlayerData[extraid][pWorkshopLicense]);
                cache_get_value_int(0, "WorkshopLicenseExpired", PlayerData[extraid][pWorkshopLicenseExpired]);

                cache_get_value(0, "FirearmLicense", query, 24);
                sscanf(query, "p<|>dd", PlayerData[extraid][pFirearmLicense], PlayerData[extraid][pFirearmLicenseType]);

                cache_get_value_int(0, "FirearmLicenseExpired", PlayerData[extraid][pFirearmLicenseExpired]);
                cache_get_value_int(0, "LumberLicense", PlayerData[extraid][pLumberLicense]);
                cache_get_value_int(0, "LumberLicenseExpired", PlayerData[extraid][pLumberLicenseExpired]);
                cache_get_value_int(0, "TruckerLicense", PlayerData[extraid][pTruckerLicense]);
                cache_get_value_int(0, "TruckerLicenseExpired", PlayerData[extraid][pTruckerLicenseExpired]);
                cache_get_value(0, "FarmLicense", query, 64);
                sscanf(query, "p<|>dd", PlayerData[extraid][pFarmLicense], PlayerData[extraid][pFarmLicenseExpired]);
                cache_get_value(0, "BoatLicense", query, 64);
                sscanf(query, "p<|>dd", PlayerData[extraid][pBoatLicense], PlayerData[extraid][pBoatLicenseExpired]);
                cache_get_value(0, "FlyingLicense", query, 64);
                sscanf(query, "p<|>dd", PlayerData[extraid][pFlyingLicense], PlayerData[extraid][pFlyingLicenseExpired]);
                cache_get_value_int(0, "Vip", PlayerData[extraid][pVip]);
                cache_get_value_int(0, "VipTime", PlayerData[extraid][pVipTime]);
                cache_get_value_int(0, "Gold", PlayerData[extraid][pGold]);
                cache_get_value_int(0, "CustomGate", PlayerData[extraid][pClaims][0]);
                cache_get_value_int(0, "CustomMapping", PlayerData[extraid][pClaims][1]);
                cache_get_value_int(0, "Work", PlayerData[extraid][pWork]);
                cache_get_value_int(0, "DelayTruck", PlayerData[extraid][pDelayTruck]);
                cache_get_value_int(0, "DelayFishing", PlayerData[extraid][pDelayFishing]);
                cache_get_value_int(0, "SkinFaction", PlayerData[extraid][pSkinFaction]);
                cache_get_value_int(0, "WoodDelay", PlayerData[extraid][pWoodDelay]);
                cache_get_value_int(0, "LumberDelay", PlayerData[extraid][pLumberDelay]);
                cache_get_value_int(0, "AdjWep", PlayerData[extraid][pHidegun]);
                cache_get_value_int(0, "Cough", PlayerData[extraid][pCough]);
                cache_get_value_int(0, "Fever", PlayerData[extraid][pFever]);
                cache_get_value_int(0, "MigrainTime", PlayerData[extraid][pMigrainTime]);
                cache_get_value_int(0, "MigrainRate", PlayerData[extraid][pMigrainRate]);
                cache_get_value_int(0, "CoughPills", PlayerData[extraid][pCoughPills]);
                cache_get_value_int(0, "MigrainPills", PlayerData[extraid][pMigrainPills]);
                cache_get_value_int(0, "FiverPills", PlayerData[extraid][pFiverPills]);
                cache_get_value_int(0, "UsePills", PlayerData[extraid][pUsePills]);
                cache_get_value_int(0, "MigrainUsed", PlayerData[extraid][pMigrainUsed]);
                cache_get_value_int(0, "FeverUsed", PlayerData[extraid][pFeverUsed]);
                cache_get_value_int(0, "Garage", PlayerData[extraid][pGarage]);
                cache_get_value_int(0, "GunAuthority", PlayerData[extraid][pGunAuthority]);
                cache_get_value_int(0, "DMVTime", PlayerData[extraid][pDMVTime]);
                cache_get_value_int(0, "SweeperDelay", PlayerData[extraid][pSweeperDelay]);
                cache_get_value_int(0, "BusDelay", PlayerData[extraid][pBusDelay]);
                cache_get_value_int(0, "DelaySorter", PlayerData[extraid][pSorterDelay]);
                cache_get_value_int(0, "DelayUnloader", PlayerData[extraid][pUnloaderDelay]);
                cache_get_value_int(0, "DelayMiner", PlayerData[extraid][pMinerDelay]);
                cache_get_value_int(0, "DelayFarmer", PlayerData[extraid][pFarmerDelay]);
                cache_get_value_int(0, "DelayMissions", PlayerData[extraid][pMissionsDelay]);
                cache_get_value_int(0, "SmugglerDelay", PlayerData[extraid][pSmugglerDelay]);
                cache_get_value_int(0, "Cuffed", PlayerData[extraid][pCuffed]);
                cache_get_value_int(0, "ModalPertama", PlayerData[extraid][pModalPertama]);
                cache_get_value_int(0, "Story", PlayerData[extraid][pStory]);
                cache_get_value_int(0, "Streamer", PlayerData[extraid][pStreamer]);
                cache_get_value_int(0, "IDCard", PlayerData[extraid][pIDCard]);
                cache_get_value_int(0, "HUD", PlayerData[extraid][pHUD]);
                cache_get_value_int(0, "Livemode", PlayerData[extraid][pLiveMode]);
                
                cache_get_value(0, "FightStyle", query, 64);
                sscanf(query, "p<|>dddd", PlayerData[extraid][pFightStyle][0], PlayerData[extraid][pFightStyle][1], PlayerData[extraid][pFightStyle][2], PlayerData[extraid][pUsedFightStyle]);

                cache_get_value(0, "GYMMember", query, 64);
                sscanf(query, "p<|>dd", PlayerData[extraid][pGYMMember], PlayerData[extraid][pGYMMemberTime]);

                cache_get_value(0, "FitnessRating", query);
                sscanf(query, "p<|>ffffff", PlayerData[extraid][pFitnessRating][0], PlayerData[extraid][pFitnessRating][1], PlayerData[extraid][pFitnessRating][2], PlayerData[extraid][pFitnessRating][3], PlayerData[extraid][pFitnessRating][4], PlayerData[extraid][pFitnessRating][5]);

                cache_get_value_float(0, "MaxHealth", PlayerData[extraid][pMaxHealth]);
                cache_get_value_int(0, "AdsDelay", PlayerData[extraid][pPlaceAd]);
                cache_get_value_int(0, "ForagerDelay", PlayerData[extraid][pDelayForager]);

                cache_get_value(0, "Automatic", query, 64);
                sscanf(query, "p<|>dddddd", PlayerData[extraid][pAuto][0], PlayerData[extraid][pAuto][1], PlayerData[extraid][pAuto][2], PlayerData[extraid][pAuto][3], PlayerData[extraid][pAuto][4], PlayerData[extraid][pAuto][5]);

                cache_get_value_int(0, "Married", PlayerData[extraid][pMarried]);
                cache_get_value(0, "CoupleName", PlayerData[extraid][pCoupleName], MAX_PLAYER_NAME);
                cache_get_value(0, "Accent", PlayerData[extraid][pAccent], 24);
                cache_get_value_int(0, "DutyTime", PlayerData[extraid][pDutyTime]);

                if(!PlayerData[extraid][pMaskID])
                    PlayerData[extraid][pMaskID] = random(90000) + 10000;

                if(PlayerData[extraid][pCapacity] > 32)
                    PlayerData[extraid][pCapacity] = 32;

                if(!PlayerData[extraid][pCapacity])
                    PlayerData[extraid][pCapacity] = 18;

                TextDrawShowForPlayer(extraid, gServerTextdraws[2]);
                TextDrawShowForPlayer(extraid, gServerTextdraws[3]);
                
                for (new id = 0; id < MAX_PLAYER_ATTACHED_OBJECTS; id++) if(IsPlayerAttachedObjectSlotUsed(extraid, id)) 
                {
                    RemovePlayerAttachedObject(extraid, id);
                }

                // TextDrawHideForPlayer(extraid, gLoginTextdraws);

                PlayerData[extraid][fuelbar]        = CreatePlayerProgressBar(extraid, 561.000000, 373.000000, 68.500000, 3.000000, -1, 100.000000, 0);
                PlayerData[extraid][hungry]         = CreatePlayerProgressBar(extraid, 573.000000, 301.000000, 61.000000, 3.000000, -1, 100.000000, 0);
                PlayerData[extraid][energy]         = CreatePlayerProgressBar(extraid, 573.000000, 320.000000, 61.000000, 3.000000, -1, 100.000000, 0);
                PlayerData[extraid][trash]          = CreatePlayerProgressBar(extraid, 37.000000, 319.000000, 102.500000, 7.199999, -1429936641, 100.0000, 0);
                PlayerData[extraid][pCuttingBar]    = CreatePlayerProgressBar(extraid, 498.0, 104.0, 113.0, 6.2, 0x15a014FF, 50, 0);

                SetPlayerProgressBarMaxValue(extraid, PlayerData[extraid][trash], MAX_SAMPAH);
                HidePlayerProgressBar(extraid, PlayerData[extraid][trash]);

                HidePlayerProgressBar(extraid, PlayerData[extraid][hungry]);
                HidePlayerProgressBar(extraid, PlayerData[extraid][energy]);

                PlayerData[extraid][pLogged] = 1;
                EnablePlayerCameraTarget(extraid, 1);

                format(query,sizeof(query),"SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);
                format(query,sizeof(query),"SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);
                format(query,sizeof(query),"SELECT * FROM `damages` WHERE `IDs` = '%d'", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_DAMAGES);
                format(query,sizeof(query),"SELECT * FROM `player_vehicles` WHERE `Owner` = '%d' ORDER BY `ID` ASC", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "Vehicle_Load", "");
                format(query,sizeof(query),"SELECT * FROM `player_vehicles` WHERE `RentalOwned` = '%d' AND `Rental` = '1'", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "Vehicle_Load", "");
                format(query,sizeof(query),"SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);
                format(query,sizeof(query),"SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
                mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

                if(PlayerData[extraid][pOwnsBillboard] == 0) PlayerData[extraid][pOwnsBillboard] = -1;

                if(PlayerData[extraid][pFactionID] == -1) ResetFaction(extraid);
                else SetFaction(extraid, GetFactionByID(PlayerData[extraid][pFactionID]));

                SetPlayerColor(extraid, DEFAULT_COLOR);

                if(!PlayerData[extraid][pCreated])
                {
                    SetPVarInt(extraid, "SelectDia",1);

                    SetSpawnInfo(extraid, NO_TEAM, 97, 258.0770, -42.3550, 1002.0234, 0.0, 0, 0, 0, 0, 0, 0);
                    TogglePlayerSpectating(extraid, 0);
                    TogglePlayerControllable(extraid, 0);
                }
                else
                {
                    SetSpawnInfo(extraid, NO_TEAM, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2]+1.0, 0.0, 0, 0, 0, 0, 0, 0);
                    Streamer_UpdateEx(extraid, PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2]);

                    Player_ToggleTelportAntiCheat(extraid, false);
                    Streamer_ToggleIdleUpdate(extraid,1);
                    TogglePlayerControllable(extraid, 0);
                    SetCameraBehindPlayer(extraid);
                    PlayerData[extraid][pFreeze] = 1;
                    PlayerData[extraid][pFreezeTimer] = defer SetPlayerToUnfreeze[5000](extraid);
                    Player_ToggleTelportAntiCheat(extraid, true);

                    TogglePlayerSpectating(extraid, 0);

                    CancelSelectTextDraw(extraid);
                    SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
                }
            }
        }
        case THREAD_VERIFY_PASS:
        {
            rows = cache_num_rows();

            if(rows)
                Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please use a strong and safe password for additional security.", "Change", "Cancel");

            else
                SendErrorMessage(extraid, "You have entered an incorrect password.");
        }
        case THREAD_VERIFY_EMAIL: {
            if (cache_num_rows()) {
                SendErrorMessage(extraid, "Email yang anda masukkan sudah dimiliki oleh akun lain.");
                Dialog_Show(extraid, PutEmail, DIALOG_STYLE_INPUT, "Email", WHITE"Tolong masukkan email dibawah ini untuk melakukan konfirmasi akun\nCek folder INBOX/SPAM untuk melihat kode verifikasi\n\nEmail valid: "YELLOW"@gmail.com, @hotmail.com", "Enter", "Quit");
            }
            else {
                new email_text[128], email_query[128];

                format(AccountData[extraid][pVerifyCode], 12, "RRP-%d", RandomEx(1000, 9999));

                format(email_query, sizeof(email_query), "UPDATE `accounts` SET `Email` = '%s', `VerifyCode` = '%s' WHERE `Username` = '%s';", SQL_ReturnEscaped(AccountData[extraid][pMail]), SQL_ReturnEscaped(AccountData[extraid][pVerifyCode]), ReturnName(extraid));
                mysql_tquery(g_iHandle, email_query);

                format(email_text, sizeof(email_text),"NAMA:%s#NAMA:%s#ADDRESS:%s#KONFIRMASI:%s", ReturnName(extraid), ReturnName(extraid), ReturnIP(extraid), AccountData[extraid][pVerifyCode]);
                // SendEmail("Valley Roleplay", AccountData[extraid][pMail], "[RRP] Verifikasi akun anda", email_text, true, "default.html");
                
                stop AccountData[extraid][pEmailTimer];
                AccountData[extraid][pEmailTimer] = defer refuseVCode(extraid); 

                Dialog_Show(extraid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi email kamu\n(kode sudah dikirim ke email kamu secara otomatis (INBOX / SPAM))):", "Verifikasi", "Kembali");
            }
        }
        case THREAD_FIND_USERNAME:
        {
            if (race_check != g_MysqlRaceCheck[extraid]) 
                return KickEx(extraid);

            if(cache_num_rows()) {
                // TextDrawShowForPlayer(extraid, gLoginTextdraws);

                GetPlayerName(extraid, AccountData[extraid][pUsername], MAX_PLAYER_NAME + 1);

                cache_get_value_int(0, "ID", AccountData[extraid][pID]);
                cache_get_value_int(0, "Admin", AccountData[extraid][pAdmin]);
                cache_get_value_int(0, "Volunteer", AccountData[extraid][pVolunteer]);
                cache_get_value_int(0, "RegisterDate", AccountData[extraid][pRegisterDate]);

                cache_get_value(0, "Email", AccountData[extraid][pMail], 32);
                cache_get_value(0, "IP", AccountData[extraid][pIP], 17);
                cache_get_value(0, "Salt", AccountData[extraid][pSalt], 65);
                cache_get_value(0, "VerifyCode", AccountData[extraid][pVerifyCode], 32);
                cache_get_value(0, "Password", AccountData[extraid][pPassword], 65);
                cache_get_value(0, "AdminRankName", AccountData[extraid][pAdminRankName], 32);
                cache_get_value_int(0, "WhiteList", AccountData[extraid][pWhiteList]);

                SetPVarInt(extraid, "ACPBlacklist", 1);
            
                if(!Blacklist_Check(extraid, "Username", ReturnAdminName(extraid))) {
                    DeletePVar(extraid, "ACPBlacklist");
                    if (!strcmp(AccountData[extraid][pPassword], "None") && !strcmp(AccountData[extraid][pSalt], "None")) {
                        AccountData[extraid][pPassword][0] = AccountData[extraid][pSalt][0] = EOS;
                        Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Registrasi", ""WHITE"Selamat datang "YELLOW"%s"WHITE".\n\nMasukkan password untuk membuat password akun: (password minimal 8 sampai dengan 32 karakter)", "Buat", "Quit", ReturnName(extraid));
                    } else if (!AccountData[extraid][pWhiteList]) {
                        Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "White List", WHITE"Akun dengan nama: "YELLOW"%s "WHITE"tidak terdaftar di whitelist\nSilahkan request whitelist di Discord.", "OK", "", ReturnName(extraid));
                        KickEx(extraid);
                    } else {
                        AccountData[extraid][pLoginTimer] = defer refuseLogin(extraid);
                        Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "LOGIN", ""GREEN"UCP Name: "WHITE"%s\n"GREEN"Attempts: "WHITE"%d/3\n"GREEN"Password: "WHITE"(input below)", "Login", "Quit", ReturnName(extraid,0), AccountData[extraid][pLoginAttempts]);
                    }
                }
            }
            else {
                // Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Account not registered", WHITE"Akun ini tidak terdaftar, silahkan daftarkan akun ini di "YELLOW"https://ucp."#SERVER_URL"", "OK :(", "");
                // KickEx(extraid);
                SQL_CheckAccountChar(extraid);
            }
        }
        case THREAD_FIND_CHARACTER:
        {
            if (race_check != g_MysqlRaceCheck[extraid]) 
                return KickEx(extraid);

            if (cache_num_rows()) {
                for (new i = 0; i < MAX_CHARACTERS; i ++) {
                    CharacterList[extraid][i][0] = EOS;
                }

                for (new i = 0; i < cache_num_rows(); i ++) {
                    PlayerData[extraid][pCharacter] = i;
                    cache_get_value(i, "Character", CharacterList[extraid][i], MAX_PLAYER_NAME + 1);
                }

                cache_get_value(0, "password", PlayerData[extraid][pPassword], 65);
                cache_get_value(0, "salt", PlayerData[extraid][pSalt], 65);
                cache_get_value(0, "Username", AccountData[extraid][pUsername], MAX_PLAYER_NAME + 1);

                new Cache:load;
                
                load = mysql_query(g_iHandle, sprintf("SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", AccountData[extraid][pUsername]));

                if (cache_num_rows()) {
                    cache_get_value_int(0, "ID", AccountData[extraid][pID]);
                    cache_get_value_int(0, "Admin", AccountData[extraid][pAdmin]);
                    cache_get_value_int(0, "Volunteer", AccountData[extraid][pVolunteer]);
                    cache_get_value_int(0, "RegisterDate", AccountData[extraid][pRegisterDate]);

                    cache_get_value(0, "Email", AccountData[extraid][pMail], 32);
                    cache_get_value(0, "IP", AccountData[extraid][pIP], 17);
                    cache_get_value(0, "Salt", AccountData[extraid][pSalt], 65);
                    cache_get_value(0, "VerifyCode", AccountData[extraid][pVerifyCode], 32);
                    cache_get_value(0, "Password", AccountData[extraid][pPassword], 65);
                    cache_get_value(0, "AdminRankName", AccountData[extraid][pAdminRankName], 32);
                    cache_get_value_int(0, "WhiteList", AccountData[extraid][pWhiteList]);
                }
                cache_delete(load);

                SetPVarInt(extraid, "ACPBlacklist", 1);
            
                if(!Blacklist_Check(extraid, "Username", ReturnAdminName(extraid))) {
                    DeletePVar(extraid, "ACPBlacklist");
                    if(!Blacklist_Check(extraid, "Characters", ReturnName(extraid))) {
                        AccountData[extraid][pLoginTimer] = defer refuseLogin(extraid);
                        Dialog_Show(extraid, LoginChar, DIALOG_STYLE_PASSWORD, "LOGIN", ""GREEN"UCP Name: "WHITE"%s\n"GREEN"Character: "WHITE"%s\n"GREEN"Attempts: "WHITE"%d/3\n"GREEN"Password: "WHITE"(input below)", "Login", "Quit", ReturnAdminName(extraid), ReturnName(extraid), AccountData[extraid][pLoginAttempts]);
                    }
                }
            } else {
                // AccountData[extraid][pPassword][0] = AccountData[extraid][pSalt][0] = EOS;
                // Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Register", ""WHITE"Selamat datang "YELLOW"%s"WHITE".\n\nMasukkan password untuk mendaftarkan akun: (password minimal 8 sampai dengan 32 karakter)", "Register", "Quit", ReturnName(extraid));
                Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Account not registered", "Akun ini tidak terdaftar silahkan daftarkan akun ini di Discord kami.\nDengan menggunakan command !register di Discord.", "Oke", "");
                KickEx(extraid);
            }
        }
        case THREAD_LOAD_INVENTORY:
        {
            static
                name[32];

            rows = cache_num_rows();

            for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
                InventoryData[extraid][i][invExists] = true;
                cache_get_value_int(i, "invID", InventoryData[extraid][i][invID]);
                cache_get_value_int(i, "invModel", InventoryData[extraid][i][invModel]);
                cache_get_value_int(i, "invQuantity", InventoryData[extraid][i][invQuantity]);
                cache_get_value(i, "invItem", name, sizeof(name));
                strpack(InventoryData[extraid][i][invItem], name, 32 char);
            }
        }
        case THREAD_LOAD_DAMAGES:
        {
            rows = cache_num_rows();

            for (new i = 0; i < rows && i < MAX_DAMAGE; i ++) if(!DamageData[extraid][i][damageExists]) {
                DamageData[extraid][i][damageExists] = true;
                cache_get_value_int(i, "ID", DamageData[extraid][i][damageID]);
                cache_get_value_int(i, "amount", DamageData[extraid][i][damageAmount]);
                cache_get_value_int(i, "weapon", DamageData[extraid][i][damageWeapon]);
                cache_get_value_int(i, "bodypart", DamageData[extraid][i][damageBodypart]);
                cache_get_value_int(i, "time", DamageData[extraid][i][damageTime]);
            }
        }
        /*case THREAD_LOAD_WEAPONS:
        {
            cache_get_data(rows, fields, g_iHandle);

            for (new i = 0; i != rows; i ++) if(!weaponData[extraid][i+1][weaponExists]) {
                weaponData[extraid][i+1][weaponExists] = true;
                weaponData[extraid][i+1][weaponID] = cache_get_value_int(i, "ID");
                weaponData[extraid][i+1][weaponModel] = cache_get_value_int(i, "model");
                weaponData[extraid][i+1][weaponDurability] = cache_get_value_int(i, "durability");
                weaponData[extraid][i+1][weaponUsing] = cache_get_value_int(i, "used");

                if(weaponData[extraid][i+1][weaponUsing])
                {
                    SelectWeapon[extraid] = i+1;
                    HoldWeapon(extraid, weaponData[extraid][SelectWeapon[extraid]][weaponModel]);
                }
            }
        }
        case THREAD_LOAD_AMMO:
        {
            cache_get_data(rows, fields, g_iHandle);

            for (new i = 0; i != rows; i ++) if(!ammoData[extraid][i+1][ammoExists]) {
                ammoData[extraid][i+1][ammoExists] = true;
                ammoData[extraid][i+1][ammoID] = cache_get_value_int(i, "ID");
                ammoData[extraid][i+1][ammoWeapon] = cache_get_value_int(i, "weapon");
                ammoData[extraid][i+1][ammoAmount] = cache_get_value_int(i, "ammo");
                ammoData[extraid][i+1][ammoUsing] = cache_get_value_int(i, "used");

                if(ammoData[extraid][i+1][ammoUsing])
                {
                    SelectAmmo[extraid] = i+1;
                    HoldWeapon(extraid, 0);

                    GivePlayerWeapon(extraid, weaponData[extraid][SelectWeapon[extraid]][weaponModel], 99999);
                }
            }
        }*/
        case THREAD_LOAD_CONTACTS:
        {
            rows = cache_num_rows();

            for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
                cache_get_value(i, "contactName", ContactData[extraid][i][contactName], 32);

                ContactData[extraid][i][contactExists] = true;
                cache_get_value_int(i, "contactID", ContactData[extraid][i][contactID]);
                cache_get_value_int(i, "contactNumber", ContactData[extraid][i][contactNumber]);
            }
        }
        case THREAD_LOAD_ACC:
        {
            static
                string[128];

            rows = cache_num_rows();

            for (new i = 0; i != rows; i ++) {
                AccData[extraid][i][accExists] = true;

                cache_get_value(i, "Type", AccData[extraid][i][accName], 32);
                
                cache_get_value(i, "Color1", string);
                sscanf(string, "p<|>ddd",AccData[extraid][i][accColor1][0],AccData[extraid][i][accColor1][1],AccData[extraid][i][accColor1][2]);
                
                cache_get_value(i, "Color2", string);
                sscanf(string, "p<|>ddd",AccData[extraid][i][accColor2][0],AccData[extraid][i][accColor2][1],AccData[extraid][i][accColor2][2]);
                
                cache_get_value(i, "Offset", string);
                sscanf(string, "p<|>fff",AccData[extraid][i][accOffset][0],AccData[extraid][i][accOffset][1],AccData[extraid][i][accOffset][2]);

                cache_get_value(i, "Rot", string);
                sscanf(string, "p<|>fff",AccData[extraid][i][accRot][0],AccData[extraid][i][accRot][1],AccData[extraid][i][accRot][2]);

                cache_get_value(i, "Scale", string);
                sscanf(string, "p<|>fff",AccData[extraid][i][accScale][0],AccData[extraid][i][accScale][1],AccData[extraid][i][accScale][2]);

                cache_get_value_int(i, "ID", AccData[extraid][i][accID]);
                cache_get_value_int(i, "Model", AccData[extraid][i][accModel]);
                cache_get_value_int(i, "Bone", AccData[extraid][i][accBone]);
                cache_get_value_int(i, "Show", AccData[extraid][i][accShow]);
                
                if (AccData[extraid][i][accShow])
                    Aksesoris_Attach(extraid, i);
            }
        }
        case THREAD_LOAD_LOCATIONS:
        {
            rows = cache_num_rows();

            for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
                cache_get_value(i, "locationName", LocationData[extraid][i][locationName], 32);

                LocationData[extraid][i][locationExists] = true;
                cache_get_value_int(i, "locationID", LocationData[extraid][i][locationID]);
                cache_get_value_float(i, "locationX", LocationData[extraid][i][locationPos][0]);
                cache_get_value_float(i, "locationY", LocationData[extraid][i][locationPos][1]);
                cache_get_value_float(i, "locationZ", LocationData[extraid][i][locationPos][2]);
            }
        }
        case THREAD_LOAD_TICKETS:
        {
            rows = cache_num_rows();

            for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
                cache_get_value(i, "ticketIssuer", TicketData[extraid][i][ticketIssuer], 24);
                cache_get_value(i, "ticketReason", TicketData[extraid][i][ticketReason], 64);
                cache_get_value(i, "ticketDate", TicketData[extraid][i][ticketDate], 36);

                TicketData[extraid][i][ticketExists] = true;
                cache_get_value_int(i, "ticketID", TicketData[extraid][i][ticketID]);
                cache_get_value_int(i, "ticketFee", TicketData[extraid][i][ticketFee]);
            }
        }
    }
    return 1;
}

Function:OnViewCharges(extraid, name[])
{
    if(GetFactionType(extraid) != FACTION_POLICE)
        return 0;

    new
        rows = cache_num_rows();

    if(!rows)
        return SendErrorMessage(extraid, "No results found for charges on \"%s\".", name);

    static
        string[1024],
        desc[128],
        date[36];

    string[0] = 0;

    for (new i = 0; i < rows; i ++) {
        cache_get_value(i, "Description", desc);
        cache_get_value(i, "Date", date);

        format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
    }
    format(desc, sizeof(desc), "Charges: %s", name);
    Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Close", "");
    return 1;
}

static SetCameraData(playerid)
{
    TogglePlayerSpectating(playerid, 1);

    switch(random(6))
    {
        case 0:
        {
            InterpolateCameraPos(playerid, 379.781463, -1673.389038, 37.489448, 350.904815, -1634.863281, 87.521492, 30000, CAMERA_MOVE);
            InterpolateCameraLookAt(playerid, 377.361999, -1669.241333, 38.883235, 349.680572, -1630.073852, 86.771209, 30000, CAMERA_MOVE);
        }
        case 1:
        {
            InterpolateCameraPos(playerid, 1523.588623, -1694.907348, 15.666633, 1504.358276, -1590.933959, 22.763849, 30000, CAMERA_MOVE);
            InterpolateCameraLookAt(playerid, 1527.345825, -1691.891967, 14.328460, 1507.586059, -1594.744995, 22.524875, 30000, CAMERA_MOVE);
        }
        case 2:
        {                        
            InterpolateCameraPos(playerid, 1473.401733, -1340.417480, 183.743148, 1378.795166, -1400.767456, 37.037273, 45000, CAMERA_MOVE);
            InterpolateCameraLookAt(playerid, 1473.437744, -1345.283081, 182.592102, 1383.596557, -1401.767333, 36.064338, 45000, CAMERA_MOVE);
        }
        case 3:
        {       
            InterpolateCameraPos(playerid, 1455.251831, -787.310974, 138.934143, 1364.516357, -899.297241, 37.306629, 40000, CAMERA_MOVE);
            InterpolateCameraLookAt(playerid, 1457.950195, -785.026428, 142.469680, 1366.864501, -895.341918, 39.266666, 40000, CAMERA_MOVE);
        }
        case 4:
        {
            InterpolateCameraPos(playerid, 1459.271606, -1421.299804, 53.058837, 1736.587890, -1472.171386, 42.330844, 40000, CAMERA_MOVE);
            InterpolateCameraLookAt(playerid, 1464.122070, -1421.478515, 51.858188, 1732.220336, -1474.604125, 42.408969, 40000, CAMERA_MOVE);
        }
        case 5:
        {
            InterpolateCameraPos(playerid, 1176.149902, -2036.335571, 77.282897, 1480.620605, -1621.346801, 71.441673, 45000, CAMERA_MOVE);
            InterpolateCameraLookAt(playerid, 1171.161010, -2036.317138, 76.951110, 1480.648437, -1626.346679, 71.455993, 45000, CAMERA_MOVE);
        }
    }
    return 1;
}

Function:OnResolveNumber(extraid,number)
{
    new
        rows = cache_num_rows();

    if(!rows)
        return SendErrorMessage(extraid, "There is no account linked with the specified name.");

    new name[MAX_PLAYER_NAME+1];

    cache_get_value(0, "Character", name);

    SendClientMessageEx(extraid, X11_FOREST_GREEN, "[NUMBER]: "WHITE"%d is number phone of account %s.",number, name);

    return 1;
}

Function:OnResolveMask(extraid,number)
{
    new
        rows = cache_num_rows();

    if(!rows)
        return SendErrorMessage(extraid, "There is no account linked with the specified name.");

    new name[MAX_PLAYER_NAME+1];

    cache_get_value(0, "Character", name);

    SendClientMessageEx(extraid, X11_FOREST_GREEN, "[NUMBER]: "WHITE"%d is mask number of account %s.",number, name);

    return 1;
}

Function:OnLoginDate(extraid, username[])
{
    if(!IsPlayerConnected(extraid))
        return 0;

    static
        rows,
        date;

    rows = cache_num_rows();

    if(rows) {
         cache_get_value_int(0, "LoginDate", date);
         SendServerMessage(extraid, "%s's last login was on: %s.", username, GetDuration(gettime()-date));
    }
    else {
        SendErrorMessage(extraid, "Invalid username specified.");
    }
    return 1;
}

Function:OnCarStorageAdd(carid, itemid)
{
    CarStorage[carid][itemid][cItemID] = cache_insert_id();
    return 1;
}

Function:OnStorageAdd(houseid, itemid)
{
    HouseStorage[houseid][itemid][hItemID] = cache_insert_id();
    return 1;
}

Function:OnDealerCarCreated(bizid, slotid)
{
    DealershipCars[bizid][slotid][vehID] = cache_insert_id();
    return 1;
}

Function:OnFurnitureCreated(furnitureid, houseid)
{
    FurnitureData[houseid][furnitureid][furnitureID] = cache_insert_id();
    Furniture_Save(furnitureid, houseid);
    return 1;
}

Function:OnHouseStructureCreated(id, houseid) {
    HouseStructure[houseid][id][structureID] = cache_insert_id();
    HouseStructure_Save(id, houseid);
    return 1;
}

Function:OnContactAdd(playerid, id)
{
    ContactData[playerid][id][contactID] = cache_insert_id();
    return 1;
}

Function:OnInventoryAdd(playerid, itemid)
{
    InventoryData[playerid][itemid][invID] = cache_insert_id();
    return 1;
}

Function:OnDeleteCharacter(playerid, name[])
{
    static
        rows,
        id = -1;

    rows = cache_num_rows();

    if(!rows)
        return SendErrorMessage(playerid, "The character \"%s\" is not linked under any accounts.", name);

    cache_get_value_int(0, "ID", id);

    if(id) {
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `contacts` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `gps` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `inventory` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `tickets` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `characters` WHERE `ID` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `player_vehicles` WHERE `Owner` = '%d'", id));
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `warrants` WHERE `Suspect` = '%s'", name));

        SendServerMessage(playerid, "You have deleted \"%s\" successfully.", name);
    }
    return 1;
}

Function:OnNameChange(playerid, userid, newname[])
{
    if(!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
        return 0;

    new
        rows = cache_num_rows();

    if(rows)
        return SendErrorMessage(playerid, "The specified name \"%s\" is in use.", newname);

    new
        oldname[MAX_PLAYER_NAME];

    GetPlayerName(userid, oldname, sizeof(oldname));
    ChangeName(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
        if(oldname[i] == '_') oldname[i] = ' ';
    }
    for (new i = 0, l = strlen(newname); i != l; i ++) {
        if(newname[i] == '_') newname[i] = ' ';
    }
    SendServerMessage(playerid, "You have changed %s's name to %s.", oldname, newname);
    SendServerMessage(userid, "%s has changed your name to %s.", ReturnName(playerid, 0), newname);

    format(NormalName(userid),36, newname);

    for(new id; id < MAX_BUSINESSES; id++) if(BusinessData[id][bizExists] && BusinessData[id][bizOwner] == GetPlayerSQLID(userid)) {
        format(BusinessData[id][bOwnerName], MAX_PLAYER_NAME, newname);
        Business_Refresh(id);
    }

    foreach (new id : Houses) if(HouseData[id][houseOwner] == GetPlayerSQLID(userid)) {
        format(HouseData[id][houseOwnerName], MAX_PLAYER_NAME, newname);
        House_Refresh(id);
    }

    for (new id; id < MAX_GARAGE; id ++) if (GarageData[id][garageExists] && GarageData[id][garageOwnerId] == GetPlayerSQLID(userid)) {
        format(GarageData[id][garageOwner], MAX_PLAYER_NAME, newname);
        Garage_Sync(id);
    }
    
    for (new id = 0; id < MAX_APARTMENT_ROOM; id ++) if (Iter_Contains(ApartRooms, id) && ApartRoom[id][rOwner] == GetPlayerSQLID(userid)) {
        format(ApartRoom[id][rOwnerName], MAX_PLAYER_NAME, newname);
        ApartRoom_Refresh(id);
    }

    for (new id = 0; id < MAX_FURNSTORE; id ++) if (Iter_Contains(FurnStore, id) && storeData[id][storeOwner] == GetPlayerSQLID(userid)) {
        format(storeData[id][storeOwnerName], MAX_PLAYER_NAME, newname);
        FurnStore_Refresh(id);
    }

    for (new id = 0; id < MAX_PRIVATE_FARM; id ++) if (Iter_Contains(Farms, id) && FarmData[id][farmOwner] == GetPlayerSQLID(userid)) {
        format(FarmData[id][farmOwnerName], MAX_PLAYER_NAME, newname);
        Farm_Refresh(id);
    }

    Log_Write("logs/name_log.txt", "[%s] %s has changed %s's name to %s.", ReturnDate(), ReturnName(playerid), oldname, newname);
    return 1;
}

Function:OnTicketCreated(playerid, ticketid)
{
    TicketData[playerid][ticketid][ticketID] = cache_insert_id();
    return 1;
}

// Function:OnRackCreated(rackid)
// {
//     if(rackid == -1 || !RackData[rackid][rackExists])
//         return 0;

//     RackData[rackid][rackID] = cache_insert_id();
//     Rack_Save(rackid);

//     return 1;
// }

Function:OnBusinessCreated(bizid)
{
    if(bizid == -1 || !BusinessData[bizid][bizExists])
        return 0;

    BusinessData[bizid][bizID] = cache_insert_id();
    Business_Save(bizid);

    return 1;
}

Function:OnEntranceCreated(entranceid)
{
    if(entranceid == -1 || !EntranceData[entranceid][entranceExists])
        return 0;

    EntranceData[entranceid][entranceID] = cache_insert_id();
    EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

    Entrance_Save(entranceid);

    return 1;
}

Function:OnPlayerCarCreated(carid)
{
    if(!Iter_Contains(DynamicVehicles, carid))
        return 0;

    VehicleData[carid][cID] = cache_insert_id();
    Vehicle_Save(carid);

    return 1;
}

Function:OnPumpCreated(pumpid)
{
    PumpData[pumpid][pumpID] = cache_insert_id();
    Pump_Save(pumpid);

    return 1;
}

Function:OnArrestCreated(arrestid)
{
    if(arrestid == -1 || !ArrestData[arrestid][arrestExists])
        return 0;

    ArrestData[arrestid][arrestID] = cache_insert_id();
    Arrest_Save(arrestid);

    return 1;
}

Function:OnPlantCreated(plantid)
{
    if(plantid == -1 || !PlantData[plantid][plantExists])
        return 0;

    PlantData[plantid][plantID] = cache_insert_id();
    Plant_Save(plantid);

    return 1;
}

// Function:OnCrateCreated(crateid)
// {
//     if(crateid == -1 || !CrateData[crateid][crateExists])
//         return 0;

//     CrateData[crateid][crateID] = cache_insert_id();
//     Crate_Save(crateid);

//     return 1;
// }

Function:OnFactionCreated(factionid)
{
    if(factionid == -1 || !FactionData[factionid][factionExists])
        return 0;

    FactionData[factionid][factionID] = cache_insert_id();

    Faction_Save(factionid);
    Faction_SaveRanks(factionid);

    return 1;
}

/*Function:OnBackpackCreated(id)
{
    if(id == -1 || !BackpackData[id][backpackExists])
        return 0;

    BackpackData[id][backpackID] = cache_insert_id();
    Backpack_Save(id);

    return 1;
}*/

Function:OnATMCreated(atmid)
{
    if(atmid == -1 || !ATMData[atmid][atmExists])
        return 0;

    ATMData[atmid][atmID] = cache_insert_id();
    ATM_Save(atmid);

    return 1;
}

Function:OnImpoundCreated(impoundid)
{
    if(impoundid == -1 || !ImpoundData[impoundid][impoundExists])
        return 0;

    ImpoundData[impoundid][impoundID] = cache_insert_id();
    Impound_Save(impoundid);

    return 1;
}

// Function:OnDetectorCreated(id)
// {
//     MetalDetectors[id][detectorID] = cache_insert_id();
//     return 1;
// }

Function:OnGarbageCreated(garbageid)
{
    if(garbageid == -1 || !GarbageData[garbageid][garbageExists])
        return 0;

    GarbageData[garbageid][garbageID] = cache_insert_id();
    Garbage_Save(garbageid);

    return 1;
}

Function:OnSpeedCreated(speedid)
{
    if(speedid == -1 || !SpeedData[speedid][speedExists])
        return 0;

    SpeedData[speedid][speedID] = cache_insert_id();
    Speed_Save(speedid);

    return 1;
}

Function:OnHouseCreated(houseid)
{
    if(!Iter_Contains(Houses, houseid))
        return 0;

    HouseData[houseid][houseID] = cache_insert_id();
    House_Save(houseid);

    return 1;
}

Function:OnDealerCreated(id)
{
    if(id == -1 || !DealershipData[id][dExists])
        return 0;

    DealershipData[id][dID] = cache_insert_id();
    Dealership_Save(id);

    return 1;
}

Function:OnDroppedItem(itemid)
{
    if(itemid == -1 || !DroppedItems[itemid][droppedModel])
        return 0;

    DroppedItems[itemid][droppedID] = cache_insert_id();
    return 1;
}

Function:OnJobCreated(jobid)
{
    if(jobid == -1 || !JobData[jobid][jobExists])
        return 0;

    JobData[jobid][jobID] = cache_insert_id();
    Job_Save(jobid);

    return 1;
}

Function:FlashShowTextDraw(playerid, PlayerText:textid)
{
    if((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
        PlayerTextDrawShow(playerid, textid);
    }
    return 1;
}
Function:OnJailAccount(playerid, minutes, reason[], jailedby[], name[])
{
    new
        query[225],
        rows = cache_num_rows();

    if(!rows)
        return SendErrorMessage(playerid, "No character found!");

    format(query,sizeof(query),"UPDATE `characters` SET `JailTime`='%d', `JailReason`='%s', `JailedBy`='%s' WHERE `Character`='%s'", minutes, SQL_ReturnEscaped(reason), SQL_ReturnEscaped(jailedby), SQL_ReturnEscaped(name));
    mysql_tquery(g_iHandle, query);

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was offline jailed by %s for %d min.", name, ReturnAdminName(playerid), (minutes/60));
        SendClientMessageEx(i, X11_TOMATO_1, "Reason: %s", reason);
    }
    return 1;
}

// Function:OnBillboardCreated(bizid)
// {
//     if(bizid == -1 || !BillBoardData[bizid][bbExists])
//         return 0;

//     BillBoardData[bizid][bbID] = cache_insert_id();
//     Billboard_Save(bizid);

//     return 1;
// }

Function:Static_Load()
{
    new
        rows = cache_num_rows(), string[64], config;

    if(rows)
    {
        cache_get_value(0, "a_Motd", ServerData[a_Motd], 225);
        cache_get_value(0, "h_Motd", ServerData[h_Motd], 225);
        cache_get_value(0, "g_Motd", ServerData[g_Motd], 225);
        cache_get_value_int(0, "g_Players", ServerData[g_Players]);
        cache_get_value_int(0, "fish_Price", ServerData[fish_Price]);
        cache_get_value_int(0, "pumpkinPrice", ServerData[pumpkinPrice]);
        cache_get_value_int(0, "mushroomPrice", ServerData[mushroomPrice]);
        cache_get_value_int(0, "cucumberPrice", ServerData[cucumberPrice]);
        cache_get_value_int(0, "eggplantPrice", ServerData[eggplantPrice]);

        cache_get_value(0, "cargoStock", string, 64);
        sscanf(string, "p<|>dddddd", ServerData[cargoStock][0], ServerData[cargoStock][1], ServerData[cargoStock][2], ServerData[cargoStock][3], ServerData[cargoStock][4], ServerData[cargoStock][5]);

        // Farmer Board
        farmBoard = CreateDynamicObject(18244, -371.54, -1427.83, 30.32, 89.99, 2.30, 266.97, 0, 0);
        SetDynamicObjectMaterialText(farmBoard, 0, sprintf("[Plant Price]\nPumpkin %s\nMushroom %s\nCucumber %s\nEgg Plant %s", FormatNumber(ServerData[pumpkinPrice]), FormatNumber(ServerData[mushroomPrice]), FormatNumber(ServerData[cucumberPrice]), FormatNumber(ServerData[eggplantPrice])), OBJECT_MATERIAL_SIZE_512x512, "Arial", 50, 1, 0xFFFFFFFF, -16777216, 1);

        // Fish Board
        fishBoard = CreateDynamicObject(18244, 1362.73, 1336.15, 11.62, 90.20, -89.89, -0.09, 7037, 6);
        SetDynamicObjectMaterialText(fishBoard, 0, sprintf("[Fish Price]\n%s/lbs", FormatNumber(ServerData[fish_Price])), OBJECT_MATERIAL_SIZE_512x512, "Arial", 50, 1, 0xFFFFFFFF, -16777216, 1);

        cache_get_value_int(0, "config", config);

        if(config)
        {
            print("You're not authorized to use this gamemode.");
            SendRconCommand("gmx");
        }
    }
    else
    {
        ServerData[fish_Price] = 0;
        ServerData[pumpkinPrice] = 0;
        ServerData[mushroomPrice] = 0;
        ServerData[cucumberPrice] = 0;
        ServerData[eggplantPrice] = 0;
        ServerData[g_Players] = 0;
        format(ServerData[g_Motd], 255, SERVER_NAME);
        format(ServerData[a_Motd], 255, SERVER_NAME);
        format(ServerData[h_Motd], 255, SERVER_NAME);
        for (new i = 0; i < 6; i ++) {
            ServerData[cargoStock][i] = 1000;
        }
    }
    print("*** [RV:RP Database: Loaded] server data (motd, record, fish price, plant price, cargo stock).");
    return 1;
}

// Function:Billboard_Load()
// {
//     for (new i = 0; i < cache_num_rows(); i ++) if(i < MAX_BILLBOARDS)
//     {
//         BillBoardData[i][bbExists] = true;
//         BillBoardData[i][bbID] = cache_get_value_int(i, "bbID");

//         cache_get_value(i, "bbName", BillBoardData[i][bbName], 32);
//         cache_get_value(i, "bbMessage", BillBoardData[i][bbMessage], 230);

//         BillBoardData[i][bbOwner] = cache_get_value_int(i, "bbOwner");
//         BillBoardData[i][bbPrice] = cache_get_value_int(i, "bbPrice");
//         BillBoardData[i][bbRange] = cache_get_value_int(i, "bbRange");
//         BillBoardData[i][bbPos][0] = cache_get_value_float(i, "bbPosX");
//         BillBoardData[i][bbPos][1] = cache_get_value_float(i, "bbPosY");
//         BillBoardData[i][bbPos][2] = cache_get_value_float(i, "bbPosZ");
//         Billboard_Refresh(i);
//     }
//     printf("\n****************************** SERVER CONFIGURATE ******************************\n\n*** [RV:RP Database: Loaded] billboard data (%d count).", cache_num_rows());
//     return 1;
// }

// Function:OnViewBillboards(extraid, name[])
// {
//     new
//         string[1024],
//         desc[128],
//         rows,
//         fields;

//     cache_get_data(rows, fields, g_iHandle);

//     if(!rows)
//         return SendErrorMessage(extraid, "No billboards found!");

//     for (new i = 0; i < rows; i ++) {
//         cache_get_value(i, "bbName", desc, sizeof(desc));
//         strcat(string, sprintf(""WHITE"Billboard ({FFBF00}%i"WHITE") | %s | $%d\n", i, desc, BillBoardData[i][bbPrice]));
//     }
//     format(desc, sizeof(desc), "Los Santos Billboards Agency", name);
//     Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Close", "");
//     return 1;
// }

Function:BreakCuffs(playerid, userid)
{
    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Crowbar") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
        return 1;

    if(random(2))
    {
        ShowPlayerFooter(playerid, "You have ~r~failed~w~ to pick the cuffs.", 3000, 1);
        cmd_ame(playerid, "failed to pick the cuffs.");
    }
    else
    {
        PlayerData[userid][pCuffed] = 0;
        SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

        ShowPlayerFooter(playerid, "You have ~g~picked~w~ the cuffs.", 3000, 1);
        cmd_ame(playerid, sprintf("picked the cuffs from %s's wrists.", ReturnName(userid, 0, 1)));
    }
    return 1;
}

Function:SpawnTimer(playerid)
{
    if(SQL_IsCharacterLogged(playerid))
    {
        foreach(new i : Player) if(!PlayerData[i][pLoginLog])
        {
            {
                new country[24], city[24];
                GetPlayerCountry(playerid, country, sizeof(country));
                GetPlayerCity(playerid, city, sizeof(city));

                SendClientMessageEx(i, X11_WHITE,"* "RED"%s "WHITE"telah bergabung ke server. %s",ReturnName(playerid,1), !strcmp(country, "Unknown", true) ? ("") : sprintf("(%s, %s)", city, country));
            }
        }

        for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++) if(AccountData[i][pUsername][0] != EOS)
        {
            if(!strcmp(AccountData[i][pUsername], AccountData[playerid][pUsername]) && i != playerid)
            {
                SendServerMessage(playerid, "Seseorang sedang login menggunakan UCP yang sama.");
                KickEx(playerid);
                return 1;
            }
        }

        SendServerMessage(playerid, "Selamat datang "YELLOW"%s"WHITE", terakhir login pada ("LIGHTBLUE"%s"WHITE").", ReturnName(playerid, 0), GetDuration(gettime()-PlayerData[playerid][pLoginDate]));
        SendCustomMessage(playerid,  "INFO PENTING", "Mohon BACA bagian "LIGHTBLUE"/faq"WHITE" dan "LIGHTBLUE"/map "WHITE"agar anda dapat memahami permainan.");
        if(PlayerData[playerid][pCanPaycheck]) SendCustomMessage(playerid, "PAYCHECK", "Paycheck sudah dapat anda ambil di Bank atau ATM (/atm).");

        if(AccountData[playerid][pAdmin])
        {   
            if(strcmp(ServerData[a_Motd], "NULL", true))
                SendClientMessageEx(playerid, X11_LIGHTBLUE, "ADMIN MOTD: "WHITE"%s", ServerData[a_Motd]);

            if(Report_Count() > 0)
                SendClientMessageEx(playerid, COLOR_ORANGE, "REPORT: "WHITE"There are "RED"%d "WHITE"unread report's, /reports to check it.", Report_Count());

            if(Ask_Count() > 0)
                SendClientMessageEx(playerid, COLOR_ORANGE, "ASK: "WHITE"There are "RED"%d "WHITE"unread ask's, /asks to check it.", Ask_Count());
        }

        if(PlayerData[playerid][pFaction] != -1) {
            if(strcmp(FactionData[PlayerData[playerid][pFaction]][factionMotd], "NULL", true)) {
                SendCustomMessage(playerid, "FACTION MOTD", "%s", FactionData[PlayerData[playerid][pFaction]][factionMotd]);
            }
        }
        if(PlayerData[playerid][pFactionMod] == 1)
        {
            SendClientMessage(playerid, X11_TOMATO_1, "FACMOD: You are logged in as Faction Moderator!");      
        }
        if(strcmp(ServerData[g_Motd], "NULL", true)) SendClientMessageEx(playerid, X11_LIGHTBLUE, "MOTD: "WHITE"%s", ServerData[g_Motd]);

        SetPlayerStreamerSettings(playerid);

        switch (PlayerData[playerid][pUsedFightStyle]) {
            case 0: SetPlayerFightingStyle(playerid, 5);
            case 1: SetPlayerFightingStyle(playerid, 6);
            case 2: SetPlayerFightingStyle(playerid, 7);
            default: SetPlayerFightingStyle(playerid, 15);
        }

        if (!PlayerData[playerid][pTogHud]) {
            //Hunger textdraw
            TogglePlayerGUI(playerid, true);

            switch (PlayerData[playerid][pHUD]) {
                case 1: {
                    ShowPlayerProgressBar(playerid, PlayerData[playerid][hungry]);
                    ShowPlayerProgressBar(playerid, PlayerData[playerid][energy]);
                }
                case 2: {
                    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], ConvertHBEColor(floatround(PlayerData[playerid][pHunger])));
                    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], ConvertHBEColor(floatround(PlayerData[playerid][pEnergy])));
                    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], sprintf("%.0f%",PlayerData[playerid][pHunger]));
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], sprintf("%.0f%",PlayerData[playerid][pEnergy]));
                }
            }

            //Map update
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_map]);

            //Ammo Update
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_ammo]);

            //Player Time GUI
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_timegui][0]);
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_timegui][1]);
        }

       /*
        if(!strcmp(PlayerData[playerid][pUsername], "NULL", false)) Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Anda belum memasukkan username.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");
        else {
            if(!isValidPassword(PlayerData[playerid][pUsername]))
                Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Nama anda memiliki angka atau nomor yang tidak jelas.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");
        }
        */

        PlayerData[playerid][pLoginDate] = gettime();
        GetPlayerIp(playerid, AccountData[playerid][pIP], 16);
        TogglePlayerControllable(playerid, 1);

        /* Weapon system */
        if(IsPlayerDuty(playerid)) RefreshFactionWeapon(playerid);
        else mysql_tquery(g_iHandle, sprintf("SELECT * FROM `weapon_players` WHERE `userid` = '%d';", GetPlayerSQLID(playerid)), "OnLoadPlayerWeapons", "d", playerid);
        
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `aksesoris` WHERE `accID` = '%d' ORDER BY `accID` DESC LIMIT %d", PlayerData[playerid][pID], MAX_ACC), "OnQueryFinished", "dd", playerid, THREAD_LOAD_ACC);

        if(GetPlayerInterior(playerid)) {
            SetPlayerWeather(playerid, 4); 
            SetPlayerTime(playerid, 12, 0);
        }
        else {
            SetPlayerWeather(playerid, current_weather);

            new hour;
            gettime(hour, _, _);
            SetPlayerTime(playerid, hour, 0);
        }

        if (PlayerData[playerid][pAuto][5]) {
            new str[128];

            foreach (new i : Player) {
                ShowPlayerNameTagForPlayer(i, playerid, 0);
            }
            format(str, sizeof(str), "Mask_#%d\nHP: ["RED"%.1f"WHITE"] AP: ["LIGHTGREY"%.1f"WHITE"]", PlayerData[playerid][pMaskID], ReturnHealth2(playerid), ReturnArmour2(playerid));
            PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, -1, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 1);

            SendCustomMessage(playerid, "MASK", GREEN"ON");
            PlayerData[playerid][pMaskOn] = 1;
        }

        foreach (new i : Houses) if(House_IsOwner(playerid, i)) {
            HouseData[i][houseLastVisited] = gettime();
            House_Save(i);
        }

        for (new i = 0; i != MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i)) {
            BusinessData[i][bizLastVisited] = gettime();
            Business_Save(i);
        }

        for (new i = 0; i != MAX_GARAGE; i ++) if (Garage_IsOwner(playerid, i)) {
            GarageData[i][garageLastVisited] = gettime();
            Garage_Save(i);
        }

        foreach (new i : Workshop) if (Workshop_IsOwner(playerid, i)) {
            WorkshopData[i][wLastVisited] = gettime();
            Workshop_Save(i);
        }

        foreach (new i : Farms) if (Farm_IsOwner(playerid, i)) {
            FarmData[i][farmLastVisited] = gettime();
            Farm_Save(i);
        }

        foreach (new i : FlatRooms) if (FlatRoom_IsOwner(playerid, i)) {
            FlatRoom[i][flatRoomLastVisited] = gettime();
            FlatRoom_Save(i);
        }
    }
    return 1;
}

Function:RemoveAttachedObject(playerid, slot)
{
    if(IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
    {
        RemovePlayerAttachedObject(playerid, slot);
    }
    return 1;
}

Function:MineTime(playerid)
{
    PlayerData[playerid][pMineTime] = 0;
    return 1;
}

// Function:Advertise(playerid)
// {
//     if(!SQL_IsCharacterLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
//         return 0;

//     new
//         text[140];

//     strunpack(text, PlayerData[playerid][pAdvertise]);
//     PlayerData[playerid][pPlaceAd] = 0;
//     foreach (new i : Player) if(!PlayerData[i][pDisableBC])  {
//         SendClientMessageEx(i, X11_YELLOW, "Ad: {00AA00}%s", text);
//         SendClientMessageEx(i, X11_YELLOW, "Contact Number: [ {00AA00}%d "YELLOW"] Type: [ {00AA00}%s "YELLOW"]", PlayerData[playerid][pPhone],GetAdvertiseType(playerid));
//     }
//     PlayerData[playerid][pAdvertise] = '\0';
//     PlayerData[playerid][pAdvertiseType] = 0;
//     return 1;
// }

Function:KickHouse(playerid, id)
{
    if(GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
        return 0;

    switch (random(6))
    {
        case 0..2:
        {
            ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.", 3000, 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has failed to kick the door down.", ReturnName(playerid, 0, 1));
        }
        default:
        {
            HouseData[id][houseLocked] = 0;
            House_Save(id);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has successfully kicked the door down.", ReturnName(playerid, 0, 1));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to enter the house.", 3000, 1);
        }
    }
    return 1;
}

Function:KickBusiness(playerid, id)
{
    if(GetFactionType(playerid) != FACTION_POLICE || Business_Nearest(playerid) != id)
        return 0;

    switch (random(6))
    {
            case 0..2:
            {
                    ShowPlayerFooter(playerid, "You have ~r~failed~w~ to kick the door down.", 3000, 1);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has failed to kick the door down.", ReturnName(playerid, 0, 1));
        }
        default:
        {
                BusinessData[id][bizLocked] = 0;
                Business_Save(id);

                SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has successfully kicked the door down.", ReturnName(playerid, 0, 1));
                ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to enter the business.", 3000, 1);
        }
    }
    return 1;
}

Function:Pump_Load(bizid)
{
    static
        rows,
        id = -1;

    rows = cache_num_rows();

    for (new i = 0; i < rows; i ++) if((id = Pump_GetFreeID()) != -1)
    {
        PumpData[id][pumpExists] = true;
        PumpData[id][pumpBusiness] = bizid;
        cache_get_value_int(i, "pumpID", PumpData[id][pumpID]);
        cache_get_value_float(i, "pumpPosX", PumpData[id][pumpPos][0]);
        cache_get_value_float(i, "pumpPosY", PumpData[id][pumpPos][1]);
        cache_get_value_float(i, "pumpPosZ", PumpData[id][pumpPos][2]);
        cache_get_value_float(i, "pumpPosA", PumpData[id][pumpPos][3]);
        cache_get_value_int(i, "pumpFuel", PumpData[id][pumpFuel]);

        PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
        Pump_Refresh(id);
    }
    return 1;
}

Function:OpenInventory(playerid)
{
    if(!IsPlayerConnected(playerid))
        return 0;

    new
        inv[1024],
        name[48],
        count = 0;

    strcat(inv, "Name\tQuantity\n");
    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++) if(InventoryData[playerid][i][invExists]) {
        strunpack(name, InventoryData[playerid][i][invItem]);
        strcat(inv, sprintf("%s\t%d\n", name, InventoryData[playerid][i][invQuantity]));
        ListedInventory[playerid][count++] = i;
    }
    if(count) {
        PlayerData[playerid][pStorageSelect] = 0;
        Dialog_Show(playerid, MyInventory, DIALOG_STYLE_TABLIST_HEADERS, "My Inventory", inv, "Select", "Close");
        return 1;
    }
    SendErrorMessage(playerid, "There are no one item in your inventory.");
    return 1;
    //return ShowModelSelectionMenu(playerid, "Inventory", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

Function:SelectTD(playerid)
{
    if(!IsPlayerConnected(playerid))
        return 0;

    return SelectTextDraw(playerid, 0xC0C0C0FF);
}

Function:KickTimer(playerid)
{
    if(PlayerData[playerid][pKicked]) {
        return Kick(playerid);
    }
    return 0;
}

Function:HidePlayerFooter(playerid) {

    if(!PlayerData[playerid][pShowFooter])
        return 0;

    PlayerData[playerid][pShowFooter] = false;
    KillTimer(PlayerData[playerid][pFooterTimer]);
    PlayerData[playerid][pFooterTimer] = 0;
    return PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_footer]);
}

Function:OnQueryExecute(playerid, query[])
{
    new
        rows = cache_num_rows();

    if(strfind(query, "SELECT", true) != -1)
        Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: MySQL returned %d rows from your query.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", rows);

    else
        Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: Query executed successfully (affected rows: %d).\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", cache_affected_rows());

    PlayerData[playerid][pExecute] = 0;

    return 1;
}

/*==============================================================================
    Timer
==============================================================================*/

task FeatureUpdate[1000]()
{
    /*if(timeDay[0] == 0 && timeDay[1] == 0 && timeDay[2] == 0)
    {
        mysql_tquery(g_iHandle, "UPDATE weapons SET Enable = 0 WHERE Enable=1");
    }*/

    /*Fuel update timer*/
    new Float: mass, Float: speed, Float: dist;
    for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(IsValidVehicle(i) && IsEngineVehicle(i) && GetEngineStatus(i))
    {
        dist = GetVehicleDistanceFromPoint(i, CoreVehicles[i][vehLastCoords][0], CoreVehicles[i][vehLastCoords][1], CoreVehicles[i][vehLastCoords][2]);
        mass = GetVehicleModelInfoAsFloat(GetVehicleModel(i), "fMass");
        speed = GetVehicleSpeed(i, false) + 0.001;
        CoreVehicles[i][vehFuel] -= ((mass / (mass * 4.5)) * ((speed / 60) + 0.015) / 30) * ((dist / 10) + 0.001);
        if(CoreVehicles[i][vehFuel] < 0.1) SetEngineStatus(i, false), CoreVehicles[i][vehFuel] = 0.0;
        GetVehiclePos(i, CoreVehicles[i][vehLastCoords][0], CoreVehicles[i][vehLastCoords][1], CoreVehicles[i][vehLastCoords][2]);
    }

    /*Server restaer timer*/
    if(g_ServerRestart)
    {
        if (gettime() >= g_RestartTime) {
            g_ServerRestart = 0;
            g_RestartTime = 0;
            TextDrawHideForAll(gServerTextdraws[1]);
            GameModeExit();
        }
    }

    /*Server countdown timer*/
    if(GetGVarInt("Countdown") && GetGVarInt("CDInterval") > 0) 
    {
        new string[64], times[3];

        SetGVarInt("CDInterval", GetGVarInt("CDInterval")-1);
        GetElapsedTime(GetGVarInt("CDInterval"), times[0], times[1], times[2]);

        switch(GetGVarInt("CDInterval"))
        {
            case 0:
            {
                format(string, 32, "~p~Countdown:~w~Done");
                TextDrawHideForAll(gServerTextdraws[1]);
                SetGVarInt("Countdown", 0);
            }
            case 1:format(string, 32, "~p~Countdown:~g~~h~ %02d:%02d", times[1], times[2]);
            case 2:format(string, 32, "~p~Countdown:~y~~h~ %02d:%02d", times[1], times[2]);
            case 3:format(string, 32, "~p~Countdown:~r~~h~ %02d:%02d", times[1], times[2]);
            default: format(string, 32, "~p~Countdown:~w~~h~ %02d:%02d", times[1], times[2]);
        }
        TextDrawSetString(gServerTextdraws[1], string);
    }

    /*Server player time update*/
    // SetWorldTime(timers[0]);

    /*Player record timer*/
    if(Iter_Count(Player) > ServerData[g_Players])
    {
        ServerData[g_Players] = Iter_Count(Player);
        mysql_tquery(g_iHandle, sprintf("UPDATE `server` SET `g_Players`='%d' WHERE `ID`='1'", ServerData[g_Players]));
    }

    // Server Apartment Room duration checker
    foreach (new id : ApartRooms) if (ApartRoom[id][rDuration] && ApartRoom[id][rOwner]) {
        if (gettime() >= ApartRoom[id][rDuration]) {
            foreach (new playerid : Player) if (ApartRoom_IsOwner(playerid, id)) {
                SendCustomMessage(playerid, "APARTMENT", "Masa sewa Apartment Room ID "YELLOW"%d "WHITE"kamu telah habis.", id);
                PlayerData[playerid][pOwnedApartment] = -1;
            }
            new apartid = ApartRoom[id][rApartID];

            mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `OwnApartment` = '-1' WHERE `ID` = '%d'", ApartRoom[id][rOwner]));

            for (new carid = 0; carid < MAX_DYNAMIC_VEHICLES; carid ++) if (Iter_Contains(DynamicVehicles, carid) && VehicleData[carid][cOwner] && VehicleData[carid][cGarageApart] == ApartData[apartid][aID]) {
                new query[512];
                format(query,sizeof(query),"UPDATE `player_vehicles` SET `GarageApart` = 0, `Pos1` = '%f', `Pos2` = '%f', `Pos3` = '%f' WHERE `GarageApart` = '%d'", ApartData[apartid][aGaragePos][0], ApartData[apartid][aGaragePos][1], ApartData[apartid][aGaragePos][2], VehicleData[carid][cGarageApart]);
                mysql_tquery(g_iHandle, query);
                VehicleData[carid][cGarageApart] = 0;
                VehicleData[carid][cVw] = 0;
                VehicleData[carid][cInt] = 0;
                VehicleData[carid][cPos][0] = ApartData[apartid][aGaragePos][0];
                VehicleData[carid][cPos][1] = ApartData[apartid][aGaragePos][1];
                VehicleData[carid][cPos][2] = ApartData[apartid][aGaragePos][2];
                Vehicle_Spawn(carid);
            }
            ApartRoom[id][rOwner] = 0;
            format(ApartRoom[id][rOwnerName], MAX_PLAYER_NAME, "None");
            ApartRoom[id][rDuration] = 0;
            ApartRoom[id][rMoney] = 0;
            ApartRoom[id][rLocked] = 1;
            Room_RemoveAllItems(id);
            ApartRoom_Save(id);
            ApartRoom_Refresh(id);
        }
    }

    foreach (new house : Houses) if (HouseData[house][houseBuilderTime]) {
        if (gettime() >= HouseData[house][houseBuilderTime]) {
            HouseData[house][houseBuilderTime] = 0;
            HouseData[house][houseBuilder] = 0;
        }
    }

    /*Server vehicle timer*/
    for (new id = 0; id < MAX_DYNAMIC_VEHICLES; id ++) if (Iter_Contains(DynamicVehicles, id))
    {
        for(new i = 0, p = GetPlayerPoolSize(); i <= p; i ++) {
            if ((VehicleData[id][cRent]) && (VehicleData[id][cRentTime] && VehicleData[id][cRentOwned] == PlayerData[i][pID])) {
                VehicleData[id][cRentTime] --;

                if(VehicleData[id][cRentTime] < 1)
                {
                    SendCustomMessage(i, "RENTAL", "Waktu penyewaan kendaraan sudah habis, anda bisa menyewa kendaraan lagi sekarang.");
                    VehicleData[id][cRentOwned] = 0;
                    VehicleData[id][cRentTime] = 0;
                    VehicleData[id][cRent] = 0;
                    VehicleData[id][cLumber] = 0;
                    VehicleData[id][cLocked] = 0;
                    VehicleData[id][cHealth] = 1000;
                    VehicleData[id][cDamage][0] = VehicleData[id][cDamage][1] = VehicleData[id][cDamage][2] = VehicleData[id][cDamage][3] = 0;
                    Vehicle_Delete(id);
                }
            }
        }
        if(VehicleData[id][cSTNK] > 0) {
            if(gettime() >= VehicleData[id][cSTNK]) {
                VehicleData[id][cSTNK] =  0;
            }
        }
    }

    CallLocalFunction("ServerUpdateTime", "");
    return 1;
}

task Advertise[60000]() {
    for (new i = 0; i < MAX_ADVERTISEMENTS; i ++) if (AdsQueue[i][adsExists] && !AdsQueue[i][adsUsed]) {
        foreach (new player : Player) {
            if(!PlayerData[player][pDisableBC])  {
                SendClientMessageEx(player, X11_YELLOW, "Ad: {00AA00}%s", AdsQueue[i][adsContent]);
                SendClientMessageEx(player, X11_YELLOW, "Contact Number: [ {00AA00}%d "YELLOW"] Type: [ {00AA00}%s "YELLOW"]", AdsQueue[i][adsContact],GetAdvertiseType(AdsQueue[i][adsType]));
            }
            if (PlayerData[player][pPhone] == AdsQueue[i][adsContact]) {
                PlayerData[player][pAdvertise] = '\0';
                PlayerData[player][pAdvertiseType] = 0;
            }
        }
        AdsQueue[i][adsUsed] = 1;
        break;
    }
    return 1;
}

GetBuildingLocation(buildid) {
    new output[32];

    switch (buildid) {
        case 0: format(output,sizeof(output),"Bus Station");
        case 1: format(output,sizeof(output),"Flint Gas Station");
        case 2: format(output,sizeof(output),"Mechanic Center");
        case 3: format(output,sizeof(output),"Idlewood Gas Station");
        case 4: format(output,sizeof(output),"Vinewood Gas Station");
        default: format(output,sizeof(output),"Unknown");
    }

    return output;
}

task RandomFire[5400000]() {
    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists]) {
        if (FactionData[i][factionType] == FACTION_MEDIC && FactionMember_GetCount(i) >= 4) {
            new index = random(5), mapiconid = GetFreeBeacon(), Float:position[3];

            if (index != -1) {
                FireIncrement[index] = 0;
                for (new x = 0; x < sizeof(g_randomBuilding); x ++) if (g_randomBuilding[x][buildID] == index) {
                    CreateExplosion(g_randomBuilding[x][buildX], g_randomBuilding[x][buildY], g_randomBuilding[x][buildZ], 2, 30.0);
                    position[0] = g_randomBuilding[x][buildX];
                    position[1] = g_randomBuilding[x][buildY];
                    position[2] = g_randomBuilding[x][buildZ];
                }
                FireTimer = SetTimerEx("CreateFire", 20000, true, "d", index);
            }

            for(new j = 0, p = GetPlayerPoolSize(); j <= p; j ++) if (PlayerData[j][pFaction] == i && !PlayerData[j][pDisableFaction]) {
                SendClientMessageEx(j, COLOR_RADIO, "[FIREALARM]: "RED"Our fire alarm system has detected a fire at %s", GetBuildingLocation(index));
                SetPlayerMapIcon(j, mapiconid, position[0], position[1], position[2], 0, 0xFF0000FF, MAPICON_GLOBAL);
                SetTimerEx("RemoveBeacon", 300000, false, "dd", j, mapiconid);
            }

            SendClientMessageToAllEx(X11_TOMATO_1, "BREAKING NEWS: "WHITE"Telah terjadi kebakaran besar di "YELLOW"%s",GetBuildingLocation(index));
        }
    }
    return 1;
}

Function:CreateFire(buildid) {
    if (++FireIncrement[buildid] >= 15) {
        FireIncrement[buildid] = 0;
        KillTimer(FireTimer);
    } else {
        for (new x = 0; x < sizeof(g_randomBuilding); x ++) if (g_randomBuilding[x][buildID] == buildid) {
            CreateExplosion(g_randomBuilding[x][buildX], g_randomBuilding[x][buildY], g_randomBuilding[x][buildZ], 2, 30.0);
        }
    }
    return 1;
}

task RemoveBruise[300000]() {
    foreach (new playerid : Player) if (IsPlayerSpawned(playerid)) {
        for(new i = 0; i < MAX_DAMAGE; i++) if(DamageData[playerid][i][damageExists]) {
            switch (DamageData[playerid][i][damageWeapon]) {
                case 0..3, 5..15: Damage_Remove(playerid, i);
                default: break;
            }
        }
    }
    return 1;
}

/*task DataSave[300000]()
{
    foreach (new i : Player) if(IsPlayerConnected(i) && SQL_IsCharacterLogged(i))
    {
        SQL_SaveAccounts(i);
        SaveAll();
    }
    return 1;
}*/

ptask PlayerUpdate[1000](playerid)
{
    if((!PlayerData[playerid][pLogged]) || !PlayerData[playerid][pCreated] || PlayerData[playerid][pKicked])
        return 0;

    new
        Float:health,
        id, 
        vehicleid,
        earned = 0;

    if(PlayerData[playerid][pMining] > 0 || PlayerData[playerid][pJailTime] > 0)
        SetPlayerArmedWeapon(playerid, 0);

    if(!PlayerData[playerid][pTogHud])
    {
        new timevar[6], Float:x, Float:y, Float:z;

        GetPlayerPos(playerid, x, y, z);
        getdate(timevar[0], timevar[1], timevar[2]);
        gettime(timevar[3], timevar[4], timevar[5]);

        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_map], sprintf("%s", GetLocation(x, y, z)));

        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_timegui][0], sprintf("%02d:%02d:%02d", timevar[3], timevar[4], timevar[5]));
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_timegui][1], sprintf("%02d/%02d/%d", timevar[2], timevar[1], timevar[0]));
    }

    Update_PlayerMask(playerid);

    if(PlayerData[playerid][pDelayFishing])
    {
        if(--PlayerData[playerid][pDelayFishing] == 0)
            SendCustomMessage(playerid, "FISHING:","Anda bisa memancing ikan lagi.");
    }    

    if(PlayerData[playerid][pSweeperDelay])
    {
        if(--PlayerData[playerid][pSweeperDelay] == 0)
            SendCustomMessage(playerid, "SWEEPER","Anda bisa bekerja sweeper lagi.");
    }

    if(PlayerData[playerid][pBusDelay])
    {
        if(--PlayerData[playerid][pBusDelay] == 0)
            SendCustomMessage(playerid, "BUS","Anda bisa bekerja sebagai pengemudi bus lagi.");
    }

    if(PlayerData[playerid][pSorterDelay])
    {
        if(--PlayerData[playerid][pSorterDelay] == 0)
            SendCustomMessage(playerid, "Package Sorter","Anda bisa bekerja sebagai Package Sorter lagi.");
    }
    
    if(PlayerData[playerid][pUnloaderDelay])
    {
        if(--PlayerData[playerid][pUnloaderDelay] == 0)
            SendCustomMessage(playerid, "Cargo Unloader","Anda bisa bekerja sebagai Cargo Unloader lagi.");
    }
    if(PlayerData[playerid][pMinerDelay])
    {
        if(--PlayerData[playerid][pMinerDelay] == 0)
            SendCustomMessage(playerid, "MINER","Anda bisa bekerja sebagai Miner lagi.");
    }
    if(PlayerData[playerid][pFarmerDelay])
    {
        if(--PlayerData[playerid][pFarmerDelay] == 0)
            SendCustomMessage(playerid, "FARMER","Anda bisa menjual plant lagi.");
    }
    if(PlayerData[playerid][pMissionsDelay]) {
        if (--PlayerData[playerid][pMissionsDelay] == 0)
            SendCustomMessage(playerid, "MISSIONS", "Anda bisa bekerja trucker missions kembali.");
    }

    if(PlayerData[playerid][pSmugglerDelay]) {
        if (--PlayerData[playerid][pSmugglerDelay] == 0)
            SendCustomMessage(playerid, "SMUGGLER", "Anda bisa bekerja smuggler kembali.");
    }

    if (PlayerData[playerid][pPlaceAd]) {
        if (--PlayerData[playerid][pPlaceAd] == 0)
            SendCustomMessage(playerid, "ADS", "Anda bisa membuat iklan kembali.");
    }

    if (PlayerData[playerid][pDelayForager]) {
        if (--PlayerData[playerid][pDelayForager] == 0)
            SendCustomMessage(playerid, "FORAGER", "Anda dapat melakukan forager kembali.");
    }

    if(PlayerData[playerid][pReportTime])
    {
        if(--PlayerData[playerid][pReportTime] == 0)
            SendCustomMessage(playerid, "REPORT", "Anda bisa melakukan "YELLOW"/report"WHITE" ulang untuk melaporkan sesuatu.");
    }

    if(IsPlayerInAnyVehicle(playerid) && IsABoat(GetPlayerVehicleID(playerid)))
    {
        for (new zone = 0; zone < FISH_ZONE; zone++) if(IsPlayerInDynamicArea(playerid, fishzone[zone])) {
            GameTextForPlayer(playerid, sprintf("~w~Boat signal~n~~r~~h~%s", zones_text[zone]), 1000, 4);
        }
    }
    
    //Flyhack anti cheat
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        switch(GetPlayerAnimationIndex(playerid))
        {
            case 958, 959, 1538, 1539, 1543, 373:
            {
                new
                    Float:z,
                    Float:vx,
                    Float:vy,
                    Float:vz;

                GetPlayerPos(playerid, z, z, z);
                GetPlayerVelocity(playerid, vx, vy, vz);

                if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && AccountData[playerid][pAdmin] < 5)
                {
                    SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s was kicked by BOT, reason: Flying hacks", ReturnName(playerid, 0));
                    KickEx(playerid);
                }
            }
        }
    }

    //fuel update timer
    if(PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID && PlayerData[playerid][pGasPump] != -1)
    {
        // SendServerMessage(playerid, "GetMoney(playerid): %d | Refill Price: %d", GetMoney(playerid), PlayerData[playerid][pRefillPrice]);

        if (GetMoney(playerid) >= PlayerData[playerid][pRefillPrice] + BusinessData[PumpData[PlayerData[playerid][pGasPump]][pumpBusiness]][bizPrices][3])
        {    
            PlayerData[playerid][pRefillPrice] += BusinessData[PumpData[PlayerData[playerid][pGasPump]][pumpBusiness]][bizPrices][3];
            CoreVehicles[PlayerData[playerid][pRefill]][vehFuel] += 2.0;
            PumpData[PlayerData[playerid][pGasPump]][pumpFuel] --;
        }

        ShowPlayerFooter(playerid, sprintf("Vehicle fuel: ~y~%.1f/100~n~~w~Pay Out: ~r~%s", CoreVehicles[PlayerData[playerid][pRefill]][vehFuel], FormatNumber(PlayerData[playerid][pRefillPrice])), 1000);

        if(PumpData[PlayerData[playerid][pGasPump]][pumpExists])
        {
            UpdateDynamic3DTextLabelText(PumpData[PlayerData[playerid][pGasPump]][pumpText3D], COLOR_CLIENT, sprintf(""COL_LIGHTRED"[Gas Pump: %d]\n"WHITE"Fuel Left: %d liters\nType "COL_LIGHTRED"/refuel"WHITE" to fill your vehicle fuel", PlayerData[playerid][pGasPump], PumpData[PlayerData[playerid][pGasPump]][pumpFuel]));
        }
        if(GetEngineStatus(PlayerData[playerid][pRefill]) || GetMoney(playerid) <= PlayerData[playerid][pRefillPrice])
        {
            // SendServerMessage(playerid, "FROM GetEngineStatus -> GetMoney(playerid): %d | Refill Price: %d", GetMoney(playerid), PlayerData[playerid][pRefillPrice]);
            // Kalau uangnya sudah tidak cukup.
            if (GetMoney(playerid) <= PlayerData[playerid][pRefillPrice])
            {
                GiveMoney(playerid, -GetMoney(playerid));
                SendServerMessage(playerid, "You have refilled your vehicle for $%d.", PlayerData[playerid][pRefillPrice]);
                StopRefilling(playerid);
            }
            else
            {
                GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);
            }

            if (PlayerData[playerid][pGasPump] >= 0)
            {
                if(PumpData[PlayerData[playerid][pGasPump]][pumpExists])
                {
                    if(PumpData[PlayerData[playerid][pGasPump]][pumpFuel] < 0)
                        PumpData[PlayerData[playerid][pGasPump]][pumpFuel] = 0;

                    UpdateDynamic3DTextLabelText(PumpData[PlayerData[playerid][pGasPump]][pumpText3D], COLOR_CLIENT, sprintf("[Gas Pump: %d]\n"WHITE"Fuel Left: %d liters\nType "COL_LIGHTRED"/refuel"WHITE" to fill your vehicle fuel", PlayerData[playerid][pGasPump], PumpData[PlayerData[playerid][pGasPump]][pumpFuel]));

                    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
                    Business_Save(PlayerData[playerid][pGasStation]);

                    Pump_Save(PlayerData[playerid][pGasPump]);
                }
            }
            StopRefilling(playerid);
        }

        if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
        {    
            if(CoreVehicles[PlayerData[playerid][pRefill]][vehFuel] >= 100.0 || !PumpData[PlayerData[playerid][pGasPump]][pumpExists] || PumpData[PlayerData[playerid][pGasPump]][pumpFuel] < 0)
            {
                CoreVehicles[PlayerData[playerid][pRefill]][vehFuel] = 100.0;

                GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);
                SendServerMessage(playerid, "You have refilled your vehicle for $%d.", PlayerData[playerid][pRefillPrice]);

                if(PumpData[PlayerData[playerid][pGasPump]][pumpExists])
                {
                    if(PumpData[PlayerData[playerid][pGasPump]][pumpFuel] < 0)
                        PumpData[PlayerData[playerid][pGasPump]][pumpFuel] = 0;

                    UpdateDynamic3DTextLabelText(PumpData[PlayerData[playerid][pGasPump]][pumpText3D], COLOR_CLIENT, sprintf("[Gas Pump: %d]\n"WHITE"Fuel Left: %d liters\nType "COL_LIGHTRED"/refuel"WHITE" to fill your vehicle fuel", PlayerData[playerid][pGasPump], PumpData[PlayerData[playerid][pGasPump]][pumpFuel]));

                    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
                    Business_Save(PlayerData[playerid][pGasStation]);

                    Pump_Save(PlayerData[playerid][pGasPump]);
                }
                StopRefilling(playerid);
            }
        }
    }

    //Taxi GUI display
    if((GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI) && PlayerData[playerid][pJobDuty])
    {
        foreach(new i : Player) if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) 
        {
            if(PlayerData[i][pTaxiPlayer] == playerid)
            {
                new penumpang[72];

                earned += PlayerData[i][pTaxiFee];

                format(penumpang, sizeof(penumpang), "%s%s~n~", penumpang, ReturnName(i, 0, 1));
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], sprintf("Total pendapatan: ~g~%s~n~~w~Penumpang:~n~%s", FormatNumber(earned), penumpang));
            }
            else PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_taxi][3], "Total pendapatan: ~g~$0~n~~w~Penumpang:~n~ -");
        }
    }

    switch (PlayerData[playerid][pHouseLights])
    {
        case 0:
        {
            if((id = House_Inside(playerid)) != -1 && !HouseData[id][houseLights])
            {
                PlayerData[playerid][pHouseLights] = true;
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_switch]);
            }
            else PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_switch]);
        }
        case 1:
        {
            if((id = House_Inside(playerid)) == -1 || (id != -1 && HouseData[id][houseLights]))
            {
                PlayerData[playerid][pHouseLights] = false;
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_switch]);
            }
        }
    }

    if(GetPlayerMoney(playerid) != PlayerData[playerid][pMoney]) {
        ResetPlayerMoney(playerid);
        GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
    }

    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        vehicleid = GetPlayerVehicleID(playerid);

        if(!PlayerData[playerid][pDisableSpeedo] && IsSpeedoVehicle(vehicleid))
        {
            new str[225],
                Float:vehhealth,
                transmission[19],
                vehid = -1;

            if ((vehid = Vehicle_GetID(vehicleid)) != -1) {
                vehhealth = (ReturnVehicleHealth(VehicleData[vehid][cVehicle])/VehicleData[vehid][cMaxHealth])*100.0;
            }
            else vehhealth = (ReturnVehicleHealth(vehicleid)/1000)*100.0;

            if(vehhealth < 0.0) vehhealth = 0.0;

            if(IsVehicleDrivingBackwards(vehicleid)) transmission = "~b~~h~R ~w~N D";
            else if(GetVehicleSpeed(vehicleid, false) < 1.0) transmission = "~w~R ~b~~h~N ~w~D";
            else transmission = "~w~R N ~b~~h~D";

            switch (PlayerData[playerid][pHUD]) {
                case 1: {
                    new vehname[32];

                    GetVehicleNameByVehicle(vehicleid, vehname);
                    SetPlayerProgressBarValue(playerid, PlayerData[playerid][fuelbar], CoreVehicles[vehicleid][vehFuel]);

                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][3], sprintf("%s", vehname));
                    
                    format(str,sizeof(str),"%s",(GetEngineStatus(vehicleid)) ? ("~g~ON") : ("~r~OFF"));
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][12], str);
                    format(str,sizeof(str),"%d_MPH", floatround(GetVehicleSpeed(vehicleid, false)));
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][13], str);
                    format(str,sizeof(str),"%.0f%", vehhealth);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], str);
                    format(str,sizeof(str),"%s", transmission);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][15], str);

                    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][14], ConvertHBEColor(floatround(vehhealth)));
                    
                    SetPlayerProgressBarColour(playerid, PlayerData[playerid][fuelbar], ConvertHBEColor(floatround(CoreVehicles[vehicleid][vehFuel])));
                }
                case 2: {
                    new vehname[32];

                    GetVehicleNameByVehicle(vehicleid, vehname);
                    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], ConvertHBEColor(floatround(vehhealth)));
                    PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], ConvertHBEColor(floatround(CoreVehicles[vehicleid][vehFuel])));

                    format(str,sizeof(str),"%d_mph", floatround(GetVehicleSpeed(vehicleid, false)));
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][20], str);
                    format(str,sizeof(str),"%.0f%", vehhealth);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][21], str);
                    format(str,sizeof(str),"%.0f%", CoreVehicles[vehicleid][vehFuel]);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][22], str);
                    format(str,sizeof(str),"%s", ret_strreplace(vehname," ","_",true));
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_speedometer][24], str);
                }
            }
        }
    }

    if(PlayerData[playerid][pSpectator] != INVALID_PLAYER_ID && SQL_IsCharacterLogged(PlayerData[playerid][pSpectator])) {
        new userid = PlayerData[playerid][pSpectator], Float:healthp, Float:armor, keys, updown, leftright;
        GetPlayerKeys(userid, keys, updown, leftright);
        GetPlayerHealth(userid, healthp);
        GetPlayerArmour(userid, armor);

        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_spectate][0], sprintf("~g~%s (%d)~n~~w~Money: ~b~%s~n~~w~Health: ~b~%.1f~n~~w~AP: ~b~%.1f~n~~w~Int: ~b~%d~n~~w~Vw: ~b~%d~n~~w~Keys: ~b~%d", ReturnName(userid, 0), userid, FormatNumber(GetMoney(userid)), healthp, armor, GetPlayerInterior(userid), GetPlayerVirtualWorld(userid), keys));
    }

    if(IsPlayerInAnyVehicle(playerid) && GetPlayerWeapon(playerid) > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
        SetPlayerArmedWeapon(playerid, 0);
    }
    if(PlayerData[playerid][pDMVTime])
    {
        if(gettime() >= PlayerData[playerid][pDMVTime]) {
            PlayerData[playerid][pDMVTime] =  0;
            SendCustomMessage(playerid, "LICENSE", "Now you can go to DMV to get test again.");
        }
    }
    if(PlayerData[playerid][pDrivingLicense] == 1 && PlayerData[playerid][pDrivingLicenseExpired] > 0)
    {
        if(gettime() >= PlayerData[playerid][pDrivingLicenseExpired]) {
            PlayerData[playerid][pDrivingLicenseExpired] =  0;
            SendCustomMessage(playerid, "LICENSE", "Your driving license now is expired.");
        }
    }
    if(PlayerData[playerid][pFirearmLicense] == 1 && PlayerData[playerid][pFirearmLicenseExpired] > 0)
    {
        if(gettime() >= PlayerData[playerid][pFirearmLicenseExpired]) {
            PlayerData[playerid][pFirearmLicenseExpired] =  0;
            SendCustomMessage(playerid, "LICENSE", "Your firearm license now is expired.");
        }
    }
    if(PlayerData[playerid][pBusinessLicense] == 1 && PlayerData[playerid][pBusinessLicenseExpired] > 0)
    {
        if(gettime() >= PlayerData[playerid][pBusinessLicenseExpired]) {
            PlayerData[playerid][pBusinessLicenseExpired] =  0;
            SendCustomMessage(playerid, "LICENSE", "Your business license now is expired.");
        }
    }
    if(PlayerData[playerid][pWorkshopLicense] == 1 && PlayerData[playerid][pWorkshopLicenseExpired] > 0)
    {
        if(gettime() >= PlayerData[playerid][pWorkshopLicenseExpired]) {
            PlayerData[playerid][pWorkshopLicenseExpired] =  0;
            SendCustomMessage(playerid, "LICENSE", "Your workshop license now is expired.");
        }
    }
    if(PlayerData[playerid][pLumberLicense] == 1 && PlayerData[playerid][pLumberLicenseExpired] > 0)
    {
        if(gettime() >= PlayerData[playerid][pLumberLicenseExpired]) {
            PlayerData[playerid][pLumberLicenseExpired] =  0;
            SendCustomMessage(playerid, "LICENSE", "Your lumber license now is expired.");
        }
    }
    if(PlayerData[playerid][pTruckerLicense] == 1 && PlayerData[playerid][pTruckerLicenseExpired] > 0) {
        if(gettime() >= PlayerData[playerid][pTruckerLicenseExpired]) {
            PlayerData[playerid][pTruckerLicenseExpired] = 0;
            SendCustomMessage(playerid, "LICENSE", "Your trucker license now is expired.");
        }
    }
    if(PlayerData[playerid][pFarmLicense] == 1 && PlayerData[playerid][pFarmLicenseExpired] > 0) {
        if(gettime() >= PlayerData[playerid][pFarmLicenseExpired]) {
            PlayerData[playerid][pFarmLicenseExpired] = 0;
            SendCustomMessage(playerid, "LICENSE", "Your farm license now is expired.");
        }
    }
    if(PlayerData[playerid][pBoatLicense] == 1 && PlayerData[playerid][pBoatLicenseExpired] > 0) {
        if(gettime() >= PlayerData[playerid][pBoatLicenseExpired]) {
            PlayerData[playerid][pBoatLicenseExpired] = 0;
            SendCustomMessage(playerid, "LICENSE", "Your boat license now is expired.");
        }
    }
    if(PlayerData[playerid][pFlyingLicense] == 1 && PlayerData[playerid][pFlyingLicenseExpired] > 0) {
        if(gettime() >= PlayerData[playerid][pFlyingLicenseExpired]) {
            PlayerData[playerid][pFlyingLicenseExpired] = 0;
            SendCustomMessage(playerid, "LICENSE", "Your flying license now is expired.");
        }
    }
    if(PlayerData[playerid][pVip] >= 1 && PlayerData[playerid][pVipTime] > 0)
    {
        if(gettime() >= PlayerData[playerid][pVipTime]) {
            PlayerData[playerid][pVipTime] = 0;
            SendCustomMessage(playerid, "VIP", "Your Vip now is expired.");
        }
    }
    if (PlayerData[playerid][pGYMMember] > 0 && PlayerData[playerid][pGYMMemberTime] > 0) {
        if (gettime() >= PlayerData[playerid][pGYMMemberTime]) {
            PlayerData[playerid][pGYMMember] = PlayerData[playerid][pGYMMemberTime] = 0;
            SendCustomMessage(playerid, "GYM", "Your GYM Membership now is expired.");
        }
    }
    if(!PlayerData[playerid][pCanPaycheck])
    {
        PlayerData[playerid][pMinutes]++;

        if(PlayerData[playerid][pMinutes] >= 3600)
        {
            PlayerData[playerid][pCanPaycheck] = 1;
            PlayerData[playerid][pMinutes] = 3600;
            SendServerMessage(playerid, "Paycheck sudah dapat anda ambil di Bank atau ATM (/paycheck).");
        }
    }

    if (PlayerData[playerid][pPaused]) {
        if ((GetPlayerPausedTime(playerid)/1000) >= 180 && !PlayerData[playerid][pAFK] && !AccountData[playerid][pAdminDuty]) {
            TogglePlayerControllable(playerid, 0);
            PlayerData[playerid][pAFK] = 1;
            SendCustomMessage(playerid, "AFK", "You are now in AFK Mode, to resume game use '"YELLOW"/afk"WHITE"'");
            SetPlayerColor(playerid, X11_GREY_60);
        }
    }

    if(!PlayerData[playerid][pPaused])
    {
        PlayerData[playerid][pSecond]++;
        if(PlayerData[playerid][pSecond] >= 60)
        {
            PlayerData[playerid][pSecond] = 0;
            PlayerData[playerid][pMinute]++;

            if (IsPlayerDuty(playerid)) {
                PlayerData[playerid][pDutyTime]++;
            }

            if(PlayerData[playerid][pMinute] >= 60)
            {
                PlayerData[playerid][pMinute] = 0;
                PlayerData[playerid][pHour]++;
                // PlayerData[playerid][pPlayingHours]++;
                
                new scoremath = ((PlayerData[playerid][pScore])*4);
                
                if(++PlayerData[playerid][pPlayingHours] >= scoremath)
                {
                    PlayerData[playerid][pPlayingHours] = 0;
                    PlayerData[playerid][pScore] ++;
                    SetPlayerScore(playerid, PlayerData[playerid][pScore]);
                    GameTextForPlayer(playerid, sprintf("~g~New level unlocked~n~~w~Now you're level ~r~%d",PlayerData[playerid][pScore]), 6000, 1);
                }
            }
        }
    }


    if(PlayerData[playerid][pInjured] == 1 && GetPlayerAnimationIndex(playerid) != 388)
    {
        ApplyAnimation(playerid, "CRACK", "null", 4.0, 0, 0, 0, 1, 0, 1);
        ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
    }
    if(PlayerData[playerid][pWork] > 0) {
        PlayerData[playerid][pWork]--;
    }
    if(PlayerData[playerid][pWoodDelay] > 0) {
        PlayerData[playerid][pWoodDelay] --;

        if(PlayerData[playerid][pWoodDelay] == 0) {
            SendServerMessage(playerid, "Sekarang anda sudah bisa bekerja lagi sebagai Wood Courier");
        }
    }
    if(PlayerData[playerid][pLumberDelay] > 0) {
        PlayerData[playerid][pLumberDelay] --;

        if(PlayerData[playerid][pLumberDelay] == 0) {
            SendServerMessage(playerid, "Sekarang anda sudah bisa menjual pohon lagi.");
        }
    } 
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && !PlayerData[playerid][pJetpack])
    {
        SendClientMessageToAllEx(X11_TOMATO_1, "BotCmd: %s was kicked by BOT. Reason: using jetpack hack.", ReturnName(playerid, 0));
        KickEx(playerid);
        Log_Write("logs/cheat_log.txt", "[%s] %s has spawned a jetpack using hacks.", ReturnDate(), ReturnName(playerid, 0));
    }
    if(PlayerData[playerid][pPicking])
    {
        if((id = PlayerData[playerid][pPickCar]) != -1)
        {
            if(Vehicle_Nearest(playerid) != id)
            {
                PlayerData[playerid][pPicking] = 0;
                PlayerData[playerid][pPickCar] = -1;
                PlayerData[playerid][pPickTime] = 0;
            }
            else
            {
                PlayerData[playerid][pPickTime]++;

                GameTextForPlayer(playerid, sprintf("~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Picking... %d", 60 - PlayerData[playerid][pPickTime]), 1000, 3);

                if(PlayerData[playerid][pPickTime] >= 60)
                {
                    static
                        engine, lights, alarm, doors, bonnet, boot, objective;

                    GetVehicleParamsEx(VehicleData[id][cVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
                    SetVehicleParamsEx(VehicleData[id][cVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

                    PlayerData[playerid][pPicking] = 0;
                    PlayerData[playerid][pPickCar] = -1;
                    PlayerData[playerid][pPickTime] = 0;

                    VehicleData[id][cLocked] = 0;
                    Vehicle_Save(id);

                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has picked the lock of the vehicle.", ReturnName(playerid, 0, 1));
                    ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the vehicle!", 3000, 1);
                }
            }
        }
    }
    if(PlayerData[playerid][pInjured])
    {
        if(GetPVarInt(playerid,"GiveUptime"))
        {
            if((gettime()-GetPVarInt(playerid, "GiveUptime")) > 180)
            {
                SendClientMessage(playerid, X11_LIGHTBLUE, "[SERVER]: "WHITE"Now you can spawn, type '/giveup' for spawn to hospital.");
                SetPVarInt(playerid, "GiveUptime", 0);
            }
        }
        return 1;
    }
    if(!PlayerData[playerid][pKilled] && PlayerData[playerid][pHospital] != -1)
    {
        if(!PlayerData[playerid][pPaused])
        {
            if(++PlayerData[playerid][pHospitalTime] >= 120)
            {
                SetPlayerPos(playerid, 1182.8778,-1324.2023,13.5784);
                SetPlayerFacingAngle(playerid, 269.8747);

                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);

                TogglePlayerControllable(playerid, 1);
                SetCameraBehindPlayer(playerid);

                for (new i = 0; i != MAX_ACC; i ++) if (AccData[playerid][i][accExists] && AccData[playerid][i][accShow]) {
                    Aksesoris_Attach(playerid, i);
                }
                
                Damage_Reset(playerid);

                if(IsPlayerDuty(playerid)) ResetFactionWeapon(playerid);
                else ResetWeapons(playerid);

                ClearPlayerChat(playerid, 20);
                SendClientMessage(playerid, X11_GREY_60, "--------------------------------------------------------------------------------------------------------");
                SendClientMessage(playerid, X11_WHITE, "Anda telah keluar dari rumah sakit, dan membayar "GREEN"$150"WHITE". Selamat beraktivitas kembali.");
                SendClientMessage(playerid, X11_WHITE, "(( Semua senjata yang anda punya, otomatis di hilangkan karna dalam kadaan death, tidak ada refund untuk ini. ))");
                SendClientMessage(playerid, X11_GREY_60, "--------------------------------------------------------------------------------------------------------");
                
                PlayerData[playerid][pHospitalTime] = 0;
                PlayerData[playerid][pHospital] = -1;

                GiveMoney(playerid, -150);

                for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_MEDIC) {
                    FactionData[i][factionMoney] += 150;
                }
                return 1;
            }
            ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 1, 0, 0, 0, 0);
            GameTextForPlayer(playerid, sprintf("~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... ~g~~h~%d", 120 - PlayerData[playerid][pHospitalTime]), 1000, 3);
        }
    }
    if(PlayerData[playerid][pMuted] && PlayerData[playerid][pMuteTime] > 0)
    {
        PlayerData[playerid][pMuteTime]--;

        if(!PlayerData[playerid][pMuteTime])
        {
            PlayerData[playerid][pMuted] = 0;
            PlayerData[playerid][pMuteTime] = 0;
        }
    }
    if(PlayerData[playerid][pVendorTime] > 0)
    {
        PlayerData[playerid][pVendorTime]--;
    }
    if(PlayerData[playerid][pSpeedTime] > 0)
    {
        PlayerData[playerid][pSpeedTime]--;
    }
    if(PlayerData[playerid][pFingerTime] > 0)
    {
        PlayerData[playerid][pFingerTime]--;

        if(!PlayerData[playerid][pFingerTime] && DroppedItems[PlayerData[playerid][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[PlayerData[playerid][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[playerid][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[playerid][pFingerItem]][droppedPos][2]))
        {
            SendServerMessage(playerid, "The fingerprint scanner has detected a match: %s.", DroppedItems[PlayerData[playerid][pFingerItem]][droppedPlayer]);
            PlayerData[playerid][pFingerItem] = -1;
        }
    }
    if(PlayerData[playerid][pDrugUsed] != 0 && PlayerData[playerid][pDrugTime] > 0)
    {
        PlayerData[playerid][pDrugTime]--;
        if(PlayerData[playerid][pDrugUsed] <= 3 && ReturnHealth(playerid) <= 95) {
            SetPlayerHealth(playerid, ReturnHealth(playerid) + 3);
        }
        if(!PlayerData[playerid][pDrugTime])
        {
            new
                getime[3];

            gettime(getime[0], getime[1], getime[2]);
            SetPlayerTime(playerid, getime[0], getime[1]);

            // SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) - 500);
            //hilangin efek layar merah
            SetPlayerWeather(playerid, current_weather);

            PlayerData[playerid][pDrugUsed] = 0;
            SendServerMessage(playerid, "The effects from the drugs have subsided.");
        }
    }
    if(PlayerData[playerid][pStunned] > 0)
    {
        PlayerData[playerid][pStunned]--;

        if(GetPlayerAnimationIndex(playerid) != 388)
            ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

        if(!PlayerData[playerid][pStunned])
        {
            TogglePlayerControllable(playerid, 1);
            ShowPlayerFooter(playerid, "You are no longer ~r~stunned.");
        }
    }
    if(PlayerData[playerid][pJailTime] > 0)
    {
        static
            hours,
            minutes,
            seconds;

        if(--PlayerData[playerid][pJailTime] <= 0)
        {
            if(PlayerData[playerid][pPrisoned])
                PlayerData[playerid][pPrisoned] = 0;

            SetPlayerPos(playerid,1543.7266,-1675.5886,13.5570);
            SetPlayerFacingAngle(playerid, 90.1);
            ApplyAnimation(playerid, "STRIP", "none", 4.1, 0, 0, 0, 0, 0, 1);
            ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.1, 0, 0, 0, 0, 0, 1);
            SetPlayerInterior(playerid,0);
            SetPlayerVirtualWorld(playerid, 0);
            SendServerMessage(playerid, "You have been released from jail.");
            SetCameraBehindPlayer(playerid);
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_prison]);
        }
        GetElapsedTime(PlayerData[playerid][pJailTime], hours, minutes, seconds);
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_prison], PlayerData[playerid][pPrisoned] ? (sprintf("~g~Prison Time:~w~ %02d:%02d:%02d", hours, minutes, seconds)) : (sprintf("~g~Reason  : ~w~%s~n~~g~Jail Time:~w~ %02d:%02d:%02d (/myjail)", PlayerData[playerid][pJailReason], hours, minutes, seconds)));
    }
    if(PlayerData[playerid][pTrackTime] > 0 && IsPlayerConnected(PlayerData[playerid][pMDCPlayer]) && GetFactionType(playerid) == FACTION_POLICE)
    {
        PlayerData[playerid][pTrackTime]--;

        if(!PlayerData[playerid][pTrackTime])
        {
            if((id = House_Inside(PlayerData[playerid][pMDCPlayer])) != -1)
            {
                PlayerData[playerid][pCP] = 1;

                SetPlayerCheckpoint(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 3.0);
                SendServerMessage(playerid, "%s's last reported location was at \"%s\" (marked on radar).", ReturnName(PlayerData[playerid][pMDCPlayer], 0), HouseData[id][houseAddress]);
            }
            else if((id = Business_Inside(PlayerData[playerid][pMDCPlayer])) != -1)
            {
                PlayerData[playerid][pCP] = 1;

                SetPlayerCheckpoint(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 3.0);
                SendServerMessage(playerid, "%s's last reported location was at \"%s\" (marked on radar).", ReturnName(PlayerData[playerid][pMDCPlayer], 0), BusinessData[id][bizName]);
            }
            else if(GetPlayerInterior(PlayerData[playerid][pMDCPlayer]) == 0)
            {
                static
                    Float:fX,
                    Float:fY,
                    Float:fZ;

                GetPlayerPos(PlayerData[playerid][pMDCPlayer], fX, fY, fZ);
                PlayerData[playerid][pCP] = 1;

                SetPlayerCheckpoint(playerid, fX, fY, fZ, 3.0);
                SendServerMessage(playerid, "%s's last reported location was at \"%s\" (marked on radar).", ReturnName(PlayerData[playerid][pMDCPlayer], 0), GetLocation(fX, fY, fZ));
            }
            else
            {
                SendServerMessage(playerid, "Unable to locate %s; the target is out of range (inside an interior).", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
            }
        }
    }
    if(PlayerData[playerid][pCooking] && IsPlayerSpawned(playerid))
    {
        if(--PlayerData[playerid][pCookingTime] < 1)
        {
            if(House_Inside(playerid) != PlayerData[playerid][pCookingHouse])
                return SendServerMessage(playerid, "Gagal memasak, kamu telah keluar dari rumah."), ResetCooking(playerid);

            new item;

            switch (PlayerData[playerid][pCooking])
            {
                case 1:
                {
                    item = Inventory_Add(playerid, "Cooked Burger", 2703, 1);

                    if(item == -1)
                        return SendErrorMessage(playerid, "Slot inventory sudah penuh (5 items)!"), ResetCooking(playerid);

                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** The microwave beeps, you can smell a burger! (( %s ))", ReturnName(playerid, 0, 1));
                    SendServerMessage(playerid, "The "YELLOW"cooked burger "WHITE"was added to your inventory.");
                }
                case 2:
                {
                    item = Inventory_Add(playerid, "Cooked Pizza", 2702, 1);

                    if(item == -1)
                        return SendErrorMessage(playerid, "Slot inventory sudah penuh (5 items)!"), ResetCooking(playerid);

                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "** The oven beeps, you can smell pizza! (( %s ))", ReturnName(playerid, 0, 1));
                    SendServerMessage(playerid, "The "YELLOW"cooked pizza "WHITE"was added to your inventory.");
                }
            }
            ResetCooking(playerid);
        }
        else GameTextForPlayer(playerid, sprintf("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Memasak...~w~ %d seconds", PlayerData[playerid][pCookingTime]), 1200, 3);
    }
    if(IsPlayerInsideTaxi(playerid))
    {
        new 
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x,y,z);

        new Float:distance = GetDistanceBetweenPoints(PlayerData[playerid][tPos][0], PlayerData[playerid][tPos][1], PlayerData[playerid][tPos][2], x,y,z);

        if(distance > 100.0)
        {
            if(GetMoney(playerid) < PlayerData[playerid][pTaxiFee])
            {
                RemovePlayerFromVehicle(playerid);
                SendCustomMessage(playerid, "TAXI DRIVER", "Keluar dari taxi, uang yang anda miliki tidak mencukupi.");
                return 1;
            }
            GetPlayerPos(playerid, PlayerData[playerid][tPos][0], PlayerData[playerid][tPos][1], PlayerData[playerid][tPos][2]);
            PlayerData[playerid][pTaxiFee] += 2;

            if(++PlayerData[playerid][pTaxiRunDistance] == 10)
            {
                GiveMoney(PlayerData[playerid][pTaxiPlayer], 5);
                SendServerMessage(PlayerData[playerid][pTaxiPlayer], "Anda mendapat bonus $5 dari server untuk 1000 meter perjalanan.");
                PlayerData[playerid][pTaxiRunDistance] = 0;
            }
        }
        GameTextForPlayer(playerid, sprintf("~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Taxi_Argo~n~~r~~h~$%d", PlayerData[playerid][pTaxiFee]), 1100, 3);
    }
    if(PlayerData[playerid][pCreated] && !PlayerData[playerid][pJailTime] && !PlayerData[playerid][pInjured] && PlayerData[playerid][pHospital] == -1 && PlayerData[playerid][pCreated] && IsPlayerSpawned(playerid))
    {
        if(PlayerData[playerid][pUsePills] > 0)
        {
            if(--PlayerData[playerid][pUsePills] == 0) {
                SendServerMessage(playerid, "Anda bisa mengkonsumsi obat lagi sekarang.");
            }
        }

        if(PlayerData[playerid][pCough] >= 5)
        {
            new waktu;

            switch(PlayerData[playerid][pCough]/5)
            {
                case 1: waktu=150;
                case 2: waktu=120;
                case 3: waktu=90;
            }
            if(++PlayerData[playerid][pCoughTime] > waktu)
            {
                cmd_ame(playerid, "is cough.");
                PlayerData[playerid][pCoughTime] = 0;
            }
        }
        GetPlayerHealth(playerid, health);

        if(PlayerData[playerid][pHunger] <= 10 || PlayerData[playerid][pEnergy] <= 10)
        {
            if(PlayerData[playerid][pMigrainRate] > 1 || PlayerData[playerid][pFever] > 0) {
                FlashTextDraw(playerid, PlayerTextdraws[playerid][textdraw_sick], 2000);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_sick]);
                SetPlayerDrunkLevel(playerid, 5000*(PlayerData[playerid][pFever]+1));
            }

            if(PlayerData[playerid][pFever])
            {
                if(++PlayerData[playerid][pFeverTime] > 10)
                {
                    //new pengurangan;

                    switch(PlayerData[playerid][pFever])
                    {
                        case 1: SetPlayerDrunkLevel(playerid, 5000*(PlayerData[playerid][pFever]+1));
                        case 2: SetPlayerDrunkLevel(playerid, 5000*(PlayerData[playerid][pFever]+1));
                        case 3: SetPlayerDrunkLevel(playerid, 5000*(PlayerData[playerid][pFever]+1));
                    }
                    //SetPlayerHealth(playerid, health - pengurangan); diganti player drunk
                    PlayerData[playerid][pFeverTime] = 0;
                }
            }

            if(++PlayerData[playerid][pMigrainTime] >= 300)
            {
                if(PlayerData[playerid][pFever]) 
                {
                    if(PlayerData[playerid][pFever] <= 2)
                    {
                        SendServerMessage(playerid, "You got High Fever, this is dangerous disease you should go to doctor now!");
                        PlayerData[playerid][pFever] ++;
                    }
                }

                if(!PlayerData[playerid][pFever] && PlayerData[playerid][pMigrainRate] < 4)
                {
                    PlayerData[playerid][pMigrainRate] ++;

                    if(PlayerData[playerid][pMigrainRate] < 3)
                        SendServerMessage(playerid, "You got headache, go check to the doctor for cure your diseases.");

                    if(PlayerData[playerid][pMigrainRate] == 4) {
                        SendServerMessage(playerid, "You got High Fever, this is dangerous disease you should go to doctor now!");
                        PlayerData[playerid][pFever] ++;
                        PlayerData[playerid][pMigrainRate] = 0;
                    }
                }
                PlayerData[playerid][pMigrainTime] = 0;
            }
        }
        else {
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_sick]);
            if (!PlayerData[playerid][pDrugTime]) SetPlayerDrunkLevel(playerid, 0);
        }

        if (PlayerData[playerid][pFitnessTimer] > 0) {
            PlayerData[playerid][pFitnessTimer]--;
            PlayerData[playerid][pEnergy]--;

            if (PlayerData[playerid][pFitnessTimer] == 0 && PlayerData[playerid][pFitnessType]) {
                FinishFitness(playerid);
            }
        }

        //Lanjutan Sakit
    
            
        //Energy update
        new
            animidx = GetPlayerAnimationIndex(playerid),
            k,
            ud,
            lr,
            Float:adjustment,
            Float:adjustment2;

        GetPlayerKeys(playerid, k, ud, lr);

        if(animidx == 43) {
            adjustment = (0.04 * 0.2); // Sitting
            adjustment2 = (0.03 * 0.2); // Sitting
        } else if(animidx == 1159) {
            adjustment = (0.04 * 1.1); // Crouching
            adjustment2 = (0.03 * 1.1); // Crouching
        } else if(animidx == 1195) {
            adjustment = (0.04 * 3.2); // Jumping
            adjustment2 = (0.03 * 3.2); // Jumping
        } else if(animidx == 1231) {
            if(k & KEY_WALK) {
                adjustment = (0.04 * 1.2); // Walking
                adjustment2 = (0.03 * 1.2); // Walking
            } else if(k & KEY_SPRINT) {
                adjustment = (0.04 * 2.2); // Sprinting
                adjustment2 = (0.03 * 2.2); // Sprinting
            } else if(k & KEY_JUMP) {
                adjustment = (0.04 * 3.2); // Jumping
                adjustment2 = (0.03 * 3.2); // Jumping
            } else {
                adjustment = (0.04 * 2.0); // Jogging
                adjustment2 = (0.03 * 2.0); // Jogging
            }
        } else {
            adjustment = 0.04;
            adjustment2 = 0.03;
        }

        adjustment *= 0.2;
        adjustment2 *= 0.2;

        SetPlayerHunger(playerid, PlayerData[playerid][pHunger]-adjustment2);
        SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]-adjustment);
    }
    if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID && PlayerData[playerid][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(playerid))
    {
        new str[128];
        strunpack(str, BoomboxData[id][boomboxURL]);
        PlayerData[playerid][pBoombox] = id;

        StopAudioStreamForPlayer(playerid);
        if (!PlayerData[playerid][pTogBoombox]) PlayAudioStreamForPlayer(playerid, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
    }
    else if(PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[PlayerData[playerid][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[playerid][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[playerid][pBoombox]][boomboxPos][2]))
    {
        PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
        StopAudioStreamForPlayer(playerid);
    }

    CallLocalFunction("OnPlayerScriptUpdate", "d", playerid);
    return 1;
}

task MinuteCheck[60000]() 
{
    new
        Float:hp,
        Float:health;

    foreach (new i : Player)
    {
        GetPlayerHealth(i, health);
        if(!PlayerData[i][pLogged]) continue;

        if(PlayerData[i][pDelayTruck])
        {
            if(--PlayerData[i][pDelayTruck] == 0)
                SendCustomMessage(i, "TRUCKER", "Anda bisa bekerja trucker kembali.");
        }

        if(PlayerData[i][pInjured])
        {
            GetPlayerHealth(i, hp);
            SetPlayerHealth(i, hp - 1);
        }

        if(PlayerData[i][pPrisoned])
        {
            new idx = random(sizeof(prisonArrays));
            SetPlayerPosEx(i, prisonArrays[idx][0], prisonArrays[idx][1], prisonArrays[idx][2] + 0.3, 5000);
            SetPlayerFacingAngle(i, prisonArrays[idx][3]);
            SetPlayerInterior(i, LSPD_JAIL);
            SetPlayerVirtualWorld(i, PRISON_WORLD);
        }
    }

    for (new i = 0; i != MAX_PLANTS; i ++) if(PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
        PlantData[i][plantDrugs]++;

        Plant_Refresh(i);
        Plant_Save(i);
    }
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if(GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] < 10)
    {
        SetGVarInt("TrashUpdate", GetGVarInt("TrashUpdate")+1);

        if(GetGVarInt("TrashUpdate") >= 5)
        {
            SetGVarInt("TrashUpdate", 0);
            GarbageData[i][garbageCapacity] ++;
        }
    }
}

/*==============================================================================
    SAMP Function
==============================================================================*/

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnQueryError]: Error ID: %d, Error: %s, Callback: %s, Query: %s", errorid, error, callback, query);
    #endif

    foreach (new i : Player)
    {
        if(AccountData[i][pAdmin] >= 6 && PlayerData[i][pExecute]) {
            PlayerData[i][pExecute] = 0;
            Dialog_Show(i, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: \"%s\"\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", error);
        }
    }
    printf("[MySQL: OnQueryError (%d, %s, %s)]: Query: %s.", errorid, error, callback, query);
    switch(errorid)
    {
        case CR_COMMAND_OUT_OF_SYNC: {
            printf("[MySQL: Error:: Callback; %s]: Commands Out Of Sync For (Query: %s).", callback, query);
        }
        case ER_UNKNOWN_TABLE: printf("[MySQL: Error:: Callback; %s]: Unknown table '%s' (Query: %s).", callback, error, query);
        case ER_SYNTAX_ERROR: printf("[MySQL: Error:: Callback; %s]: Something is wrong in your syntax (Query: %s).", callback, query);
        case ER_DBACCESS_DENIED_ERROR: printf("[MySQL: Error:: Callback; %s] Access denied while connecting to database.", callback);
        case ER_ACCESS_DENIED_ERROR: printf("[MySQL: Error:: Callback; %s] Access denied.", callback);
        case CR_SERVER_GONE_ERROR: printf("[MySQL: Error:: Callback; %s] Server has gone error!", callback);
        case CR_SERVER_LOST: printf("[MySQL: Error:: Callback; %s] Connection to database has lost! (Query: %s).", callback, query);
        case CR_SERVER_LOST_EXTENDED: printf("[MySQL: Error:: Callback; %s] Connection to database has extended! (Query: %s).", callback, query);
    }
    Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);

    return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerInteriorChange]: Player ID: %d, New Interior: %d, Old Interior: %d", playerid, newinteriorid, oldinteriorid);
    #endif

    CancelEdit(playerid);

    foreach(new i : Player) if(PlayerData[i][pSpectator] != INVALID_PLAYER_ID && PlayerData[i][pSpectator] == playerid) {
        SetPlayerInterior(i, GetPlayerInterior(playerid));
        SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
    }

    if (newinteriorid == LSPD_LOBBY || newinteriorid == LSPD_INSIDE || House_Inside(playerid) != -1) {
        Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000, playerid);
    }

    if(newinteriorid != 0) {
        SetPlayerWeather(playerid, 4);
        SetPlayerTime(playerid, 12, 0);
    }
    else {
        new hour;
        gettime(hour, _, _);
        SetPlayerWeather(playerid, current_weather);
        SetPlayerTime(playerid, hour, 0);
        SetPlayerStreamerSettings(playerid);
    }
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnVehicleDeath]: Vehicle ID: %d, Killer ID: %d", vehicleid, killerid);
    #endif

    new id = -1;
    if ((id = Vehicle_GetID(vehicleid)) != -1) {
        VehicleData[id][cDead] = 1;
        VehicleData[id][cKillerID] = killerid;
    }
    return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    if(newstate)
    {
        FlashTime[vehicleid] = SetTimerEx("OnLightFlash", 125, true, "d", vehicleid);
    }

    if(!newstate)
    {
        new panels, doors, lights, tires;

        KillTimer(FlashTime[vehicleid]);

        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
        UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
    }
    return 1;
}

// public OnVehicleHealthChange(vehicleid, Float:newhealth, Float:oldhealth) {
//     new vehid = -1;
//     if ((vehid = Vehicle_GetID(vehicleid)) != -1 && VehicleData[vehid][cBodyUpgrade]) {
//         if(newhealth >= 1200) {
//             UpdateVehicleDamageStatusEx(VehicleData[vehid][cVehicle], VEHICLE_DAMAGE_PANELS, 0);
//             UpdateVehicleDamageStatusEx(VehicleData[vehid][cVehicle], VEHICLE_DAMAGE_DOORS, 0);
//         }
//     }
//     return 1;
// }

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(PlayerData[playerid][pDrivingTest] && IsPlayerInVehicle(playerid, PlayerData[playerid][pTestCar]))
    {
        if(ReturnVehicleHealth(vehicleid) < 950.0)
        {
            CancelDrivingTest(playerid), SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You have failed the test due to damaged vehicle!");
        } else {
            SendCustomMessage(playerid, "WARNING", "Please avoid damage or you'll be failed the driving test");
        }
    }
	return 1;
}

public OnPlayerFall(playerid, Float:damage) {
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerFall]: Player ID: %d, Damage: %.1f", playerid, damage);
    #endif

    if (damage >= 4.0) AddDamage(playerid, (random(2) == 0) ? (BODY_PART_RIGHT_LEG-3) : (BODY_PART_LEFT_LEG-3), WEAPON_COLLISION);
    return 1;
}

public OnPlayerRamPlayer(playerid, driverid, vehicleid, Float:damage) {
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerRamPlayer]: Player ID: %d, Driver ID: %d, Vehicle ID: %d, Damage: %.1f", playerid, driverid, vehicleid, damage);
    #endif

    AddDamage(playerid, (random(2) == 0) ? (BODY_PART_RIGHT_LEG-3) : (BODY_PART_LEFT_LEG-3), WEAPON_COLLISION);
    // SetPlayerHealth(driverid, (ReturnHealth(driverid)-5));
    return 1;
}

// public OnPlayerCrashVehicle(playerid, vehicleid, Float:damage) {
//     if (damage >= 5.0) SetPlayerHealth(playerid, (ReturnHealth(playerid)-5));
//     return 1;
// }

Function:OnPlayerJumping(playerid)
{
    if (strfind(GetAllBodyPartStatus(playerid),"Broken Bone",true) != -1 && !AccountData[playerid][pAdminDuty])
        return ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 1, 1, 1, 0, 1), SetTimerEx("BunnyHopReset", 3000, false, "d", playerid);

    if(++PlayerData[playerid][pPemberitahuan] > 2 && !AccountData[playerid][pAdminDuty] && !IsPlayerInEvent(playerid)) {
        ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 1, 1, 1, 0, 1);
        SetTimerEx("BunnyHopReset", 3000, false, "d", playerid);
    }
    SetTimerEx("TimerBunnyHop", 4000, false, "d", playerid);
    return 1;
}

public OnPlayerPause(playerid) {
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerPause]: Player ID: %d", playerid);
    #endif

    PlayerData[playerid][pPaused] = 1;
    return 1;
}

public OnPlayerResume(playerid, time) {
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerResume]: Player ID: %d, Time: %d", playerid, time);
    #endif

    PlayerData[playerid][pPaused] = 0;

    if (PlayerData[playerid][pAFK]) {
        TogglePlayerControllable(playerid, 1);
        if (IsPlayerDuty(playerid)) SetFactionColor(playerid);
        else SetPlayerColor(playerid, DEFAULT_COLOR);
        PlayerData[playerid][pAFK] = 0;
        PlayerData[playerid][pPaused] = 0;
        SendCustomMessage(playerid, "AFK", "You've been paused for "YELLOW"%d minute(s) "WHITE"and you are now is no longer in AFK Mode.", (time/60000));
    }
    return 1;
}

Function:BunnyHopReset(playerid) {
    PlayerData[playerid][pPemberitahuan] = 0;
    ClearAnimations(playerid, 1);
    return 1;
}

Function:TimerBunnyHop(playerid)
{
    PlayerData[playerid][pPemberitahuan] = 0;
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnVehicleSpawn]: Vehicle ID: %d", vehicleid);
    #endif

    new id = -1;

    if ((id = Vehicle_GetID(vehicleid)) != -1) {
        if (VehicleData[id][cDead]) {
            new killerid = VehicleData[id][cKillerID];

            if (VehicleData[id][cOwner]) {
                new
                    query[255],
                    vehname[32];

                GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
                if(--VehicleData[id][cInsurance] < 0) {
                    SendVehicleOwnedMessage(id, sprintf("VEHICLE: "WHITE"Kendaraan anda "CYAN"%s "WHITE"dihapus karena tidak memiliki sisa asuransi.", vehname));
                    vehicledeath[VehicleData[id][cVehicle]] = 0;
                    vehicledeathby[VehicleData[id][cVehicle]] = INVALID_PLAYER_ID;
                    Vehicle_Delete(id);
                    return 1;
                }

                VehicleData[id][cInsideInsurance]   = 1;
                VehicleData[id][cInsuranceTime]     = (gettime()+3600);
                VehicleData[id][cLocked]            = 1;
                VehicleData[id][cNeonToggle]        = 0;
                VehicleData[id][cNeon]              = 0;
                // VehicleData[id][cEngineUpgrade]     = 0;
                // VehicleData[id][cBodyUpgrade]       = 0;
                // VehicleData[id][cMaxHealth]         = 1000.0;

                ReloadVehicleNeon(id);

                // for (new slot = 0; slot < MAX_VEHICLE_OBJECT+5; slot++) if(VehicleObjects[id][slot][object_exists]) {
                //     Vehicle_ObjectReset(id, slot, true);
                // }

                // for (new j; j < 14; j++)  {
                //     VehicleData[id][cMods][j] = 0;
                // }
                // Car_RemoveAllItems(id);

                SetVehicleLock(VehicleData[id][cVehicle], true);
                DisableVehicleSpeedCap(VehicleData[id][cVehicle]);

                format(query, sizeof(query), "INSERT INTO `cardestroy` SET `destroyBy`='%s', `destroyModel`='%d', `destroyOwner`='%s', `destroyTime`=UNIX_TIMESTAMP()", (killerid != INVALID_PLAYER_ID) ? (NormalName(killerid)) : ("Unknown"), VehicleData[id][cModel], NormalName(Vehicle_GetOwner(id)));
                mysql_tquery(g_iHandle, query);

                // if(vehicledeathby[VehicleData[id][cVehicle]] != INVALID_PLAYER_ID) SendVehicleOwnedMessage(id, sprintf(LIGHTBLUE"VEHICLE: "WHITE"Kendaraan Anda telah dihancurkan/diledakan oleh "YELLOW"%s", NormalName(vehicledeathby[VehicleData[id][cVehicle]]))), SendVehicleOwnedMessage(id, sprintf(""LIGHTBLUE"VEHICLE: "WHITE"Kendaraan "CYAN"%s "WHITE"anda hancur, sisa asuransi: "YELLOW"%d/"RED"3.", vehname, VehicleData[id][cInsurance]));
                // else
                SendVehicleOwnedMessage(id, sprintf("VEHICLE: "WHITE"Kendaraan anda "CYAN"%s "WHITE"hancur, sisa asuransi: "YELLOW"%d/"RED"3.", vehname, VehicleData[id][cInsurance]));

                if (IsValidVehicle(VehicleData[id][cVehicle]))
                    DestroyVehicle(VehicleData[id][cVehicle]);

                VehicleData[id][cVehicle] = INVALID_VEHICLE_ID;
            } else if ((VehicleData[id][cWorkshop] || VehicleData[id][cBiz]) && !VehicleData[id][cOwner]) {
                new bizid = GetBusinessByID(VehicleData[id][cBiz]), ws = GetWorkshopByID(VehicleData[id][cWorkshop]);
                if (bizid != -1) {
                    foreach (new player : Player) {
                        if(Business_IsOwner(player, bizid) || Business_IsEmployee(player, bizid)) {
                            SendCustomMessage(player, "BUSINESS","Kendaraan delivery business Anda telah meledak atau tenggelam, Anda dapat membeli lagi di (/bm)");
                        }
                    }
                    vehicledeathby[VehicleData[id][cVehicle]] = INVALID_PLAYER_ID;
                    Vehicle_Delete(id);
                } else if (ws != -1) {
                    foreach (new player : Player) {
                        if (Workshop_IsOwner(player, ws) || Workshop_Employe(player, ws)) {
                            SendCustomMessage(player, "WORKSHOP","Kendaraan workshop Anda telah meledak atau tenggelam, Anda dapat membeli lagi di (/wm)");
                        }
                    }
                    vehicledeathby[VehicleData[id][cVehicle]] = INVALID_PLAYER_ID;
                    Vehicle_Delete(id);
                }
            } else if (VehicleData[id][cFaction] && !VehicleData[id][cOwner]) {
                new factionid = GetFactionByID(VehicleData[id][cFaction]);

                if (factionid != -1) {
                    if (FactionData[factionid][factionType] != FACTION_GANG && VehicleData[id][cStatic]) {
                        if (IsValidVehicle(VehicleData[id][cVehicle]))
                            DestroyVehicle(VehicleData[id][cVehicle]);

                        VehicleData[id][cVehicle] = INVALID_VEHICLE_ID;
                    }
                }
            } else if(VehicleData[id][cRentTime] > 0 && VehicleData[id][cRentOwned] > 0 && !VehicleData[id][cOwner]) {
                foreach(new player : Player) if(VehicleData[id][cRentOwned] == PlayerData[player][pID]) {
                    SendCustomMessage(player, "RENTAL","Kendaraan sewaan anda meledak atau tenggelam, kendaraan sewa tidak bisa di gunakan kembali.");
                }
                VehicleData[id][cRentOwned] = 0;
                VehicleData[id][cRentTime] = 0;
                VehicleData[id][cRent] = 0;
                VehicleData[id][cLumber] = 0;
                VehicleData[id][cLocked] = 0;
                VehicleData[id][cHealth] = 1000;
                VehicleData[id][cDamage][0] = VehicleData[id][cDamage][1] = VehicleData[id][cDamage][2] = VehicleData[id][cDamage][3] = 0;
                vehicledeathby[VehicleData[id][cVehicle]] = INVALID_PLAYER_ID;
                Vehicle_Delete(id);
            }

            VehicleData[id][cDead] = 0;
            VehicleData[id][cKillerID] = INVALID_PLAYER_ID;
        }
    }

    if(CoreVehicles[vehicleid][vehTemporary]) {
        CoreVehicles[vehicleid][vehTemporary] = false;
        DestroyVehicle(vehicleid);
    }
    
    if(CoreVehicles[vehicleid][vehWood])
    {
        CoreVehicles[vehicleid][vehWood] = 0;
        for(new i; i < 5; i++) if(IsValidDynamicObject(CoreVehicles[vehicleid][vehWoodObject][i]))
        {
            DestroyDynamicObject(CoreVehicles[vehicleid][vehWoodObject][i]);
            CoreVehicles[vehicleid][vehWoodObject][i] = INVALID_STREAMER_ID;
        }
    }
    // for (new i = 0; i != MAX_CRATES; i ++) if(CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
    //     Crate_Delete(i);
    // }
    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
        DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]), CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;

    new vehid = -1;
    if ((vehid = Vehicle_GetID(vehicleid)) != -1) {
        if (VehicleData[vehid][cFaction]) {
            Vehicle_Spawn(vehid, true);
        }

        if (IsValidDynamicObject(VehicleData[vehid][cPlantObject]))
            DestroyDynamicObject(VehicleData[vehid][cPlantObject]);

        VehicleData[vehid][cPlantObject] = INVALID_STREAMER_ID;

        if (IsValidDynamicObject(VehicleData[vehid][cComponentObject]))
            DestroyDynamicObject(VehicleData[vehid][cComponentObject]);

        VehicleData[vehid][cComponentObject] = INVALID_STREAMER_ID;

        if (IsValidDynamic3DTextLabel(VehicleData[vehid][cText]))
            DestroyDynamic3DTextLabel(VehicleData[vehid][cText]);

        VehicleData[vehid][cText] = Text3D:INVALID_3DTEXT_ID;

        if (IsValidDynamicObject(VehicleData[vehid][cNeonObject][0]))
            DestroyDynamicObject(VehicleData[vehid][cNeonObject][0]);

        if (IsValidDynamicObject(VehicleData[vehid][cNeonObject][1]))
            DestroyDynamicObject(VehicleData[vehid][cNeonObject][1]);

        VehicleData[vehid][cNeonObject][0] = VehicleData[vehid][cNeonObject][1] = INVALID_STREAMER_ID;
    }

    ResetVehicle(vehicleid);
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnRconLoginAttempt]: IP: %s, Password: %s, Success: %d", ip, password, success);
    #endif

    if(!success)
    {
        foreach (new i : Player) if(!strcmp(AccountData[i][pIP], ip, true) && AccountData[i][pAdmin] < 6) {
            KickEx(i);
        }
        SendAdminWarning(X11_TOMATO_1, "AdmWarn: RCON login attempt failed from \"%s\".", ip);
        Log_Write("logs/rcon_log.txt", "[%s] RCON login attempt failed from \"%s\".", ReturnDate(), ip);
    }
    else
    {
        foreach (new i : Player) if(AccountData[i][pAdmin] < 6) {
            if(++PlayerData[i][pRconAttemp] > 3)
            {
                SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s was kicked for logging into RCON without authorization.", ReturnName(i, 0));
                Log_Write("logs/rcon_log.txt", "[%s] %s (%s) was banned for an unauthorized RCON login.", ReturnDate(), ReturnName(i, 0), ip);

                KickEx(i);
            }
            break;
        }
    }
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(PlayerData[playerid][pMaskOn]) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
    else ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

    if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pUndercover]) {
        if (GetFactionType(forplayerid) != FACTION_POLICE) SetPlayerMarkerForPlayer(forplayerid, playerid, 0xFFFFFF00);
    }
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(dialogid == DIALOG_BUYCAR)
    {
        if(response)
        {
            PlayerData[playerid][pDealerVehicle] = ListedBuyVehicle[playerid][listitem];
            if(AccountData[playerid][pAdmin] < 5) Dialog_Show(playerid, PemilihanMobil, DIALOG_STYLE_LIST, "Dealership","Buy\nBack", "Next", "Close");
            else Dialog_Show(playerid, PemilihanMobil, DIALOG_STYLE_LIST, "Dealership","Buy\nBack\nEdit","Next","Close");            
        }
    }

    if (dialogid == DIALOG_BUYVEHBIZ) {
        if (response) {
            new id = GetPVarInt(playerid, "BM"),
                model;

            switch (listitem) {
                case 0: {
                    model = 423;
                }
                case 1: {
                    model = 588;
                }
            }

            new Float:pos[4], vehid = -1;
            GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
            GetPlayerFacingAngle(playerid, pos[3]);

            vehid = Vehicle_Create(0, model, pos[0], pos[1], pos[2], pos[3], random(127), random(127), 0, "Restaurant", 0, 0, BusinessData[id][bizID]);

            if(vehid == cellmin)
                return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

            GiveMoney(playerid, -500);
            SendCustomMessage(playerid, "BUSINESS", "You've been bought vehicle business for "GREEN"%s", FormatNumber(500));
        }
    }

    if (dialogid == DIALOG_ADDFURNOBJECT) {
        if (response)
        {           
            new id = FurnObject_Add(playerid, strval(inputtext), ManageFurnStore[playerid]);

            if(id == cellmin)
                return SendErrorMessage(playerid, "Furniture object untuk furniture store ini sudah mencapai batas maksimal.");

            ManageFurnObject[playerid] = id;
            Dialog_Show(playerid, ManageFurnObject, DIALOG_STYLE_LIST, "Manage Object", "Produce\nMove\nSet Name\nSet Price\nTexture\nDelete", "Select", "Close");

            ShowPlayerFooter(playerid, "Object baru telah di buat, silahkan untuk memposisikan object dengan benar~n~Menyalah gunakan akan mendapat sanksi berupa ~r~~h~BANNED 3 hari.", 5000);
        } else FurnObject_Category(playerid);
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerWeaponShot]: Player ID: %d, Weapon ID: %d, Hit Type: %d, Hit ID: %d, fX: %.1f, fY: %.1f, fZ: %.1f", playerid, weaponid, hittype, hitid, fX, fY, fZ);
    #endif

    if(AccountData[playerid][pAdminDuty]) 
        return 0;

    // if(PlayerData[playerid][pLaginembak] == 0)
    //     PlayerData[playerid][pLaginembak] = 1000;

    // SetPlayerDrunkLevel(playerid, PlayerData[playerid][pLaginembak]);
    // PlayerData[playerid][pLaginembak] += 100;

    if(PlayerHasTazer(playerid) && GetFactionType(playerid) == FACTION_POLICE)
        PlayerPlaySoundEx(playerid, 6003);

    if((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
    {
        if(PlayerData[hitid][pHospital] != -1)
            return 0;

        if(PlayerData[hitid][pDrugUsed] == 2)
        {
            new
                Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
                Float:health;

            GetPlayerHealth(hitid, health);
            SetPlayerHealth(hitid, floatsub(health, damage));

            return 0;
        }
    }
    return 1;
}

public OnPlayerJackVehicle(playerid, targetid, vehicleid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerJackVehicle]: Player ID: %d, Target ID: %d, Vehicle ID: %d", playerid, targetid, vehicleid);
    #endif

    if(SQL_IsCharacterLogged(playerid))
    {
        if((GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI) && PlayerData[targetid][pJobDuty]) {
            cmd_jobduty(targetid, "\1");
        }
    }
    return 1;
}

// public OnInvalidWeaponDamage(playerid, damagedid, Float:amount, weaponid, bodypart, error, bool:given)
// {
//     DamagePlayer(playerid, amount, damagedid, weaponid, bodypart, true);
    
//     printf("Playerid: %d, damagedid: %d, amount: %.2f, weaponid: %d, bodypart: %d, error: %d, given: %s", playerid, damagedid, amount, weaponid, error, (given) ? ("yes") : ("no"));
//     return 1;
// }

// public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
// {
//     if(AccountData[playerid][pAdminDuty])
//         return 0;

//     // if (!IsPlayerInEvent(playerid)) {
//     //     if (IsInvalidWeaponID(weapon))
//     //         DamagePlayer(playerid, amount, issuerid, weapon, bodypart, true);
//     //     else
//     // }
//     DamagePlayer(playerid, amount, issuerid, weapon, bodypart, false);

//     if(PlayerData[playerid][pFirstAid])
//     {
//         SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Your first aid kit is no longer in effect as you took damage.");

//         PlayerData[playerid][pFirstAid] = 0;
//         KillTimer(PlayerData[playerid][pAidTimer]);
//     }

//     if(issuerid != INVALID_PLAYER_ID) {
//         for(new i = 0; i < (10-1); i++) {
//             format(damageList[playerid][i], 128, damageList[playerid][1+i]);
//         }
//         format(damageList[playerid][10-1], 128, "[%s] Issue: %s | Amount: %.2f | Weapon: %d | Body: %d", ReturnDate(), ReturnName(issuerid, 0), amount, weapon, bodypart);
//     }

//     if((0 < weapon < 46) && BODY_PART_TORSO <= bodypart <= BODY_PART_HEAD && !IsPlayerInEvent(playerid)) {
//         AddDamage(playerid, (bodypart - 3), weapon);
//     }

//     if(issuerid != INVALID_PLAYER_ID && weapon == WEAPON_CHAINSAW) {
//         TogglePlayerControllable(playerid, 0);
//         SetPlayerArmedWeapon(playerid, 0);
//         TogglePlayerControllable(playerid, 1);
//         SetCameraBehindPlayer(playerid);

//         SetPVarInt(playerid, "ChainsawWarning", GetPVarInt(playerid, "ChainsawWarning")+1);

//         if(GetPVarInt(playerid, "ChainsawWarning") == 3) {
//             SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s was kicked by BOT. Reason: Abusing Chainsaw", ReturnName2(playerid, 0));
//             DeletePVar(playerid, "ChainsawWarning");
//             KickEx(playerid);
//         }
//     }
//     else if(issuerid != INVALID_PLAYER_ID)
//     {
//         PlayerData[issuerid][pLastShot] = playerid;
//         PlayerData[issuerid][pShotTime] = gettime();

//         if(PlayerData[playerid][pDrugUsed] == 4 && (weapon >= 0 && weapon <= 15))
//             SetPlayerHealth(issuerid, ReturnHealth(issuerid) - 6);

//         if(GetFactionType(playerid) == FACTION_POLICE && PlayerHasTazer(playerid) && !PlayerData[issuerid][pStunned])
//         {
//             if(GetPlayerState(issuerid) != PLAYER_STATE_ONFOOT)
//                 return SendErrorMessage(playerid, "The player must be onfoot to be stunned.");

//             if(GetPlayerDistanceFromPlayer(playerid, issuerid) > 10.0)
//                 return SendErrorMessage(playerid, "You must be closer to stun the player.");

//             PlayerData[issuerid][pStunned] = 25;
//             TogglePlayerControllable(issuerid, 0);

//             ApplyAnimation(issuerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
//             SendServerMessage(issuerid, "You've been "RED"stunned"WHITE" by "YELLOW"%s.", ReturnName(playerid, 0, 1));
//         }
//     }

//     printf("Playerid: %d, amount: %.2f, issuerid: %d, weapon: %d, bodypart: %d", playerid, amount, issuerid, weapon, bodypart);
//     return 1;
// }

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(AccountData[playerid][pAdminDuty])
        return 0;

    if (!IsPlayerInEvent(playerid)) {
        if (IsNotFirearmsWeapon(weaponid)) {
            if (ReturnArmour2(playerid))
                SetPlayerArmour(playerid, ReturnArmour2(playerid));

            if (ReturnHealth2(playerid))
                SetPlayerHealth(playerid, (ReturnHealth2(playerid)-amount));
        }
    }

    Update_PlayerMask(playerid);

    if(PlayerData[playerid][pFirstAid])
    {
        SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Your first aid kit is no longer in effect as you took damage.");

        PlayerData[playerid][pFirstAid] = 0;
        KillTimer(PlayerData[playerid][pAidTimer]);
    }

    if(issuerid != INVALID_PLAYER_ID) {
        for(new i = 0; i < (10-1); i++) {
            format(damageList[playerid][i], 128, damageList[playerid][1+i]);
        }
        format(damageList[playerid][10-1], 128, "[%s] Issue: %s | Amount: %.2f | Weapon: %d | Body: %d", ReturnDate(), ReturnName(issuerid, 0), amount, weaponid, bodypart);
    }

    if((weaponid < 37) && BODY_PART_TORSO <= bodypart <= BODY_PART_HEAD && !IsPlayerInEvent(playerid)) {
        AddDamage(playerid, (bodypart - 3), weaponid);
    }
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(damagedid != INVALID_PLAYER_ID && weaponid == WEAPON_CHAINSAW) {
        TogglePlayerControllable(playerid, 0);
        SetPlayerArmedWeapon(playerid, 0);
        TogglePlayerControllable(playerid, 1);
        SetCameraBehindPlayer(playerid);

        SetPVarInt(playerid, "ChainsawWarning", GetPVarInt(playerid, "ChainsawWarning")+1);

        if(GetPVarInt(playerid, "ChainsawWarning") == 3) {
            foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
                SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was kicked by BOT. Reason: Abusing Chainsaw", ReturnName2(playerid, 0));
            }
            DeletePVar(playerid, "ChainsawWarning");
            KickEx(playerid);
        }
    }
    else if(damagedid != INVALID_PLAYER_ID)
    {
        PlayerData[damagedid][pLastShot] = playerid;
        PlayerData[damagedid][pShotTime] = gettime();

        if(PlayerData[playerid][pDrugUsed] == 4 && (weaponid >= 0 && weaponid <= 15))
            SetPlayerHealth(damagedid, ReturnHealth(damagedid) - 6);

        if(GetFactionType(playerid) == FACTION_POLICE && PlayerHasTazer(playerid) && !PlayerData[damagedid][pStunned])
        {
            if(GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
                return SendErrorMessage(playerid, "The player must be onfoot to be stunned.");

            if(GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "You must be closer to stun the player.");

            PlayerData[damagedid][pStunned] = 25;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            SendServerMessage(damagedid, "You've been "RED"stunned"WHITE" by "YELLOW"%s.", ReturnName(playerid, 0, 1));
        }

        for (new j = 0; j < MAX_GREENZONE; j ++) {
            if (IsPlayerInDynamicArea(playerid, GreenZoneArea[j])) {
                TogglePlayerControllable(playerid, 0);
                SetPlayerArmedWeapon(playerid, 0);
                TogglePlayerControllable(playerid, 1);
                SetCameraBehindPlayer(playerid);

                SetPVarInt(playerid, "PunchWarning", GetPVarInt(playerid, "PunchWarning")+1);

                if(GetPVarInt(playerid, "PunchWarning") == 3) {
                    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
                        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was kicked by BOT. Reason: Punishment infringe Greenzone", ReturnName2(playerid, 0));
                    }
                    DeletePVar(playerid, "PunchWarning");
                    KickEx(playerid);
                }
            }
        }
    }
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerDeath]: Player ID: %d, Killer ID: %d, Reason: %d", playerid, killerid, reason);
    #endif

    if(killerid != INVALID_PLAYER_ID)
    {
        if(1 <= reason <= 46)
            Log_Write("logs/kill_log.txt", "[%s] %s has killed %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason));

        else
            Log_Write("logs/kill_log.txt", "[%s] %s has killed %s (reason %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason);

        if(reason == 50 && killerid != INVALID_PLAYER_ID)
            SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s has killed %s by heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if(reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
            SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s has killed %s by driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
    }
    foreach(new i : Player)
    {
        if(AccountData[i][pAdmin] > 0)
        {
            SendDeathMessageToPlayer(i, killerid, playerid, reason);
        }
    }
    return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pInjured])
        return 0;

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !Dialog_Opened(playerid)) {
        new vehicleid = GetPlayerVehicleID(playerid), i = -1;
        if(PRESSED(KEY_FIRE)) {
            if(!GetEngineStatus(GetPlayerVehicleID(playerid))) {
                cmd_v(playerid, "engine");
            }
        }
        if(PRESSED(KEY_NO)) {
            cmd_v(playerid, "neon");
        }
        if (PRESSED(KEY_LOOK_BEHIND)) {
            if ((i = Vehicle_GetID(vehicleid)) != -1 && (Vehicle_IsOwner(playerid, i) || VehicleData[i][cRentOwned] == PlayerData[playerid][pID])) {
                if (VehicleData[i][cTireLock])
                    return SendErrorMessage(playerid, "This vehicle is tire locked!");

                VehicleData[i][cLocked] = VehicleData[i][cLocked] ? false : true;

                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                SetDoorStatus(VehicleData[i][cVehicle], bool:VehicleData[i][cLocked]);
                ShowPlayerFooter(playerid, sprintf("You have ~r~%s~w~ the vehicle!", VehicleData[i][cLocked] ? "locked" : "unlocked"), 3000, 1);
            }
        }
        if (PRESSED(KEY_FIRE) && PRESSED(KEY_CROUCH)) {
            if ((i = Vehicle_GetID(vehicleid)) != -1 && VehicleData[i][cFaction] && IsValidVehicle(VehicleData[i][cVehicle])) {
                if (FlashTime[VehicleData[i][cVehicle]]) KillTimer(FlashTime[VehicleData[i][cVehicle]]);
                else FlashTime[VehicleData[i][cVehicle]] = SetTimerEx("OnLightFlash", 125, true, "d", VehicleData[i][cVehicle]);
            }
        }
    }

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

    if((GetConnectedTime(playerid) - PlayerData[playerid][pBunnyHopTick] >= 1000) && (newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        CallLocalFunction("OnPlayerJumping", "i", playerid);
        PlayerData[playerid][pBunnyHopTick] = GetConnectedTime(playerid);
    }

    // if(!(oldkeys & KEY_FIRE))
    // {
    //     SetPlayerDrunkLevel(playerid, 0);
    //     PlayerData[playerid][pLaginembak] = 0;
    // }
    if(newkeys & KEY_CROUCH && IsPlayerInAnyVehicle(playerid))
    {
        static
            id = -1;

        if((id = Garage_Nearest(playerid)) != -1)
            return cmd_garage(playerid, "enter");

        if((id = Garage_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, GarageData[id][garageLocInt][0], GarageData[id][garageLocInt][1], GarageData[id][garageLocInt][2]))
            return cmd_garage(playerid, "exit");
    }
    if(newkeys & KEY_YES && IsPlayerSpawned(playerid)) //Key Y
    {  
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !Dialog_Opened(playerid))
        {
            new id = -1;

            if(IsSpeedoVehicle(GetPlayerVehicleID(playerid))) {

                if((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, id)) Dialog_Show(playerid, vehicleInteract, DIALOG_STYLE_LIST, sprintf("Vehicle ID: %d", GetPlayerVehicleID(playerid)), "Engine\nLights\nHood\nTrunk\nToggle Speedometer\n%s Vehicle", "Select", "Close", GetDoorStatus(GetPlayerVehicleID(playerid)) ? ("Unlock") : ("Lock"));
                else Dialog_Show(playerid, vehicleInteract, DIALOG_STYLE_LIST, sprintf("Vehicle ID: %d", GetPlayerVehicleID(playerid)), "Engine\nLights\nHood\nTrunk\nToggle Speedometer", "Select", "Close");
            }
            else if((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, id)) Dialog_Show(playerid, vehicleInteract, DIALOG_STYLE_LIST, sprintf("Vehicle ID: %d", GetPlayerVehicleID(playerid)), "%s Vehicle", "Select", "Close", GetDoorStatus(GetPlayerVehicleID(playerid)) ? ("Unlock") : ("Lock"));

            return 1;
        }
        else {
            if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || PlayerData[playerid][pJailTime] > 0 || IsPlayerInEvent(playerid))
                return SendErrorMessage(playerid, "You can't open your inventory right now.");

            OpenInventory(playerid);
        }
    }
    if(newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim]) //Key SPACE
    {
        ClearAnimations(playerid, 1);
        HidePlayerFooter(playerid);

        PlayerData[playerid][pLoopAnim] = false;
    }

    if(newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid) != -1) //Key F
    {
        if(PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
            return 1;

        new id = IsPlayerNearMine(playerid);

        if(id != -1)
        {
            PlayerData[playerid][pMineTime] = 1;
            SetTimerEx("MineTime", 400, false, "d", playerid);

            if(PlayerData[playerid][pMineCount] < 5)
            {
                PlayerData[playerid][pMineCount]++;

                ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
            }
            else
            {
                PlayerData[playerid][pMinedRock] = 1;
                PlayerData[playerid][pMineCount] = 0;

                RemovePlayerAttachedObject(playerid, JOB_SLOT);

                ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
                ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

                SetPlayerAttachedObject(playerid, JOB_SLOT, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
                SendServerMessage(playerid, "You have digged up a rock. Deliver it to the marker.");

                SetPlayerCheckpoint(playerid, 627.88, 894.60, -41.10, 2.5);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
            }
        }
    }

    // Drive-BY
    // if((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerCameraMode(playerid) == 55 && IsFirearmsWeapon(playerid)) {
	// 	PlayerData[playerid][pLastWeapon] = GetPlayerWeapon(playerid);
	// 	SetPlayerArmedWeapon(playerid, 0);
	// 	ApplyAnimation(playerid, "PED", "CAR_GETIN_RHS", 4.1, 0, 0, 0, 0, 1, 1);
    //     defer GiveLastWeapon(playerid);
    // }
    // if ((GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) && (newkeys & KEY_CROUCH)) {
    //     if (GetPlayerWeapon(playerid) == 0) {
    //         new
    //             weapon_list[128],
    //             count = 0;

    //         strcat(weapon_list, "Weapon\tAmmo\tDurability\n");
    //         for(new i = 1; i != MAX_WEAPON_SLOT; i++) if(IsFirearmsWeapon(PlayerGuns[playerid][i][weapon_id])) {
    //             strcat(weapon_list, sprintf("%s\t%s\t%s\n", ReturnWeaponName(PlayerGuns[playerid][i][weapon_id]), (i == 1) ? (" ") : sprintf("%d", PlayerGuns[playerid][i][weapon_ammo]), (i == 1) ? (" ") :  (sprintf("%d", PlayerGuns[playerid][i][weapon_durability]))));
    //             ListedWeapons[playerid][count++] = i;
    //         }

    //         if(count) Dialog_Show(playerid, SelectWeapon, DIALOG_STYLE_TABLIST_HEADERS, "Select Weapon", weapon_list, "Select", "Cancel");
    //         else SendErrorMessage(playerid, "There is no firearms weapon on you");
    //     }
    // }

    //Entrance key
    if((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (newkeys & KEY_CROUCH))
    {
        static
            id = -1;

        if((id = Entrance_Nearest(playerid)) != -1 && IsPlayerInDynamicCP(playerid, EntranceData[id][entranceCheckpoint])) {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum masuk...");
            
            Entrance_UpdateRecentTeleport(playerid);
            Entrance_Enter(playerid, id);
        }

        if((id = Entrance_Inside(playerid, true)) != -1) {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum keluar...");

            Entrance_UpdateRecentTeleport(playerid);
            Entrance_Exit(playerid, id);
        }
    }
    else if((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (newkeys & KEY_SECONDARY_ATTACK))
    {
        static
            id = -1;

        if((id = Entrance_Nearest(playerid)) != -1 && IsPlayerInDynamicCP(playerid, EntranceData[id][entranceCheckpoint])) {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum masuk...");

            Entrance_UpdateRecentTeleport(playerid);
            Entrance_Enter(playerid, id);
        }

        if((id = Entrance_Inside(playerid, true)) != -1) {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum keluar...");

            Entrance_UpdateRecentTeleport(playerid);
            Entrance_Exit(playerid, id);
        }
    }

    if(newkeys & KEY_CTRL_BACK) //Key H
    {
        new
            id = -1;

        if((id = Garage_Nearest(playerid)) != -1)
            return cmd_garage(playerid, "enter");

        if((id = Garage_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, GarageData[id][garageLocInt][0], GarageData[id][garageLocInt][1], GarageData[id][garageLocInt][2]))
            return cmd_garage(playerid, "exit");

        //Inside hospital
/*        if(IsPlayerInRangeOfPoint(playerid, 2.5, 1817.5940,-1193.2894,64.0945) && PlayerData[playerid][pHospitalInt] != -1)
        {
            SetPlayerPos(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
            SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);
            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            SetCameraBehindPlayer(playerid);

            PlayerData[playerid][pHospitalInt] = -1;
        }*/

        //Outside hospital
/*        for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if(IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
        {
            SetPlayerPosEx(playerid, 1817.5940,-1193.2894,64.0945);
            SetPlayerFacingAngle(playerid, 181.8467);
            SetPlayerInterior(playerid, 4);
            SetPlayerVirtualWorld(playerid, i + 5000);
            SetCameraBehindPlayer(playerid);
            PlayerData[playerid][pHospitalInt] = i;

            SetPlayerWeather(playerid, 1);
            SetPlayerTime(playerid, 12, 0);
            return 1;
        }*/   

        if((id = House_Nearest(playerid)) != -1)
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum masuk...");

            if(HouseData[id][houseInt][0] == 0.00 && HouseData[id][houseInt][1] == 0.00 && HouseData[id][houseInt][2] == 0.00) return SendErrorMessage(playerid, "Interior rumah masih kosong, atau belum memiliki interior.");
            if(HouseData[id][houseSeal]) return SendErrorMessage(playerid, "Rumah ini di sita oleh pihak {C0C0C0}Pemerintahan.");
            if(HouseData[id][houseLocked]) return GameTextForPlayer(playerid, "~r~Locked", 1500, 1);

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPosEx(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2], 5000);
            SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
            SetPlayerInterior(playerid, HouseData[id][houseInterior]);
            SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

            PlayerData[playerid][pHouse] = HouseData[id][houseID];
            SetPlayerWeather(playerid, 1);
            SetPlayerTime(playerid, 12, 0);
            return 1;
        }
        
        if((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum keluar...");

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
            SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);
            SetPlayerInterior(playerid, HouseData[id][houseExterior]);
            SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
            SetCameraBehindPlayer(playerid);
            Player_ToggleTelportAntiCheat(playerid, true);
            PlayerData[playerid][pHouse] = -1;
            return 1;
        }

        if((id = Business_Nearest(playerid)) != -1)
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum masuk...");

            if(BusinessData[id][bizInt][0] == 0.00 && BusinessData[id][bizInt][1] == 0.00 && BusinessData[id][bizInt][2] == 0.00) return SendErrorMessage(playerid, "Interior business masih kosong, atau belum memiliki interior.");
            if(BusinessData[id][bizSeal]) return SendErrorMessage(playerid, "Business ini di sita oleh pihak {C0C0C0}Pemerintahan.");
            if(BusinessData[id][bizLocked]) return GameTextForPlayer(playerid, "~r~Locked", 1500, 1);

            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPosEx(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2], 1500);
            SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);
            SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
            SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);
            PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

            SetPlayerWeather(playerid, 1);
            SetPlayerTime(playerid, 12, 0);

            if(strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
                SendClientMessageEx(playerid, X11_LIGHTBLUE, "BUSINESS: "WHITE"%s", BusinessData[id][bizMessage]);
            }
            return 1;
        }

        if((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
        {
            if(Entrance_HasRecentTeleport(playerid))
                return ShowPlayerFooter(playerid, "~g~INFO: ~w~Tunggu beberapa detik sebelum keluar...");
            
            Player_ToggleTelportAntiCheat(playerid, false);
            Entrance_UpdateRecentTeleport(playerid);
            SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
            SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);
            SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
            SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
            SetCameraBehindPlayer(playerid);
            PlayerData[playerid][pBusiness] = -1;
            Player_ToggleTelportAntiCheat(playerid, true);
            return 1;
        }

        // if((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
        // {
        //     if((id = Crate_Highest(id)) == -1)
        //         id = Crate_Nearest(playerid);

        //     if(GetFactionType(playerid) == FACTION_GANG)
        //     {
        //         ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

        //         PlayerData[playerid][pCarryCrate] = id;
        //         SetPlayerAttachedObject(playerid, JOB_SLOT, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

        //         SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s reaches down and picks up a crate.", ReturnName(playerid, 0, 1));
        //         SendServerMessage(playerid, "You have picked up a crate. Load it in a vehicle using 'N'.");

        //         DestroyDynamicObject(CrateData[id][crateObject]);
        //         DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);

        //         SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
        //         CrateData[id][crateObject] = INVALID_STREAMER_ID;

        //         return 1;
        //     }
        // }

        // if(PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
        // {
        //     ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
        //     ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

        //     Crate_Drop(playerid, 1.5);
        //     SendServerMessage(playerid, "You have dropped a "YELLOW"crate!");

        //     SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        //     return 1;
        // }
    }
    
    if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        static
            string[320];

        /*for (new i = 0; i != MAX_BACKPACKS; i ++) if(BackpackData[i][backpackExists] && !BackpackData[i][backpackPlayer] && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
            return Backpack_Items(playerid, i);
        }*/
        // if(PlayerData[playerid][pCarryCrate] != -1)
        // {
        //     for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
        //     {
        //         if(GetVehicleCrates(i) >= GetMaxCrates(i))
        //             return SendErrorMessage(playerid, "This vehicle cannot hold anymore crates (limit: %d).", GetMaxCrates(i));

        //         CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
        //         SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

        //         RemovePlayerAttachedObject(playerid, JOB_SLOT);
        //         SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has loaded a crate into the %s.", ReturnName(playerid, 0, 1), GetVehicleNameByVehicle(i));

        //         PlayerData[playerid][pCarryCrate] = -1;
        //         ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
        //         break;
        //     }
        // }
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
        {
            new
                count = 0,
                id = -1;

            if((id = Item_Nearest(playerid)) != -1)
            {
                string = "";

                for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if(count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
                    NearestItems[playerid][count++] = i;

                    strcat(string, sprintf("%s - (%d)", DroppedItems[i][droppedItem], DroppedItems[i][droppedQuantity]));
                    strcat(string, "\n");
                }
                if(count == 1)
                {
                    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], DroppedItems[id][droppedItem], true)) {
                        if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+DroppedItems[id][droppedQuantity]) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], g_aInventoryItems[i][e_InventoryItem]);
                    }

                    if(DroppedItems[id][droppedWeaponId] != 0)
                    {
                        // SendServerMessage(playerid, "Can't get this weapon for some reason, only scripter can pickup this.");

                        if((PlayerData[playerid][pScore] < 3 && !PlayerData[playerid][pStory]) || !PlayerData[playerid][pStory])
                            return SendErrorMessage(playerid, "You must level 3 and active character story to pickup this weapon.");

                        if(PlayerHasWeaponInSlot(playerid, DroppedItems[id][droppedWeaponId]))
                            return SendErrorMessage(playerid, "You have weapon on that slot!.");

                        GivePlayerWeaponEx(playerid, DroppedItems[id][droppedWeaponId], DroppedItems[id][droppedAmmo], DroppedItems[id][droppedDurability]);

                        cmd_ame(playerid, sprintf("picked up a %s", ReturnWeaponName(DroppedItems[id][droppedWeaponId])));
                        Item_Delete(id);
                        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
                    } else {
                        if(PickupItem(playerid, id))
                        {
                            ShowPlayerFooter(playerid, sprintf("~g~%s~w~ added to inventory!", DroppedItems[id][droppedItem]), 3000, 1);
                            cmd_ame(playerid, sprintf("picked up a \"%s\"", DroppedItems[id][droppedItem]));
                            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
                            Log_Write("logs/droppick.txt", "[%s] %s has picked up a \"%s\".", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
                        }
                        else SendErrorMessage(playerid, "You don't have any room in your inventory.");
                    }
                }
                else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Pickup Items", string, "Pickup", "Cancel");
            }
        }
    }
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(IsPlayerNPC(playerid))
        return 1;

    if(PlayerData[playerid][pWorkLocation])
    {
        SetVehicleToRespawn(vehicleid);
        PlayerData[playerid][pWorkLocation] = 0;
        GameTextForPlayer(playerid, "~w~You've leave from vehicle!", 3000, 4);
        DisablePlayerRaceCheckpoint(playerid);
    }
    if(PlayerData[playerid][pJobDuty] && (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI))
    {
        foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
            LeaveTaxi(i, playerid);
        }
        SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pJobDuty] = false;
        PlayerData[playerid][pSalary] = 0;
        Taxi_GUI(playerid, false);
        SendCustomMessage(playerid, "TAXI","You are no longer on taxi duty!");
        stop PlayerData[playerid][pJobDutyTime];
    }
    if(PlayerData[playerid][pJobDuty] && (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC))
    {
        if (!IsPlayerInDynamicArea(playerid, zones[0]) && !IsPlayerInDynamicArea(playerid, zones[1])) {
            SetPlayerColor(playerid, DEFAULT_COLOR);

            PlayerData[playerid][pJobDuty] = false;
            PlayerData[playerid][pSalary] = 0;
            SendCustomMessage(playerid, "MECHANIC","You are no longer on mechanic duty!");
            stop PlayerData[playerid][pJobDutyTime];
        }
    }
    if(PlayerData[playerid][pDrivingTest])
    {
        SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
        Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Confirm Test Leave", "Perhatian: anda yakin ingin menggagalkan test ini?", "Ya", "Tidak");
    }
    if(PlayerData[playerid][pUnloader])
    {
        CoreVehicles[vehicleid][vehLoadType] = 0;
        DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

        CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
        DisablePlayerCheckpoint(playerid);
        SetUnloaderDelay(playerid, 1800);
        new bonus = RandomEx(25,100);
        AddPlayerSalary(playerid, (PlayerData[playerid][pUnloader]*20)+bonus, "Cargo Unloader Sidejob + Bonus");
        PlayerData[playerid][pUnloader] = 0;
        SendCustomMessage(playerid, "Cargo Unloader", "Kamu turun dari kendaraan dan pekerjaanmu selesai.");
        if (IsForkliftVehicle(vehicleid)) SetVehicleToRespawn(vehicleid);
    }
    if(Seatbelt{playerid} == 1)
    {
        Seatbelt{playerid} = 0;
        SendClientMessage(playerid, COLOR_GREEN, "You have taken off your seatbelt");
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    if(Helmet[playerid] == 1)
    {
        Helmet[playerid] = 0;
        SendClientMessage(playerid, COLOR_GREEN, "You have taken off your helmet");
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    for (new i; i != MAX_DEALER; i++) if (DealershipData[i][dExists] && (pickupid == DealershipData[i][dPickup]))
    {
        ShowPlayerFooter(playerid, sprintf("~n~~b~~h~%s~n~~g~~h~Stock: ~y~%d~n~~g~~h~Status: %s~n~~g~~h~type /buycar to buy", DealershipData[i][dName], DealershipData[i][dStock], (DealershipData[i][dLock] == 1) ? ("~r~~h~Close") : ("~g~~h~Open")), 1000);
    }
    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerEnterDynamicArea]: Player ID: %d, Area ID: %d", playerid, areaid);
    #endif

    if(areaid == JailArea || areaid == NSArea)   {
        SendServerMessage(playerid, "You've entered OOC zone.");
    }
    
    if(areaid == production && startProduce[playerid] && GetPVarInt(playerid, "lagiedit") == 0)
	{
		ShowPlayerFooter(playerid, "Posisikan furniture pada area kerja");

		PlayerEditPoint(playerid, 1489.54, 1789.14, 10.90, 0.0, 0.0, 0.0, "editLokasiFurn", produceObject[playerid]);
		SetPVarInt(playerid, "lagiedit", 1);
	}
    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerLeaveDynamicArea]: Player ID: %d, Area ID: %d", playerid, areaid);
    #endif

    for (new zone = 0; zone < MAX_ZONES; zone++) if(areaid == zones[zone]) {
        if((GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) && PlayerData[playerid][pJobDuty]) {
            if (IsPlayerInAnyVehicle(playerid)) {
                new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

                if (modelid == 525) continue;
                else return cmd_jobduty(playerid, "\1");
            } else return cmd_jobduty(playerid, "\1");
        }
    }
    if(areaid == JailArea || areaid == NSArea)   {
        SendServerMessage(playerid, "You've leave from OOC zone.");
    }
    if(areaid == SAMDArea && PlayerData[playerid][pStartSurgey])
    {
        PlayerData[playerid][pStartSurgey] = 0;
        KillTimer(PlayerData[playerid][pSurgeryTimer]);
        SendServerMessage(GetPVarInt(playerid, "SurgeryID"), "%s gagal dalam operasinya.", ReturnName(playerid, 0));
        SendServerMessage(playerid, "Operasi gagal dikarenakan anda berpindah tempat.");
    }
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    // SendClientMessageEx(playerid,COLOR_WHITE, "Kamu masuk kendaraan bosque");
    new Float:freeze[3];
    
    PlayerData[playerid][pLastCar] = vehicleid;

    GetPlayerPos(playerid, posArr{freeze});

    if(IsPlayerNPC(playerid))
        return 1;
        
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
        ClearAnimations(playerid, 1);
        return 0;
    }
    if(!ispassenger)
    {
        // if (IsSweeperVehicle(vehicleid) || IsBusVehicle(vehicleid) || IsForkliftVehicle(vehicleid) || IsVehicleTrashmaster(vehicleid)) {
        //     if (GetVehicleDriver(vehicleid) != INVALID_PLAYER_ID) {
        //         TogglePlayerControllable(playerid, 0);
        //         PlayerData[playerid][pFreeze] = 1;
        //         PlayerData[playerid][pFreezeTimer] = defer SetPlayerToUnfreeze[3000](playerid);
        //     }
        // }

        new ids = Vehicle_GetID(vehicleid);
        //SendClientMessageEx(playerid,COLOR_WHITE, "Your vehicle ID: %d, your vehicle fuel: %f", VehicleData[ids][cID] ,CoreVehicles[VehicleData[ids][cID]][vehFuel]);
        if(ids != -1) 
        {
            if(Iter_Contains(DynamicVehicles, ids))
            {
                if(VehicleData[ids][cFaction])
                {
                    if(VehicleData[ids][cFaction] != GetFactionSQLID(playerid)) {
                        new Float:x, Float:y, Float:z;

                        GetPlayerPos(playerid, x, y, z);
                        SetPlayerPos(playerid, x, y, z);

                        ShowPlayerFooter(playerid, "~r~~h~Faction vehicle~n~~w~You're not member of this faction.");
                    }
                }

                if(VehicleData[ids][cJob])
                {
                    if(VehicleData[ids][cJob] != GetPlayerJob(playerid, 0) && VehicleData[ids][cJob] != GetPlayerJob(playerid, 1)) {
                        new Float:x, Float:y, Float:z;

                        GetPlayerPos(playerid, x, y, z);
                        SetPlayerPos(playerid, x, y, z);

                        ShowPlayerFooter(playerid, "~r~~h~Job vehicle~n~~w~You're not work in this job.");
                    }
                }

                if(VehicleData[ids][cWorkshop])
                {
                    new ws = GetWorkshopByID(VehicleData[ids][cWorkshop]);
                    if(!Workshop_IsOwner(playerid, ws) && !Workshop_Employe(playerid, ws)) {
                        new Float:x, Float:y, Float:z;

                        GetPlayerPos(playerid, x, y, z);
                        SetPlayerPos(playerid, x, y, z);

                        ShowPlayerFooter(playerid, "~r~~h~Workshop vehicle~n~~w~You're not employee or owner of this workshop.");
                    }
                }

                if(VehicleData[ids][cBiz])
                {
                    new bizid = GetBusinessByID(VehicleData[ids][cBiz]);
                    if(!Business_IsOwner(playerid, bizid) && !Business_IsEmployee(playerid, bizid)) {
                        new Float:x, Float:y, Float:z;

                        GetPlayerPos(playerid, x, y, z);
                        SetPlayerPos(playerid, x, y, z);

                        ShowPlayerFooter(playerid, "~r~~h~Business vehicle~n~~w~You're not employee or owner of this business.");
                    }
                }
            }
        } else {
            if (!CoreVehicles[vehicleid][vehTemporary]) {
                if (GetVehicleDriver(vehicleid) != INVALID_PLAYER_ID) {
                    new Float:x, Float:y, Float:z;
                    GetPlayerPos(playerid, x, y, z);
                    SetPlayerPos(playerid, x, y, z+3);
                    ShowPlayerFooter(playerid, "~r~~h~Sidejob vehicle~n~~w~Please avoid car jacking.");
                }
            }
        }
    }
    return 1;
}

// public OnPlayerStealVehicle(playerid, targetid, vehicleid) {
//     new id = -1;
//     if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cOwner]) {
//         if (VehicleData[id][cAlarm]) {
//             printf("%d", targetid);
//             SendClientMessageEx(targetid, X11_RED, "VEHICLE: "YELLOW"Your "CYAN"%s "YELLOW"has been stolen by "RED"%s", GetVehicleNameByVehicle(VehicleData[id][cVehicle]), ReturnName(playerid, 1, 1));
//             SetVehicleParams(VehicleData[id][cVehicle], VEHICLE_PARAMS_ALARM, VEHICLE_PARAMS_ON);
//         }
//     }
//     return 1;
// }

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(PlayerData[playerid][pDrivingTest])
    {
        PlayerData[playerid][pTestStage]++;

        if(PlayerData[playerid][pTestStage] == sizeof(g_arrDrivingCheckpoints)) 
        {
            if(ReturnVehicleHealth(GetPlayerVehicleID(playerid)) < 950.0) SendErrorMessage(playerid, "You have failed the driving test - the vehicle was damaged!");
            else
            {
                GiveMoney(playerid, -75);
                ShowPlayerFooter(playerid, "You've been charged ~r~$75~w~ for the test.");
                PlayerData[playerid][pDrivingLicense] = 1;
                PlayerData[playerid][pDrivingLicenseExpired] = (gettime()+((24*3600)*30));
                SendServerMessage(playerid, "You have passed the driving test and received your licenses "YELLOW"(/licenses and /showlicenses).");
            }
            CancelDrivingTest(playerid);
        }
        else if(PlayerData[playerid][pTestStage] == sizeof(g_arrDrivingCheckpoints)-1) {            
            SetPlayerRaceCheckpoint(playerid, 1, 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 
                3
            );
        }
        else {
            SetPlayerRaceCheckpoint(playerid, 0, 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]+1][0], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]+1][1], 
                g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]+1][2], 
                3
            );
        }
        return 1;
    }

    if(GetPVarInt(playerid, "DeliveryWood"))
    {
        new bonus = RandomEx(10,40);
        AddPlayerSalary(playerid, ((CoreVehicles[GetPlayerVehicleID(playerid)][vehWood]*100)+bonus), "Delivery Wood + Bonus");
        SetPVarInt(playerid, "DeliveryWood", 0);
        SendServerMessage(playerid, "You have receive %s for %d wood's.", FormatNumber((CoreVehicles[GetPlayerVehicleID(playerid)][vehWood]*100)+bonus), CoreVehicles[GetPlayerVehicleID(playerid)][vehWood]);
        DisablePlayerRaceCheckpoint(playerid);

        PlayerData[playerid][pWoodDelay] = 1800;
        PlayerData[playerid][pDelivery] = -1;

        CoreVehicles[GetPlayerVehicleID(playerid)][vehWood] = 0;

        for(new i; i < 5; i++) {
            if(IsValidDynamicObject(CoreVehicles[GetPlayerVehicleID(playerid)][vehWoodObject][i]))
            {
                DestroyDynamicObject(CoreVehicles[GetPlayerVehicleID(playerid)][vehWoodObject][i]);
            }
            CoreVehicles[GetPlayerVehicleID(playerid)][vehWoodObject][i] = INVALID_STREAMER_ID;
        }
    }
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
/*    if(TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
    {
        new vehicleid = GetPlayerVehicleID(playerid);

        if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You're not in a vehicle");
        if(!IsLoadableVehicle(vehicleid)) return SendErrorMessage(playerid, "You're not in a delivery vehicle.");

        new string[180];

        format(string, sizeof(string), "You have earned $%d from the courier mission!", TruckingCheck[playerid]);
        GiveMoney(playerid, TruckingCheck[playerid]);
        TruckingCheck[playerid] = 0;
        PlayerData[playerid][pDelayTruck] = 5;
        SendClientMessageEx(playerid, X11_OLIVE_DRAB_1, string);
        DisablePlayerCheckpoint(playerid);
    }*/
        
    if(PlayerData[playerid][pCP])
    {
        DisablePlayerCheckpoint(playerid);
        PlayerData[playerid][pCP] = 0;
    }
    else
    {
        new
            vehicleid = GetPlayerVehicleID(playerid);

        if(PlayerData[playerid][pMining] && PlayerData[playerid][pMinedRock])
        {
            if (++PlayerData[playerid][pMiner] >= 10) {
                SetMinerDelay(playerid, 1500);
                PlayerData[playerid][pMinedRock] = 0;
                PlayerData[playerid][pMineCount] = 0;
                PlayerData[playerid][pMining] = false;

                new bonus = RandomEx(25,100);
                AddPlayerSalary(playerid, (PlayerData[playerid][pMiner]*30)+bonus, "Miner Sidejob + Bonus");

                DisablePlayerCheckpoint(playerid);
                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                SendCustomMessage(playerid, "MINER", "Pekerjaan kamu telah selesai.");
            } else {
                Cargo_PlusStock(0, 1);
                SendServerMessage(playerid, "You have send the rock.");

                PlayerData[playerid][pMinedRock] = 0;
                PlayerData[playerid][pMineCount] = 0;

                DisablePlayerCheckpoint(playerid);
                RemovePlayerAttachedObject(playerid, JOB_SLOT);

                SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]-2);
            }
        }
        else if(IsForkliftVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoadType] == 8)
        {
            if (++PlayerData[playerid][pUnloader] >= 10) {
                new bonus = RandomEx(25,100);
                SetUnloaderDelay(playerid, 1800);
                CoreVehicles[vehicleid][vehLoadType] = 0;
                DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);
                AddPlayerSalary(playerid, (PlayerData[playerid][pUnloader]*20)+bonus, "Cargo Unloader Sidejob + Bonus");

                CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
                DisablePlayerCheckpoint(playerid);
                PlayerData[playerid][pUnloader] = 0;
                SetVehicleToRespawn(vehicleid);
                SendCustomMessage(playerid, "Cargo Unloader", "Pekerjaan kamu telah selesai.");
            } else {
                CoreVehicles[vehicleid][vehLoadType] = 0;
                DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

                CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
                DisablePlayerCheckpoint(playerid);
                SendServerMessage(playerid, "You have unloaded a crate.");
                Cargo_PlusStock(4, 1);
            }
        }
        else if(PlayerData[playerid][pSorting] != -1)
        {
            if (++PlayerData[playerid][pSorter] >= 20) {
                SetSorterDelay(playerid, 900);
                PlayerData[playerid][pSorting] = -1;
                new bonus = RandomEx(25,100);
                AddPlayerSalary(playerid, (PlayerData[playerid][pSorter]*10)+bonus, "Package Sorter Sidejob + Bonus");
                PlayerData[playerid][pSorter] = 0;

                if(PlayerData[playerid][pSortCrate] != 0)
                {
                    PlayerData[playerid][pSortCrate] = 0;

                    RemovePlayerAttachedObject(playerid, JOB_SLOT);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                }
                DisablePlayerCheckpoint(playerid);
                SendCustomMessage(playerid, "Package Sorter", "Pekerjaan kamu telah selesai.");
            } else {
                if(PlayerData[playerid][pSortCrate])
                {
                    PlayerData[playerid][pSortCrate] = 0;

                    RemovePlayerAttachedObject(playerid, JOB_SLOT);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

                    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
                    SetPlayerCheckpoint(playerid, -262.44, -2183.41, 28.95, 1.0);

                    Cargo_PlusStock(2, 3);
                    Cargo_PlusStock(5, 3);
                }
                else
                {
                    SetPlayerAttachedObject(playerid, JOB_SLOT, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
                    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

                    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
                    SetPlayerCheckpoint(playerid, -256.60, -2191.21, 28.99, 1.0);

                    PlayerData[playerid][pSortCrate] = 1;
                    SendCustomMessage(playerid, "SORTER", "Deliver the package to the "RED"marker.");
                }
            }
        }
    }
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid))
        return 1; 

    new vehicleid = GetPlayerVehicleID(playerid);

    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
    {
        Player_ToggleAntiAmmoHack(playerid, true);

        new id;

        if(PlayerData[playerid][pTrashmasterJob])
        {
            if(IsVehicleTrashmaster(GetPlayerLastVehicle(playerid)))
            {
                vehicleid = GetPlayerLastVehicle(playerid);

                CoreVehicles[vehicleid][vehTrash] = 0;
                CoreVehicles[vehicleid][vehFuel] = 0.0;
                SetVehicleToRespawn(vehicleid);

                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_trash][0]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_trash][1]);

                DisablePlayerCheckpoint(playerid);
                HidePlayerProgressBar(playerid, PlayerData[playerid][trash]);

                for(new i; i < MAX_GARBAGE_BINS; i++) if(GarbageData[i][garbageExists]) {
                    RemovePlayerMapIcon(playerid, i);
                }
                PlayerData[playerid][pWork] = 600;
                PlayerData[playerid][pTrashmasterJob] = 0;
                SendClientMessageEx(playerid, X11_LIGHTBLUE, "TRASHMASTER: "WHITE"Anda gagal dalam melakukan pekerjaan ini dikarenakan turun dari kendaraan.");
            }
        }

        if(PlayerData[playerid][pUnloader])
        {
            if (IsForkliftVehicle(GetPlayerLastVehicle(playerid))) {
                vehicleid = GetPlayerLastVehicle(playerid);
                CoreVehicles[vehicleid][vehLoadType] = 0;
                DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

                CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
                DisablePlayerCheckpoint(playerid);
                SetUnloaderDelay(playerid, 1800);
                new bonus = RandomEx(25,100);
                AddPlayerSalary(playerid, (PlayerData[playerid][pUnloader]*20)+bonus, "Cargo Unloader Sidejob + Bonus");
                PlayerData[playerid][pUnloader] = 0;
                SendCustomMessage(playerid, "Cargo Unloader", "Kamu turun dari kendaraan dan pekerjaanmu selesai.");
                SetVehicleToRespawn(vehicleid);
            }
        }

        if (GetPlayerJob(playerid, 0) == JOB_SMUGGLER || GetPlayerJob(playerid, 1) == JOB_SMUGGLER) {
            if (GetPVarInt(playerid, "sedangNganter")) {
                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerAttachedObject(playerid, JOB_SLOT, 1279, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
            }
        }

        if((id = Vehicle_GetID(vehicleid)) != -1)
        {
            if(Vehicle_IsOwner(playerid, id))
                Vehicle_GetStatus(id);

            if(VehicleData[id][cRent] && VehicleData[id][cRentOwned])
                Vehicle_GetStatus(id);
        }

        if(PlayerData[playerid][pCustomPlate])
        {
            PlayerData[playerid][pCustomPlate] = 0;
            PlayerData[playerid][pPlateID] = INVALID_PLAYER_ID;
            PlayerData[playerid][pPlate] = EOS;
        }

        if(PlayerData[playerid][pJobDuty] && (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI))
        {
            foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
                LeaveTaxi(i, playerid);
            }
            SetPlayerColor(playerid, DEFAULT_COLOR);

            PlayerData[playerid][pJobDuty] = false;
            PlayerData[playerid][pSalary] = 0;
            SendCustomMessage(playerid, "TAXI","You are no longer on taxi duty!");
            stop PlayerData[playerid][pJobDutyTime];
        }

        if(PlayerData[playerid][pJobDuty] && (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC))
        {
            if (!IsPlayerInDynamicArea(playerid, zones[0]) && !IsPlayerInDynamicArea(playerid, zones[1])) {
                SetPlayerColor(playerid, DEFAULT_COLOR);

                PlayerData[playerid][pJobDuty] = false;
                PlayerData[playerid][pSalary] = 0;
                SendCustomMessage(playerid, "MECHANIC","You are no longer on mechanic duty!");
                stop PlayerData[playerid][pJobDutyTime];
            }
        }

        if(GetPVarInt(playerid, "DeliveryWood")) {
            SetPVarInt(playerid, "DeliveryWood", 0);
            DisablePlayerRaceCheckpoint(playerid);
            SendServerMessage(playerid, "Anda turun dari kendaraan DFT, Checkpoint otomatis hilang, gunakan /deliverywood untuk menampilkan kembali.");
        }
    }
    if(newstate == PLAYER_STATE_DRIVER)
    {
        Player_ToggleAntiAmmoHack(playerid, false);
        GetVehiclePos(GetPlayerVehicleID(playerid), CoreVehicles[GetPlayerVehicleID(playerid)][vehLastCoords][0], CoreVehicles[GetPlayerVehicleID(playerid)][vehLastCoords][1], CoreVehicles[GetPlayerVehicleID(playerid)][vehLastCoords][2]);

        PlayerData[playerid][pLastCar] = vehicleid;

        if(PlayerData[playerid][pDrivingTest] && GetPlayerVehicleID(playerid) == PlayerData[playerid][pTestCar])
        {
            SetVehicleParamsEx(PlayerData[playerid][pTestCar], 0, 0, 0, 0, 0, 0, 0);

            SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], (2000 + playerid));
            SetPlayerVirtualWorld(playerid, (2000 + playerid));

            SetPlayerRaceCheckpoint(playerid, 0, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]+1][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]+1][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]+1][2], 3);
        }

        if(IsVehicleTrashmaster(GetPlayerVehicleID(playerid)))
        {
            if(!PlayerData[playerid][pWork])
            {
                SetCameraBehindPlayer(playerid);
                Dialog_Show(playerid, StartTrashmaster, DIALOG_STYLE_MSGBOX, "Trashman", ""WHITE"Pekerjaan ini bertujuan untuk membersihkan seluruh kota Los Santos.\nAnda bisa temukan \n\
                    tong sampah yang tersebar di kota Los Santos ini. Ikuti petunjuk radar yang di sediakan.\n Itu merupahan lokasi yang harus anda tuju.\n\
                    \n\n"COL_LIGHTRED"WARNING: "WHITE"Jangan turun dari kendaraan saat bekerja, atau anda akan gagal dalam pekerjaan ini.", "Mulai", "Turun"
                );
            }
            else
            {
                RemovePlayerFromVehicle(playerid);
                SendServerMessage(playerid, "Anda masih menunggu waktu %d menit untuk melakukan pekerjaan ini lagi.", PlayerData[playerid][pWork]/60);
            }
        }

        if (GetPlayerJob(playerid, 0) == JOB_SMUGGLER || GetPlayerJob(playerid, 1) == JOB_SMUGGLER) {
            if (GetPVarInt(playerid, "sedangNganter")) {
                RemovePlayerAttachedObject(playerid, JOB_SLOT);
            }
        }

        if (IsForkliftVehicle(GetPlayerVehicleID(playerid))) {
            if(PlayerData[playerid][pMaskOn])
        		return SendErrorMessage(playerid, "Disable your mask first."), RemovePlayerFromVehicle(playerid);
        }

        /*
        static id = -1;
        if((id = Vehicle_GetID(vehicleid)) != -1 && (VehicleData[id][cRent] == 1))
        {
            if(!VehicleData[id][cRentOwned])
            {
                if(Rental_GetCount(playerid) < 1)
                {
                    SetCameraBehindPlayer(playerid);
                    Dialog_Show(playerid, RentConfirm, DIALOG_STYLE_INPUT, "Sewa Kendaraan", WHITE"Kendaraan: "CYAN"%s\n"WHITE"Harga: "GREEN"%s/jam\n\n"WHITE"Masukkan waktu sewa kendaraan yang akan anda gunakan:", "Selanjutnya", "Tutup", GetVehicleNameByVehicle(VehicleData[id][cVehicle]), FormatNumber(VehicleData[id][cRentPrice]));
                }
                else
                {
                    RemovePlayerFromVehicle(playerid);
                    SendErrorMessage(playerid, "Hanya dapat menyewa satu kendaraan saja!.");
                }
            }
        }
        */
    }
    if(newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
    {
        if (IsPlayerInEvent(playerid))
            return 1;

        for (new i = 0; i < 16; i ++) {
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_speedometer][i]);
            HidePlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);
        }
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_supply]);
        PlayerData[playerid][pHealth] = 100.0;

        ResetPlayer(playerid);

        PlayerData[playerid][pKilled] = 1;

        if(!PlayerData[playerid][pInjured] && !IsPlayerInEvent(playerid))
        {
            PlayerData[playerid][pInjured] = 1;

            PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
            PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

            GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
            GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

            if(PlayerData[playerid][pJobDuty])
                return cmd_jobduty(playerid, "\1");

            if(PlayerData[playerid][pSpectator] != INVALID_PLAYER_ID)
                return cmd_spectate(playerid, "off");
        }
        else
        {
            TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
            PlayerData[playerid][pInjured] = 0;
            PlayerData[playerid][pHospital] = 1;
        }
        if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
        {
            SendClientMessage(PlayerData[playerid][pCallLine], X11_YELLOW_2, "[PHONE]:"WHITE" The line went dead...");
            CancelCall(playerid);
        }
        // if(PlayerData[playerid][pCarryCrate] != -1)
        // {
        //     Crate_Drop(playerid);
        // }
    }
    else if(oldstate == PLAYER_STATE_DRIVER)
    {
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
            return RemoveFromVehicle(playerid);

        ToggleSpeedometer(playerid, false);
        Storage_GUI(playerid, false);
        HidePlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_supply]);
    }
    else if(newstate == PLAYER_STATE_DRIVER)
    {
        SetPlayerArmedWeapon(playerid, 0);

        new  ids = Vehicle_GetID(vehicleid);

        if(Iter_Contains(DynamicVehicles, ids))
        {
            if((VehicleData[ids][cFaction]) && VehicleData[ids][cFaction] != GetFactionSQLID(playerid))
                ShowPlayerFooter(playerid, "~r~~h~Faction vehicle~n~~w~You're not member of this faction."), RemovePlayerFromVehicle(playerid);

            if((VehicleData[ids][cJob]) && VehicleData[ids][cJob] != GetPlayerJob(playerid, 0) && VehicleData[ids][cJob] != GetPlayerJob(playerid, 1))
                ShowPlayerFooter(playerid, "~r~~h~Job vehicle~n~~w~You're not work on this job."), RemovePlayerFromVehicle(playerid);

            if (VehicleData[ids][cFaction] && (VehicleData[ids][cFaction] == GetFactionSQLID(playerid))) {
                if (PlayerData[playerid][pOnDuty]) {
                    new callsign[24], plate[24];
                    GetVehicleNumberPlate(VehicleData[ids][cVehicle], plate);
                    format(callsign,sizeof(callsign),"%s",plate);
                    if (strcmp(PlayerData[playerid][pUnit], callsign, true)) return cmd_setunit(playerid, plate);
                }
            }
            
            new vehname[32];

            GetVehicleNameByVehicle(VehicleData[ids][cVehicle], vehname);
            if(Vehicle_IsOwner(playerid, ids))
                SendCustomMessage(playerid, "VEHICLE", "Anda pemilik kendaraan "COL_LIGHTBLUE"%s "WHITE"ini.", vehname);

            if(VehicleData[ids][cRentOwned] == PlayerData[playerid][pID]) {
                static
                    hours, minutes, seconds;

                GetElapsedTime(VehicleData[ids][cRentTime], hours, minutes, seconds);
                SendCustomMessage(playerid, "VEHICLE", "Anda penyewa "CYAN"%s "WHITE"ini. Sisa waktu: "GREEN"%02d:%02d:%02d", vehname, hours, minutes, seconds);
            }

            if(VehicleData[ids][cLumber]) {
                Storage_GUI(playerid, true, "Lumber Storage", sprintf("%d woods", VehicleData[ids][cLumber]));
            } else if (VehicleData[ids][cFood]) {
                Storage_GUI(playerid, true, "Food Storage", sprintf("%d stock", VehicleData[ids][cFood]));
            } else if (VehicleData[ids][cPlant]) {
                Storage_GUI(playerid, true, "Plant Storage", sprintf("%s~n~%d gram(s)", GetPlantName(ids), VehicleData[ids][cPlant]));
            } else if (VehicleData[ids][cComponent]) {
                Storage_GUI(playerid, true, "Component Storage", sprintf("%d unit(s)", VehicleData[ids][cComponent]));
            }
        }
/*        if(PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
        {
            if(PlayerData[playerid][pLoading])
            {
                DisablePlayerCheckpoint(playerid);
                PlayerData[playerid][pLoading] = 0;
            }
            static
                string[64];

            switch (CoreVehicles[vehicleid][vehLoadType])
            {
                case 1: format(string, sizeof(string), "~b~Loaded:~w~ Retail Supplies~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 2: format(string, sizeof(string), "~b~Loaded:~w~ Ammunition~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 3: format(string, sizeof(string), "~b~Loaded:~w~ Clothing~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 4: format(string, sizeof(string), "~b~Loaded:~w~ Food Supplies~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 5: format(string, sizeof(string), "~b~Loaded:~w~ Gasoline~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 6: format(string, sizeof(string), "~b~Loaded:~w~ Furniture~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 7: format(string, sizeof(string), "~b~Loaded:~w~ Electronic~n~~b~Loaded Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
            }
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_supply]);
            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_supply], string);
        }*/
/*        if(IsVehicleImpounded(vehicleid))
        {
            RemovePlayerFromVehicle(playerid);
            SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");
        }
*/      if(!IsEngineVehicle(vehicleid))
        {
            SetEngineStatus(vehicleid, true);
        }
        else
        {
            if(!GetEngineStatus(vehicleid) && !IsSweeperVehicle(vehicleid) && !IsBusVehicle(vehicleid))
            {
                if(CoreVehicles[vehicleid][vehFuel] < 1.0) ShowPlayerFooter(playerid, "There is no ~r~fuel~w~ in this vehicle.", 3000, 1);
                else if(ReturnVehicleHealth(vehicleid) <= 300) ShowPlayerFooter(playerid, "This vehicle is ~r~totalled~w~ and needs repairing.", 3000, 1);
                else ShowPlayerFooter(playerid, "Type ~r~/v engine~w~ to start the engine.");
            }
            if(IsDoorVehicle(vehicleid) && !PlayerData[playerid][pDrivingTest] && !PlayerData[playerid][pDrivingLicenseExpired]) {
                SendClientMessageEx(playerid, X11_FOREST_GREEN, "WARNING:"WHITE" Anda tidak memiliki surat izin mengemudi (Driving License).");
            }
        }
        if(IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
        {
            ToggleSpeedometer(playerid, true);
            if (PlayerData[playerid][pHUD] == 1) ShowPlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);
        }
    }
    if((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
    {
        PlayerData[playerid][pPlayRadio] = 0;
        StopAudioStreamForPlayer(playerid);
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        Player_ToggleAntiAmmoHack(playerid, false);

        new ids = -1;
        PlayerData[playerid][pLastCar] = vehicleid;

        if(PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
        {
            PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
            StopAudioStreamForPlayer(playerid);
        }
        if(IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
        {
            static
                url[128];

            strunpack(url, CoreVehicles[vehicleid][vehURL]);

            StopAudioStreamForPlayer(playerid);
            if (!PlayerData[playerid][pTogBoombox]) PlayAudioStreamForPlayer(playerid, url);

            PlayerData[playerid][pPlayRadio] = 1;
        }
        foreach (new i : Player) if(PlayerData[i][pSpectator] == playerid) {
            PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
        }
        if(PlayerData[playerid][pInjured] == 1) {
            RemoveFromVehicle(playerid);
        }

        if (PlayerData[playerid][pAuto][2]) {
            if (IsABike(vehicleid) && Helmet[playerid] == 0) {
                Helmet[playerid] = 1;
                SetPlayerAttachedObject(playerid,JOB_SLOT , 18645, 2, 0.07, 0.017, 0, 88, 75, 0);
                SendClientMessage(playerid, COLOR_GREEN, "You have put on a bike helmet. This will supress the impact of a crash.");
                cmd_ame(playerid, "reaches for their helmet, and takes it off");
            }
        }

        if (PlayerData[playerid][pAuto][1]) {
            if (!IsABike(vehicleid) && Seatbelt{playerid} == 0) {
                Seatbelt{playerid} = 1;
                SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 7,0.000000, 0.100000, 0.350000, -35.224993, 45.215000, 1.500000, 5.000000, 1.500000, 1.500000);
                SendClientMessage(playerid, COLOR_GREEN, "You have put on your seatbelt. This will supress the impact of a crash.");
                cmd_ame(playerid, "reaches for their seatbelt, and takes it off");
            }
        }

        if ((ids = Vehicle_GetID(vehicleid)) != -1 && VehicleData[ids][cFaction] && (VehicleData[ids][cFaction] == GetFactionSQLID(playerid))) {
            if (PlayerData[playerid][pOnDuty]) {
                new callsign[24], plate[24];
                GetVehicleNumberPlate(vehicleid, plate);
                format(callsign,sizeof(callsign),"%s",plate);
                if (strcmp(PlayerData[playerid][pUnit], callsign, true)) return cmd_setunit(playerid, plate);
            }
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) {
        Player_ToggleAntiAmmoHack(playerid, true);
        if (PlayerData[playerid][pAuto][2]) {
            if (IsABike(vehicleid) && Helmet[playerid] == 1) {
                Helmet[playerid] = 0;
                SendClientMessage(playerid, COLOR_GREEN, "You have taken off your helmet. You will no longer be protected from crashes.");
                cmd_ame(playerid, "reaches for their helmet, and unbuckles it");
                if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
            }
        }

        if (PlayerData[playerid][pAuto][1]) {
            if (!IsABike(vehicleid) && Seatbelt{playerid} == 1) {
                Seatbelt{playerid} = 0;
                SendClientMessage(playerid, COLOR_GREEN, "You have taken off your seatbelt. You will no longer be protected from crashes.");
                cmd_ame(playerid, "reaches for their seatbelt, and unbuckles it");
                if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
            }
        }
    }
    if(newstate == PLAYER_STATE_PASSENGER)
    {
        switch (GetPlayerWeapon(playerid))
        {
            case 22, 25, 28..33:
                SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

            default:
                SetPlayerArmedWeapon(playerid, 0);
        }
    }
    else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
        foreach (new i : Player) if(PlayerData[i][pSpectator] == playerid) {
            PlayerSpectatePlayer(i, playerid);
        }
    }
    if(newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
    {
        if(GetMoney(playerid) < 2)
        {
            RemovePlayerFromVehicle(playerid);
            SendCustomMessage(playerid, "TAXI DRIVER", "Keluar dari taxi, uang yang anda miliki tidak mencukupi.");
            return 1;
        }
        new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

        PlayerData[playerid][pTaxiFee] = 2;
        PlayerData[playerid][pTaxiPlayer] = driverid;

        SendServerMessage(driverid, ""YELLOW"%s "WHITE"masuk sebagai penumpang.", ReturnName(playerid, 0));
        SendServerMessage(playerid, "Anda memasuki taxi milik "YELLOW"%s.", ReturnName(driverid, 0));
        GetPlayerPos(playerid, PlayerData[playerid][tPos][0], PlayerData[playerid][tPos][1], PlayerData[playerid][tPos][2]);
    }
    if(oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiFee] > 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
    {
        LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
    }
    return 1;
}

public OnPlayerUpdate(playerid)
{
    if(PlayerData[playerid][pKicked])
        return 0;

    new s_Keys, s_UpDown, s_LeftRight;    
    GetPlayerKeys( playerid, s_Keys, s_UpDown, s_LeftRight );

    if ( PlayerData[playerid][pFreeze] && ( s_Keys || s_UpDown || s_LeftRight ) )
        return 0;
    
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(GetPlayerVehicleID(playerid)))
    {
        new id = -1;
        new vehicleid = GetPlayerVehicleID(playerid);

        if((id = Speed_Nearest(playerid)) != -1 && GetVehicleSpeed(vehicleid, false) > SpeedData[id][speedLimit] && !PlayerData[playerid][pSpeedTime])
        {
            if(!IsACruiser(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid) && !IsAHelicopter(vehicleid))
            {
                new Float:x, Float:y, Float:z, direction[12], plate[24], vehname[32];
                PlayerData[playerid][pSpeedTime] = 5;

                GetPlayerPos(playerid, x, y, z);
                GetVehicleDirection(vehicleid, direction);
                GetVehicleNumberPlate(vehicleid, plate);
                GetVehicleNameByVehicle(vehicleid, vehname);
                SendSpeedCamMessageEx(FACTION_POLICE, X11_LIGHTBLUE, "SPEEDCAM: "CYAN"%s "LIGHTBLUE"["YELLOW"%s"LIGHTBLUE"] reached maximum speed cam.", vehname, plate);
                SendSpeedCamMessageEx(FACTION_POLICE, X11_LIGHTBLUE, "Speed: ["YELLOW"%.0f mph"LIGHTBLUE"] Max speed: ["YELLOW"%.0f mph"LIGHTBLUE"] Location: ["YELLOW"%s"LIGHTBLUE"] Heading: ["YELLOW"%s"LIGHTBLUE"]", GetVehicleSpeed(vehicleid, false), SpeedData[id][speedLimit], GetLocation(x, y, z), direction);

                Speed_UpdateSuspect(id, vehicleid);
            }
        }

        for (new i = 0; i != MAX_BARRICADES; i ++) if(BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
        {
            new tires[4];
            GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);

            if(tires[3] != 1111)
                UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 1111);
    
            break;
        }

        if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cBodyUpgrade]) {
            if(ReturnVehicleHealth(VehicleData[id][cVehicle]) >= 1200.0) {
                new tires = GetVehicleDamageStatusEx(VehicleData[id][cVehicle], VEHICLE_DAMAGE_TIRES);
                UpdateVehicleDamageStatus(VehicleData[id][cVehicle], 0, 0, 0, tires);
            }
        }
    }
    return 1;
}

static BuildingRemove(playerid)
{
    //construction
    // RemoveBuildingForPlayer(playerid, 5703, 998.156, -1220.819, 15.835, 0.250);
    // RemoveBuildingForPlayer(playerid, 5916, 998.156, -1220.819, 15.835, 0.250);
    // RemoveBuildingForPlayer(playerid, 1297, 973.523, -1225.979, 19.109, 0.250);
    // RemoveBuildingForPlayer(playerid, 1297, 993.523, -1215.920, 19.109, 0.250);
    // RemoveBuildingForPlayer(playerid, 1297, 1013.520, -1225.949, 19.109, 0.250);
    // RemoveBuildingForPlayer(playerid, 1297, 1024.010, -1215.670, 19.140, 0.250);
    // RemoveBuildingForPlayer(playerid, 1297, 1037.530, -1225.949, 19.109, 0.250);
    // RemoveBuildingForPlayer(playerid, 1297, 953.523, -1215.920, 19.109, 0.250);
    // RemoveBuildingForPlayer(playerid, 1283, 1043.079, -1220.140, 18.898, 0.250);
    // SAN-EXT
    // RemoveBuildingForPlayer(playerid, 6516, 717.687, -1357.280, 18.046, 0.250);
    // RemoveBuildingForPlayer(playerid, 1439, 732.726, -1341.770, 12.632, 0.250);
    // RemoveBuildingForPlayer(playerid, 1415, 732.851, -1332.900, 12.687, 0.250);
    //uncle map di marina
    RemoveBuildingForPlayer(playerid, 705, 774.046, -486.070, 14.632, 0.250);
    RemoveBuildingForPlayer(playerid, 1446, 799.179, -520.023, 16.070, 0.250);
    RemoveBuildingForPlayer(playerid, 1446, 803.882, -520.023, 16.070, 0.250);
    RemoveBuildingForPlayer(playerid, 780, 798.765, -517.953, 15.328, 0.250);
    RemoveBuildingForPlayer(playerid, 782, 801.554, -511.070, 15.648, 0.250);
    RemoveBuildingForPlayer(playerid, 1410, 778.875, -519.984, 16.000, 0.250);
    RemoveBuildingForPlayer(playerid, 1410, 774.210, -519.984, 16.039, 0.250);
    //lspd
    RemoveBuildingForPlayer(playerid, 3514, 1037.199, 1822.020, 13.992, 0.250);
    RemoveBuildingForPlayer(playerid, 3460, 1048.089, 1809.530, 13.765, 0.250);
    //bus station
    RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2608.0156, 17.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2571.2422, 17.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2535.4531, 17.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2524.0938, 16.4453, 0.25);
    RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2548.8125, 16.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 3746, 2568.4453, -2483.3906, 25.5156, 0.25);
    RemoveBuildingForPlayer(playerid, 3746, 2563.1563, -2563.5781, 25.5156, 0.25);
    RemoveBuildingForPlayer(playerid, 3746, 2531.7031, -2629.2266, 25.5156, 0.25);
    RemoveBuildingForPlayer(playerid, 5325, 2488.9922, -2509.2578, 18.5156, 0.25);
    RemoveBuildingForPlayer(playerid, 3620, 2531.7031, -2629.2266, 25.5156, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2489.3516, -2625.7109, 16.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2612.6563, 19.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2585.1797, 13.9063, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2585.2422, 13.9063, 0.25);
    RemoveBuildingForPlayer(playerid, 1635, 2511.8359, -2622.6172, 17.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2608.0156, 17.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2571.2422, 17.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2557.3359, 13.9063, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2557.3984, 13.9063, 0.25);
    RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2547.3203, 19.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3578, 2526.4297, -2561.3047, 13.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2548.8125, 16.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2535.4531, 17.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2524.0938, 16.4453, 0.25);
    RemoveBuildingForPlayer(playerid, 1306, 2533.3906, -2514.1094, 19.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3620, 2563.1563, -2563.5781, 25.5156, 0.25);
    RemoveBuildingForPlayer(playerid, 3620, 2568.4453, -2483.3906, 25.5156, 0.25);

    // SAFD HQ
    RemoveBuildingForPlayer(playerid, 1266, 591.726, -1508.929, 25.312, 0.250);
    RemoveBuildingForPlayer(playerid, 1260, 591.726, -1508.929, 25.304, 0.250);

    //dermaga prima
    // RemoveBuildingForPlayer(playerid, 1280, 150.664, -1835.359, 3.108, 0.250);
    // RemoveBuildingForPlayer(playerid, 1231, 154.664, -1839.430, 5.475, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 148.813, -1820.050, 3.539, 0.250);
    // RemoveBuildingForPlayer(playerid, 1280, 150.664, -1809.359, 3.085, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 148.813, -1799.938, 3.539, 0.250);
    // RemoveBuildingForPlayer(playerid, 1231, 154.546, -1799.640, 5.467, 0.250);
    // RemoveBuildingForPlayer(playerid, 1280, 159.335, -1794.588, 3.171, 0.250);
    // RemoveBuildingForPlayer(playerid, 1280, 150.664, -1784.338, 3.467, 0.250);
    // RemoveBuildingForPlayer(playerid, 16121, -125.514, 1904.188, 13.890, 0.250);
    // RemoveBuildingForPlayer(playerid, 16713, -125.514, 1904.188, 13.890, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 161.813, -1813.630, 3.553, 0.250);
    // RemoveBuildingForPlayer(playerid, 1280, 159.195, -1842.588, 3.140, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 161.656, -1854.078, 3.546, 0.250);
    // RemoveBuildingForPlayer(playerid, 1280, 150.664, -1870.310, 3.101, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 148.093, -1847.708, 3.546, 0.250);
    // RemoveBuildingForPlayer(playerid, 1231, 154.453, -1887.239, 5.484, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 148.093, -1887.280, 3.546, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 161.656, -1893.640, 3.546, 0.250);
    // RemoveBuildingForPlayer(playerid, 1280, 158.664, -1908.318, 3.171, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 161.570, -1921.310, 3.539, 0.250);
    // RemoveBuildingForPlayer(playerid, 1461, 147.945, -1927.729, 3.553, 0.250);

    //ASGH (BELAKANG)

    RemoveBuildingForPlayer(playerid, 5935, 1120.1563, -1303.4531, 18.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 5737, 1120.1563, -1303.4531, 18.5703, 0.25);

    //exteriorfd 2 bangunan besar di little mexico
    // RemoveBuildingForPlayer(playerid, 4019, 1777.839, -1773.910, 12.523, 0.250);
    // RemoveBuildingForPlayer(playerid, 4025, 1777.839, -1773.910, 12.523, 0.250);

    //Trashmaster job
    RemoveBuildingForPlayer(playerid, 3574, 2226.320, -2168.989, 15.101, 0.250);
    RemoveBuildingForPlayer(playerid, 3744, 2226.320, -2168.989, 15.101, 0.250);
    RemoveBuildingForPlayer(playerid, 3574, 2241.300, -2183.979, 15.101, 0.250);
    RemoveBuildingForPlayer(playerid, 3744, 2241.300, -2183.979, 15.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 2239.000, -2199.810, 16.351, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 2224.780, -2185.739, 16.351, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2208.870, -2171.320, 15.812, 0.250);

    //LS Police Department
    RemoveBuildingForPlayer(playerid, 1266, 1538.523, -1609.804, 19.843, 0.250);
    RemoveBuildingForPlayer(playerid, 1266, 1565.414, -1722.312, 25.039, 0.250);
    RemoveBuildingForPlayer(playerid, 4229, 1597.906, -1699.750, 30.210, 0.250);
    RemoveBuildingForPlayer(playerid, 4230, 1597.906, -1699.750, 30.210, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1357.515, -1732.937, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1513.234, -1732.921, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1545.765, -1731.671, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1260, 1565.414, -1722.312, 25.039, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.445, -1713.304, 14.429, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1541.453, -1709.640, 13.046, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.296, -1702.601, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.601, -1693.390, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.867, -1687.101, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 646, 1545.523, -1678.843, 14.000, 0.250);
    RemoveBuildingForPlayer(playerid, 646, 1545.562, -1672.218, 14.000, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.601, -1664.625, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.867, -1658.343, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 4192, 1591.695, -1674.851, 20.492, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.476, -1648.453, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1541.453, -1642.031, 13.046, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.742, -1638.914, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 1260, 1538.523, -1609.804, 19.843, 0.250);
    RemoveBuildingForPlayer(playerid, 1266, 1538.523, -1609.804, 19.843, 0.250);
    RemoveBuildingForPlayer(playerid, 1266, 1565.414, -1722.312, 25.039, 0.250);
    RemoveBuildingForPlayer(playerid, 4229, 1597.906, -1699.750, 30.210, 0.250);
    RemoveBuildingForPlayer(playerid, 4230, 1597.906, -1699.750, 30.210, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1357.515, -1732.937, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1513.234, -1732.921, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1545.765, -1731.671, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1260, 1565.414, -1722.312, 25.039, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.445, -1713.304, 14.429, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1541.453, -1709.640, 13.046, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.296, -1702.601, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.601, -1693.390, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.867, -1687.101, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 646, 1545.523, -1678.843, 14.000, 0.250);
    RemoveBuildingForPlayer(playerid, 646, 1545.562, -1672.218, 14.000, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.601, -1664.625, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1546.867, -1658.343, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 4192, 1591.695, -1674.851, 20.492, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.476, -1648.453, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1541.453, -1642.031, 13.046, 0.250);
    RemoveBuildingForPlayer(playerid, 647, 1541.742, -1638.914, 14.437, 0.250);
    RemoveBuildingForPlayer(playerid, 1260, 1538.523, -1609.804, 19.843, 0.250);

    // Gas pumps
    RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 6000.00);
    RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 914.7188, 11.2578, 6000.00);
    RemoveBuildingForPlayer(playerid, 1686, -1610.6172, -2721.0000, 47.9297, 6000.00);

    // Sprunk machines
    RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

    // For high apartment
    RemoveBuildingForPlayer(playerid, 2254, 1232.5859, -839.1250, 1085.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 2259, 1243.0781, -838.6875, 1084.8516, 0.25);
    RemoveBuildingForPlayer(playerid, 2256, 1232.6875, -835.2656, 1085.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 2257, 1248.0234, -831.2500, 1086.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 2255, 1254.2500, -838.6797, 1084.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 2779, 1274.7891, -838.6875, 1084.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 2258, 1266.8828, -825.9375, 1089.8750, 0.25);
    RemoveBuildingForPlayer(playerid, 2140, 1274.8125, -823.2109, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2140, 1274.8125, -821.9844, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2137, 1274.7969, -820.7031, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2137, 1274.7969, -819.7109, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2137, 1274.7969, -818.7266, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2137, 1274.7969, -817.7344, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2137, 1274.7969, -816.7500, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1280.2891, -819.2734, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1279.2969, -819.2734, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -816.3047, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -817.2891, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -818.2813, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2305, 1281.2656, -819.2734, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2137, 1276.3203, -815.3125, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2135, 1276.3125, -814.3203, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2135, 1276.3125, -813.3359, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2138, 1276.3203, -811.3516, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2138, 1276.3203, -812.3438, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -814.3203, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -815.3125, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -811.3516, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -812.3359, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2303, 1281.2734, -813.3281, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2138, 1276.3203, -810.3672, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2138, 1276.3203, -809.3750, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -810.3594, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1281.2656, -809.3672, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1277.2969, -808.3906, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2305, 1276.3203, -808.3906, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2139, 1278.2891, -808.3906, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2136, 1279.2813, -808.3828, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2305, 1281.2656, -808.3906, 1084.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 2778, 1283.5000, -838.6719, 1084.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 1739, 1282.8438, -814.9922, 1085.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1739, 1282.8438, -815.8984, 1085.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1739, 1282.8438, -817.1250, 1085.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1739, 1282.8438, -812.3359, 1085.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1739, 1282.8438, -813.7578, 1085.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1739, 1282.8438, -810.9531, 1085.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1713, 1290.0234, -828.6797, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1827, 1292.3516, -827.5859, 1084.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 1708, 1292.5859, -836.3672, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1708, 1292.5859, -837.7891, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 14461, 1294.2422, -832.7734, 1086.5625, 0.25);
    RemoveBuildingForPlayer(playerid, 1708, 1294.0234, -829.0859, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1708, 1293.9922, -826.1094, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 2230, 1296.0781, -838.6719, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 2230, 1296.0781, -835.1875, 1084.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 2225, 1296.1016, -836.8359, 1084.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 14460, 1263.2266, -801.7344, 1089.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 14473, 1263.2266, -801.7344, 1089.7500, 0.25);

    // All GYMs
    RemoveBuildingForPlayer(playerid, 2627, 758.3828, -65.5078, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 2631, 759.1797, -60.0625, 999.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 2629, 764.8672, -59.7109, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 2627, 759.6328, -48.1250, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 2629, 766.3047, -48.3047, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 767.1797, -3.2109, 1002.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 14778, 762.6719, 4.9063, 1003.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 14780, 760.8672, 11.1719, 1000.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 2630, 774.6250, -68.6406, 999.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 773.8672, -64.7188, 1002.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 773.3516, -61.5313, 1002.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 2629, 768.5391, -59.5547, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 773.3516, -59.2500, 1002.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 2630, 769.2422, -47.8984, 999.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 769.4609, -3.2109, 1002.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 2627, 773.4922, -2.6016, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 2629, 773.8984, 1.4531, 999.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 2631, 772.9922, 5.3828, 999.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 2630, 772.1719, 9.4141, 999.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 771.0625, 14.3750, 1002.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 768.7578, 14.3750, 1002.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1985, 776.1563, -64.7266, 1002.5938, 0.25);

    // lainnya
    RemoveBuildingForPlayer(playerid, 1412, 2405.3125, -2145.6250, 13.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2410.5859, -2145.5313, 13.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2415.8672, -2145.4375, 13.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2421.1406, -2145.3438, 13.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 3405, -764.6563, -117.8828, 67.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 3405, -752.4922, -114.0156, 68.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -811.0703, -124.5234, 63.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 13005, -763.9766, -121.6563, 67.5625, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -807.7422, -121.0234, 63.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -802.8516, -119.2031, 64.1328, 0.25);
    RemoveBuildingForPlayer(playerid, 3403, -764.6563, -117.8828, 67.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -798.0078, -117.3047, 64.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -793.0625, -115.3828, 64.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 3403, -752.4922, -114.0156, 68.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -783.2500, -111.6953, 64.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -788.1406, -113.5234, 64.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -747.5625, -100.4219, 66.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -742.9219, -97.9375, 67.3672, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -738.3125, -95.4922, 67.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -714.7656, -96.0391, 69.2734, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -733.6328, -93.0938, 68.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -718.2656, -92.8203, 69.0859, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -723.4531, -92.2422, 68.6875, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, -728.7266, -92.1172, 68.4063, 0.25);

    RemoveBuildingForPlayer(playerid, 3276, -419.7500, -1412.9766, 23.1250, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -378.7734, -1459.0234, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -384.2344, -1455.8281, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -396.8047, -1411.5469, 25.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -408.5625, -1412.2891, 24.8281, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -368.7813, -1454.3672, 25.4766, 0.25);
    // RemoveBuildingForPlayer(playerid, 1454, -372.1797, -1434.6094, 25.5156, 0.25);
    // RemoveBuildingForPlayer(playerid, 1454, -369.1953, -1434.6094, 25.5156, 0.25);
    // RemoveBuildingForPlayer(playerid, 1454, -366.2031, -1434.6094, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -362.4844, -1446.1250, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -361.8125, -1407.5391, 25.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -360.7188, -1435.2578, 24.8984, 0.25);
    // RemoveBuildingForPlayer(playerid, 1454, -363.2109, -1434.6094, 25.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -358.7578, -1423.8203, 24.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -356.8594, -1412.5547, 25.2500, 0.25);

    // marina
    RemoveBuildingForPlayer(playerid, 13141, 1879.130, -57.203, 11.710, 0.250);
    RemoveBuildingForPlayer(playerid, 13341, 1879.130, -57.203, 11.710, 0.250);
    RemoveBuildingForPlayer(playerid, 6133, 721.437, -1450.949, 10.195, 0.250);
    RemoveBuildingForPlayer(playerid, 6256, 721.437, -1450.949, 10.195, 0.250);

    // Ladang
    RemoveBuildingForPlayer(playerid, 1454, -1074.359, -1608.729, 76.148, 0.250);
    RemoveBuildingForPlayer(playerid, 1454, -1070.410, -1608.729, 76.148, 0.250);
    RemoveBuildingForPlayer(playerid, 1454, -1066.449, -1608.729, 76.148, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -974.156, -1601.550, 76.601, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -979.210, -1601.189, 76.437, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -984.429, -1601.319, 76.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -989.476, -1601.550, 76.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -994.742, -1601.560, 76.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, -999.804, -1601.790, 76.679, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -1005.109, -1602.439, 76.648, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -1010.159, -1602.630, 76.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -1015.429, -1602.630, 76.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1454, -1078.310, -1608.729, 76.148, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -1077.449, -1603.920, 76.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -1072.189, -1603.910, 76.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, -1067.119, -1603.880, 76.687, 0.250);
    RemoveBuildingForPlayer(playerid, 1454, -1062.500, -1608.729, 76.148, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -1062.050, -1603.650, 76.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -1056.790, -1603.640, 76.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, -1051.599, -1603.589, 76.687, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -1046.540, -1603.359, 76.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -1041.270, -1603.349, 76.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, -1036.060, -1603.250, 76.687, 0.250);
    RemoveBuildingForPlayer(playerid, 1447, -1031.000, -1603.020, 76.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, -1025.729, -1603.020, 76.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, -1020.489, -1602.859, 76.687, 0.250);
    
    // RemoveBuildingForPlayer(playerid, 17298, -366.6719, -1422.6875, 30.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -182.9531, -1146.2891, 4.1641, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -192.7266, -1142.4922, 3.7891, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -203.6172, -1138.7500, 3.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -172.2344, -1149.7734, 3.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -161.0703, -1153.7422, 2.4922, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -152.6563, -1279.8672, 2.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -151.1797, -1268.3516, 2.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -149.3281, -1256.7266, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -147.3750, -1245.1953, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -144.6797, -1234.0547, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -142.5156, -1223.1641, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -139.4922, -1212.2656, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -136.3594, -1201.6719, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -132.8125, -1191.6719, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -128.7109, -1181.2344, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -124.3516, -1171.6328, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -127.9063, -1164.8672, 2.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -139.1172, -1161.0938, 2.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -150.3750, -1157.2656, 2.2188, 0.25);

    RemoveBuildingForPlayer(playerid, 1268, 218.2266, -1434.5625, 24.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 6362, 201.4453, -1476.8516, 17.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 198.3984, -1461.6563, 12.2578, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 193.1484, -1449.2344, 11.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 189.2422, -1444.7734, 11.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 197.9688, -1454.4609, 11.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 6350, 247.3906, -1454.8281, 37.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 1259, 218.2266, -1434.5625, 24.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 203.1953, -1429.2031, 15.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 223.0469, -1419.7266, 11.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 227.8672, -1424.9531, 11.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 235.8906, -1422.5469, 10.3203, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 239.7031, -1418.7734, 10.3203, 0.25);

    // farm 18
    RemoveBuildingForPlayer(playerid, 727, -964.3359, -535.3906, 24.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 3167, -953.7500, -533.6719, 25.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -945.3594, -536.0625, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1451, -960.5391, -533.6719, 25.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 1462, -949.2734, -531.0391, 24.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1451, -960.5391, -530.5625, 25.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 3168, -940.0078, -538.6719, 24.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 1470, -943.0703, -535.5859, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1471, -941.6016, -535.9453, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1472, -940.0469, -535.9453, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1473, -940.1328, -536.2969, 28.2031, 0.25);
    RemoveBuildingForPlayer(playerid, 1474, -941.5859, -535.9375, 27.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 1475, -943.0391, -535.5859, 27.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 1476, -938.6875, -536.6641, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1477, -938.6875, -536.6563, 27.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -936.4141, -537.1641, 24.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 1457, -954.0156, -523.8438, 26.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 3171, -927.9609, -520.4219, 24.9297, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -951.9922, -527.0000, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1451, -960.5391, -527.4609, 25.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 1451, -960.5391, -524.3594, 25.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 1452, -946.1406, -512.9453, 26.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 1462, -935.9922, -514.8594, 24.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 3168, -938.9688, -516.0781, 24.8984, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -934.2266, -515.6641, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -940.7031, -513.0078, 24.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -958.8516, -512.7813, 24.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 727, -929.3125, -514.2422, 24.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 3169, -941.3750, -493.1641, 24.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 3170, -962.8359, -507.4688, 24.7891, 0.25);
    RemoveBuildingForPlayer(playerid, 1457, -953.3672, -494.5156, 26.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -960.6406, -502.0391, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -937.7422, -491.6641, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 727, -959.3672, -496.8281, 24.9297, 0.25);
    RemoveBuildingForPlayer(playerid, 3171, -923.2813, -537.5469, 24.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 727, -911.2578, -541.5703, 24.9297, 0.25);
    RemoveBuildingForPlayer(playerid, 3172, -912.6016, -532.3203, 24.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -921.3516, -534.7109, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1462, -925.4453, -536.5859, 24.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -913.2188, -519.3516, 24.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 1457, -913.6797, -522.8594, 26.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -915.1797, -526.3047, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -926.0313, -517.9922, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -907.5859, -499.4063, 24.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 1475, -920.9141, -498.2969, 27.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 1470, -920.8828, -498.2969, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1472, -923.9063, -497.9219, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1471, -922.3516, -497.9297, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1474, -922.3672, -497.9375, 27.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 727, -906.5547, -503.7031, 24.9297, 0.25);
    RemoveBuildingForPlayer(playerid, 3168, -923.8281, -495.1406, 24.8672, 0.25);
    RemoveBuildingForPlayer(playerid, 1370, -918.2031, -495.7422, 25.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1438, -915.1406, -494.5313, 24.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 1476, -925.2578, -497.2031, 25.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 1477, -925.2578, -497.2109, 27.2344, 0.25);
    RemoveBuildingForPlayer(playerid, 1473, -923.8125, -497.5703, 28.2031, 0.25);
    RemoveBuildingForPlayer(playerid, 1462, -926.3438, -492.4375, 24.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1447, -903.2891, -514.5859, 26.2422, 0.25);

    RemoveBuildingForPlayer(playerid, 785, -1013.7891, -1310.4141, 127.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 785, -955.1406, -1167.4844, 126.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1105.2969, -1290.4141, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1116.9609, -1290.5156, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1249.8438, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1116.8594, -1255.3594, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1105.1094, -1255.3594, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1238.1563, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 790, -1143.7578, -1228.9375, 130.7109, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1122.7656, -1226.4688, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1086.1484, -1308.5313, 128.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 705, -1086.4141, -1291.3906, 128.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1093.8438, -1290.4922, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1096.1250, -1307.8359, 129.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1096.2031, -1296.5313, 129.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 708, -1084.1641, -1217.5547, 128.4453, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1238.4375, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1249.9219, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1079.5156, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1079.5156, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1082.4531, -1295.7578, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1082.4531, -1299.7578, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1081.5156, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1081.5156, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1082.4531, -1297.7578, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1082.2422, -1290.5156, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1082.4922, -1255.4375, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1075.5078, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1077.5078, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1075.5000, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1077.5078, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1073.8047, -1234.7578, 128.0781, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1073.5000, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1073.5156, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 17011, -1074.6016, -1298.7500, 128.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1067.4766, -1294.7734, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1069.5078, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1071.5156, -1294.6250, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1071.5078, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1069.5156, -1300.8438, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1068.5156, -1299.8203, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1067.7734, -1297.9844, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1070.5781, -1290.4141, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 791, -1013.7891, -1310.4141, 127.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1070.8984, -1255.4609, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1011.1641, -1257.4063, 129.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1023.6328, -1213.6719, 128.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1033.1250, -1209.5938, 129.0078, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1033.1563, -1221.1094, 129.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 705, -1000.8594, -1248.5391, 131.0078, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1037.7891, -1184.7500, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1036.5703, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1034.5625, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1032.5781, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1030.5703, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1028.5703, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1026.5625, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1023.6250, -1184.8047, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1024.5625, -1185.9375, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1033.1563, -1197.9063, 129.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1026.5703, -1192.4141, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1037.5625, -1180.7422, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1038.3047, -1182.5781, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1023.6250, -1180.8047, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 17010, -1031.4766, -1181.8125, 128.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1023.6250, -1182.8047, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1028.5703, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1030.5781, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1032.5625, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1034.5703, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1036.5703, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1026.5625, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 3260, -1024.5625, -1179.7188, 129.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1023.8047, -1171.0938, 128.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 705, -1022.8750, -1153.4453, 128.2734, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1026.1406, -1134.8438, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1024.4375, -1088.5703, 128.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1019.8750, -1186.8672, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1019.8750, -1175.1797, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1019.8750, -1163.4453, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 691, -1010.2031, -1146.1016, 127.8438, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1019.8750, -1152.0234, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3276, -1019.8750, -1140.3359, 129.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 705, -1011.6406, -1101.0547, 128.2734, 0.25);
    RemoveBuildingForPlayer(playerid, 790, -982.1172, -1077.7422, 133.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 705, -984.1641, -1051.5078, 127.6953, 0.25);
    RemoveBuildingForPlayer(playerid, 791, -955.1406, -1167.4844, 126.4297, 0.25);

    // Criminal Intelligence SAPD
    RemoveBuildingForPlayer(playerid, 7234, 2504.669, 2292.709, 13.593, 0.250);
    RemoveBuildingForPlayer(playerid, 7235, 2504.669, 2292.709, 13.593, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2512.879, 2284.560, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2280.979, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2514.179, 2279.320, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2276.100, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 1344, 2514.189, 2316.590, 10.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1264, 2514.100, 2323.550, 10.203, 0.250);
    RemoveBuildingForPlayer(playerid, 1264, 2514.489, 2324.229, 10.203, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2271.219, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2512.889, 2266.459, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2261.449, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2256.560, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2514.550, 2256.629, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2251.679, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3520, 2513.149, 2246.800, 10.257, 0.250);
    RemoveBuildingForPlayer(playerid, 7093, 2515.889, 2247.550, 20.281, 0.250);
    RemoveBuildingForPlayer(playerid, 3460, 2523.020, 2296.419, 13.765, 0.250);
    return 1;
}

public OnPlayerConnect(playerid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerConnect]: Player ID: %d", playerid);
    #endif

    if(IsPlayerNPC(playerid))
        return 1;
    
    g_MysqlRaceCheck[playerid]++;

    static client[24];
    GetPlayerVersion(playerid, client, sizeof(client));

    if (isnull(client)) {
        SendClientMessage(playerid, X11_RED, "WARNING: "YELLOW"Kami merekomendasikan untuk menggunakan client official dari kami atau client di Play Store.");
        SendClientMessage(playerid, X11_RED, "NOTE: "YELLOW"Mohon kiranya untuk mengganti client Anda, karena untuk mengurangi bug.");
        KickEx(playerid);
        return 1;
    }

    if((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), AccountData[playerid][pLeaveIP]))
    {
        SendAdminMessage(X11_TOMATO_1, "AdmWarn: %s (%s) was kicked for possible rejoin hacks.", ReturnName(playerid), ReturnIP(playerid));
        printf("AdmWarn: %s (%s) was kicked for possible rejoin hacks.", ReturnName(playerid), ReturnIP(playerid));
        KickEx(playerid);
        return 1;
    }

    ResetStatistics(playerid);

    BuildingRemove(playerid);
    PreloadAnimations(playerid);
    ResetPlayerWeapons(playerid);
    CancelSelectTextDraw(playerid);
    SetPlayerArmedWeapon(playerid, 0);
    SetPlayerColor(playerid, DEFAULT_COLOR);
    Player_ToggleTelportAntiCheat(playerid, true);
    Player_ToggleAntiAmmoHack(playerid, true);
    Player_ToggleAntiHealthHack(playerid, false);

    CreateTextDraws(playerid);
    DeletePVar(playerid, "ChainsawWarning");
    DeletePVar(playerid, "PunchWarning");

    if(g_ServerRestart || GetGVarInt("Countdown")) {
        TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
    }

    GetPlayerIp(playerid, ReturnIP(playerid), 16);
    /*GetPlayerIp(playerid, ReturnIP(playerid));
    format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s' WHERE `accounts`=%s'");*/

    GetPlayerName(playerid, ReturnName(playerid), MAX_PLAYER_NAME + 1);
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerDisconnect]: Player ID: %d, Reason: %d", playerid, reason);
    #endif

    g_MysqlRaceCheck[playerid]++;

    PlayerData[playerid][pLeaveTime] = GetTickCount();

    format(AccountData[playerid][pLeaveIP], 16, AccountData[playerid][pIP]);

    if(PlayerData[playerid][pRefillPrice] > 0)
        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

    if(PlayerTemp[playerid][temp_selecttextdraw])
    {
        if(PlayerData[playerid][pClothesType] == 1)
        {
            HideClothesTextdraw(playerid);
            PlayerData[playerid][pSkin] = PlayerTemp[playerid][temp_realskin];
        }
    }

    new textreason[3][] = {"Timeout/Crash", "Quit", "Kick/Ban"};

    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
    {
        SendClientMessage(PlayerData[playerid][pCallLine], X11_YELLOW_2, "[PHONE]:"WHITE" The line went dead...");
        CancelCall(playerid);
    }
    SendNearbyMessage(playerid, 20.0, X11_LIGHTBLUE, "SERVER: "RED"%s "YELLOW"has left from the server. (%s)", ReturnName(playerid, 1, 1), textreason[reason]);
    
    CallLocalFunction("OnPlayerDisconnectEx", "d", playerid);
    TerminateConnection(playerid);

    new Float:x, Float:y, Float:z;//cameraPOS
    GetPlayerCameraPos(playerid, x, y, z);

    printf("camera pos at %f, %f, %f.", x, y, z);

    //fancingangle
    new Float:angle;
    GetPlayerFacingAngle(playerid, angle);
    printf("Your facing angle: %0.2f", angle);


    return 1;
}

Server_Save()
{
    new
        File:file = fopen("server.ini", io_write),
        str[128];

    format(str, sizeof(str), "TaxMoney = %d", g_TaxVault);
    return (fwrite(file, str), fclose(file));
}

//kalau mau diload systen money ada disini..
LoadServerConfig()
{
    new File:file = fopen("server.ini", io_read);

    if(file) {
        g_TaxVault = file_parse_int(file, "TaxMoney");

        fclose(file);
    }
    return 1;
}

Function:GetPlayerCameraObject(playerid)
    return Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_OBJECT, GetPlayerCameraTargetObject(playerid));

// Function:encode_lights(light1, light2, light3, light4)
//     return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);

public OnGameModeExit()
{
    #if defined DEBUG_MODE
        printf("[Callback: OnGameModeExit]: OnGameModeExit() called");
    #endif

    SaveAll();

    printf("There are %d players on the server when server down.", Iter_Count(Player));

    foreach(new playerid : Player)
        TerminateConnection(playerid);

    DestroyForklifts();

    MySqlCloseConnection();

//    Profiler_Dump();
//    Profiler_Stop();
    return 1;
}

static LoadTrashmasterVehicle()
{
    VehicleTrashmaster[0] = CreateVehicle(408,2248.482,-2188.130,14.093,135.224,240,0,-1);
    VehicleTrashmaster[1] = CreateVehicle(408,2243.243,-2182.744,14.096,133.121,240,0,-1);
    VehicleTrashmaster[2] = CreateVehicle(408,2238.220,-2177.490,14.089,135.017,240,0,-1);
    VehicleTrashmaster[3] = CreateVehicle(408,2241.048,-2180.287,14.096,135.017,240,0,-1);
    for (new i = 0; i < 4; i ++) if (IsValidVehicle(VehicleTrashmaster[i])) {
        CoreVehicles[VehicleTrashmaster[i]][vehFuel] = 100.0;
    }

    print("[TRASHMASTER]: Successfull created static vehicle for trashmaster.");
    return 1;
}

static LoadServerMapIcon()
{
    CreateDynamicMapIcon(1546.2462,-1675.5460,13.5619, 30, -1, -1, 0); //LSPD
    CreateDynamicMapIcon(1481.1840,-1770.0223,18.7958, 2, -1, -1, 0); //City Hall
    CreateDynamicMapIcon(1654.2096,-1660.8616,22.5156, 36, -1, -1, 0); //Newbie School
    CreateDynamicMapIcon(2303.6799,-16.0679,26.4844, 52, -1, -1, 0); //Bank Palomino
    //CreateDynamicMapIcon(2334.9365,-1351.7225,24.0318, 26, -1, -1, 0); //Mechanic Center

    print("[MAPICON]: Successfull created static mapicon.");
    return 1;
}

static LoadServerPickup()
{
    CreateDynamicPickup(1239, 23, 331.96, 1119.71, 1083.89, -1, 5);
    CreateDynamic3DTextLabel("[Seeds Shop]\n"WHITE"Type "YELLOW"/buyseeds"WHITE" to buy seed", COLOR_CLIENT, 331.96, 1119.71, 1083.89+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 5);

    CreateDynamicPickup(1239, 23, -1265.45, -418.82, 14.17, ASGH_INT_WORLD, ASGH_INT);
    CreateDynamic3DTextLabel("[Take Pills]\n"WHITE"Type "YELLOW"/takepills "WHITE"to get the pills", COLOR_CLIENT, -1265.45, -418.82, 14.17+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ASGH_INT_WORLD, ASGH_INT);

    CreateDynamicPickup(1581, 23, -2033.0439, -117.4885, 1035.1719);
    CreateDynamic3DTextLabel("[Driving Test]\n"WHITE"Type "YELLOW"/drivingtest "WHITE"to start the test for "GREEN"$75.\n"WHITE"Type "YELLOW"/extendlicense "WHITE"to extend driving license when expired for "GREEN"$50", COLOR_CLIENT, -2033.0439, -117.4885, 1035.1719+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1239, 23, 1396.12, -29.39, 1013.99, GOV_WORLD, GOV_INT);
    CreateDynamic3DTextLabel("[Citizenship and Civil Registration]\n"WHITE"Type "YELLOW"/createidcard "WHITE"to creating ID Card, cost "GREEN"$250", COLOR_CLIENT, 1396.12, -29.39, 1013.99, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GOV_WORLD, GOV_INT);

    CreateDynamicPickup(1239, 23, 0.01, -222.03, 5.42);
    CreateDynamic3DTextLabel("[Cargo Unloading]\n"WHITE"Type "YELLOW"/loadcrate"WHITE" to begin loading cargo.", COLOR_CLIENT, 0.01, -222.03, 5.42+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1239, 23, 331.41, 1123.09, 1084.66);
    CreateDynamic3DTextLabel("[Black Market]\n"WHITE"Type "YELLOW"/creategun"WHITE" to create illegal items\nType "YELLOW"/createammo"WHITE" to create ammo", COLOR_CLIENT, 331.41, 1123.09, 1084.66+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    // Sidejob Pickup
    for (new i = 0; i < sizeof(arrMiner); i ++) {
        CreateDynamic3DTextLabel("[Mining]\n"WHITE"Type "YELLOW"/mine "WHITE"to begin mining.", COLOR_CLIENT, arrMiner[i][0], arrMiner[i][1], arrMiner[i][2]+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
        CreateDynamicPickup(1239, 23, arrMiner[i][0], arrMiner[i][1], arrMiner[i][2], 0, 0);
    }

    CreateDynamic3DTextLabel("[Mining]\n"WHITE"Deliver your mining rocks at this spot.", COLOR_CLIENT, 627.88, 894.60, -41.10+0.5, 7.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    CreateDynamicPickup(1239, 23, 627.88, 894.60, -41.10);

    CreateDynamic3DTextLabel("[Package Sorting]\n"WHITE"Type "YELLOW"/sorting "WHITE"to begin sorting packages.", COLOR_CLIENT, -262.44, -2183.41, 28.95+0.5, 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
    CreateDynamicPickup(1239, 23, -262.44, -2183.41, 28.95, 0, 0);

    CreateDynamic3DTextLabel("[Package Sorting]\n"WHITE"Deliver your packages "YELLOW"here "WHITE"for sorting.", COLOR_CLIENT, -256.60, -2191.21, 28.99+0.5, 7.5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    CreateDynamicPickup(1239, 23, -256.60, -2191.21, 28.99);

    // CreateDynamicPickup(1239, 23, 2526.3730, -2071.2927, 13.5469);
    // CreateDynamic3DTextLabel("[Wheels Shop]\n"WHITE"Type "YELLOW"/wheels"WHITE" to change vehicle wheels", COLOR_CLIENT, 2526.3730, -2071.2927, 13.5469+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
  
    // CreateDynamicPickup(1239, 23, 2537.6143, -2071.2717, 13.5469);
    // CreateDynamic3DTextLabel("[Hydraulics Shop]\n"WHITE"Type "YELLOW"/hydraulic"WHITE" to install hydraulics", COLOR_CLIENT, 2537.6143, -2071.2717, 13.5469+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    // Drug Factory
    CreateDynamicPickup(1239,23,-2116.97, -2413.55, 31.23,0,0);
    CreateDynamic3DTextLabel("[Drug Factory]\n"WHITE"Type "YELLOW"/selldrugs "WHITE"to sell your drug.",COLOR_CLIENT,-2116.97, -2413.55, 31.23,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0,0);

    CreateDynamicPickup(1239,23,-1956.0898,790.6878,55.7245,0,0);
    CreateDynamic3DTextLabel("[Drug Factory]\n"WHITE"Type "YELLOW"/moneylaundry "WHITE"to wash your dirty money.",COLOR_CLIENT,-1956.0898,790.6878,55.7245,10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0,0,0);

    CreateDynamicPickup(1239, 23, -372.83, -1427.15, 25.72, 0, 0);
    CreateDynamic3DTextLabel("[Plant Factory]\n"WHITE"Type "YELLOW"/sellplant "WHITE"to sell your plant\n"WHITE"Type "YELLOW"/sellforage "WHITE"to sell your forage plant", COLOR_CLIENT, -372.83, -1427.15, 25.72, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    CreateDynamicPickup(1239, 23, 2228.52, -2175.41, 13.55);
    CreateDynamic3DTextLabel("[Garbage Dump]\n"WHITE"Type "YELLOW"/dumpgarbage"WHITE" to dump your trash", COLOR_CLIENT, 2228.52, -2175.41, 13.55+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

    CreateDynamicPickup(1239, 23, 1401.81, -21.20, 1001.00, 13, 9);
    CreateDynamic3DTextLabel("[INSURANCE CENTER]\n"WHITE"Type "YELLOW"/buyinsurance"WHITE" to buy insurance\n"WHITE"Type "YELLOW"/claiminsurance"WHITE" to release vehicle", COLOR_CLIENT, 1401.81, -21.20, 1001.00+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 13, 9);

    CreateDynamicPickup(1239, 23, 1408.47, 75.41, 1000.99, -1, BANK_INTERIOR);
    CreateDynamic3DTextLabel("[BANK POINT]\n"WHITE"(/help > Bank commands)", COLOR_CLIENT, 1408.47, 75.41, 1000.99+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, BANK_INTERIOR);

    CreateDynamicPickup(1239, 23, 2316.3716,-4.5646,26.7422);
    CreateDynamic3DTextLabel("[BANK POINT]\n"WHITE"(/help > Bank commands)", COLOR_CLIENT, 2316.3716,-4.5646,26.7422+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
    
    CreateDynamicPickup(1239, 23, 1576.69, 78.28, 1001.07, NEWS_WORLD, NEWS_INT);
    CreateDynamic3DTextLabel("[Advertisement]\n"WHITE"Type "YELLOW"/ad "WHITE"to make some advertisement", COLOR_CLIENT, 1576.69, 78.28, 1001.07+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NEWS_WORLD, NEWS_INT);
    
    CreateDynamicPickup(1239, 23, 1386.82, -22.86, 1000.99, LSPD_LOBBY_WORLD, LSPD_LOBBY);
    CreateDynamic3DTextLabel("[Tickets]\n"WHITE"Type "YELLOW"/payticket "WHITE"to pay your tickets.", COLOR_CLIENT, 1386.82, -22.86, 1000.99+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LSPD_LOBBY_WORLD, LSPD_LOBBY);

    CreateDynamicPickup(1239, 23, 1389.42, -22.71, 1000.99, LSPD_LOBBY_WORLD, LSPD_LOBBY);
    CreateDynamic3DTextLabel("[Public Services]\n"WHITE"Type "YELLOW"/unlocktire "WHITE"to unlock your vehicle tire.\n"WHITE"Type "YELLOW"/buyplate "WHITE"to registering your vehicle number plate, cost "GREEN"($250)", COLOR_CLIENT, 1389.42, -22.71, 1000.99+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LSPD_LOBBY_WORLD, LSPD_LOBBY);

    CreateDynamicPickup(1239, 23, 1443.0018,1572.6661,10.9848, 73, 20);
    CreateDynamic3DTextLabel("[Public Services]\n"WHITE"Type "YELLOW"/payticket "WHITE"to to pay your tickets.\nType "YELLOW"/buyplate "WHITE"to registering your vehicle number plate, cost "GREEN"($250)", COLOR_CLIENT, 1443.0018,1572.6661,10.9848+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 73, 20);

    CreateDynamicPickup(1239, 23, 1442.6643,1571.0513,10.9848, 73, 20);
    CreateDynamic3DTextLabel("[Public Services]\n"WHITE"Type "YELLOW"/unlocktire "WHITE"to unlock your vehicle tire.", COLOR_CLIENT, 1442.6643,1571.0513,10.9848+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 73, 20);

    CreateDynamicPickup(1581, 23, 1400.07, -11.81, 1000.99, LSPD_LOBBY_WORLD, LSPD_LOBBY);
    CreateDynamic3DTextLabel("[MDC]\n"WHITE"Type "YELLOW"/mdc "WHITE"to open Mobile Data Computer.", COLOR_CLIENT, 1400.07, -11.81, 1000.99+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LSPD_LOBBY_WORLD, LSPD_LOBBY);

    CreateDynamicPickup(1239, 23, 1395.85, -17.76, 1013.99, GOV_WORLD, GOV_INT);
    CreateDynamic3DTextLabel("[Properties]\n"WHITE"Type "YELLOW"/sellproperty "WHITE"to selling your property.", COLOR_CLIENT, 1395.85, -17.76, 1013.99+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GOV_WORLD, GOV_INT);

    CreateDynamicPickup(1239, 23, 2618.99, -2226.67, 13.38, -1, 0);
    CreateDynamic3DTextLabel("[Valley Docks Import]\n"WHITE"Type "YELLOW"/sellveh "WHITE"to sell your vehicle.", COLOR_CLIENT, 2618.99, -2226.67, 13.38+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

    CreateDynamic3DTextLabel("[Ammunation Buypoint]\n"WHITE"Type '"YELLOW"/buygun"WHITE"' to buying a weapon", X11_LIGHTBLUE, 308.1450,-140.9854,999.6016, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7);
	CreateDynamicPickup(1274, 23, 308.1450,-140.9854,999.6016, -1, 7);

    CreateDynamicPickup(1239, 23, 2500.7793, -2079.6174, 13.5469, -1, 0);
    CreateDynamic3DTextLabel("[Vehicle Modif]\n"WHITE"Type "YELLOW"/vacc "WHITE"to modify your vehicle.", COLOR_CLIENT, 2500.7793, -2079.6174, 13.5469+0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);


/*    for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) {
        CreateDynamicMapIcon(arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 22, 0);

        CreateDynamicPickup(19130, 23, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 0);
        CreateDynamic3DTextLabel("General Hospital", X11_TOMATO_1, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]+0.7, 15.0);

        CreateDynamicPickup(1240, 23, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2],0);
        CreateDynamic3DTextLabel("[Hospital Deliver]\n"WHITE"/dropinjured to deliver a patient.", X11_TOMATO_1, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2], 15.0);
    }*/

    print("[PICKUP]: Successfull created static pickup and label.");
    return 1;
}

static LoadGlobalTextdraws()
{
    //  Server injured textdraw
    gServerTextdraws[0] = TextDrawCreate(322.783325, 418.050140, "You_are_injured!_~r~/call_911_~w~or_~r~/giveup");
    TextDrawLetterSize(gServerTextdraws[0], 0.295051, 1.378332);
    TextDrawAlignment(gServerTextdraws[0], 2);
    TextDrawColor(gServerTextdraws[0], -1);
    TextDrawSetShadow(gServerTextdraws[0], 0);
    TextDrawSetOutline(gServerTextdraws[0], 1);
    TextDrawBackgroundColor(gServerTextdraws[0], 255);
    TextDrawFont(gServerTextdraws[0], 1);
    TextDrawSetProportional(gServerTextdraws[0], 1);
    TextDrawSetShadow(gServerTextdraws[0], 0);

    //  Server restart and countdown
    gServerTextdraws[1] = TextDrawCreate(22.005966, 209.766693, "_");
    TextDrawLetterSize(gServerTextdraws[1], 0.263191, 1.156665);
    TextDrawAlignment(gServerTextdraws[1], 1);
    TextDrawColor(gServerTextdraws[1], -1);
    TextDrawSetShadow(gServerTextdraws[1], 0);
    TextDrawSetOutline(gServerTextdraws[1], 1);
    TextDrawBackgroundColor(gServerTextdraws[1], 255);
    TextDrawFont(gServerTextdraws[1], 3);
    TextDrawSetProportional(gServerTextdraws[1], 1);
    TextDrawSetShadow(gServerTextdraws[1], 0);

    //  Server watermark
    gServerTextdraws[2] = TextDrawCreate(297.000000, 4.000000, "Valley");
    TextDrawFont(gServerTextdraws[2], 3);
    TextDrawLetterSize(gServerTextdraws[2], 0.329165, 1.500000);
    TextDrawTextSize(gServerTextdraws[2], 400.000000, 17.000000);
    TextDrawSetOutline(gServerTextdraws[2], 1);
    TextDrawSetShadow(gServerTextdraws[2], 0);
    TextDrawAlignment(gServerTextdraws[2], 1);
    TextDrawColor(gServerTextdraws[2], 1687547391);
    TextDrawBackgroundColor(gServerTextdraws[2], 255);
    TextDrawBoxColor(gServerTextdraws[2], 50);
    TextDrawUseBox(gServerTextdraws[2], 0);
    TextDrawSetProportional(gServerTextdraws[2], 1);
    TextDrawSetSelectable(gServerTextdraws[2], 0);

    gServerTextdraws[3] = TextDrawCreate(296.000000, 14.000000, "Roleplay");
    TextDrawFont(gServerTextdraws[3], 0);
    TextDrawLetterSize(gServerTextdraws[3], 0.329165, 1.500000);
    TextDrawTextSize(gServerTextdraws[3], 400.000000, 17.000000);
    TextDrawSetOutline(gServerTextdraws[3], 1);
    TextDrawSetShadow(gServerTextdraws[3], 0);
    TextDrawAlignment(gServerTextdraws[3], 1);
    TextDrawColor(gServerTextdraws[3], 255);
    TextDrawBackgroundColor(gServerTextdraws[3], -1);
    TextDrawBoxColor(gServerTextdraws[3], 50);
    TextDrawUseBox(gServerTextdraws[3], 0);
    TextDrawSetProportional(gServerTextdraws[3], 1);
    TextDrawSetSelectable(gServerTextdraws[3], 0);
    
    //Login Textdraws
    // gLoginTextdraws = TextDrawCreate(273.500000, 78.249641, "mdl-2001:logo_uog");
    // TextDrawTextSize(gLoginTextdraws, 90.000000, 90.000000);
    // TextDrawAlignment(gLoginTextdraws, 1);
    // TextDrawColor(gLoginTextdraws, -1);
    // TextDrawSetShadow(gLoginTextdraws, 0);
    // TextDrawBackgroundColor(gLoginTextdraws, 255);
    // TextDrawFont(gLoginTextdraws, 4);
    // TextDrawSetProportional(gLoginTextdraws, 0);
    return 1;
}

OnGameModeInit_Setup()
{

    Whitelist = DCC_FindChannelById("1379380767288725579");
    RefundRoles = DCC_FindChannelById("1379380767288725579");
    
    new tmpobjid;

    //Server configuration
    MySqlStartConnection();
    ManualVehicleEngineAndLights();
    Streamer_ToggleErrorCallback(1);
    Streamer_ToggleChunkStream(1);
    SetGameModeText(SERVER_REVISION);
    BlockGarages(true, GARAGE_TYPE_ALL, "CLOSED");
    SendRconCommand(sprintf("weburl %s", SERVER_URL));

    //Gamemode configuration
    LoadServerConfig();
    LoadServerPickup();
    LoadServerMapIcon();
    LoadGlobalTextdraws();
    LoadTrashmasterVehicle();
    CreateForklifts();

    // Mysql loader
    //mysql_tquery(g_iHandle, "SELECT * FROM `billboards` ORDER BY `bbID` ASC", "Billboard_Load", "");
    //mysql_tquery(g_iHandle, "SELECT * FROM `backpacks`", "Backpack_Load", "");
    //mysql_tquery(g_iHandle, "SELECT * FROM `crates`", "Crate_Load", "");
    //mysql_tquery(g_iHandle, "SELECT * FROM `gunracks` ORDER BY `rackID` ASC", "Rack_Load", "");
    //mysql_tquery(g_iHandle, "SELECT * FROM `droppedweapon` ORDER BY `ID` DESC", "OnDroppedLoad", "");
    
    mysql_tquery(g_iHandle, "SELECT * FROM `server` WHERE `ID`='1'", "Static_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `factions` ORDER BY `factionID` ASC", "Faction_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `entrances` ORDER BY `entranceID` ASC", "Entrance_Load", "");

    mysql_tquery(g_iHandle, "SELECT * FROM `houses` ORDER BY `houseID` ASC", "House_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `businesses` ORDER BY `bizID` ASC", "Business_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `dropped` ORDER BY `ID` ASC", "Dropped_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `jobs` ORDER BY `jobID` ASC", "Job_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `plants` ORDER BY `plantID` ASC", "Plant_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `arrestpoints`", "Arrest_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `impoundlots`", "Impound_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `atm` ORDER BY `atmID` ASC", "ATM_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `garbage` ORDER BY `garbageID` ASC", "Garbage_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `speedcameras`", "Speed_Load", "");
    // mysql_tquery(g_iHandle, "SELECT * FROM `detectors`", "Detector_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `dealership`","OnDealership_Load","");
    // mysql_tquery(g_iHandle, "SELECT * FROM `dealervehicle`","OnVehicleDealership_Load","");
    // mysql_tquery(g_iHandle, "SELECT * FROM `workshop`", "Workshop_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `cargo`", "Cargo_Load", "");
    // mysql_tquery(g_iHandle, "SELECT * FROM `player_vehicles` WHERE `Rental` = '1' ORDER BY `ID` DESC", "Vehicle_Load","");
    mysql_tquery(g_iHandle, "SELECT * FROM `garage`", "Garage_Load", "");

    //==== DYNAMIC TAGS ====
    mysql_tquery(g_iHandle, "SELECT * FROM `tags` ORDER BY `tagId` DESC", "Tags_Load", "");

    mysql_tquery(g_iHandle, "SELECT * FROM `furnstore` ORDER BY `id` ASC", "FurnStore_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `furnobject` ORDER BY `id` ASC", "FurnObject_Load", "");

    SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
    SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
    SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
    SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
    SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
    SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
    SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
    SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
    SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

    //Anticheat disable
    // EnableAntiCheat(39, 0); //Dialog hack
    // EnableAntiCheat(40, 0); //multiple login on same IP
    // EnableAntiCheat(52, 0); //Anti NOP
    // EnableAntiCheat(14, 0); //Money Hack
    // EnableAntiCheat(47, 0); //Armed Hack
    // EnableAntiCheat(18, 0); //Special Action
    // EnableAntiCheat(6, 0); //Pickup Teleport
    // EnableAntiCheat(2, 0); //Speed Hack

    JailArea = CreateDynamicPolygon(JailArray, _, _, _, _, 3, _);
    NSArea = CreateDynamicPolygon(NSArray, _, _, _, _, 5, _);
    SAMDArea = CreateDynamicPolygon(SAMDArray, _, _, _, _, 4, _);
    zones[0] = CreateDynamicPolygon(mekanikzone, _, _, _, _, 0);
    zones[1] = CreateDynamicPolygon(mekanikzone2, _, _, _, _, 0);
    tempatganja[0] = CreateDynamicPolygon(ganjazone, _, _, _, _, 0);
    publicfarm[0] = CreateDynamicPolygon(publicFarm1, _, _, _, _, 0);
    publicfarm[1] = CreateDynamicPolygon(publicFarm2, _, _, _, _, 0);


    for (new i; i < sizeof(ColorList); i++) {
        format(color_string, sizeof(color_string), "%s{%06x}%03d %s", color_string, ColorList[i] >>> 8, i, ((i+1) % 16 == 0) ? ("\n") : (""));
    }

    for (new i; i < sizeof(FontNames); i++) {
        format(object_font, sizeof(object_font), "%s%s\n", object_font, FontNames[i]);
    }

    new string[255];
    for(new i = 0; i < sizeof(arrCargo); i++) {
        format(string,sizeof(string),"["YELLOW"%s"WHITE"]\nType "YELLOW"'/cargo get' "WHITE"to get a cargo.\nStock: "YELLOW"%d/%d", arrCargo[i][cType], ServerData[cargoStock][i], MAX_STOCK);
        CreateDynamicPickup(1271, 23, arrCargo[i][cX],arrCargo[i][cY],arrCargo[i][cZ], 0, 0);
        CargoLabel[i] = CreateDynamic3DTextLabel(string, -1, arrCargo[i][cX],arrCargo[i][cY],arrCargo[i][cZ]+0.5, 7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
        Cargo_UpdateLabel(i, CargoLabel[i]);
    }

    fishzone[0] = CreateDynamicPolygon(zones_points_0);
    fishzone[1] = CreateDynamicCircle(zones_points_1[0], zones_points_1[1], zones_points_1[2]);
    fishzone[2] = CreateDynamicCircle(zones_points_2[0], zones_points_2[1], zones_points_2[2]);
    fishzone[3] = CreateDynamicCircle(zones_points_3[0], zones_points_3[1], zones_points_3[2]);
    fishzone[4] = CreateDynamicCircle(zones_points_4[0], zones_points_4[1], zones_points_4[2]);
    fishzone[5] = CreateDynamicCircle(zones_points_5[0], zones_points_5[1], zones_points_5[2]);
    fishzone[6] = CreateDynamicRectangle(zones_points_6[0], zones_points_6[1], zones_points_6[2], zones_points_6[3]);
    fishzone[7] = CreateDynamicPolygon(zones_points_7);
    fishzone[8] = CreateDynamicPolygon(zones_points_8);
    fishzone[9] = CreateDynamicPolygon(zones_points_9);
    fishzone[10] = CreateDynamicPolygon(zones_points_10);
    fishzone[11] = CreateDynamicRectangle(zones_points_11[0], zones_points_11[1], zones_points_11[2], zones_points_11[3]);
	fishzone[12] = CreateDynamicPolygon(zones_points_12);
	fishzone[13] = CreateDynamicPolygon(zones_points_13);
	fishzone[14] = CreateDynamicPolygon(zones_points_14);
	fishzone[15] = CreateDynamicPolygon(zones_points_15);
	fishzone[16] = CreateDynamicPolygon(zones_points_16);

    //Penutup underground
    tmpobjid = CreateDynamicObject(19377, -1750.174316, 984.437988, 19.399074, 0.000000, 0.000000, 0.000000, -1, -1, -1, 100.00, 100.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 4562, "plaza1_lan2", "sl_blokpave1", 0xFF717D91);
    tmpobjid = CreateDynamicObject(19377, -1750.174316, 994.057922, 19.399074, 0.000000, 0.000000, 0.000000, -1, -1, -1, 100.00, 100.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 4562, "plaza1_lan2", "sl_blokpave1", 0xFF717D91);

    // //garage small
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2634.842041, 12.476873, 0.000000, 90.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2634.842041, 16.056907, 0.000000, 90.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2644.439453, 12.476873, 0.000000, 90.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2644.469238, 16.056907, 0.000000, 90.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(1518, 1994.308105, -2631.083496, 13.612809, 0.000000, 0.000000, -32.500003, -1, 5, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18641, "flashlight1", "faglite", 0x00000000);

    // CreateDynamicObject(19447, 1990.157592, -2630.133544, 14.256880, 0.000000, 0.000000, 90.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1994.898681, -2634.855468, 14.256880, 0.000000, 0.000000, 180.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1985.407592, -2634.855468, 14.256880, 0.000000, 0.000000, 180.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1994.898681, -2644.458496, 14.256880, 0.000000, 0.000000, 180.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1985.405639, -2644.468505, 14.256880, 0.000000, 0.000000, 180.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1990.157592, -2643.767333, 14.256880, 0.000000, 0.000000, 90.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19903, 1986.029907, -2630.946044, 12.562810, 0.000000, 0.000000, -72.800010, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(14527, 1990.572143, -2635.857666, 13.742821, 0.000000, 0.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(19922, 1993.189208, -2631.157470, 12.562810, 0.000000, 0.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(1810, 1993.390380, -2632.010986, 12.562810, 0.000000, 0.000000, 135.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(2048, 1990.508178, -2630.263916, 15.522824, 0.000000, 0.000000, 0.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(1223, 1989.967529, -2644.040527, 11.322810, 0.000000, 0.000000, 90.000000, -1, 5, -1, 250.00, 250.00);
    // CreateDynamicObject(1508, 1989.985107, -2643.669921, 14.232825, 0.000000, 0.000000, 90.000000, -1, 5, -1, 250.00, 250.00);

    // //garage medium
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2634.842041, 12.476873, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2634.842041, 16.056907, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2644.439453, 12.476873, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2644.469238, 16.056907, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(1518, 1994.308105, -2631.083496, 13.612809, 0.000000, 0.000000, -32.500003, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18641, "flashlight1", "faglite", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.270629, -2634.842041, 12.476873, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.240478, -2634.842041, 16.056907, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.262695, -2644.439453, 12.476873, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.239746, -2644.469238, 16.056907, 0.000000, 90.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.327636, 12.572800, 90.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "orange", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.287597, 12.572800, 90.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.367675, 12.572800, 90.000000, 90.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.367675, 12.572800, 90.000000, 270.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.367675, 12.572800, 90.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);

    // CreateDynamicObject(19447, 1990.157592, -2630.133544, 14.256879, 0.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1994.898681, -2634.855468, 14.256879, 0.000000, 0.000000, 180.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1978.927368, -2634.855468, 14.256879, 0.000000, 0.000000, 180.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1994.898681, -2644.458496, 14.256879, 0.000000, 0.000000, 180.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1978.934448, -2644.468505, 14.256879, 0.000000, 0.000000, 180.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1990.157592, -2643.767333, 14.256879, 0.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19903, 1987.284545, -2630.704589, 12.562809, 0.000000, 0.000000, -72.800010, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(14527, 1990.572143, -2635.857666, 13.742820, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19922, 1993.189208, -2631.157470, 12.562809, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(1810, 1993.390380, -2632.010986, 12.562809, 0.000000, 0.000000, 135.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(2048, 1990.508178, -2630.263916, 15.522824, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(1223, 1989.967529, -2644.040527, 11.322810, 0.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(1508, 1989.985107, -2643.669921, 14.232825, 0.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1980.546997, -2630.133544, 14.256879, 0.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1980.577636, -2643.767333, 14.256879, 0.000000, 0.000000, 90.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(1238, 1985.961181, -2636.378173, 12.872817, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(14527, 1984.731689, -2635.857666, 13.742820, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(11730, 1989.482910, -2630.620605, 12.562810, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);
    // CreateDynamicObject(11730, 1988.792236, -2630.620605, 12.562810, 0.000000, 0.000000, 0.000000, -1, 6, -1, 250.00, 250.00);

    // //garage big
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2634.842041, 12.476873, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2634.842041, 16.056907, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2644.439453, 12.476873, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1989.732543, -2644.469238, 16.056907, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(1518, 1994.308105, -2631.083496, 13.612809, 0.000000, 0.000000, -32.500003, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 2, 18641, "flashlight1", "faglite", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.270629, -2634.842041, 12.476873, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.240478, -2634.842041, 16.056907, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.262695, -2644.439453, 12.476873, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 1979.239746, -2644.469238, 16.056907, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.327636, 12.572800, 90.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "orange", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.287597, 12.572800, 90.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.367675, 12.572800, 90.000000, 90.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.367675, 12.572800, 90.000000, 270.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19089, 1985.746459, -2636.367675, 12.572800, 90.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18996, "mattextures", "sampred", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 2000.203369, -2634.692382, 12.476873, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 2000.203369, -2625.091064, 12.476873, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19853, "mihouse1", "brownwall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 2000.205322, -2634.621826, 16.056907, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19377, 2000.205322, -2625.016845, 16.056907, 0.000000, 90.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "metal013", 0x00000000);
    // tmpobjid = CreateDynamicObject(19483, 1998.310668, -2620.710449, 15.272829, 0.000000, 0.000000, 270.000000, -1, 7, -1, 250.00, 250.00);
    // SetDynamicObjectMaterialText(tmpobjid, 0, "PARK HERE\n"RED"vvv\nvv\nv", 130, "Ariel", 55, 1, 0xFFFFFFFF, 0xFF0000FF, 1);
    
    // CreateDynamicObject(19447, 1990.157592, -2630.133544, 14.256879, 0.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1998.268066, -2636.328369, 14.256879, 0.000000, 0.000000, 135.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1978.927368, -2634.855468, 14.256879, 0.000000, 0.000000, 180.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1994.898681, -2644.458496, 14.256879, 0.000000, 0.000000, 180.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1978.934448, -2644.468505, 14.256879, 0.000000, 0.000000, 180.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1990.157592, -2643.767333, 14.256879, 0.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19903, 1987.284545, -2630.704589, 12.562809, 0.000000, 0.000000, -72.800010, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(14527, 1990.572143, -2635.857666, 13.742820, 0.000000, 0.000000, 45.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19922, 1993.189208, -2631.157470, 12.562809, 0.000000, 0.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(1810, 1993.390380, -2632.010986, 12.562809, 0.000000, 0.000000, 135.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(2048, 1990.508178, -2630.263916, 15.522824, 0.000000, 0.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(1223, 1989.967529, -2644.040527, 11.322810, 0.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(1508, 1989.985107, -2643.669921, 14.232825, 0.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1980.546997, -2630.133544, 14.256879, 0.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1980.577636, -2643.767333, 14.256879, 0.000000, 0.000000, 90.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1994.878784, -2625.360595, 14.256879, 0.000000, 0.000000, 180.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(1238, 1985.961181, -2636.378173, 12.872817, 0.000000, 0.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(14527, 1984.731689, -2635.857666, 13.742820, 0.000000, 0.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(11730, 1989.482910, -2630.620605, 12.562810, 0.000000, 0.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(11730, 1988.792236, -2630.620605, 12.562810, 0.000000, 0.000000, 0.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 1999.610595, -2620.617431, 14.256879, 0.000000, 0.000000, 270.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 2001.671386, -2628.083496, 14.256879, 0.000000, 0.000000, 180.000000, -1, 7, -1, 250.00, 250.00);
    // CreateDynamicObject(19447, 2001.671386, -2618.459228, 14.256879, 0.000000, 0.000000, 180.000000, -1, 7, -1, 250.00, 250.00);

    //Modshop
    // tmpobjid = CreateDynamicObject(17950, 2490.76, -2070.48, 14.81, 0.00, 0.00, -179.99, -1, -1, -1, 200.00, 200.00);
    // SetDynamicObjectMaterial(tmpobjid, 4, 16640, "a51", "a51_wall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(17950, 2483.54, -2070.48, 14.81, 0.00, 0.00, -179.99, -1, -1, -1, 200.00, 200.00);
    // SetDynamicObjectMaterial(tmpobjid, 4, 16640, "a51", "a51_wall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(17950, 2476.33, -2070.48, 14.81, 0.00, 0.00, -179.99, -1, -1, -1, 200.00, 200.00);
    // SetDynamicObjectMaterial(tmpobjid, 4, 16640, "a51", "a51_wall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(17950, 2469.12, -2070.48, 14.81, 0.00, 0.00, -179.99, -1, -1, -1, 200.00, 200.00);
    // SetDynamicObjectMaterial(tmpobjid, 4, 16640, "a51", "a51_wall1", 0x00000000);
    // tmpobjid = CreateDynamicObject(13027, 2500.95, -2074.53, 15.75, 0.00, 0.00, 179.99, -1, -1, -1, 200.00, 200.00);
    // tmpobjid = CreateDynamicObject(12978, 2500.93, -2074.43, 12.90, 0.00, 0.00, 0.00, -1, -1, -1, 200.00, 200.00);
    // tmpobjid = CreateDynamicObject(13027, 2509.86, -2074.57, 15.75, 0.00, 0.00, 179.99, -1, -1, -1, 200.00, 200.00);
    // tmpobjid = CreateDynamicObject(12978, 2510.12, -2074.43, 12.90, 0.00, 0.00, 0.00, -1, -1, -1, 200.00, 200.00);

    //small
    tmpobjid = CreateDynamicObject(19377, 1873.719848, -2412.763427, 15.965499, 0.000000, 90.000000, 0.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1878.746582, -2412.773681, 14.312299, 0.000000, 0.000000, 0.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1874.008789, -2417.512207, 14.312299, 0.000000, 0.000000, 90.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1869.249145, -2412.753906, 14.312299, 0.000000, 0.000000, 0.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1873.979980, -2408.048583, 14.312299, 0.000000, 0.000000, 90.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1872.013427, -2416.153808, 14.312299, 0.000000, 0.000000, 0.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(19387, 1872.013427, -2409.728027, 14.312299, 0.000000, 0.000000, 0.000000, -1, 3, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall4", 0x00000000);
    tmpobjid = CreateDynamicObject(1491, 1872.036132, -2410.469482, 12.554900, 0.000000, 0.000000, 90.000000, -1, 3, -1, 200.00, 200.00);
    tmpobjid = CreateDynamicObject(1569, 1875.176025, -2408.091796, 12.554900, 0.000000, 0.000000, 0.000000, -1, 3, -1, 200.00, 200.00);
    tmpobjid = CreateDynamicObject(19379, 1873.737548, -2412.803955, 12.498600, 0.000000, 90.000000, 0.000000, -1, 3, -1, 200.00, 200.00);

    //medium
    tmpobjid = CreateDynamicObject(19449, 1886.927001, -2430.741943, 14.312299, 0.000000, 0.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1882.196411, -2435.476806, 14.312299, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1871.120239, -2434.022705, 14.312299, 0.000000, 0.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1877.482910, -2433.764160, 14.312299, 0.000000, 0.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19387, 1871.120239, -2427.632080, 14.312299, 0.000000, 0.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1882.224487, -2426.043701, 14.312299, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1872.617675, -2426.043701, 14.312299, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1872.617675, -2435.476806, 14.312299, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1867.894653, -2430.795654, 14.312299, 0.000000, 0.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19387, 1875.958862, -2429.026367, 14.312299, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19357, 1872.791381, -2429.026367, 14.312299, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1872.982299, -2430.860595, 15.965499, 0.000000, 90.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1883.460815, -2430.873046, 15.965499, 0.000000, 90.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(19379, 1881.795166, -2430.737304, 12.498600, 0.000000, 90.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    tmpobjid = CreateDynamicObject(19379, 1871.312866, -2430.753173, 12.498600, 0.000000, 90.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    tmpobjid = CreateDynamicObject(1491, 1871.120239, -2428.370117, 12.554900, 0.000000, 0.000000, 90.000000, -1, 4, -1, 200.00, 200.00);
    tmpobjid = CreateDynamicObject(1491, 1875.179077, -2429.026367, 12.554900, 0.000000, 0.000000, 0.000000, -1, 4, -1, 200.00, 200.00);
    tmpobjid = CreateDynamicObject(1569, 1882.921508, -2435.412597, 12.554900, 0.000000, 0.000000, 180.000000, -1, 4, -1, 200.00, 200.00);

    //big
    tmpobjid = CreateDynamicObject(19449, 1886.927001, -2430.741943, 14.312299, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1882.196411, -2435.476806, 14.312299, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1882.109741, -2416.516601, 17.776199, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1886.927001, -2421.209716, 17.776199, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1883.711059, -2424.562255, 17.776199, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1877.315673, -2418.893554, 14.312299, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19387, 1882.170043, -2423.630371, 14.312299, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19357, 1878.965576, -2423.630371, 14.312299, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(3663, 1885.396972, -2423.189697, 14.712895, 0.000000, 4.599999, -90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18029, "genintintsmallrest", "GB_restaursmll10", 0xFFC0C0FF);
    SetDynamicObjectMaterial(tmpobjid, 1, 19426, "all_walls", "mirror01", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 19426, "all_walls", "mirror01", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 3, 19426, "all_walls", "mirror01", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 5, 19426, "all_walls", "mirror01", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 6, 19426, "all_walls", "mirror01", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1883.711059, -2421.406250, 14.312299, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19387, 1883.711059, -2418.189208, 17.776199, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1882.109741, -2416.516601, 14.312299, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1886.927001, -2421.209716, 14.312299, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1877.315673, -2428.425292, 14.312299, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19357, 1877.314575, -2434.787597, 14.312299, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(19377, 1881.930908, -2421.217041, 19.321300, 0.000000, 90.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(19357, 1885.323608, -2425.041015, 17.776199, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0xFFFFFFFF);
    tmpobjid = CreateDynamicObject(19449, 1882.085449, -2425.975585, 17.776199, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19449, 1877.359619, -2421.262451, 17.776199, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14711, "vgshm2int2", "HSV_wall1", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1878.964599, -2419.885742, 15.967300, 0.000000, 90.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(19377, 1882.198608, -2430.275390, 15.967300, 0.000000, 90.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    
    CreateDynamicObject(19379, 1881.795166, -2430.737304, 12.498600, 0.000000, 90.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    CreateDynamicObject(1569, 1882.921508, -2435.412597, 12.554900, 0.000000, 0.000000, 180.000000, -1, 5, -1, 200.00, 200.00);
    CreateDynamicObject(19379, 1881.837280, -2421.180908, 12.498600, 0.000000, 90.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    CreateDynamicObject(19379, 1878.947509, -2420.777587, 16.133300, 0.000000, 90.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    CreateDynamicObject(19462, 1885.517944, -2416.491210, 16.007307, 0.000000, 90.000000, 0.000000, -1, 5, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1883.711059, -2418.935058, 16.023099, 0.000000, 0.000000, 90.000000, -1, 5, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1881.394653, -2423.670410, 12.574700, 0.000000, 0.000000, 0.000000, -1, 5, -1, 200.00, 200.00);

    //All house
    CreateDynamicObject(14702, 1408.134521, -2453.996582, 17.101270, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(15054, 1434.050537, -2460.838134, 16.163909, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(15034, 1464.177368, -2453.488281, 14.353260, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(15053, 1450.023559, -2467.305908, 13.819290, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(15055, 1491.436523, -2456.472412, 14.159609, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(14383, 1426.749389, -2483.955322, 14.535329, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1416.250488, -2489.885498, 12.751048, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(15055, 1461.210449, -2506.010009, 13.908320, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(14718, 1482.370239, -2495.500488, 12.549519, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(14713, 1468.598388, -2483.043457, 14.381110, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(14710, 1509.735107, -2480.740722, 14.258170, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(14711, 1535.489746, -2493.872070, 14.355580, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1456.938110, -2497.471923, 12.646719, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1459.622802, -2502.430908, 12.689793, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1487.166748, -2447.914550, 12.900899, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1489.892456, -2452.893310, 12.909399, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1486.187011, -2452.757812, 12.909399, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1484.054077, -2457.255859, 12.909399, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1485.326416, -2458.634765, 12.909399, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1489.910034, -2457.238525, 12.900899, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1519.353271, -2484.729003, 12.727399, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1513.916625, -2485.919677, 12.778965, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1508.515747, -2482.227539, 12.778965, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1509.546508, -2474.681152, 12.778965, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1501.585937, -2489.554443, 12.778965, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1544.968017, -2487.159667, 12.744261, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1537.602294, -2488.005126, 12.762330, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1529.742675, -2491.917236, 12.762330, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1472.983764, -2488.037597, 12.575388, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1472.704223, -2485.299560, 12.607788, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1474.855712, -2484.989257, 12.607788, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1474.855712, -2480.655273, 12.607788, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1466.105712, -2480.254882, 12.607788, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1484.620117, -2500.418457, 12.523240, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1489.876464, -2497.927490, 12.537153, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1483.255615, -2494.584228, 12.537153, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1481.315673, -2500.099121, 12.577154, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1463.916137, -2458.222167, 12.606170, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1462.270996, -2455.391845, 12.654146, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1455.932739, -2502.290771, 12.689793, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1453.832519, -2506.783447, 12.689793, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1456.625000, -2508.084716, 12.689793, 0.000000, 0.000000, 180.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1459.654907, -2506.780761, 12.653503, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1449.254882, -2470.806640, 12.561645, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1452.166870, -2479.642333, 12.561645, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1449.257690, -2482.959228, 12.550682, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1447.946655, -2479.616943, 12.550682, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1447.946655, -2475.635498, 12.550682, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1422.652709, -2485.105224, 12.784863, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1423.358276, -2482.076660, 16.373653, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1446.601928, -2452.839355, 12.708717, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1434.150634, -2456.172607, 14.205574, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1436.175048, -2460.540283, 14.156228, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1432.683837, -2459.108886, 14.156228, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1502, 1439.061889, -2459.115722, 14.132365, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1498, 1410.050048, -2467.434326, 12.850975, 0.000000, 0.000000, 0.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1413.299316, -2465.301025, 12.896303, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1406.036621, -2461.707763, 12.896303, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1406.036621, -2455.093017, 12.896303, 0.000000, 0.000000, 90.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1410.158325, -2449.198974, 12.896303, 0.000000, 0.000000, 180.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1412.650756, -2449.198974, 16.976305, 0.000000, 0.000000, 180.000000, -1, 7, -1, 200.00, 200.00);
    CreateDynamicObject(1491, 1406.059570, -2458.552490, 16.976305, 0.000000, 0.000000, 270.000000, -1, 7, -1, 200.00, 200.00);

    // Gereja
    CreateDynamicObject(9931, 1947.48584, -368.61978, 1108.01086,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9931, 1980.55762, -368.51563, 1108.01086,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11472, 1964.78711, -372.02051, 1089.22351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11472, 1963.28967, -372.02139, 1089.22351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11472, 1964.04480, -372.98050, 1089.46387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1970.61438, -368.20404, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1968.51074, -368.20703, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1957.52185, -368.25833, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1959.61914, -368.25586, 1093.28040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 1963.97839, -368.12149, 1072.75439,   90.00000, 0.00000, 0.25000);
	CreateDynamicObject(2960, 1964.05884, -348.98987, 1101.36646,   0.00000, 90.00000, 89.99451);
	CreateDynamicObject(2960, 1963.98291, -349.00000, 1101.70667,   90.00000, 0.00000, 179.99451);
	CreateDynamicObject(2960, 1964.05872, -348.99045, 1100.00586,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3872, 1964.02686, -346.40851, 1102.33020,   0.00000, 155.25000, 90.27026);
	CreateDynamicObject(1667, 1962.98828, -370.41272, 1093.62292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1962.83521, -370.42520, 1093.70105,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2868, 1965.95605, -370.30142, 1093.53430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2270, 1965.47998, -352.47623, 1093.48364,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2271, 1962.60437, -352.58060, 1093.48804,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1964.05090, -370.68906, 1093.12402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2808, 1957.51367, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1959.68164, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1970.61328, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1968.44238, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1961.85547, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1966.27246, -364.26172, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2868, 1962.14697, -370.30624, 1093.53430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1966.09277, -374.17285, 1092.72888,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1961.96313, -374.22888, 1092.72888,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1963.95081, -370.94278, 1093.53430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3462, 1959.30408, -374.06839, 1094.24255,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3462, 1968.78186, -374.08835, 1094.24255,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(949, 1956.02258, -353.46194, 1095.83191,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2946, 1965.59985, -349.21301, 1091.94543,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2946, 1962.47034, -349.19955, 1091.94543,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2808, 1970.60681, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1968.43054, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1966.25378, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1957.52234, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1959.69580, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1961.86865, -360.67249, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1957.51660, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1959.69250, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1961.86780, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1970.61279, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1968.43701, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2808, 1966.26782, -357.18195, 1092.59192,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(14410, 1968.61401, -349.16000, 1092.01758,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(11472, 1971.98047, -351.97092, 1092.19568,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11472, 1971.98047, -353.19617, 1092.19568,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14410, 1959.47412, -349.41287, 1092.01660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11472, 1956.10046, -351.96487, 1092.19568,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(11472, 1956.10046, -353.19617, 1092.19568,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(11472, 1965.10974, -347.94531, 1095.44092,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(11472, 1962.98315, -347.94104, 1095.44019,   0.00000, 270.00000, 179.99451);
	CreateDynamicObject(1698, 1962.46606, -352.53400, 1095.31421,   0.00000, 0.00000, 270.27026);
	CreateDynamicObject(1698, 1962.87317, -352.53400, 1095.53918,   0.00000, 0.00000, 270.26917);
	CreateDynamicObject(1698, 1963.24683, -352.53400, 1095.76416,   0.00000, 0.00000, 270.26917);
	CreateDynamicObject(1698, 1965.60022, -352.53400, 1095.31421,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1965.20435, -352.53400, 1095.53918,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1964.72375, -352.53400, 1095.76416,   0.00000, 0.00000, 270.26917);
	CreateDynamicObject(970, 1964.05688, -353.88498, 1096.74243,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1959.94470, -353.88498, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1955.77246, -353.88589, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1968.17297, -353.88498, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1972.25000, -353.88589, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1959.97607, -351.29065, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1968.10303, -351.29065, 1095.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1965.96204, -349.21619, 1096.74170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1962.13757, -349.21619, 1096.74243,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2887, 1964.04822, -349.34906, 1094.78955,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1971.95068, -353.46039, 1095.83191,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1965.68555, -352.45767, 1091.94543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1962.38428, -352.45767, 1091.94543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1961.60730, -354.34103, 1092.58167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1966.46326, -354.34805, 1092.58167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 1970.09338, -373.59497, 1092.72888,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1720, 1970.91199, -373.58316, 1092.72888,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(18981, 1960.55225, -361.76544, 1091.45117,   0.00000, 90.00000, 0.00000);

    // SANA BASEMENT
    CreateDynamicObject(996,2491.228759,2376.987548,5.499314,0.000000,13.599999,0.000000);
    CreateDynamicObject(996,2483.045898,2376.997802,7.479209,0.000000,13.599999,0.000000);
    CreateDynamicObject(18766,2481.714111,2377.236083,9.478939,0.000000,0.000000,90.100021);
    CreateDynamicObject(10149,2482.230224,2379.350341,8.445214,0.000000,0.000000,90.199851);
    CreateDynamicObject(10149,2482.245361,2374.688720,8.445214,0.000000,0.000000,90.199851);
    CreateDynamicObject(19967,2482.205078,2375.721923,7.762203,0.000000,0.000000,90.199966);
    CreateDynamicObject(19967,2482.211914,2373.631591,7.762203,0.000000,0.000000,90.199966);

    //CGH Update
    tmpobjid = CreateDynamicObject(8356, 1818.278686, -1171.313598, 70.213050, 180.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18835, "mickytextures", "whiteforletters", 0x00000000);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CreateDynamicObject(19377, 1823.381347, -1219.143188, 66.475395, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1826.383178, -1209.522583, 66.475395, 0.000000, 90.000022, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1826.383178, -1199.894531, 66.475395, 0.000000, 90.000015, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1816.753173, -1199.894531, 66.475395, 0.000000, 90.000015, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1807.123168, -1199.894531, 66.475395, 0.000000, 90.000015, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1816.753173, -1209.522583, 66.475395, 0.000000, 90.000022, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1808.874877, -1219.114990, 66.475395, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1807.123168, -1209.522583, 66.475395, 0.000000, 90.000022, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1801.857421, -1219.114990, 66.475395, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1830.360473, -1219.143188, 66.475395, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1815.817260, -1223.485961, 66.475395, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1816.317138, -1223.485961, 66.475395, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1807.438964, -1193.376708, 66.475395, 0.000000, 90.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1817.068969, -1193.376708, 66.475395, 0.000000, 90.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1826.698974, -1193.376708, 66.475395, 0.000000, 90.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1823.270141, -1219.067382, 66.565368, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1819.018554, -1209.437377, 66.565368, 0.000000, 90.000007, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1819.018554, -1199.807373, 66.565368, 0.000000, 90.000007, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1808.528808, -1209.517456, 66.565368, 0.000000, 90.000015, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1808.528808, -1199.887451, 66.565368, 0.000000, 90.000015, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1833.757690, -1219.135864, 66.565368, 0.000000, 90.000022, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19462, 1815.848876, -1223.477050, 66.565368, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1829.436523, -1209.517456, 66.565368, 0.000000, 90.000022, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1829.436523, -1199.887451, 66.565368, 0.000000, 90.000022, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19462, 1816.299316, -1223.477050, 66.565368, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19462, 1807.718383, -1193.339721, 66.565368, 0.000000, 90.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19462, 1817.348388, -1193.339721, 66.565368, 0.000000, 90.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19462, 1826.978393, -1193.339721, 66.565368, 0.000000, 90.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19454, 1738.849975, -1845.189941, 66.470001, 0.000000, 90.000000, 360.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1808.860473, -1219.067382, 66.565368, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1810.254150, -1237.236694, 66.470001, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1810.285278, -1246.882812, 66.470001, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1820.787353, -1236.401611, 66.470001, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1831.163452, -1236.433959, 66.655403, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19377, 1820.829345, -1226.889404, 66.470001, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.810058, -1216.860961, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.810058, -1221.103271, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3657, 1810.275512, -1214.766845, 67.177299, 0.000000, 0.000000, 450.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.599975, -1206.339965, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.580322, -1215.736206, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.599975, -1225.300048, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1826.709960, -1192.140014, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1817.079956, -1192.150024, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1807.469970, -1192.160034, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1802.670043, -1197.040039, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1802.670043, -1206.599975, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1802.670043, -1216.010009, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1802.670043, -1225.310058, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1826.729980, -1223.469970, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1814.690795, -1223.465698, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1807.507080, -1223.465698, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19458, 1733.670043, -1261.619995, 70.519996, 0.000000, 90.000000, 360.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19404, 1804.339965, -1201.729980, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19404, 1807.869995, -1201.729980, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19325, 1809.579956, -1201.489990, 64.339996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19325, 1809.619995, -1192.469970, 64.339996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.560058, -1196.910034, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1809.560058, -1203.239990, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.561157, -1206.420043, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19466, 1804.430053, -1201.670043, 65.599998, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19466, 1807.920043, -1201.699951, 65.599998, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1804.680053, -1207.910034, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19431, 1806.079956, -1201.729980, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19404, 1809.569946, -1209.599975, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.590209, -1214.849731, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19404, 1809.579956, -1212.270019, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.599975, -1197.689941, 63.110000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.650024, -1215.569946, 63.090000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19466, 1809.609985, -1209.670043, 64.699996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19466, 1809.619995, -1212.469970, 64.699996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1823.599975, -1218.729980, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1823.599975, -1213.040039, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1828.349975, -1211.530029, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1804.780029, -1216.349975, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.569946, -1218.010009, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1809.569946, -1221.219970, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1809.569946, -1222.250000, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1804.349975, -1219.670043, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1805.869995, -1217.979980, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.489990, -1203.680053, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1825.420043, -1203.680053, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1814.020019, -1215.849975, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1814.010009, -1218.810058, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1814.000000, -1221.890014, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1815.650024, -1219.359985, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1816.589965, -1219.349975, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1818.130004, -1215.920043, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1818.119995, -1219.050048, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1818.119995, -1222.089965, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.420043, -1218.390014, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.420043, -1209.640014, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.410034, -1200.189941, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.410034, -1195.880004, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1826.550048, -1192.599975, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1817.020019, -1192.589965, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1807.959960, -1192.599975, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1803.219970, -1197.380004, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1803.219970, -1206.989990, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1803.219970, -1216.180053, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1803.219970, -1218.989990, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1808.079956, -1223.060058, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1817.619995, -1223.069946, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1826.619995, -1223.069946, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1826.680053, -1202.430053, 68.389999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1821.890014, -1194.689941, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1821.880004, -1200.880004, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1809.359985, -1214.650024, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.359985, -1221.910034, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.369995, -1208.229980, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19431, 1809.359985, -1206.650024, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19431, 1809.369995, -1219.609985, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1809.380004, -1198.969970, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.369995, -1204.869995, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1809.380004, -1193.359985, 68.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1724.709960, -2243.389892, 68.290000, 0.000000, 0.000000, 99.419998, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.619995, -1218.750000, 63.110000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1814.069946, -1222.640014, 63.069999, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(982, 1823.893066, -1190.891357, 65.794540, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.369995, -1205.609985, 66.639999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.439941, -1194.140014, 66.620002, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.420043, -1209.010009, 66.639999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1809.380004, -1222.699951, 66.639999, 0.000000, 0.000000, 89.800003, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(18756, 1833.489990, -1205.829956, 64.639999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(18757, 1833.510009, -1209.750000, 64.639999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2389, 1831.270019, -1219.619995, 63.779998, 0.000000, 0.000000, 269.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2389, 1831.270019, -1220.229980, 63.779998, 0.000000, 0.000000, 269.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2390, 1831.239990, -1220.819946, 63.799999, 0.000000, 0.000000, 269.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2381, 1831.239990, -1218.369995, 63.799999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2385, 1823.630004, -1222.170043, 64.000000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2384, 1823.900024, -1220.859985, 64.139984, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2384, 1823.890014, -1222.270019, 64.159973, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2384, 1823.849975, -1221.560058, 64.170013, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2400, 1823.819946, -1219.130004, 63.279998, 0.000000, 0.000000, 87.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1849, 1831.060058, -1194.880004, 63.110000, 0.000000, 0.000000, 990.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1849, 1831.119995, -1200.469970, 63.110000, 0.000000, 0.000000, 990.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.219970, -1196.270019, 63.799999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.260009, -1195.010009, 63.799999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.189941, -1193.430053, 63.799999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.229980, -1194.260009, 64.199996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.290039, -1195.709960, 64.199996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.270019, -1199.569946, 63.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.250000, -1201.099975, 63.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.229980, -1202.540039, 63.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1575, 1831.290039, -1198.410034, 63.389999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1523, 1821.898681, -1201.601196, 66.660003, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2690, 1823.790039, -1215.000000, 64.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2690, 1823.750000, -1214.640014, 64.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2690, 1823.810058, -1214.319946, 64.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2690, 1823.819946, -1215.349975, 64.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1742, 1828.319946, -1203.739990, 63.099998, 0.000000, 0.000000, 181.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.130004, -1203.280029, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.140014, -1202.349975, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.140014, -1201.449951, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.130004, -1200.550048, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.119995, -1199.619995, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.109985, -1198.719970, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.099975, -1197.829956, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.099975, -1196.910034, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.099975, -1195.989990, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.109985, -1195.050048, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.109985, -1194.119995, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.109985, -1193.180053, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2435, 1824.109985, -1192.319946, 63.099998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2614, 1831.400024, -1197.709960, 65.550003, 0.000000, 0.000000, 273.200012, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2773, 1822.640014, -1196.829956, 63.630001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2773, 1822.579956, -1199.329956, 63.630001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2773, 1808.770019, -1200.449951, 63.700000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2773, 1806.839965, -1200.500000, 63.700000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2773, 1805.229980, -1200.540039, 63.700000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2773, 1803.410034, -1200.589965, 63.700000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2700, 1803.010009, -1201.449951, 65.709999, 0.000000, 0.000000, 54.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2685, 1809.670043, -1205.329956, 64.400001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2685, 1809.680053, -1213.829956, 64.400001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2686, 1826.349975, -1203.800048, 64.400001, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2616, 1829.750000, -1211.729980, 64.709999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2737, 1826.089965, -1211.729980, 64.699996, 0.000000, 0.000000, 358.989990, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1803.069946, -1195.780029, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1803.060058, -1192.699951, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1806.790039, -1192.770019, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1806.839965, -1195.680053, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1823.550048, -1214.810058, 66.639999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1826.718139, -1215.950805, 66.639999, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1822.520019, -1217.890014, 66.639999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1825.589965, -1218.959960, 66.639999, 0.000000, 0.000000, 179.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1827, 1824.630004, -1216.880004, 66.540000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3393, 1803.410034, -1210.040039, 63.000000, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3386, 1806.479980, -1208.420043, 63.169998, 0.000000, 0.000000, 89.800003, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1813.449951, -1193.180053, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1810.737792, -1222.447021, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1813.780029, -1214.060058, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1817.979980, -1213.810058, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1822.219970, -1214.449951, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1830.709960, -1210.400024, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1830.979980, -1204.760009, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1822.859985, -1202.339965, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1822.900268, -1193.219848, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1514, 1824.050048, -1197.599975, 64.400001, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2165, 1828.589965, -1194.670043, 63.099998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2186, 1826.560058, -1192.630004, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1829.709960, -1194.030029, 63.599998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1825.469970, -1198.000000, 63.599998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1725, 1827.829956, -1197.770019, 66.559997, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2700, 1822.260009, -1193.020019, 69.510002, 0.000000, 0.000000, -47.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1830.859985, -1201.800048, 66.599998, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2165, 1807.329956, -1202.349975, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2165, 1803.849975, -1202.310058, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1514, 1808.560058, -1202.310058, 64.099998, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1807.770019, -1203.469970, 63.599998, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1804.239990, -1203.430053, 63.599998, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2525, 1803.239990, -1218.020019, 63.099998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2523, 1803.239990, -1222.910034, 63.200000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2523, 1803.239990, -1221.219970, 63.200000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1830.119995, -1193.849975, 68.120002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2614, 1831.229980, -1198.250000, 68.900001, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(330, 1826.270019, -1203.609985, 64.500000, 0.000000, 0.000000, 359.799987, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.810058, -1212.819946, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.849975, -1208.170043, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.900024, -1202.709960, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1804.509643, -1215.569946, 67.110023, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1808.790039, -1211.099975, 66.599998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.800048, -1197.219970, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1796, 1806.800048, -1194.310058, 66.599998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1808.790039, -1195.790039, 66.599998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1808.760009, -1200.810058, 66.599998, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(252, 1817.380004, -1220.380004, 63.220001, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(79, 1816.339965, -1220.319946, 63.200000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3384, 1814.903564, -1220.199340, 63.459999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1850, 1804.439941, -1207.140014, 63.000000, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1279, 1803.810058, -1207.219970, 63.310001, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1279, 1805.349975, -1207.160034, 63.310001, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1279, 1805.310058, -1207.250000, 63.819999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1279, 1803.930053, -1207.319946, 63.819999, 0.000000, 0.000000, 0.109999, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1279, 1803.930053, -1207.319946, 64.230003, 0.000000, 0.000000, 0.109999, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1279, 1805.310058, -1207.290039, 64.230003, 0.000000, 0.000000, 0.109999, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1569, 1815.770019, -1192.199951, 63.090000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1569, 1818.729980, -1192.209960, 63.090000, 0.000000, 0.000000, 2700.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1775, 1810.119995, -1202.380004, 64.139999, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1302, 1810.000000, -1203.630004, 63.000000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1775, 1827.880004, -1193.280029, 67.750000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1997, 1824.540039, -1211.020019, 63.099998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1997, 1826.609985, -1210.959960, 63.099998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1997, 1828.709960, -1210.989990, 63.099998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(970, 1814.140014, -1216.839965, 67.199996, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(970, 1814.119995, -1214.770019, 67.220001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(970, 1818.219970, -1216.819946, 67.199996, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(970, 1818.239990, -1214.900024, 67.199996, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(970, 1816.170043, -1212.670043, 67.220001, 0.000000, 0.000000, -2.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1813.750000, -1193.760009, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1818.079956, -1193.640014, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1810.699951, -1199.550048, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1810.619995, -1211.449951, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1810.579956, -1218.469970, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1829.949951, -1219.040039, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1830.130004, -1209.000000, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1820.390014, -1199.030029, 68.059997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1805.939941, -1192.439941, 65.629997, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1817.270019, -1192.329956, 65.830001, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1827.369995, -1192.400024, 65.830001, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1829.130004, -1204.359985, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1828.300048, -1204.349975, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1827.500000, -1204.310058, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1830.050048, -1204.250000, 63.099998, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1491, 1805.839965, -1218.689941, 63.029998, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2002, 1810.459960, -1201.469970, 63.000000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2002, 1830.839965, -1197.680053, 63.000000, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1805.989990, -1207.630004, 65.800003, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1661, 1474.650024, -3244.570068, 51.169998, 0.000000, 0.000000, 0.300000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2688, 1823.699951, -1213.969970, 64.500000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1811.869995, -1192.890014, 69.500000, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1820.229980, -1192.810058, 69.500000, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1813.489990, -1222.869995, 69.400001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1825.050048, -1222.849975, 69.400001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1826.390014, -1202.239990, 69.610000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1997, 1822.819946, -1203.040039, 66.660003, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1997, 1825.089965, -1203.079956, 66.699996, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1826.930053, -1202.959960, 66.699996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1827.880004, -1202.969970, 66.699996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(932, 1828.810058, -1202.969970, 66.699996, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2894, 1824.000000, -1198.410034, 64.199996, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2894, 1805.010009, -1202.329956, 63.900001, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1809.150024, -1191.989990, 65.599998, 4.000000, 11.000000, 91.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1830.819946, -1192.199951, 65.500000, 4.000000, 11.000000, 69.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1809.800048, -1192.119995, 65.500000, 4.000000, 15.000000, 156.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1831.560058, -1223.069946, 69.199996, 0.000000, 11.000000, -12.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1809.790039, -1223.109985, 69.199996, 0.000000, 11.000000, -107.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1800, 1818.979980, -1222.900024, 63.000000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1811.729980, -1223.229980, 65.809997, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2007, 1830.069946, -1222.890014, 63.099998, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2007, 1830.979980, -1222.890014, 63.119998, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1823.297119, -1223.298583, 65.599998, 4.000000, 15.000000, 317.598449, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2796, 1809.618041, -1217.745849, 65.926200, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19431, 1822.598510, -1223.465698, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1820.667114, -1223.465698, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1826.782470, -1197.029052, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1816.319580, -1197.014404, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1805.891235, -1197.015625, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1826.782958, -1206.641845, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1816.386962, -1206.641845, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1805.962890, -1206.641845, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1827.411621, -1216.250732, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1806.561523, -1216.250732, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1826.245971, -1225.501220, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1815.792236, -1225.501220, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1805.345581, -1225.839599, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1816.934204, -1216.231445, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1822.961181, -1227.220336, 64.860000, 0.000000, 0.000000, 161.723968, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1817.012817, -1228.128173, 64.860000, 0.000000, 0.000000, 161.723968, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1815.502319, -1234.260742, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1810.676879, -1232.624755, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1805.883300, -1237.349121, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1805.893432, -1244.067871, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19325, 1815.475830, -1239.019653, 64.559997, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1821.464843, -1233.343383, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19388, 1821.465576, -1236.512207, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1821.468261, -1239.673950, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1815.504638, -1245.767089, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1821.095825, -1241.050170, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1826.224365, -1232.064086, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1827.446289, -1241.053222, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.115966, -1236.830078, 64.860000, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1826.721923, -1236.577880, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1825.621826, -1234.834594, 63.054500, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1824.924682, -1237.843994, 63.054500, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1827.693359, -1238.272949, 63.054500, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1726, 1828.409057, -1235.447265, 63.054500, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1827, 1826.619506, -1236.644653, 63.096210, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1808, 1821.908447, -1232.704467, 63.094520, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1828, 1826.859008, -1236.464111, 63.095378, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2296, 1823.270507, -1240.485351, 63.094699, 0.000000, 0.000000, 130.627212, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1670, 1826.651733, -1236.636840, 63.521968, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1806.244018, -1237.225097, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1816.507812, -1244.381225, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1806.049926, -1246.781616, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2737, 1810.970458, -1232.812133, 64.699996, 0.000000, 0.000000, 358.989990, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1809.956420, -1237.180664, 63.095989, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1812.243652, -1238.501586, 63.096000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1808.994140, -1237.138671, 63.096000, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1812.246337, -1240.790527, 63.096000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1812.232666, -1243.056518, 63.096000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1808.994140, -1239.404907, 63.096000, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1808.994140, -1241.686279, 63.096000, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2205, 1811.292358, -1243.035278, 63.096000, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19325, 1810.623901, -1240.026000, 63.933959, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1807.903076, -1242.670166, 63.497798, 0.000000, 0.000000, 129.629653, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1807.816162, -1240.903808, 63.497798, 0.000000, 0.000000, 129.629653, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1807.836669, -1239.430053, 63.497798, 0.000000, 0.000000, 129.629653, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1807.839599, -1237.812133, 63.497798, 0.000000, 0.000000, 129.629653, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1807.839599, -1237.812133, 63.497798, 0.000000, 0.000000, 129.629653, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1813.407470, -1237.290527, 63.497798, 0.000000, 0.000000, 215.811370, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1813.331298, -1239.368774, 63.497798, 0.000000, 0.000000, 215.811370, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1813.550537, -1241.376342, 63.497798, 0.000000, 0.000000, 215.811370, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1813.472412, -1243.219970, 63.497798, 0.000000, 0.000000, 215.811370, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1811.966552, -1244.308349, 63.497798, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1810.453735, -1244.268920, 63.497798, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1671, 1809.075683, -1244.255981, 63.497798, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1714, 1810.527343, -1235.792602, 63.095569, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1810.762329, -1246.486694, 64.860000, 0.000000, 0.000000, 90.010002, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19379, 1816.632934, -1234.915893, 63.008598, 0.000000, 90.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1817.932250, -1241.049560, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19358, 1817.125854, -1241.022338, 64.860000, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1502, 1821.439453, -1237.270507, 63.125598, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1502, 1815.528198, -1235.026611, 63.085601, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1815.268920, -1246.204956, 65.599998, 4.000000, 15.000000, 317.598449, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1820.275146, -1239.601684, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3812, 1826.678100, -1232.335449, 65.830001, 0.000000, 0.000000, 270.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2921, 1831.119018, -1232.077148, 65.599998, 4.000000, 15.000000, 70.002799, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1816.154296, -1239.764160, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(646, 1820.533691, -1233.616333, 64.510002, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(14411, 1816.129028, -1216.833129, 63.355400, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(3657, 1815.905761, -1212.016845, 67.177299, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2133, 1804.028564, -1204.436035, 66.670196, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1808, 1803.723754, -1199.903686, 66.670402, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1808, 1803.802856, -1198.646240, 66.670402, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2133, 1803.807128, -1195.605712, 66.670196, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2133, 1804.142211, -1210.475463, 66.670196, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1808, 1803.618164, -1214.408691, 66.670402, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2133, 1803.470214, -1218.666992, 66.670196, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1808, 1803.891601, -1222.200927, 66.650398, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2133, 1822.720703, -1195.042724, 66.670196, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(1808, 1822.571899, -1193.680053, 66.670402, 0.000000, 0.000000, 90.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2384, 1823.890014, -1222.270019, 64.319999, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(2384, 1823.890014, -1222.270019, 64.550010, 0.000000, 0.000000, 0.000000, -1, 4, -1, 150.00, 150.00);
    CreateDynamicObject(19450, 1831.599609, -1196.749633, 64.860000, 0.000000, 0.000000, 180.000000, -1, 4, -1, 150.00, 150.00);

    // POM Bensin
    CreateDynamicObject(984, 1940.992553, -1772.865356, 13.072823, 0.000000, 0.000000, 0.000000, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(984, 1942.323852, -1772.865356, 13.072823, 0.000000, 0.000000, 0.000000, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(984, 1003.952270, -937.482543, 41.906604, 0.000000, 0.000000, -82.000038, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(984, 1003.766418, -936.166625, 41.906604, 0.000000, 0.000000, -82.000038, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(970, 654.800415, -559.633666, 15.984407, 0.000000, 0.000000, -89.899978, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(970, 656.401367, -559.630554, 15.984407, 0.000000, 0.000000, -89.899978, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(970, 656.420166, -570.361267, 15.984407, 0.000000, 0.000000, -89.899978, -1, 0, -1, 150.00, 150.00); 
    CreateDynamicObject(970, 654.820434, -570.364196, 15.984407, 0.000000, 0.000000, -89.899978, -1, 0, -1, 150.00, 150.00); 

    //NS Map 2
    tmpobjid = CreateDynamicObject(14789, 1500.681884, -1539.418579, 16.799900, 0.000000, 0.000000, 270.670013, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "beretblk", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 1, 18646, "matcolours", "grey-80-percent", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 2, 18646, "matcolours", "grey-40-percent", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 4, 18901, "matclothes", "beretblk", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 6, 18901, "matclothes", "beretblk", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 7, 19597, "lsbeachside", "wall7-256x256", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 8, 18901, "matclothes", "beretblk", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 9, 19597, "lsbeachside", "wall7-256x256", 0x00000000);
    SetDynamicObjectMaterial(tmpobjid, 10, 18901, "matclothes", "beretblk", 0x00000000);
    tmpobjid = CreateDynamicObject(19379, 1499.587646, -1539.297851, 11.745534, 0.000000, 0.000000, 90.599990, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "beretblk", 0x00000000);

    newbieschool = CreateDynamicObject(4729, 1511.038085, -1551.525634, 17.514429, 0.000000, 0.000000, -159.300018, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterialText(newbieschool, 0, " ", 120, "Ariel", 18, 1, 0xFFFFFFFF, 0xFF000000, 1);

    tmpobjid = CreateDynamicObject(19379, 1486.509155, -1539.434692, 11.745534, 0.000000, 0.000000, 90.599990, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "beretblk", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1495.952514, -1558.612060, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1500.882202, -1558.612060, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1500.882202, -1548.683105, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1500.882202, -1538.955566, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1505.831298, -1538.955566, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1505.831298, -1548.897094, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1490.919433, -1541.296142, 10.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1490.919433, -1546.296142, 10.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(4729, 1490.453125, -1553.283325, 16.874414, 0.000000, 0.000000, -160.000045, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1505.831298, -1558.838989, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1510.701049, -1558.838989, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1490.919433, -1551.296142, 10.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1487.919433, -1541.296142, 11.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1487.919433, -1546.296142, 11.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1510.701049, -1549.098876, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(4729, 1487.451293, -1553.310913, 16.874414, 0.000000, 0.000000, -160.000045, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1487.919433, -1551.296142, 11.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1490.919433, -1556.296142, 10.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1484.919433, -1541.296142, 12.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1484.919433, -1546.296142, 12.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(3657, 1491.351806, -1559.651245, 13.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterialText(tmpobjid, 0, ".", 10, "Ariel", 20, 0, 0x00000000, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(18766, 1510.701049, -1539.390014, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1511.431030, -1541.749267, 16.455513, 180.000000, 450.000000, -89.500000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "beretblk", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1487.919433, -1556.296142, 11.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(4729, 1484.483398, -1553.315795, 16.874414, 0.000000, 0.000000, -160.000045, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1484.919433, -1551.296142, 12.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1490.919433, -1561.296142, 10.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1481.919433, -1541.296142, 13.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1481.919433, -1546.296142, 13.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(4729, 1484.483398, -1553.315795, 16.874414, 0.000000, 0.000000, -160.000045, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1484.919433, -1556.296142, 12.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1481.919433, -1551.296142, 13.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1487.919433, -1561.296142, 11.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1478.919433, -1541.296142, 14.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1478.919433, -1546.296142, 14.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1481.919433, -1556.296142, 13.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1511.649780, -1560.930053, 16.455513, 180.000000, 450.000000, -89.500000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18901, "matclothes", "beretblk", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1484.919433, -1561.296142, 12.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1478.919433, -1551.296142, 14.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1481.919433, -1561.296142, 13.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1478.919433, -1556.296142, 14.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1495.952514, -1548.653198, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, 1495.952514, -1538.931884, 13.525519, 90.000000, 360.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18835, "mickytextures", "whiteforletters", 0x00000000);
    tmpobjid = CreateDynamicObject(18764, 1478.919433, -1561.296142, 14.817000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 18787, "matramps", "cardboard4", 0x00000000);
    tmpobjid = CreateDynamicObject(4729, 1493.458129, -1553.499267, 16.874414, 0.000000, 0.000000, -160.000045, -1, 5, -1, 50.00, 50.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);

    CreateDynamicObject(14410, 1495.261840, -1540.858642, 10.105500, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14699, 1491.321289, -1545.187866, 19.129800, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14410, 1492.261840, -1540.858642, 11.105500, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(2314, 1511.709960, -1558.869750, 16.600000, 0.000000, 269.540008, 0.990000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(2314, 1511.739746, -1559.119750, 16.600000, 0.000000, 269.549804, 0.990000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14699, 1494.800048, -1545.187866, 19.129800, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(1557, 1498.243164, -1539.382568, 14.025519, 0.000000, 0.000000, 0.699999, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14699, 1490.590209, -1564.449462, 19.100000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1491.351806, -1547.958740, 13.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14410, 1489.261840, -1540.858642, 12.105500, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1491.351806, -1551.958740, 13.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1488.351806, -1547.958740, 14.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1491.351806, -1555.651245, 13.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14410, 1486.261840, -1540.858642, 13.105500, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14699, 1495.000000, -1564.449462, 19.100000, 0.000000, 0.000000, 0.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1488.351806, -1551.958740, 14.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1485.351806, -1547.958740, 15.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1488.351806, -1555.651245, 14.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(983, 1496.670410, -1542.832763, 14.585529, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14410, 1483.261840, -1540.858642, 14.105500, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1485.351806, -1551.958740, 15.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1488.351806, -1559.651245, 14.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1482.351806, -1547.958740, 16.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1485.351806, -1555.651245, 15.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1482.351806, -1551.958740, 16.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1485.351806, -1559.651245, 15.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1482.351806, -1555.651245, 16.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1479.351806, -1547.958740, 17.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1479.351806, -1551.958740, 17.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1482.351806, -1559.651245, 16.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1479.351806, -1555.651245, 17.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(3657, 1479.351806, -1559.651245, 17.790100, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(983, 1499.871337, -1539.651000, 14.585529, 0.000000, 0.000000, 180.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(4729, 1481.119750, -1750.819946, 29.520000, 0.000000, 0.000000, 109.989799, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(983, 1499.871337, -1539.651000, 15.825545, 0.000000, 0.000000, 180.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(983, 1496.670410, -1542.832763, 15.835542, 0.000000, 0.000000, 90.000000, -1, 5, -1, 50.00, 50.00);
    CreateDynamicObject(14410, 1491.611206, -1540.858642, 10.815493, 0.000000, 0.000000, 270.000000, -1, 5, -1, 50.00, 50.00);

    board[1] = CreateDynamicObject(19482,284.399,1915.851,908.906,0.000,-1.199,0.000,-1,-1,-1,300.000,300.000);
    SetDynamicObjectMaterialText(board[1], 0, "Los Santos Goverment\nBoard", 130, "Ariel", 30, 1, -1, -16777216, 1);
    
    board[2] = CreateDynamicObject(19482,700.939,-1371.885,500.905,0.000,0.000,360.000,-1,-1,-1,300.000,300.000);
    SetDynamicObjectMaterialText(board[2], 0, "SaNews\nBoard", 130, "Ariel", 33, 1, -1, -16777216, 1);

    //LS Police Department
    tmpobjid = CreateDynamicObject(987,1540.106,-1617.299,12.366,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(19365,1543.449,-1634.306,14.300,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1540.209,-1602.625,12.373,0.000,0.000,-90.004,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1552.114,-1602.867,12.371,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1564.047,-1602.877,12.371,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1575.991,-1602.894,12.371,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1587.918,-1602.916,12.371,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1599.849,-1602.943,12.371,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1607.777,-1602.922,12.371,0.000,0.000,180.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1595.918,-1637.538,12.366,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1607.602,-1614.844,12.377,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1607.568,-1626.776,12.377,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    tmpobjid = CreateDynamicObject(987,1607.532,-1637.521,12.377,0.000,0.000,90.000,-1,-1,-1,200.000,200.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(970,1541.028,-1633.025,13.182,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1535.170,-1636.866,13.182,0.000,0.000,78.403,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.711,-1645.128,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.666,-1649.265,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.627,-1653.406,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.594,-1657.559,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.565,-1661.704,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.722,-1683.561,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.707,-1687.681,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.669,-1691.781,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.634,-1695.919,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.609,-1700.066,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.582,-1704.189,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.575,-1708.339,13.182,0.000,0.000,89.998,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.552,-1712.477,13.182,0.000,0.000,89.998,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.591,-1714.754,13.182,0.000,0.000,89.998,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1562.390,-1718.675,13.183,0.000,0.000,90.725,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1545.613,-1718.754,13.183,0.000,0.000,90.646,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1562.363,-1714.609,13.181,0.000,0.000,90.005,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1545.613,-1714.609,13.182,0.000,0.000,89.998,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1537.447,-1672.979,13.182,0.000,0.000,90.384,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1537.433,-1679.374,13.182,0.000,0.000,90.384,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1537.307,-1666.096,13.182,0.000,0.000,90.384,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(970,1534.736,-1640.994,13.182,0.000,0.000,89.664,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19787, "samplcdtvs1", "samplcdtv1screen", 0);
    // tmpobjid = CreateDynamicObject(987,1540.197,-1605.392,12.373,0.000,0.000,-90.004,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    // SetDynamicObjectMaterial(tmpobjid, 1, 19325, "lsmall_shops", "lsmall_window01", 0);
    // SetDynamicObjectMaterial(tmpobjid, 2, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(19365,1543.449,-1619.482,14.300,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(19365,1543.449,-1620.701,14.300,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(19365,1543.449,-1637.771,14.300,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(19365,1543.449,-1622.283,14.300,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);
    // tmpobjid = CreateDynamicObject(19365,1543.449,-1635.406,14.300,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // SetDynamicObjectMaterial(tmpobjid, 0, 19595, "lsappartments1", "carpet4-256x256", 0);

    // CreateDynamicObject(4003,1552.807,-1674.015,24.934,0.000,0.000,91.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(8623,1546.513,-1661.360,13.689,0.000,0.000,89.358,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(8623,1546.140,-1690.042,13.689,0.000,0.000,89.358,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1280,1543.310,-1665.760,12.907,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1280,1543.385,-1661.679,12.907,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1280,1543.367,-1657.157,12.907,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1280,1543.356,-1685.451,12.907,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1280,1543.288,-1689.734,12.907,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1280,1543.302,-1694.472,12.907,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.409,-1660.703,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.493,-1651.528,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.266,-1669.606,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.266,-1669.606,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.460,-1681.518,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.435,-1690.406,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1231,1539.571,-1699.767,13.699,0.000,0.000,89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1258,1538.804,-1650.677,13.316,0.000,0.000,-89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1258,1538.584,-1636.317,13.316,0.000,0.000,-89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1258,1538.642,-1700.004,13.316,0.000,0.000,-89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1258,1538.639,-1715.265,13.316,0.000,0.000,-89.074,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1288,1545.991,-1678.753,12.942,0.000,0.000,89.459,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1288,1545.955,-1672.493,12.942,0.000,0.000,89.459,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(3934,1565.390,-1698.834,27.382,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(3934,1565.362,-1649.994,27.382,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1496,1564.225,-1667.364,27.387,0.000,0.000,0.000,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1226,1565.381,-1619.256,16.232,0.000,0.000,-90.139,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1226,1556.247,-1621.456,16.232,0.000,0.000,90.139,-1,-1,-1,200.000,200.000);
    // CreateDynamicObject(1226,1577.878,-1621.568,16.232,0.000,0.000,90.139,-1,-1,-1,200.000,200.000);

    //Jail map
    tmpobjid = CreateDynamicObject(19853,-3422.763,1562.656,97.913,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-40-percent", 0);
    tmpobjid = CreateDynamicObject(18766,-3421.092,1557.317,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(19853,-3422.763,1562.656,102.343,0.000,180.000,180.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "COL_LIGHTBLUE", 0);
    tmpobjid = CreateDynamicObject(982,-3434.900,1570.047,99.807,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-50-percent", 0);
    tmpobjid = CreateDynamicObject(982,-3434.900,1570.047,101.047,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-50-percent", 0);
    tmpobjid = CreateDynamicObject(18766,-3432.456,1576.399,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(982,-3434.900,1570.047,98.587,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-50-percent", 0);
    tmpobjid = CreateDynamicObject(18766,-3432.456,1582.890,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3432.456,1570.078,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3432.456,1563.678,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3432.456,1557.317,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3432.452,1578.392,101.973,270.000,90.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3432.452,1568.534,101.973,270.000,90.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3432.452,1561.812,101.973,270.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.094,1582.890,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.097,1561.812,101.973,270.000,90.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.097,1571.763,101.973,270.000,90.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.097,1578.395,101.973,270.000,90.000,0.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.090,1563.678,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.093,1570.078,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3421.093,1576.399,96.743,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3425.944,1557.317,97.473,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3429.227,1557.317,97.473,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3427.635,1582.890,97.473,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3424.392,1582.890,97.473,360.000,90.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3435.213,1561.832,99.933,540.000,360.000,630.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3435.213,1571.671,99.933,540.000,360.000,630.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3435.213,1581.351,99.933,540.000,360.000,630.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3418.233,1581.351,99.933,540.000,360.000,630.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3418.233,1571.461,99.933,540.000,360.000,630.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(18766,-3418.233,1562.402,99.933,540.000,360.000,630.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 19071, "wssections", "wood1", -1);
    tmpobjid = CreateDynamicObject(19483,-3430.040,1579.653,100.873,0.000,0.000,180.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3423.516,1560.443,100.873,0.000,0.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3430.040,1573.332,100.873,0.000,0.000,180.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3430.040,1566.842,100.873,0.000,0.000,180.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3430.040,1560.443,100.873,0.000,0.000,180.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3423.516,1566.774,100.873,0.000,0.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3423.516,1573.204,100.873,0.000,0.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
    tmpobjid = CreateDynamicObject(19483,-3423.516,1579.634,100.873,0.000,0.000,360.000,100,3,-1,300.000,300.000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Please READ!\nhttps://"#SERVER_DISCORD"\nhttps://"#SERVER_DISCORD"""", 130, "Ariel", 40, 1, -1, 65535, 1);
//    SetDynamicObjectMaterialText(tmpobjid, 0, "{000000}Visit our website\n"#SERVER_DISCORD"", 130, "Ariel", 40, 1, -1, 65535, 1);

    tmpobjid = CreateDynamicObject(982,-3429.987,1570.047,98.557,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3429.987,1570.047,99.747,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3429.987,1570.047,101.047,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3423.564,1570.047,98.557,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(19379,163.869,2512.023,15.972,360.000,90.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3423.564,1570.047,99.807,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3423.564,1570.047,101.077,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3418.613,1570.047,98.557,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3418.613,1570.047,99.797,0.000,0.000,0.000,100,3,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(982,-3418.613,1570.047,101.017,0.000,0.000,0.000,100,3,-1,300.000,300.000);

    // Warehouse crates
    CreateDynamicObject(3798, 1260.306274, -25.321689, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1001.883361, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.317016, -25.365781, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.315673, -25.277160, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.316040, -25.307142, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.397460, -25.393985, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.261474, -23.312185, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.250976, -23.268102, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.312622, -23.355394, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.358764, -27.226678, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.418823, -27.269641, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.428833, -27.313713, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.285766, -25.277828, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.396728, -25.364007, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1005.823486, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.271484, -23.297637, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.281860, -23.341718, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.332275, -23.384920, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.190185, -23.225122, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.502685, -23.395494, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.233398, -25.184640, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.276489, -27.134164, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.546875, -25.385005, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.591430, -27.384523, 999.883422, 0.000000, 0.000000, -178.730514);

    DisableInteriorEnterExits();
    EnableStuntBonusForAll(0);
    SetNameTagDrawDistance(10.0);

    ShowPlayerMarkers(1);
    LimitPlayerMarkerRadius(100.0);
    CallLocalFunction("OnGameModeInitEx", "");

    #if defined DEVELOPMENT
        printf("[SERVER]: Under development mode is enabled!");
        SendRconCommand("hostname Valley Roleplay [Development]");
        SendRconCommand("maxplayers 10");
    #else
        SendRconCommand("password sabargamemodeload");
        SendRconCommand("hostname Valley Roleplay [Initializing]");
        GamemodeInit = repeat UnlockServer();
    #endif
    return 1;
}

task FishUpdatePrice[1000]()
{
    new h, m, s;
    gettime(h, m, s);

    if (m == 0 && s == 0) {
        ServerData[fish_Price] = RandomEx(1,4);
        ServerData[pumpkinPrice] = RandomEx(1,3);
        ServerData[mushroomPrice] = RandomEx(1,3);
        ServerData[cucumberPrice] = RandomEx(1,3);
        ServerData[eggplantPrice] = RandomEx(1,3);

        if (IsValidDynamicObject(farmBoard))
            DestroyDynamicObject(farmBoard);

        if (IsValidDynamicObject(fishBoard))
            DestroyDynamicObject(fishBoard);

        farmBoard = CreateDynamicObject(18244, -371.54, -1427.83, 30.32, 89.99, 2.30, 266.97, 0, 0);
        SetDynamicObjectMaterialText(farmBoard, 0, sprintf("[Plant Price]\nPumpkin %s\nMushroom %s\nCucumber %s\nEgg Plant %s", FormatNumber(ServerData[pumpkinPrice]), FormatNumber(ServerData[mushroomPrice]), FormatNumber(ServerData[cucumberPrice]), FormatNumber(ServerData[eggplantPrice])), OBJECT_MATERIAL_SIZE_512x512, "Arial", 50, 1, 0xFFFFFFFF, -16777216, 1);

        // Fish Board
        fishBoard = CreateDynamicObject(18244, 1362.73, 1336.15, 11.62, 90.20, -89.89, -0.09, 7037, 6);
        SetDynamicObjectMaterialText(fishBoard, 0, sprintf("[Fish Price]\n%s/lbs", FormatNumber(ServerData[fish_Price])), OBJECT_MATERIAL_SIZE_512x512, "Arial", 50, 1, 0xFFFFFFFF, -16777216, 1);
    }
    return 1;
}

task SystemUpdate[900000]()
{
    for(new id = 0; id != MAX_DROPPED_ITEMS; id ++) if(DroppedItems[id][droppedModel] && DroppedItems[id][droppedTime])
    {
        if((gettime()-DroppedItems[id][droppedTime]) > (5 * 86400))
        {
            Item_Delete(id);
        }
    }

    for (new id = 0; id != MAX_BUSINESSES; id ++) if (BusinessData[id][bizExists] && BusinessData[id][bizOwner]) {
        if ((gettime()-BusinessData[id][bizLastVisited]) > (AUTOSELLDAYS * 86400)) {
            BusinessData[id][bizOwner] = 0;
            BusinessData[id][bizLastVisited] = 0;
            BusinessData[id][bizVault] = 0;
            BusinessData[id][bizPrice] = 99999999;
            format(BusinessData[id][bOwnerName], MAX_PLAYER_NAME, "None");

            if (Business_VehGetCount(id)) {
                for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                    Vehicle_Delete(i);
                }
            }

            BusinessEmployee_RemoveAll(id);
            Business_RemoveObjects(id);

            new query[256];
            format(query, sizeof(query), "INSERT INTO `auction_queue` SET ID = '%d', Property = '1', Location = '%s', Date = UNIX_TIMESTAMP(), Type = '0'", id, SQL_ReturnEscaped(GetLocation(BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2])));
            mysql_tquery(g_iHandle, query);

            Business_Refresh(id);
            Business_Save(id);
        }
    }

    foreach (new id : Houses) if(HouseData[id][houseOwner])
    {
        if((gettime()-HouseData[id][houseLastVisited]) > (AUTOSELLDAYS * 86400)) {
            HouseData[id][houseOwner] = 0;
            HouseData[id][houseMoney] = 0;
            HouseData[id][houseLocked] = 1;
            HouseData[id][houseLastVisited] = 0;
            HouseData[id][houseBuilder] = 0;
            HouseData[id][houseBuilderTime] = 0;
            HouseData[id][housePrice] = 99999999;

            House_RemoveFurniture(id);
            House_RemoveAllItems(id);
            HouseStructure_DeleteAll(id);
            House_RemoveAllGateAndObject(id);

            new query[1024];
            format(query, sizeof(query), "INSERT INTO `auction_queue` SET ID='%d', Property='2', Location='%s', Date = UNIX_TIMESTAMP(), Type = '%d'", id, SQL_ReturnEscaped(GetLocation(HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2])), House_GetGarageCount(id));
            mysql_tquery(g_iHandle, query);

            format(HouseData[id][houseOwnerName], MAX_PLAYER_NAME, "None");

            for (new i = 0; i != MAX_GARAGE; i ++) if (GarageData[i][garageExists] && GarageData[i][garageHouseLink] == HouseData[id][houseID]) {
                format(query,sizeof(query),"DELETE FROM `player_vehicles` WHERE `Garage`='%d'", GarageData[i][garageID]);
                mysql_tquery(g_iHandle, query);
                GarageData[i][garageOwnerId] = 0;
                GarageData[i][garageOwner] = EOS;
                GarageData[i][garageLock] = 1;
                GarageData[i][garageInside] = 0;

                for (new j = 0; j < MAX_DYNAMIC_VEHICLES; j ++) if (Iter_Contains(DynamicVehicles, j) && VehicleData[j][cOwner] && VehicleData[j][cGarage] == GarageData[i][garageID])
                {
                    Vehicle_Delete(j);
                }

                Garage_Sync(i);
                Garage_Save(i);
            }
            House_Refresh(id);
            House_Save(id);
        }
    }

    foreach (new id : FlatRooms) if(FlatRoom[id][flatRoomOwner]) {
        if((gettime()-FlatRoom[id][flatRoomLastVisited]) > (AUTOSELLDAYS * 86400)) {
            FlatRoom[id][flatRoomOwner] = 0;
            FlatRoom[id][flatRoomMoney] = 0;
            FlatRoom[id][flatRoomLocked] = 1;
            FlatRoom[id][flatRoomBuilder] = 0;
            FlatRoom[id][flatRoomBuilderTime] = 0;
            FlatRoom[id][flatRoomPrice] = 99999999;

            FlatFurniture_DeleteAll(id);
            Flat_RemoveAllItems(id);
            FlatStructure_DeleteAll(id, true);

            new query[1024], location[24], flatBase = Flat_ReturnID(id);

            if (flatBase != -1) {
                FlatRoom_GetAddress(id, location);
                format(query, sizeof(query), "INSERT INTO `auction_queue` SET ID='%d', Property='6', Location='%s', Date = UNIX_TIMESTAMP(), Type = '%d'", id, SQL_ReturnEscaped(location), FlatData[flatBase][flatType]);
                mysql_tquery(g_iHandle, query);

                mysql_tquery(g_iHandle, sprintf("DELETE FROM `player_vehicles` WHERE `Garage`='%d'", FlatData[flatBase][flatID]));

                for (new j = 0; j < MAX_DYNAMIC_VEHICLES; j ++) if (Iter_Contains(DynamicVehicles, j) && VehicleData[j][cOwner] && VehicleData[j][cGarageFlat] == FlatData[flatBase][flatID]) {
                    Vehicle_Delete(j);
                }

                FlatRoom_Refresh(id);
                FlatRoom_Save(id);
            }
        }
    }

    for (new id = 0; id != MAX_GARAGE; id ++) if (GarageData[id][garageExists] && GarageData[id][garageOwnerId] != 0 && !GarageData[id][garageHouseLink]) {
        if ((gettime()-GarageData[id][garageLastVisited]) > (AUTOSELLDAYS * 86400)) {
            GarageData[id][garageInside] = 0;
            GarageData[id][garageOwnerId] = 0;
            GarageData[id][garageLock] = 1;
            GarageData[id][garagePrice] = 99999999;

            for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cOwner] && VehicleData[i][cGarage] == GarageData[id][garageID]) {
                mysql_tquery(g_iHandle, sprintf("DELETE FROM `players_vehicle` WHERE `Garage` = '%d'", GarageData[id][garageID]));
            }

            new query[256];
            format(query, sizeof(query), "INSERT INTO `auction_queue` SET ID='%d', Property='3', Location='%s', Date=UNIX_TIMESTAMP(), Type='%d'", id, SQL_ReturnEscaped(GetLocation(GarageData[id][garageLoc][0], GarageData[id][garageLoc][1], GarageData[id][garageLoc][2])), GarageData[id][garageType]);
            mysql_tquery(g_iHandle, query);

            GarageData[id][garageOwner] = EOS;

            Garage_Sync(id);
            Garage_Save(id);
        }
    }

    foreach (new i : Workshop) if (WorkshopData[i][wOwner]) {
        if ((gettime()-WorkshopData[i][wLastVisited]) > (AUTOSELLDAYS * 86400)) {
            format(WorkshopData[i][wName], 32, "Workshop");
            format(WorkshopData[i][wText], 128, "This workshop for sale");
            WorkshopData[i][wOwner] = 0;
            format(WorkshopData[i][wOwnerName],MAX_PLAYER_NAME,"None");
            WorkshopData[i][wComponent] = 0;
            WorkshopData[i][wVault] = 0;
            WorkshopData[i][wSeal] = 0;
            WorkshopData[i][wStatus] = 0;
            WorkshopData[i][wPrice] = 99999999;

            for (new x = 0; x < MAX_DYNAMIC_VEHICLES; x ++) if (Iter_Contains(DynamicVehicles, x) && VehicleData[x][cWorkshop] == WorkshopData[i][wID] && IsValidVehicle(VehicleData[x][cVehicle])) {
                Vehicle_Delete(x);
            }

            RemoveWorkshopEmploye(i);

            new query[256];

            format(query, sizeof(query), "INSERT INTO `auction_queue` SET ID='%d', Property='4', Location='%s', Date=UNIX_TIMESTAMP(), Type='0'", i, SQL_ReturnEscaped(GetLocation(WorkshopData[i][wPos][0], WorkshopData[i][wPos][1], WorkshopData[i][wPos][2])));
            mysql_tquery(g_iHandle, query);

            Workshop_Refresh(i);
            Workshop_Save(i);
        }
    }
    foreach (new i : Farms) if (FarmData[i][farmOwner]) {
        if ((gettime()-FarmData[i][farmLastVisited]) > (AUTOSELLDAYS * 86400)) {
            FarmData[i][farmOwner] = 0;
            format(FarmData[i][farmOwnerName], MAX_PLAYER_NAME, "None");
            format(FarmData[i][farmName], 32, "Private Farm");
            FarmData[i][farmPrice] = 99999999;

            for (new x = 0; x < 4; x ++) {
                FarmData[i][farmPlant][x] = 0;
                FarmData[i][farmSeeds][x] = 0;
            }

            new query[256];

            format(query, sizeof(query), "INSERT INTO `auction_queue` SET ID='%d', Property='5', Location='%s', Date=UNIX_TIMESTAMP(), Type='0'", i, SQL_ReturnEscaped(GetLocation(FarmData[i][farmPos][0], FarmData[i][farmPos][1], FarmData[i][farmPos][2])));
            mysql_tquery(g_iHandle, query);

            Farm_RemoveAllEmployees(i);

            Farm_Refresh(i);
            Farm_Save(i);
        }
    }
}

task LotteryUpdate[2700000]()
{
    new
        number = random(60) + 1,
        jackpot = RandomEx(100,300);

    foreach (new i : Player)
    {
        if(PlayerData[i][pLotteryB] == 1)
        {
            if(PlayerData[i][pLottery] == number)
            {
                GiveMoney(i, jackpot);
                SendServerMessage(i, "You have won the lottery jackpot of %s!", FormatNumber(jackpot));
            }
            else
            {
                SendClientMessage(i, X11_WHITE, "[LOTTERY]: You didn't win the lottery draw this time.");
            }
            PlayerData[i][pLottery] = 0;
            PlayerData[i][pLotteryB] = 0;
        }
    }
    return 1;
}

Function:ForceSpawn(playerid) {
    SpawnPlayer(playerid);
	return 1;
}

Function:SafeLogin(playerid) {
    new hour;

    gettime(hour, _, _);
    SetPlayerTime(playerid, hour, 0);

    SetPVarInt(playerid, "IPBlacklist", 1);
    
    if(!Blacklist_Check(playerid, "IP", ReturnIP(playerid))) {
        DeletePVar(playerid, "IPBlacklist");

        SetCameraData(playerid);
        SQL_CheckAccount(playerid);
        SetPlayerColor(playerid, X11_GREY);
        SetPlayerVirtualWorld(playerid, (playerid+1));
    }
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerRequestClass]: Player ID: %d, Class ID: %d", playerid, classid);
    #endif

    if(IsPlayerNPC(playerid))
        return 1;

    if(SQL_IsCharacterLogged(playerid) || SQL_IsLogged(playerid)) {
        TogglePlayerSpectating(playerid, 0);
		SetTimerEx("ForceSpawn", 500, false, "d", playerid);
    } else {
        if (!PlayerData[playerid][pKicked]) {
            TogglePlayerSpectating(playerid, 1);
            SpawnPlayer(playerid);
            SetTimerEx("SafeLogin", 500, false, "d", playerid);
        }
    }
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerRequestSpawn]: Player ID: %d", playerid);
    #endif

    if (AccountData[playerid][pLogged] == 0) {
        KickEx(playerid);
        return 0;
    }
    return 1;
}

public OnPlayerSpawn(playerid)
{
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerSpawn]: Player ID: %d", playerid);
    #endif

    SetPlayerScore(playerid, PlayerData[playerid][pScore]);

    if (!SQL_IsLogged(playerid))
        return KickEx(playerid);

    if(PlayerData[playerid][pOnDuty])
    {
        if (!IsPlayerInEvent(playerid)) {
            SetPlayerSkinEx(playerid, PlayerData[playerid][pSkinFaction], 1);

            if(PlayerData[playerid][pSpectator] == INVALID_PLAYER_ID)
                SetFactionColor(playerid);
        }
    }
    else {
        if (!IsPlayerInEvent(playerid)) {
            SetPlayerSkinEx(playerid, PlayerData[playerid][pSkin]);
        }
    }

    PlayerData[playerid][pKilled] = 0;

    if(PlayerData[playerid][pBleeding])
        PlayerData[playerid][pBleedTime] = 1;

    if(PlayerData[playerid][pJailTime] > 0)
    {
        for (new i = 0; i < 100; i ++) {
            SendClientMessage(playerid,-1, "");
        }
        if(PlayerData[playerid][pPrisoned])
        {
            new idx = random(sizeof(prisonArrays));
            SetPlayerPosEx(playerid, prisonArrays[idx][0], prisonArrays[idx][1], prisonArrays[idx][2] + 0.3, 5000);
            SetPlayerFacingAngle(playerid, prisonArrays[idx][3]);

            SetPlayerInterior(playerid, LSPD_JAIL);
            SetPlayerVirtualWorld(playerid, PRISON_WORLD);

            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_prison]);
            SendServerMessage(playerid, "You have %d minute(s) of remaining jail time.", PlayerData[playerid][pJailTime]/60);
        } else {
            new rand = random(sizeof(arrAdminJail));
            SetPlayerPosEx(playerid, arrAdminJail[rand][0], arrAdminJail[rand][1], arrAdminJail[rand][2]+0.3, 5000);
            SetPlayerInterior(playerid, 3);
            SetPlayerVirtualWorld(playerid, 100);
            SetPlayerFacingAngle(playerid, arrAdminJail[rand][3]);

            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_prison]);
            SendServerMessage(playerid, "You have %d minute(s) of remaining jail time.", PlayerData[playerid][pJailTime]/60);
        }
        for (new i = 0; i != MAX_ACC; i ++) if (AccData[playerid][i][accExists] && AccData[playerid][i][accShow]) {
            Aksesoris_Attach(playerid, i);
        }
    }
    else if(PlayerData[playerid][pHospital] != -1)
    {
        SetHospitalSpawn(playerid);
        PlayerData[playerid][pHospitalTime] = 0;
    }
    else if(!PlayerData[playerid][pCreated])
    {
        if(GetPVarInt(playerid, "SelectDia"))
        {
            new str[64];
            format(str, sizeof(str), "~b~~h~Name~n~~w~%s", ReturnName(playerid));
            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_registrasi][3], str);

            for (new i = 0; i < 20; i ++) {
                SendClientMessage(playerid , -1, "");
            }

            for (new i = 0; i < 10; i ++) {
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][i]);
            }
            PlayerData[playerid][pSkin] = 98;
            SetPlayerSkinEx(playerid, 98);

            TogglePlayerGUI(playerid, false);            

            PlayerData[playerid][pOrigin][0] = '\0';
            PlayerData[playerid][pBirthdate][0] = '\0';

            SendServerMessage(playerid, "Data pada karakter anda belum lengkap, isi data sesuai dengan keadaan karakter.");
            SendServerMessage(playerid, "Arahkan kursor anda ke text '{C0C0C0}UPDATE"WHITE"' samping untuk mengubah data karakter.");
            SendServerMessage(playerid, "Gunakan command '{C0C0C0}/resetcursor"WHITE"' jika kursor anda hilang pada saat pengisian data.");

            SelectTextDraw(playerid, 0xC0C0C0FF);
            ResetWeapons(playerid);
            
            //Hunger Progressbar
            HidePlayerProgressBar(playerid, PlayerData[playerid][hungry]);
            HidePlayerProgressBar(playerid, PlayerData[playerid][energy]);
            //Box spextate textdraw
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_spectate][1]);
            
            SetPlayerPos(playerid, 258.0770, -42.3550, 1002.0234);
            SetPlayerFacingAngle(playerid,45.5218);
            SetPlayerInterior(playerid, 14);
            SetPlayerVirtualWorld(playerid, (playerid+3));
            SetPlayerCameraPos(playerid,255.014175,-39.542194,1002.023437);
            SetPlayerCameraLookAt(playerid,257.987945,-42.462291,1002.023437);
        }
    }
    else
    {
        if (IsPlayerInEvent(playerid))
            return 1;
        
        SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

        SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
        SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

        SetCameraBehindPlayer(playerid);
        SetAccessories(playerid);

        if(PlayerData[playerid][pWorld] == PRISON_WORLD) {
            SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], 5000);
        }
        else
        {
            if(PlayerData[playerid][pSpawnPoint] == 3 && PlayerData[playerid][pInjured] == 0) {
                SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], 5000);
            }
        }

        for (new i = 0; i != MAX_ACC; i ++) if (AccData[playerid][i][accExists] && AccData[playerid][i][accShow]) {
            Aksesoris_Attach(playerid, i);
        }

        if(PlayerData[playerid][pInjured])
        {
            SavePlayerWeapon(playerid);
            
            SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], 2000);

            TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
            TextDrawSetString(gServerTextdraws[0], "You_are_injured!_~r~/call_911_~w~or_~r~/giveup");

            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" Anda terluka dan membutuhkan pertolongan medis (/call 911 > medics).");
            SendClientMessage(playerid, X11_GREY_60, "USAGE:"WHITE" (( /giveup untuk spawn ke rumah sakit. Tunggu 3 menit agar bisa melakukannya. ))");

            if (ReturnArmour2(playerid))
                SetPlayerArmour(playerid, ReturnArmour2(playerid));
            
            SetPVarInt(playerid, "GiveUptime", gettime());
            ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
        }
        else
        {
            if (!IsPlayerInEvent(playerid)) {
                SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
                SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

                if(IsPlayerDuty(playerid))  RefreshFactionWeapon(playerid); 
                else RefreshWeapon(playerid);
            }
        }
    }

    if (PlayerData[playerid][pCuffed]) {
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
    }
    //sementara
    if (AccountData[playerid][pAdminDuty]) {
        // SetPlayerHealth(playerid, 100);
        SetPlayerColor(playerid, RemoveAlpha(X11_RED_2));
    }

    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 999);
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if(!SQL_IsCharacterLogged(playerid) || !SQL_IsLogged(playerid) || (PlayerData[playerid][pKilled] > 0))
        return 0;

    if(PlayerData[playerid][pMuted] && strfind(cmdtext, "unmute", true) != 0)
    {
        SendErrorMessage(playerid, "You are muted by the system.");
        return 0;
    }

    foreach(new i : Player) if(AccountData[i][pAdmin] >= 5 && PlayerData[i][pSpectator] == playerid) {
        SendClientMessageEx(i, X11_TOMATO_1, "( cmd ) {C0C0C0}%s: /%s", ReturnName(playerid, 0), cmdtext);
    }
    Log_Write("logs/chatlog.txt", "[%s] %s: /%s", ReturnDate(), ReturnName(playerid, 0), cmdtext);

    if (!strcmp(cmdtext, "rem", true))
        return KickEx(playerid);

    return 1;
}

public OnPlayerText(playerid, text[])
{
    if((!PlayerData[playerid][pLogged]) || PlayerData[playerid][pHospital] != -1)
        return 0;

    if(IsPlayerFlooding(playerid))
    {
        SendErrorMessage(playerid, "Chat flood protection!");
        return 0;
    }

    if (PlayerData[playerid][pAuto][4]) text[0] = toupper(text[0]);

    // if(PlayerData[playerid][pMuted])
    // {
    //     SendErrorMessage(playerid, "You are muted by the an administrator / helper. "YELLOW"(/atalk)");
    //     return 0;
    // }

    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
    {
        SendErrorMessage(playerid, "You are on spectate.");
        return 0;
    }
    new
        targetid = PlayerData[playerid][pCallLine];
        
    if(AccountData[playerid][pAdminDuty])
    {
        SendNearbyMessage(playerid, 15.0, X11_RED_2, "%s: "WHITE"(( %s ))", ReturnName(playerid, 0), text);
    }
    else if(!IsPlayerOnPhone(playerid) && !IsPlayerInEvent(playerid))
    {
        if(IsPlayerInDynamicArea(playerid, JailArea) || IsPlayerInDynamicArea(playerid, NSArea)) cmd_b(playerid, text);
        else {
            if (!strcmp(PlayerData[playerid][pAccent], "None", true)) ProxDetector(playerid, 15.0, X11_WHITE, sprintf("%s says: %s", ReturnName(playerid, 0, 1), text));
            else ProxDetector(playerid, 15.0, X11_WHITE, sprintf("%s [%s accent] says: %s", ReturnName(playerid, 0, 1), PlayerData[playerid][pAccent], text));
        }
    }
    else 
    {
        if (!IsPlayerInEvent(playerid) && !PlayerData[playerid][pIncomingCall]) {
            new rand = RandomEx(1,3);
            Inventory_Remove(playerid, "PhoneCredits", rand);
            ProxDetector(playerid, 5.0, X11_WHITE, sprintf("%s [phone]: %s", ReturnName(playerid, 0, 1), text));
        }
    }
    switch (PlayerData[playerid][pEmergency])
    {
        case 1:
        {
            if(!strcmp(text, "police", true))
            {
                PlayerData[playerid][pEmergency] = 2;
                SendClientMessage(playerid, X11_LIGHTBLUE, "[OPERATOR]:"WHITE" You've been dispatched to police HQ. Please describe the crime.");
            }
            else if(!strcmp(text, "medics", true))
            {
                PlayerData[playerid][pEmergency] = 3;
                SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" You've been dispatched to medical HQ. Please describe the emergency.");
            }
            else SendClientMessage(playerid, X11_LIGHTBLUE, "[OPERATOR]:"WHITE" Sorry, I don't understand. Do you require \"police\" or \"medics\"?");
        }
        case 2:
        {
            SendFactionMessageEx(FACTION_POLICE, X11_RED, "[911] Incident: [ "YELLOW"%s "RED"]", text);
            SendFactionMessageEx(FACTION_POLICE, X11_RED, "[911] Reporter: [ "YELLOW"%s "RED"] Phone: [ "YELLOW"%d "RED"] Location: [ "YELLOW"%s "RED"]", ReturnName(playerid, 0), PlayerData[playerid][pPhone], GetPlayerLocation(playerid));

            SendClientMessage(playerid, X11_LIGHTBLUE, "[OPERATOR]:"WHITE" We have alerted all units in the area.");
            cmd_hangup(playerid);
        }
        case 3:
        {
            SendFactionMessageEx(FACTION_MEDIC, X11_RED, "[911] Incident: [ "YELLOW"%s "RED"]", text);
            SendFactionMessageEx(FACTION_MEDIC, X11_RED, "[911] Reporter: [ "YELLOW"%s "RED"] Phone: [ "YELLOW"%d "RED"] Location: [ "YELLOW"%s "RED"]", ReturnName(playerid, 0), PlayerData[playerid][pPhone], GetPlayerLocation(playerid));

            SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" We have alerted all units in the area.");
            cmd_hangup(playerid);
        }
        case 4:
        {
            SendFactionMessageEx(FACTION_GOV, X11_BLUE, "[711] Caller: [ "YELLOW"%s "BLUE"] Phone: [ "YELLOW"%d "BLUE"]", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
            SendFactionMessageEx(FACTION_GOV, X11_BLUE, "[711] Message: "YELLOW"%s", text);

            SendClientMessage(playerid, X11_GREY_60, "[OPERATOR]:"WHITE" Your request have been sent to San Andreas Government.");
            cmd_hangup(playerid);
        }
        case 5: {
            SendFactionMessageEx(FACTION_NEWS, X11_BLUE, "[144] Caller: [ "YELLOW"%s "BLUE"] Phone: [ "YELLOW"%d "BLUE"]", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
            SendFactionMessageEx(FACTION_NEWS, X11_BLUE, "[144] Message: "YELLOW"%s", text);

            SendClientMessage(playerid, X11_GREY_60, "[OPERATOR]:"WHITE" Your request have been sent to San Andreas News Agency.");
            cmd_hangup(playerid);
        }
    }
    switch (PlayerData[playerid][pNonEmergency]) {
        case 1: {
            if(!strcmp(text, "police", true))
            {
                PlayerData[playerid][pNonEmergency] = 2;
                SendClientMessage(playerid, X11_LIGHTBLUE, "[NON-EMERGENCY]:"WHITE" You've been dispatched to police HQ. Please describe the purpose.");
            }
            else if(!strcmp(text, "medics", true))
            {
                PlayerData[playerid][pNonEmergency] = 3;
                SendClientMessage(playerid, COLOR_HOSPITAL, "[NON-EMERGENCY]:"WHITE" You've been dispatched to medical HQ. Please describe the purpose.");
            }
            else SendClientMessage(playerid, X11_LIGHTBLUE, "[NON-EMERGENCY]:"WHITE" Sorry, I don't understand. Do you require \"police\" or \"medics\"?");
        }
        case 2: {
            SendFactionMessageEx(FACTION_POLICE, X11_BLUE, "[666] Name: [ "YELLOW"%s "BLUE"] Phone: [ "YELLOW"%d "BLUE"]", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
            SendFactionMessageEx(FACTION_POLICE, X11_BLUE, "[666] Message: [ "YELLOW"%s "BLUE"]", text);

            SendClientMessage(playerid, X11_LIGHTBLUE, "[NON-EMERGENCY]:"WHITE" Your request have been sent to San Andreas Police Department.");
            cmd_hangup(playerid);
        }
        case 3: {
            SendFactionMessageEx(FACTION_MEDIC, X11_BLUE, "[666] Name: [ "YELLOW"%s "BLUE"] Phone: [ "YELLOW"%d "BLUE"]", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
            SendFactionMessageEx(FACTION_MEDIC, X11_BLUE, "[666] Message: [ "YELLOW"%s "BLUE"]", text);

            SendClientMessage(playerid, COLOR_HOSPITAL, "[OPERATOR]:"WHITE" Your request have been sent to San Andreas Fire Department.");
            cmd_hangup(playerid);
        }
    }
    if(targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall]) {
        new playername[24], rand = RandomEx(1,3);
        format(playername, sizeof(playername), "%s", GetContactNameByNumber(targetid, PlayerData[playerid][pPhone]));
        if (!strcmp(playername, "Unknown", true)) format(playername, sizeof(playername), "%s", (PlayerData[playerid][pGender] == 1) ? ("Male Caller") : ("Female Caller"));
        else format(playername, sizeof(playername), "%s", GetContactNameByNumber(targetid, PlayerData[playerid][pPhone]));
        
        Inventory_Remove(playerid, "PhoneCredits", rand);
        ProxDetector(targetid, 5.0, X11_WHITE, sprintf("%s [phone]: %s", playername, text));
    }
    return 0;
}

public Streamer_OnPluginError(const error[])
{
    printf("[Callback: Streamer_OnPluginError]: %s", error);
    PrintBacktrace();
    return 1;
}

// hook Streamer_OnItemStreamIn(type, id, forplayerid) {
//     if (type == STREAMER_TYPE_OBJECT) {
//         printf("[Streamer_OnItemStreamIn] type: %d, id: %d, forplayerid: %d", type, id, forplayerid);
//         switch (PlayerData[forplayerid][pStreamer]) {
//             case 0: {
//                 Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 70.0);
//                 Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 70.0);
//             }
//             case 1: {
//                 Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 100.0);
//                 Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 100.0);
//             }
//             case 2: {
//                 Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 130.0);
//                 Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 130.0);
//             }
//             case 3: {
//                 Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 150.0);
//                 Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 150.0);
//             }
//             case 4: {
//                 Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 200.0);
//                 Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 200.0);
//             }
//             default: {
//                 Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 130.0);
//                 Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 130.0);
//             }
//         }
//     }
//     return 1;
// }

// DEFINE_HOOK_REPLACEMENT(StreamOut, StrOut );
// hook Streamer_OnItemStrOut(type, id, forplayerid) {
//     if (type == STREAMER_TYPE_OBJECT) {
//         printf("[Streamer_OnItemStreamOut] type: %d, id: %d, forplayerid: %d", type, id, forplayerid);
//         Streamer_SetFloatData(type, id, E_STREAMER_STREAM_DISTANCE, 200.0);
//         Streamer_SetFloatData(type, id, E_STREAMER_DRAW_DISTANCE, 200.0);
//     }
//     return 1;
// }

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z) {
    #if defined DEBUG_MODE
        printf("[Callback: OnPlayerSelectDynamicObject]: Player ID: %d, Object ID: %d, Model ID: %d, X: %.1f, Y: %.1f, Z: %.1f", playerid, objectid, modelid, x, y, z);
    #endif

    if (PlayerData[playerid][pEditHouseStructure] != -1) {
        new houseid = PlayerData[playerid][pEditHouseStructure];

        foreach (new i : HouseStruct[houseid]) {
            if (HouseStructure[houseid][i][structureObject] == objectid) {
                switch (SelectStructureType[playerid]) {
                    case STRUCTURE_SELECT_EDITOR: {
                        if (HouseStructure[houseid][i][structureType] == 0) {
                            PlayerData[playerid][pEditStructure] = i;
                            PlayerData[playerid][pEditingMode] = STRUCTURE;
                            EditDynamicObject(playerid, HouseStructure[houseid][i][structureObject]);
                            SendCustomMessage(playerid, "BUILDER", "You're now editing %s.", GetStructureNameByModel(HouseStructure[houseid][i][structureModel]));
                            break;
                        }
                    }
                    case STRUCTURE_SELECT_RETEXTURE: {
                        SetPVarInt(playerid, "structureObj", i);
                        CancelEdit(playerid);
                        Dialog_Show(playerid, House_StructureRetexture, DIALOG_STYLE_INPUT, "Retexture House Structure", "Please input the texture name below:\n"YELLOW"[model] [txdname] [texture] [opt: alpha] [opt: red] [opt: green] [opt: blue]", "Retexture", "Cancel");
                        break;
                    }
                    case STRUCTURE_SELECT_DELETE: {
                        if (HouseStructure[houseid][i][structureType] == 0) {
                            SendCustomMessage(playerid, "BUILDER", "You've been successfully deleted %s", GetStructureNameByModel(HouseStructure[houseid][i][structureModel]));
                            HouseStructure_Delete(i, houseid);
                            break;
                        }
                    }
                    case STRUCTURE_SELECT_COPY: {
                        if (HouseStructure[houseid][i][structureType] == 0) {
                            new price;

                            for (new id = 0; id < sizeof(g_aHouseStructure); id ++) if (g_aHouseStructure[id][e_StructureModel] == HouseStructure[houseid][i][structureModel]) {
                                price = g_aHouseStructure[id][e_StructureCost];
                            }

                            if (Inventory_Count(playerid, "Component") < price)
                                return SendErrorMessage(playerid, "You need %d Component(s) to copy this structure.", price);

                            new copyId = HouseStructure_CopyObject(i, houseid);

                            if (copyId == cellmin)
                                return SendErrorMessage(playerid, "Your house has reached maximum of structure");

                            Inventory_Remove(playerid, "Component", price);
                            PlayerData[playerid][pEditStructure] = copyId;
                            PlayerData[playerid][pEditingMode] = STRUCTURE;
                            PlayerData[playerid][pEditHouseStructure] = houseid;
                            EditDynamicObject(playerid, HouseStructure[houseid][copyId][structureObject]);
                            SendCustomMessage(playerid, "BUILDER", "You have copied structure for "GREEN"%d component(s)", price);
                            SendCustomMessage(playerid, "BUILDER", "You're now editing copied object of %s.", GetStructureNameByModel(HouseStructure[houseid][i][structureModel]));
                            break;
                        }
                    }
                }
                break;
            }
        }
    }

    if (PlayerData[playerid][pEditFurnHouse] != -1) {
        new houseid = PlayerData[playerid][pEditFurnHouse];

        foreach (new furnitureid : HouseFurnitures[houseid]) if (objectid == FurnitureData[houseid][furnitureid][furnitureObject]) {
            switch (SelectFurnitureType[playerid]) {
                case FURNITURE_SELECT_MOVE: {
                    PlayerData[playerid][pEditingMode] = FURNITURE;
                    PlayerData[playerid][pEditFurniture] = furnitureid;
                    EditDynamicObject(playerid, FurnitureData[houseid][furnitureid][furnitureObject]);
                    SendCustomMessage(playerid, "HOUSE", "You are now editing the position of item \"%s\".", FurnitureData[houseid][furnitureid][furnitureName]);
                    break;
                }
                case FURNITURE_SELECT_DESTROY:
                {
                    SendCustomMessage(playerid, "HOUSE", "You have destroyed furniture \"%s\".", FurnitureData[houseid][furnitureid][furnitureName]);
                    Furniture_Delete(furnitureid, houseid);

                    CancelEdit(playerid);
                    PlayerData[playerid][pEditFurniture] = -1;
                    PlayerData[playerid][pEditFurnHouse] = -1;
                    break;
                }
                case FURNITURE_SELECT_STORE: {
                    if (FurnitureData[houseid][furnitureid][furnitureUnused])
                        return SendErrorMessage(playerid, "This furniture is already stored"), CancelEdit(playerid);
                    
                    FurnitureData[houseid][furnitureid][furnitureUnused] = 1;
                    Furniture_Refresh(furnitureid, houseid);
                    Furniture_Save(furnitureid, houseid);
                    SendCustomMessage(playerid, "HOUSE", "You have stored furniture \"%s"WHITE"\" into your house.", FurnitureData[houseid][furnitureid][furnitureName]);
                    break;
                }
            }
            break;
        }
    }
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    if(response == EDIT_RESPONSE_FINAL)
    {
        switch(PlayerData[playerid][pEditingMode])
        {
            case OBJECT: {
                if(PlayerData[playerid][pEditObject] != -1 && Iter_Contains(Obj, PlayerData[playerid][pEditObject]) && PlayerData[playerid][pEditingMode] == OBJECT) {
                    new id = PlayerData[playerid][pEditObject];
                    ObjData[id][oPos][0] = x;
                    ObjData[id][oPos][1] = y;
                    ObjData[id][oPos][2] = z;
                    ObjData[id][oRot][0] = rx;
                    ObjData[id][oRot][1] = ry;
                    ObjData[id][oRot][2] = rz;

                    SetDynamicObjectPos(objectid,x,y,z);
                    SetDynamicObjectRot(objectid,rx,ry,rz);

                    Object_Refresh(id);
                    Object_Save(id);
                    SendCustomMessage(playerid, "OBJECT", "You've successfully edited object id: "YELLOW"%d", id);
                    PlayerData[playerid][pEditObject] = -1;
                    Streamer_Update(playerid);
                }
            }
            case VENDING: {
                if(PlayerData[playerid][pEditVending] != -1 && Iter_Contains(Vendings, PlayerData[playerid][pEditVending]) && PlayerData[playerid][pEditingMode] == VENDING) {
                    new id = PlayerData[playerid][pEditVending];
                    VendingData[id][vPos][0] = x;
                    VendingData[id][vPos][1] = y;
                    VendingData[id][vPos][2] = z;
                    VendingData[id][vRot][0] = rx;
                    VendingData[id][vRot][1] = ry;
                    VendingData[id][vRot][2] = rz;

                    SetDynamicObjectPos(objectid,x,y,z);
                    SetDynamicObjectRot(objectid,rx,ry,rz);

                    Vending_Save(id);
                    SendCustomMessage(playerid, "Vending", "You've successfully edited vending machine ID: "YELLOW"%d", id);
                    PlayerData[playerid][pEditVending] = -1;
                    Streamer_Update(playerid);
                }
            }
            case PUMP: {
                if(PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists] && PlayerData[playerid][pEditingMode] == PUMP)
                {
                    PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
                    PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
                    PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
                    PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

                    SetDynamicObjectPos(objectid,x,y,z);
                    SetDynamicObjectRot(objectid,rx,ry,rz);

                    Pump_Save(PlayerData[playerid][pEditPump]);

                    SendServerMessage(playerid, "You have edited the position of pump ID: %d.", PlayerData[playerid][pEditPump]);

                    PlayerData[playerid][pEditPump] = -1;
                }
            }
            case ATM: {
                if(PlayerData[playerid][pEditAtm] != -1 && ATMData[PlayerData[playerid][pEditAtm]][atmExists] && PlayerData[playerid][pEditingMode] == ATM)
                {
                    ATMData[PlayerData[playerid][pEditAtm]][atmPos][0] = x;
                    ATMData[PlayerData[playerid][pEditAtm]][atmPos][1] = y;
                    ATMData[PlayerData[playerid][pEditAtm]][atmPos][2] = z;
                    ATMData[PlayerData[playerid][pEditAtm]][atmPos][3] = rz;

                    SetDynamicObjectPos(objectid,x,y,z);
                    SetDynamicObjectRot(objectid,rx,ry,rz);

                    ATM_Save(PlayerData[playerid][pEditAtm]);

                    SendServerMessage(playerid, "You have edited the position of atm ID: %d.", PlayerData[playerid][pEditAtm]);

                    PlayerData[playerid][pEditAtm] = -1;
                }
            }
            case ROADBLOCK: {
                if(PlayerData[playerid][pEditRoadblock] != -1 && BarricadeData[PlayerData[playerid][pEditRoadblock]][cadeExists] && PlayerData[playerid][pEditingMode] == ROADBLOCK)
                {
                    BarricadeData[PlayerData[playerid][pEditRoadblock]][cadePos][0] = x;
                    BarricadeData[PlayerData[playerid][pEditRoadblock]][cadePos][1] = y;
                    BarricadeData[PlayerData[playerid][pEditRoadblock]][cadePos][2] = z;
                    BarricadeData[PlayerData[playerid][pEditRoadblock]][cadePos][3] = rz;

                    SetDynamicObjectPos(objectid,x,y,z);
                    SetDynamicObjectRot(objectid,rx,ry,rz);

                    SendServerMessage(playerid, "You have edited the position of roadblock.");

                    PlayerData[playerid][pEditRoadblock] = -1;
                }
            }
            case FURNITURE: {
                if(PlayerData[playerid][pEditFurniture] != -1)
                {
                    new id = House_Inside(playerid);
                    if(id != -1 && (House_IsOwner(playerid, id) || HouseData[id][houseBuilder] == PlayerData[playerid][pID]))
                    {
                        if (Iter_Contains(HouseFurnitures[id], PlayerData[playerid][pEditFurniture])) {
                            FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
                            FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
                            FurnitureData[id][PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                            FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                            FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                            FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;
                            
                            SetDynamicObjectPos(objectid,x,y,z);
                            SetDynamicObjectRot(objectid,rx,ry,rz);
                            Furniture_Refresh(PlayerData[playerid][pEditFurniture], id);
                            Furniture_Save(PlayerData[playerid][pEditFurniture], id);

                            SendCustomMessage(playerid, "HOUSE", "You have edited the position of item \"%s\".", FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureName]);

                            PlayerData[playerid][pEditFurniture] = -1;
                            PlayerData[playerid][pEditFurnHouse] = -1;
                        }
                    }
                }
            }
            case STRUCTURE: {
                if (PlayerData[playerid][pEditStructure] != -1) {
                    new houseid = House_Inside(playerid), id = PlayerData[playerid][pEditStructure];

                    if (houseid != -1) {
                        if (Iter_Contains(HouseStruct[houseid], id)) {
                            HouseStructure[houseid][id][structurePos][0] = x;
                            HouseStructure[houseid][id][structurePos][1] = y;
                            HouseStructure[houseid][id][structurePos][2] = z;
                            HouseStructure[houseid][id][structureRot][0] = rx;
                            HouseStructure[houseid][id][structureRot][1] = ry;
                            HouseStructure[houseid][id][structureRot][2] = rz;

                            SetDynamicObjectPos(objectid, x, y, z);
                            SetDynamicObjectRot(objectid, rx, ry, rz);
                            HouseStructure_Refresh(id, houseid);
                            HouseStructure_Save(id, houseid);

                            SendCustomMessage(playerid, "BUILDER", "Structure position has been saved.");

                            PlayerData[playerid][pEditHouseStructure] = -1;
                            PlayerData[playerid][pEditStructure] = -1;
                        }
                    }
                }
            }
            case GYMOBJECT: {
                if (PlayerData[playerid][pEditGYMObject] != -1 && Iter_Contains(GYMObjects, PlayerData[playerid][pEditGYMObject])) {
                    new id = PlayerData[playerid][pEditGYMObject], bizid = Business_Inside(playerid);

                    if (bizid != -1) {
                        GYMObject[id][objectPos][0] = x;
                        GYMObject[id][objectPos][1] = y;
                        GYMObject[id][objectPos][2] = z;
                        GYMObject[id][objectRot][0] = rx;
                        GYMObject[id][objectRot][1] = ry;
                        GYMObject[id][objectRot][2] = rz;
                        SetDynamicObjectPos(objectid, x, y, z);
                        SetDynamicObjectRot(objectid, rx, ry, rz);

                        GYMObject_Refresh(id, bizid);
                        GYMObject_Save(id);

                        SendCustomMessage(playerid, "GYMOBJECT", "GYM Object position has been saved.");

                        PlayerData[playerid][pEditGYMObject] = -1;
                    }
                }
            }
            case SPEED: {
                if (PlayerData[playerid][pEditSpeed] != -1 && SpeedData[PlayerData[playerid][pEditSpeed]][speedExists]) {
                    new id = PlayerData[playerid][pEditSpeed];
                    SpeedData[id][speedPos][0] = x;
                    SpeedData[id][speedPos][1] = y;
                    SpeedData[id][speedPos][2] = z;
                    SpeedData[id][speedPos][3] = rz;
                    SetDynamicObjectPos(objectid, x, y, z);
                    SetDynamicObjectRot(objectid, rx, ry, rz);
                    
                    Speed_Refresh(id);
                    Speed_Save(id);
                    SendCustomMessage(playerid, "SPEEDCAM", "Speed camera position has been saved.");
                    PlayerData[playerid][pEditSpeed] = -1;
                }
            }
        }
        PlayerData[playerid][pEditingMode] = NOTHING;
    }
    else if(response == EDIT_RESPONSE_CANCEL)
    {
        new Float:position[3],Float:rotation[3];
        switch(PlayerData[playerid][pEditingMode])
        {
            case OBJECT: {
                if(PlayerData[playerid][pEditObject] != -1) {
                    new slot = PlayerData[playerid][pEditObject];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ObjData[slot][oObject],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ObjData[slot][oObject],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ObjData[slot][oObject],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ObjData[slot][oObject],E_STREAMER_R_X,rotation[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ObjData[slot][oObject],E_STREAMER_R_Y,rotation[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ObjData[slot][oObject],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
            case VENDING: {
                if(PlayerData[playerid][pEditVending] != -1) {
                    new slot = PlayerData[playerid][pEditVending];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,VendingData[slot][vending],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,VendingData[slot][vending],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,VendingData[slot][vending],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,VendingData[slot][vending],E_STREAMER_R_X,rotation[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,VendingData[slot][vending],E_STREAMER_R_Y,rotation[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,VendingData[slot][vending],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
            case PUMP: {
                if(PlayerData[playerid][pEditPump] != -1) {
                    new slot = PlayerData[playerid][pEditPump];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,PumpData[slot][pumpObject],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,PumpData[slot][pumpObject],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,PumpData[slot][pumpObject],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,PumpData[slot][pumpObject],E_STREAMER_R_X,rotation[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,PumpData[slot][pumpObject],E_STREAMER_R_Y,rotation[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,PumpData[slot][pumpObject],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
            case ATM: {
                if(PlayerData[playerid][pEditAtm] != -1) {
                    new slot = PlayerData[playerid][pEditAtm];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ATMData[slot][atmObject],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ATMData[slot][atmObject],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ATMData[slot][atmObject],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ATMData[slot][atmObject],E_STREAMER_R_X,rotation[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ATMData[slot][atmObject],E_STREAMER_R_Y,rotation[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,ATMData[slot][atmObject],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
            case ROADBLOCK: {
                if(PlayerData[playerid][pEditRoadblock] != -1) {
                    new slot = PlayerData[playerid][pEditRoadblock];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,BarricadeData[slot][cadeObject],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,BarricadeData[slot][cadeObject],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,BarricadeData[slot][cadeObject],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,BarricadeData[slot][cadeObject],E_STREAMER_R_X,rotation[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,BarricadeData[slot][cadeObject],E_STREAMER_R_Y,rotation[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,BarricadeData[slot][cadeObject],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
            case FURNITURE: {
                if(PlayerData[playerid][pEditFurniture] != -1) {
                    new slot = PlayerData[playerid][pEditFurniture], houseid = House_Inside(playerid);

                    if (houseid != -1 && Iter_Contains(HouseFurnitures[houseid], slot)) {
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,FurnitureData[houseid][slot][furnitureObject],E_STREAMER_X,position[0]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,FurnitureData[houseid][slot][furnitureObject],E_STREAMER_Y,position[1]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,FurnitureData[houseid][slot][furnitureObject],E_STREAMER_Z,position[2]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,FurnitureData[houseid][slot][furnitureObject],E_STREAMER_R_X,rotation[0]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,FurnitureData[houseid][slot][furnitureObject],E_STREAMER_R_Y,rotation[1]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,FurnitureData[houseid][slot][furnitureObject],E_STREAMER_R_Z,rotation[2]);
                        SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                        SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                    }
                }
            }
            case STRUCTURE: {
                if(PlayerData[playerid][pEditStructure] != -1) {
                    new slot = PlayerData[playerid][pEditStructure], houseid = PlayerData[playerid][pEditHouseStructure];

                    if (houseid != -1) {
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,HouseStructure[houseid][slot][structureObject],E_STREAMER_X,position[0]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,HouseStructure[houseid][slot][structureObject],E_STREAMER_Y,position[1]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,HouseStructure[houseid][slot][structureObject],E_STREAMER_Z,position[2]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,HouseStructure[houseid][slot][structureObject],E_STREAMER_R_X,rotation[0]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,HouseStructure[houseid][slot][structureObject],E_STREAMER_R_Y,rotation[1]);
                        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,HouseStructure[houseid][slot][structureObject],E_STREAMER_R_Z,rotation[2]);
                        SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                        SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);

                        PlayerData[playerid][pEditHouseStructure] = -1;
                        PlayerData[playerid][pEditStructure] = -1;
                    }
                }
            }
            case GYMOBJECT: {
                if(PlayerData[playerid][pEditGYMObject] != -1) {
                    new slot = PlayerData[playerid][pEditGYMObject];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,GYMObject[slot][object],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,GYMObject[slot][object],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,GYMObject[slot][object],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,GYMObject[slot][object],E_STREAMER_R_X,rotation[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,GYMObject[slot][object],E_STREAMER_R_Y,rotation[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,GYMObject[slot][object],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
            case SPEED: {
                if(PlayerData[playerid][pEditSpeed] != -1) {
                    new slot = PlayerData[playerid][pEditSpeed];
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,SpeedData[slot][speedObject],E_STREAMER_X,position[0]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,SpeedData[slot][speedObject],E_STREAMER_Y,position[1]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,SpeedData[slot][speedObject],E_STREAMER_Z,position[2]);
                    Streamer_GetFloatData(STREAMER_TYPE_OBJECT,SpeedData[slot][speedObject],E_STREAMER_R_Z,rotation[2]);
                    SetDynamicObjectPos(objectid,position[0],position[1],position[2]);
                    SetDynamicObjectRot(objectid,rotation[0],rotation[1],rotation[2]);
                }
            }
        }
        PlayerData[playerid][pEditingMode] = NOTHING;
    }
    Log_Write("logs/editobject.txt", "[%s] %s edit dynamic object with respond %d object %d.", ReturnDate(), ReturnName(playerid, 0), response, objectid);

    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(PlayerData[playerid][pAksesoris] != -1 && !EditingWeapon[playerid])
    {
        if(response)
        {
            new id = PlayerData[playerid][pAksesoris];
            AccData[playerid][id][accOffset][0] = fOffsetX;
            AccData[playerid][id][accOffset][1] = fOffsetY;
            AccData[playerid][id][accOffset][2] = fOffsetZ;
            AccData[playerid][id][accRot][0] = fRotX;
            AccData[playerid][id][accRot][1] = fRotY;
            AccData[playerid][id][accRot][2] = fRotZ;
            AccData[playerid][id][accScale][0] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccData[playerid][id][accScale][1] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
            AccData[playerid][id][accScale][2] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);
            Aksesoris_Attach(playerid, id);
            PlayerData[playerid][pAksesoris] = -1;  
            SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
        }
        else
        {
            if(PlayerData[playerid][pAksesoris] != -1)
            {
                Aksesoris_Attach(playerid, PlayerData[playerid][pAksesoris]);
                PlayerData[playerid][pAksesoris] = -1;
            }
        }
        return 1;
    }
    
    new weaponid = EditingWeapon[playerid];
 
    if (weaponid)
    {
        if (response)
        {
            new enum_index = (weaponid >= 22 && weaponid <= 38) ? (weaponid - 22) : (weaponid + 15), weaponname[18], string[512];

            GetWeaponName(weaponid, weaponname, sizeof(weaponname));
        
            WeaponSettings[playerid][enum_index][Position][0] = fOffsetX;
            WeaponSettings[playerid][enum_index][Position][1] = fOffsetY;
            WeaponSettings[playerid][enum_index][Position][2] = fOffsetZ;
            WeaponSettings[playerid][enum_index][Position][3] = fRotX;
            WeaponSettings[playerid][enum_index][Position][4] = fRotY;
            WeaponSettings[playerid][enum_index][Position][5] = fRotZ;

            RemovePlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid));
            SetPlayerAttachedObject(playerid, GetWeaponObjectSlot(weaponid), GetHoldingWeaponModel(weaponid), WeaponSettings[playerid][enum_index][Bone], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, 1.0, 1.0, 1.0);

            format(string, sizeof(string), "You have successfully adjusted the position of your %s.", weaponname);
            SendCustomMessage(playerid, "WEAPON", "%s", string);
        
            mysql_format(g_iHandle, string, sizeof(string), "INSERT INTO weaponsettings VALUES (%d, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %d, %d) ON DUPLICATE KEY UPDATE PosX = %.3f, PosY = %.3f, PosZ = %.3f, RotX = %.3f, RotY = %.3f, RotZ = %.3f", GetPlayerSQLID(playerid), weaponid, WeaponSettings[playerid][enum_index][Position][0], WeaponSettings[playerid][enum_index][Position][1], WeaponSettings[playerid][enum_index][Position][2], WeaponSettings[playerid][enum_index][Position][3], WeaponSettings[playerid][enum_index][Position][4], WeaponSettings[playerid][enum_index][Position][5], WeaponSettings[playerid][enum_index][Bone], WeaponSettings[playerid][enum_index][Hidden], WeaponSettings[playerid][enum_index][Position][0], WeaponSettings[playerid][enum_index][Position][1], WeaponSettings[playerid][enum_index][Position][2], WeaponSettings[playerid][enum_index][Position][3], WeaponSettings[playerid][enum_index][Position][4], WeaponSettings[playerid][enum_index][Position][5]);
            mysql_tquery(g_iHandle, string);
            EditingWeapon[playerid] = 0;
        } else EditingWeapon[playerid] = 0;
        return 1;
    }
    return 1;
}

public OnCustomSelectionResponse(playerid, extraid, modelid, response)
{
    if(response)
    {
        switch(extraid)
        {
            case MODEL_SELECTION_VACC:
            {
                new 
                    id = -1,
                    vehicle = GetPlayerVehicleID(playerid);

                if((id = Vehicle_GetID(vehicle)) != -1 && Vehicle_IsOwner(playerid, id))
                {            
                    Vehicle_ObjectAdd(id, modelid, OBJECT_TYPE_BODY);
                    Streamer_Update(playerid);
                    GiveMoney(playerid, -VEHICLE_OBJECT_PRICE);
                    SendCustomMessage(playerid, "MODSHOP", "You have select "YELLOW"%s "WHITE"for this vehicle (/vacc to edit vehicle object).", Bodypart_Name(modelid));
                    return 1;
                }
            }
            case MODEL_SELECTION_WHELLS:
            {
                new vehicleid = GetPVarInt(playerid, "holdingWheelsVehicle");
                AddComponent(vehicleid, modelid);
                PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);

                SendServerMessage(playerid, "You have changed vehicle wheels");
                DeletePVar(playerid, "holdingWheelsVehicle");
            }
            case MODEL_SELECTION_AKSESORIS:
            {
                new
                    id = Business_Inside(playerid),
                    price;

                if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 3)
                {
                    price = BusinessData[id][bizPrices][PlayerData[playerid][pClothesType]-1];

                    if(GetMoney(playerid) < price)
                        return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

                    if(BusinessData[id][bizProducts] < 1)
                        return SendErrorMessage(playerid, "This business is out of stock.");

                    Aksesoris_Create(playerid, modelid, GetAksesorisNameByModel(modelid));
                        
                    GiveMoney(playerid, -price);
                    SendServerMessage(playerid, "You have purchased a \"%s\" for %s.", GetAksesorisNameByModel(modelid), FormatNumber(price));

                    BusinessData[id][bizProducts]--;
                    BusinessData[id][bizVault] += Tax_Percent(price);

                    Business_Save(id);
                    Business_Refresh(id);
                    Tax_AddPercent(price);
                }
            }
        }
    }
    return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
    if((response) && (extraid == MODEL_SELECTION_SKIN))
    {
        for (new i = 0; i < 50; i ++) {
            SendClientMessage(playerid, -1, "");
        }

        SetPVarInt(playerid, "SelectDia", 0);
          
        SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");
        SendClientMessageEx(playerid, X11_WHITE,"Selamat datang "YELLOW"%s"WHITE", anda telah sampai di Market Station.", ReturnName(playerid,0));
        SendClientMessageEx(playerid, X11_WHITE,"Anda di beri uang saku "GREEN"$250 "WHITE"dan di bank account "GREEN"$250.");
        SendClientMessageEx(playerid, X11_WHITE,"Jika anda menemukan bug atau hal yang tidak wajar, anda bisa melaporkannya di "RED"%s.", SERVER_DISCORD);
        SendClientMessageEx(playerid, X11_WHITE,""RED"PENTING:"WHITE" Silahkan buka "YELLOW"/faq "WHITE"dan "YELLOW"/map "WHITE"untuk mengakses informasi awal!");
        SendClientMessageEx(playerid, COLOR_CLIENT,"---------------------------------------------------------------------------------------------------------------");

        TogglePlayerGUI(playerid, true);

        TextDrawShowForPlayer(playerid, gServerTextdraws[2]);
        if (PlayerData[playerid][pHUD] == 1) {
            ShowPlayerProgressBar(playerid, PlayerData[playerid][hungry]);
            ShowPlayerProgressBar(playerid, PlayerData[playerid][energy]);
        }

        DisablePlayerCheckpoint(playerid);

        PlayerData[playerid][pSkin] = modelid;
        PlayerData[playerid][pCreated] = 1;
        PlayerData[playerid][pTutorialTime] = 0;
        PlayerData[playerid][pScore] = 1;
        PlayerData[playerid][pMinutes] = 0;
        PlayerData[playerid][pHour] = 0;
        PlayerData[playerid][pMinute] = 0;
        PlayerData[playerid][pSecond] = 0;
        for (new i = 0; i < 6; i ++) {
            PlayerData[playerid][pAuto][i] = 0;
        }
        PlayerData[playerid][pLogged] = 1;

        PlayerData[playerid][pRegisterDate] = gettime();
        mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `RegisterDate`='%d' WHERE `ID`='%d';", PlayerData[playerid][pRegisterDate], PlayerData[playerid][pID]));

        SetPlayerSkinEx(playerid, modelid);
        TogglePlayerSpectating(playerid, false);

        SetDefaultSpawn(playerid);
        SQL_SaveAccounts(playerid);

        SetPlayerScore(playerid,PlayerData[playerid][pScore]);

        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, 0);
        
        PlayerData[playerid][pTutorialObjectGate] = CreateDynamicObject(19477,1642.66,-2326.82,15.9418,0.000,0.000,-90, playerid+1, 0, playerid,200.000,200.000);
        SetDynamicObjectMaterialText(PlayerData[playerid][pTutorialObjectGate], 0, sprintf("Selamat datang ...\n\n"GREEN"%s", ReturnName(playerid, 0)), 130, "Ariel", 30, 1, -1, -16777216, 1);
        SetPlayerVirtualWorld(playerid, playerid+1);
        SetTimerEx("DestroyObjectGate", 5000, false, "d", playerid);
    }
    if((response) && (extraid == MODEL_SELECTION_ROADBLOCK))
    {
        new Float:fX,Float:fY,Float:fZ,Float:fA;
        GetPlayerPos(playerid, fX, fY, fZ);
        GetPlayerFacingAngle(playerid, fA);

        for (new i = 0; i != MAX_BARRICADES; i ++) if(!BarricadeData[i][cadeExists])
        {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = (fZ-0.5);
            BarricadeData[i][cadePos][3] = fA;
            
            PlayerData[playerid][pEditRoadblock] = i;
            PlayerData[playerid][pEditingMode] = ROADBLOCK;

            SetPlayerPos(playerid, fX+2, fY+2, fZ+2);

            BarricadeData[i][cadeObject] = CreateDynamicObject(modelid, fX, fY, BarricadeData[i][cadePos][2], 0.0, 0.0, fA);
            EditDynamicObject(playerid, BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has dropped a roadblock.", ReturnName(playerid, 0, 1));
            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has dropped a roadblock at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
            return 1;
        }
        SendErrorMessage(playerid, "The server has reached the limit for roadblock.");
    }
    if((response) && (extraid == MODEL_SELECTION_DEALER))
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(!DealershipCars[id][index][vehModel])
            {
                Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Add Vehicle", "Add by Name\nAdd by Thumbnail", "Select", "Cancel");
            }
            else
            {
                PlayerData[playerid][pDealerCar] = index;
                Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Dealership Vehicle", "Set Price (%s)\nRemove Vehicle", "Select", "Cancel", FormatNumber(DealershipCars[id][index][vehPrice]));
            }
        }
    }
    if((response) && (extraid == MODEL_SELECTION_DEALER_ADD))
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
            {
                if(DealershipCars[id][i][vehModel] == modelid)
                    return SendErrorMessage(playerid, "This vehicle is already sold at this dealership.");
            }
            PlayerData[playerid][pDealerCar] = modelid;
            Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", GetVehicleNameByModel(PlayerData[playerid][pDealerCar]));
        }
    }
    if((response) && (extraid == MODEL_SELECTION_BUY_CAR))
    {
        new id = Business_Inside(playerid);

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(!DealershipCars[id][index][vehModel])
                return SendErrorMessage(playerid, "There is no model in the selected slot.");

            if(GetMoney(playerid) < DealershipCars[id][index][vehPrice])
                return SendErrorMessage(playerid, "You can't afford this vehicle (%s).", FormatNumber(DealershipCars[id][index][vehPrice]));

            PlayerData[playerid][pDealerCar] = index;
            Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Confirm Purchase", "Are you sure you want to buy this '%s'?\n\nNote: This vehicle costs %s at this dealership.", "Yes", "No", GetVehicleNameByModel(modelid), FormatNumber(DealershipCars[id][index][vehPrice]));
        }
    }
    if((response) && (extraid == MODEL_SELECTION_FURNITURE))
    {
        new
            id = Business_Inside(playerid),
            type = PlayerData[playerid][pFurnitureType],
            price;

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
        {
            price = BusinessData[id][bizPrices][type];

            if(GetMoney(playerid) < price)
                return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

            if(BusinessData[id][bizProducts] < 1)
                return SendErrorMessage(playerid, "This business is out of stock.");

            if(!House_GetCount(playerid))
                return SendErrorMessage(playerid, "You don't have house.");

            new 
                str[128],
                count = 0;

            foreach (new i : Houses) if(House_IsOwner(playerid, i)) {
                format(str, sizeof(str), "%sHouse Address: %s | Loc: %s\n", str, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
                ListedHouse[playerid][count++] = i;
            }
            Dialog_Show(playerid, SelectHouse, DIALOG_STYLE_LIST, "Select House", str, "Select", "Close");
            SetPVarInt(playerid, "InsideBusiness", id);
            SetPVarInt(playerid, "FurnitureModel", modelid);
            SetPVarInt(playerid, "FurniturePrice", price);
        }
    }
    if((response) && (extraid == MODEL_SELECTION_SKINS))
    {
        Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Edit Skin", "Add by Model ID\nAdd by Thumbnail\nClear Slot", "Select", "Cancel");
        PlayerData[playerid][pSelectedSlot] = index;
    }
    if((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
    {
        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot], modelid);
    }
    if((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
    {
        new factionid = PlayerData[playerid][pFaction];

        if(factionid == -1 || !IsNearFactionLocker(playerid))
            return 0;

        if(modelid == 19300)
            return SendErrorMessage(playerid, "There is no model in the selected slot.");

        if(modelid == PlayerData[playerid][pSkinFaction])
            return SendErrorMessage(playerid, "Can't select with the same skin ID.");

        PlayerData[playerid][pSkinFaction] = modelid;

        if(PlayerData[playerid][pOnDuty]) {
            SetPlayerSkinEx(playerid, modelid, 1);
        }
        SendServerMessage(playerid, "Faction skin changed to id "GREEN"%d.", modelid);
    }
    return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
        if(PlayerTemp[playerid][temp_selecttextdraw])
        {
            if(PlayerData[playerid][pClothesType] == 1)
            {
                SetPlayerSkinEx(playerid, PlayerTemp[playerid][temp_realskin]);
                TogglePlayerControllable(playerid, true);

                HideClothesTextdraw(playerid);
                SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

            }
        }
    }
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(!Dialog_Opened(playerid))
    {
        if(playertextid == PlayerTextdraws[playerid][textdraw_registrasi][8])
        {
            Dialog_Show(playerid, Personal, DIALOG_STYLE_LIST, "Update",""WHITE"Gender\n{C0C0C0}Tanggal Lahir\n"WHITE"Asal Karakter\n{C0C0C0}Selesai!","Update","Kembali");
        }

        //Clothing
        if(playertextid == PlayerTextdraws[playerid][textdraw_clothes][2])
        {
            new
                bizid = -1,
                price;

            if((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
                return 0;

            if(BusinessData[bizid][bizProducts] < 1)
                return SendErrorMessage(playerid, "This business is out of stock.");

            price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType]-1];

            if(GetMoney(playerid) < price)
                return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

            GiveMoney(playerid, -price);

            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += Tax_Percent(price);

            Business_Save(bizid);
            Business_Refresh(bizid);
            Tax_AddPercent(price);

            HideClothesTextdraw(playerid);
            TogglePlayerControllable(playerid, true);

            PlayerData[playerid][pSkin] = (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]];
            SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received some clothes.", ReturnName(playerid, 0, 1), FormatNumber(price));
        }

        if(playertextid == PlayerTextdraws[playerid][textdraw_clothes][4]) //back
        {
            if(PlayerTemp[playerid][temp_selectskin] == 0) 
            {
                PlayerPlaySoundEx(playerid, 1053); 
                return 0;
            }
            else PlayerTemp[playerid][temp_selectskin] --;
            SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);

            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], sprintf("Skin:_%d/%d", PlayerTemp[playerid][temp_selectskin] + 1, ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) : sizeof(g_aFemaleSkins))));
        }
        if(playertextid == PlayerTextdraws[playerid][textdraw_clothes][3]) //next
        {
            if(PlayerTemp[playerid][temp_selectskin] == ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) - 1 : sizeof(g_aFemaleSkins) - 1)) 
            {
                PlayerPlaySoundEx(playerid, 1053);
                return 0;
            }
            else PlayerTemp[playerid][temp_selectskin] ++;
            SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);

            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], sprintf("Skin:_%d/%d", PlayerTemp[playerid][temp_selectskin] + 1, ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) : sizeof(g_aFemaleSkins))));
        }
        //End Clothing
    }
    return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if (clickedplayerid == playerid)
        return SendErrorMessage(playerid, "You cannot click yourself.");

    if (AccountData[playerid][pAdmin] > 0) {
        if (SQL_IsCharacterLogged(playerid)) {
            if (SQL_IsCharacterLogged(clickedplayerid) || SQL_IsLogged(clickedplayerid)) return ShowStatsForPlayer(playerid, clickedplayerid);
            else return SendErrorMessage(playerid, "That player isn't logged in!");
        } else return SendErrorMessage(playerid, "You aren't logged in!");
    }
    return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if (IsPlayerInsideTaxi(playerid)) {
        new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));
        SetPlayerWaypoint(driverid, sprintf("Destination: %s", GetLocation(fX, fY, fZ)), fX, fY, fZ);
        SendCustomMessage(playerid, "GPS", "You've been marked your destination to Taxi Driver.");
        SendCustomMessage(driverid, "GPS", "Customer has marked their destionation on your map.");
    }
    // if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
    //     if (Inventory_HasItem(playerid, "GPS System")) {
    //         new Float:pos[3];
    //         GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    //         PathFinder_FindWay(0, pos[0], pos[1], fX, fY, 0.9);
    //     }
    // }
    if (AccountData[playerid][pAdmin] > 0 && AccountData[playerid][pAdminDuty]) {
        SetPlayerPosFindZ(playerid, fX, fY, fZ+1);
        SendCustomMessage(playerid, "TELE", "You've been teleported to "YELLOW"%s", GetLocation(fX, fY, fZ));
    }
    return 1;
}

Function:ForkliftUpdate(playerid, vehid)
{
    if(GetVehicleModel(vehid) != 530 || !PlayerData[playerid][pLoading]) {
        return 0;
    }
    GetVehicleHealth(vehid, CoreVehicles[vehid][vehLoadHealth]);
    PlayerData[playerid][pLoading] = 0;

    CoreVehicles[vehid][vehLoadType] = 8;
    CoreVehicles[vehid][vehCrate] = CreateDynamicObject(3798, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

    AttachDynamicObjectToVehicle(CoreVehicles[vehid][vehCrate], vehid, 0.0, 1.2, -0.05, 0.0, 0.0, 0.0);
    SetPlayerCheckpoint(playerid, -14.74, -270.39, 5.42, 1.5);

    TogglePlayerControllable(playerid, 1);
    SendServerMessage(playerid, "Deliver the crate to the marker.");
    return 1;
}

static ShowContacts(playerid)
{
    new
        string[32 * MAX_CONTACTS],
        count = 0;

    string = "Add Contact\n";

    for (new i = 0; i != MAX_CONTACTS; i ++) if(ContactData[playerid][i][contactExists]) {
        format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

        ListedContacts[playerid][count++] = i;
    }
    Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "My Contacts", string, "Select", "Back");
    return 1;
}

GetContactNameByNumber(playerid, number)
{
    new 
        name[MAX_PLAYER_NAME];

    for (new i = 0; i != MAX_CONTACTS; i ++) if(ContactData[playerid][i][contactExists] && ContactData[playerid][i][contactNumber] == number) {
        format(name, 24, "%s", ContactData[playerid][i][contactName]);
        return name;
    }
    format(name, 24, "Unknown");
    return name;
}

static GetPlayerID(name[], underscore = 1)
{
    foreach (new i : Player) if(!strcmp(ReturnName(i, underscore), name, true)) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

// GetPlayerByMask(maskid) {
//     foreach (new i : Player) if (PlayerData[i][pMaskID] == maskid) {
//         return i;
//     }

//     return INVALID_PLAYER_ID;
// }

GetPlayerByRekening(rekening) {
    foreach (new i : Player) if (PlayerData[i][pRekening] == rekening) {
        return i;
    }
    return INVALID_PLAYER_ID;
}

Function:OfflinePI(playerid, name[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "Invalid target to track!."), cmd_mdc(playerid, "\1");

    new str[1024],
        query[128],
        id,
        Cache: ticket,
        Cache: warrans,
        Cache: charges,
        job[24],
        pjob[2],
        drivelic,
        firearmlic,
        businesslic,
        lumberlic,
        wslic,
        truckerlic;

    new drivelictime, firearmlictime, businesslictime, lumberlictime, wslictime, truckerlictime, phone;

    cache_get_value_int(0, "ID", id);
    cache_get_value_int(0, "Phone", phone);
    cache_get_value(0, "Job", job, 24);
    sscanf(job, "p<|>dd",pjob[0],pjob[1]);

    strcat(str, sprintf("{AAC4E5}I. Personal information\n"WHITE"Personal ID: "YELLOW"SA%09d\n"WHITE"Name: "YELLOW"%s\n", id, name));
    strcat(str, sprintf(""WHITE"Phone Number: "YELLOW"%d\n"WHITE"Job: "YELLOW"%s, %s\n\n", phone, Job_GetName(pjob[0]), Job_GetName(pjob[1])));
    strcat(str, "\n{AAC4E5}II. Licenses"WHITE"\n");
    //---------------------------
    cache_get_value_int(0, "DrivingLicense", drivelic);
    cache_get_value_int(0, "FirearmLicense", firearmlic);
    cache_get_value_int(0, "BusinessLicense", businesslic);
    cache_get_value_int(0, "LumberLicense", lumberlic);
    cache_get_value_int(0, "WorkshopLicense", wslic);
    cache_get_value_int(0, "TruckerLicense", truckerlic);

    if(drivelic)  {
        cache_get_value_int(0, "DrivingLicenseExpired", drivelictime);
        if(drivelictime != 0) strcat(str, sprintf("Driving: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:drivelictime)));
        else strcat(str, "Driving: ["RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Driving: ["RED"Not Passed"WHITE"]\n");

    if(firearmlic)  {
        cache_get_value_int(0, "FirearmLicenseExpired", firearmlictime);
        if(firearmlictime != 0) strcat(str, sprintf("Firearm: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:firearmlictime)));
        else strcat(str, "Firearm: ["RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Firearm: ["RED"Not Passed"WHITE"]\n");

    if(businesslic)  {
        cache_get_value_int(0, "BusinessLicenseExpired", businesslictime);
        if(businesslictime != 0) strcat(str, sprintf("Business: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:businesslictime)));
        else strcat(str, "Business: ["RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Business: ["RED"Not Passed"WHITE"]\n");

    if(wslic)  {
        cache_get_value_int(0, "WorkshopLicenseExpired", wslictime);
        if(wslictime != 0) strcat(str, sprintf("Workshop: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:wslictime)));
        else strcat(str, "Workshop: ["RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Workshop: ["RED"Not Passed"WHITE"]\n");

    if(lumberlic)  {
        cache_get_value_int(0, "LumberLicenseExpired", lumberlictime);
        if(lumberlictime != 0) strcat(str, sprintf("Lumber: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:lumberlictime)));
        else strcat(str, "Lumber: ["RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Lumber: ["RED"Not Passed"WHITE"]\n");

    if(truckerlic) {
        cache_get_value_int(0, "TruckerLicenseExpired", truckerlictime);
        if(truckerlictime != 0) strcat(str, sprintf("Trucker: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:truckerlictime)));
        else strcat(str, "Trucker: ["RED"Expired"WHITE"]\n");
    }
    else strcat(str, "Trucker: ["RED"Not Passed"WHITE"]\n");

    strcat(str, "\n{AAC4E5}III. Active Charges\n"WHITE"");
    mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", name);
    charges = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24], username[24];
        cache_get_value(i, "Suspect", suspect);
        cache_get_value(i, "Description", reason);
        cache_get_value(i, "Date", date);
        cache_get_value(i, "Username", username);

        strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, username, date));
    }
    cache_delete(charges);

//        strcat(str, "\n{AAC4E5}IV. Crime Record\n"WHITE"None\n\n");

    strcat(str, "\n{AAC4E5}V. Registered Vehicle"WHITE"\n");

    mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `player_vehicles` WHERE `Owner` = '%d' ORDER BY `ID` DESC LIMIT 3", id);
    warrans = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new plate[24], model;
        
        cache_get_value_int(i, "Model", model);
        cache_get_value(i, "Plate", plate);

        strcat(str, sprintf(""YELLOW"%s "WHITE"( %s )\n", GetVehicleNameByModel(model), plate));
    }
    cache_delete(warrans);

    strcat(str, "\n{AAC4E5}VI. Unpaid Ticket"WHITE"\n");

    mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d' ORDER BY `ticketID` DESC", id);
    ticket = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[32], 
            date[36], 
            issuer[24],
            fee;

        cache_get_value_int(i, "ticketFee", fee);
        cache_get_value(i, "ticketReason", reason);
        cache_get_value(i, "ticketDate", date);
        cache_get_value(i, "ticketIssuer", issuer);

        strcat(str, sprintf("%d. {BDF38B}%s "WHITE"(%s - %s) Issuer: %s\n", i+1, reason, FormatNumber(fee), date, issuer));
    }
    cache_delete(ticket);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Summary", str, "Close", "");
    return 1;
}

IsHaveSpace(text[])
{
	for (new i = 0, len = strlen(text); i < len; i ++)
	{
		if(text[i] == ' ') return 1;
	}
	return 0;
}

/*==============================================================================
    Command List
==============================================================================*/
DCMD:register(user, channel, params[])
{

	new userId[21];
	new uname[33];
	DCC_GetUserId(user, userId);
	DCC_GetUserName(user, uname);

	if(channel != Whitelist)
		return 1;

	if(isnull(params))
	    return DCC_SendChannelMessage(Whitelist,":x: Gunakan /register [username]");

	if(IsHaveSpace(params))
		return DCC_SendChannelMessage(Whitelist, ":x: Nama tidak boleh memiliki spasi!");

	if(strlen(params) < 3)
	{
		new str[72];
		format(str, sizeof(str), ":x: Nama tidak bisa kurang dari 3 karakter!");
		DCC_SendChannelMessage(Whitelist, str);
		return 1;
	}
    if(IsValidRoleplayName(params))
    {
        new str[82];
        format(str, sizeof(str), ":x: hanya bisa membuat UCP tanpa menggunakan symbol _");
		DCC_SendChannelMessage(Whitelist, str);
        return 1;
    }
	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `DiscordID` = '%e' LIMIT 1", userId);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
	new count = cache_num_rows();
	if(count > 0)
	{
		new str[256];
		format(str, sizeof(str), ":x: Discord %s sudah pernah membuat account sebelumnya!", uname);
		DCC_SendChannelMessage(Whitelist, str);
	}
	else
	{
    	DCC_CreatePrivateChannel(user, "SendActivationCode", "sss", params, userId, uname);
	}
    cache_delete(ex);
	return 1;
}

forward SendActivationCode(message[], userId[], owner[]);
public SendActivationCode(message[], userId[], owner[])
{
	new DCC_Channel:PM;
	PM = DCC_GetCreatedPrivateChannel();

    new DCC_User:target = DCC_FindUserById(userId);

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", message);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
    new count = cache_num_rows();
	if(count > 0)
	{
		new str[256];
		format(str, sizeof(str), ":x: Nama UCP %s sudah terdaftar di server, silahkan gunakan nama lain", message);
		DCC_SendChannelMessage(Whitelist, str);
		return 1;
	}
	else
	{
		new verif[32];
        format(verif, sizeof(verif), "ORP-%d", RandomEx(1000, 9999));

		new zstr[256];
		format(zstr, sizeof(zstr), "Selamat akun %s berhasil didaftarkan.\nSilahkan login ke game menggunakan nama UCP %s untuk membuat password akun Anda serta memasukkan kode verifikasi dibawah ini:\n\n> %s\n\nTerimakasih telah mendaftar, semoga betah 😉", message, message, verif);
		DCC_SendChannelMessage(PM, zstr);

		new str[256];
		format(str, sizeof(str), "Berhasil mendaftarkan akun UCP %s, silahkan cek direct message dan masukan saat kamu mendaftar", message);
		DCC_SendChannelMessage(Whitelist, str);

		new zquery[270];
		mysql_format(g_iHandle,zquery,sizeof(zquery),"INSERT INTO `accounts` (`Username`, `Password`, `VerifyCode`, `DiscordID`, `WhiteList`) VALUES('%e', '%s', '%e', '%e', 1)", message, "None", verif, userId);
		mysql_tquery(g_iHandle,zquery);

        DCC_SetGuildMemberNickname(DCC_FindGuildById("1164343089339580479"), target, message);
        DCC_AddGuildMemberRole(DCC_FindGuildById("1164343089339580479"), target, DCC_FindRoleById("1164343089742229590"));

		printf("[LOGS] Created account for Discord '%s' with Username '%s' and Code '%s'", owner, message, verif);
	}
    cache_delete(ex);
	return 1;
}

DCMD:resendcode(user, channel, params[])
{
	new userId[21];
	new uname[33];
	DCC_GetUserId(user, userId);
	DCC_GetUserName(user, uname);

	if(channel != Whitelist)
		return 1;

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `DiscordID` = '%s' LIMIT 1", userId);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
	new count = cache_num_rows();
	if(count)
	{
		new active, str[256], unamee[24];

		cache_get_value_name_int(0, "Active", active);
		cache_get_value_name(0, "Username", unamee);
		if(active == 1)
			return format(str, sizeof(str), ":x: In-Game account milik **%s** (%s) sudah aktif! kamu tidak memerlukan activation code lagi.", uname, unamee), DCC_SendChannelMessage(channel, str);

		DCC_CreatePrivateChannel(user, "ReSendActivationCode", "sss", unamee, userId, uname);
	}
	else
	{
		DCC_SendChannelMessage(channel, sprintf(":x: Discord **%s** belum pernah mendaftarkan akun!", uname));
	}
	cache_delete(ex);
	return 1;
}

DCMD:refundrole(user, channel, params[])
{
	new userId[21];
	new uname[33];
	DCC_GetUserId(user, userId);
	DCC_GetUserName(user, uname);

	if(channel != RefundRoles)
		return 1;

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `DiscordID` = '%s' LIMIT 1", userId);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
	new count = cache_num_rows();
	if(count)
	{
		new active, str[256], unamee[24];

		cache_get_value_name_int(0, "Active", active);
		cache_get_value_name(0, "Username", unamee);
        format(str, sizeof(str), "Hallo **%s** (%s) Refund Role Berhasil, Happy Roleplay.", uname, unamee), DCC_SendChannelMessage(channel, str);

		DCC_CreatePrivateChannel(user, "RefundRole", "sss", unamee, userId, uname);
	}
	else
	{
		DCC_SendChannelMessage(channel, sprintf(":x: Discord **%s** belum pernah mendaftarkan akun!", uname));
	}
	cache_delete(ex);
	return 1;
}


forward ReSendActivationCode(uname[], userId[], owner[]);
public ReSendActivationCode(uname[], userId[], owner[])
{
	new DCC_Channel:PM, code[32];
	PM = DCC_GetCreatedPrivateChannel();

	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", uname);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
    new count = cache_num_rows();
	if(count > 0)
	{
		cache_get_value_name(0, "VerifyCode", code, 32);

		new zstr[300];
		format(zstr, sizeof(zstr), "Selamat datang kembali %s \nSilahkan login ke game menggunakan nama UCP %s untuk membuat password akun Anda serta memasukkan kode verifikasi dibawah ini:\n\n> %s\n\nJangan berikan kode ini ke siapapun 😉", uname, uname, code);
		DCC_SendChannelMessage(PM, zstr);

		new ystr[256];
		format(ystr, sizeof(ystr), ":white_check_mark: Kode untuk account **%s** berhasil dikirim ulang ke **direct message**-mu.", uname);
		DCC_SendChannelMessage(Whitelist, ystr);

        DCC_SetGuildMemberNickname(DCC_FindGuildById("1286386405966090300"), DCC_FindUserById(userId), uname);
        DCC_AddGuildMemberRole(DCC_FindGuildById("1286386405966090300"), DCC_FindUserById(userId), DCC_FindRoleById("1286386405966090301"));
	}
    cache_delete(ex);
	return 1;
}

forward RefundRole(uname[], userId[], owner[]);
public RefundRole(uname[], userId[], owner[])
{
	new zQuery[256];
	mysql_format(g_iHandle, zQuery, sizeof(zQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", uname);
	new Cache:ex = mysql_query(g_iHandle, zQuery, true);
    new count = cache_num_rows();
	if(count > 0)
	{
        DCC_SetGuildMemberNickname(DCC_FindGuildById("1286386405966090300"), DCC_FindUserById(userId), uname);
        DCC_AddGuildMemberRole(DCC_FindGuildById("1286386405966090300"), DCC_FindUserById(userId), DCC_FindRoleById("1286386405966090301"));
	}
    cache_delete(ex);
	return 1;
}

CMD:delays(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You aren't logged in!");

    new jobdelay[1024];

    strcat(jobdelay, "Name\tDelay (minutes)\n");
    strcat(jobdelay, sprintf("Fishing Activity\t%d\n", PlayerData[playerid][pDelayFishing]/60));
    strcat(jobdelay, sprintf("Forager Activity\t%d\n", PlayerData[playerid][pDelayForager] / 60));
    strcat(jobdelay, sprintf("Sweeper Sidejob\t%d\n", PlayerData[playerid][pSweeperDelay]/60));
    strcat(jobdelay, sprintf("Bus Sidejob\t%d\n", PlayerData[playerid][pBusDelay]/60));
    strcat(jobdelay, sprintf("Trashmaster Sidejob\t%d\n", PlayerData[playerid][pWork]/60));
    strcat(jobdelay, sprintf("Delivery Wood Lumberjack Job\t%d\n", PlayerData[playerid][pWoodDelay]/60));
    strcat(jobdelay, sprintf("Package Sorter Sidejob\t%d\n", GetSorterDelay(playerid) / 60));
    strcat(jobdelay, sprintf("Cargo Unloader Sidejob\t%d\n", GetUnloaderDelay(playerid) / 60));
    strcat(jobdelay, sprintf("Miner Sidejob\t%d\n", GetMinerDelay(playerid) / 60));
    strcat(jobdelay, sprintf("Missions Trucker Job\t%d\n", PlayerData[playerid][pMissionsDelay]/60));
    strcat(jobdelay, sprintf("Lumberjack Job\t%d\n", PlayerData[playerid][pLumberDelay]/60));
    strcat(jobdelay, sprintf("Smuggler Job\t%d\n", GetSmugglerDelay(playerid) / 60));
    strcat(jobdelay, sprintf("Farmer Job\t%d\n", GetFarmerDelay(playerid) / 60));
    strcat(jobdelay, sprintf("Advertisement\t%d", PlayerData[playerid][pPlaceAd] / 60));

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "All Delays", jobdelay, "Close", "", "");
    return 1;
}

// CMD:syncallchars(playerid, params[]) {
//     if (CheckAdmin(playerid, 8))
//         return PermissionError(playerid);

//     new
//         query[256],
//         pass[65],
//         salt[65],
//         username[MAX_PLAYER_NAME + 1],
//         Cache:mysql;

//     format(query,sizeof(query),"SELECT `Password`, `Salt`, `Username` FROM `accounts`");
//     mysql = mysql_query(g_iHandle, query);

//     for (new i = 0; i < cache_num_rows(); i ++) {
//         cache_get_value(i, "Password", pass, 65);
//         cache_get_value(i, "Salt", salt, 65);
//         cache_get_value(i, "Username", username, MAX_PLAYER_NAME + 1);

//         format(query, sizeof(query), "UPDATE `characters` SET `password` = '%s', `salt` = '%s' WHERE `Username` = '%s'", SQL_ReturnEscaped(pass), SQL_ReturnEscaped(salt), SQL_ReturnEscaped(username));
//         mysql_tquery(g_iHandle, query);
//     }

//     cache_delete(mysql);
//     SendCustomMessage(playerid, "SYNC", "All password characters now sync to password accounts!");
//     return 1;
// }

CMD:countobjects(playerid) {
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    new object_count;
    for (new i; i < MAX_OBJECTS; i++)
    {
        if (IsValidObject(i))
        {
            object_count++;
        }
    }
    SendClientMessageEx(playerid, -1, "[DEBUG] Amount of objects: %i", object_count);

    SendClientMessageEx(playerid, -1, "[DEBUG] Amount of cdynamic objects: %i ;; Visible objects: %i", Streamer_CountItems(STREAMER_TYPE_OBJECT), Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT, playerid));
    return 1;
}

CMD:testemail(playerid, params[]) {
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    new email_text[128];
    format(email_text, sizeof(email_text),"NAMA:%s#NAMA:%s#ADDRESS:%s#KONFIRMASI:%s", ReturnName(playerid), ReturnName(playerid), ReturnIP(playerid), AccountData[playerid][pVerifyCode]);
    // SendEmail("Valley Roleplay", AccountData[playerid][pMail], "[RRP] Verifikasi akun anda", email_text, true, "default.html");
    SendCustomMessage(playerid, "TESTEMAIL", "Test email was successfully send!");
    return 1;
}

CMD:countvehicles(playerid) {
    new count[3], validVeh[3];

    foreach (new i : DynamicVehicles) {
        if (VehicleData[i][cOwner]) count[0]++;
        else if (!VehicleData[i][cOwner] && VehicleData[i][cFaction]) count[1]++;
        else if (!VehicleData[i][cOwner] && VehicleData[i][cBiz]) count[2]++;
        else if (!VehicleData[i][cOwner] && VehicleData[i][cWorkshop]) count[2]++;

        if (VehicleData[i][cOwner] && IsValidVehicle(VehicleData[i][cVehicle])) validVeh[0]++;
        else if (!VehicleData[i][cOwner] && VehicleData[i][cFaction] && IsValidVehicle(VehicleData[i][cVehicle])) validVeh[1]++;
        else if (!VehicleData[i][cOwner] && VehicleData[i][cBiz] && IsValidVehicle(VehicleData[i][cVehicle])) validVeh[2]++;
        else if (!VehicleData[i][cOwner] && VehicleData[i][cWorkshop] && IsValidVehicle(VehicleData[i][cVehicle])) validVeh[2]++;
    }

    SendCustomMessage(playerid, "VEHICLES", "All Valid Vehicles: "YELLOW"%d/"RED"%d", Iter_Count(Vehicle), MAX_VEHICLES);
    SendCustomMessage(playerid, "VEHICLES", "Owned Vehicles: "YELLOW"%d, "WHITE"Valid Vehicles: "YELLOW"%d", count[0], validVeh[0]);
    SendCustomMessage(playerid, "VEHICLES", "Faction & Family Vehicles: "YELLOW"%d, "WHITE"Valid Vehicles: "YELLOW"%d", count[1], validVeh[1]);
    SendCustomMessage(playerid, "VEHICLES", "Biz & Workshop Vehicles: "YELLOW"%d, "WHITE"Valid Vehicles: "YELLOW"%d", count[2], validVeh[2]);
    return 1;
}

CMD:getfreeveh(playerid) {
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    new i = Iter_Free(DynamicVehicles);

    if (i == cellmin)
        return SendErrorMessage(playerid, "The server has reached maximum of dynamic vehicles.");

    SendCustomMessage(playerid, "FREEID", "Vehicle freeid is: "YELLOW"%d", i);
    return 1;
}

CMD:buyseeds(playerid, params[])
{
    new id = -1;

    if ((id = Job_NearestPoint(playerid)) != -1 && JobData[id][jobType] == JOB_FARMER) {
        if (GetPlayerJob(playerid, 0) != JOB_FARMER && GetPlayerJob(playerid, 1) != JOB_FARMER)
            return SendErrorMessage(playerid, "You are not a Farmer!");

        Dialog_Show(playerid, BuyFarmSeeds, DIALOG_STYLE_TABLIST_HEADERS, "Seeds Shop", "Seeds\tPrice\nPumpkin Seeds\t$90\nMushroom Seeds\t$100\nCucumber Seeds\t$95\nEgg Plant Seeds\t$85", "Buy", "Close");
    } else {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 331.96, 1119.71, 1083.89)) {
            if (PlayerData[playerid][pScore] < 3)
                return SendErrorMessage(playerid, "You must level 3 to buy seeds.");

            Dialog_Show(playerid, BuySeeds, DIALOG_STYLE_LIST, "Seeds Shop", "Marijuana Seeds "YELLOW"(Price: $2000)\n"WHITE"Cocaine Seeds "YELLOW"(Price: $2500)\n"WHITE"Heroin Opium Seeds"YELLOW"(Price: $3000)", "Buy", "Close");
        } else SendErrorMessage(playerid, "You are not near in range of Seeds Shop!");
    }
    return 1;
}

CMD:levels(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You aren't logged in!");

    new
        maxLevel = 49,
        output[1024],
        oldValue,
        points;
    
    strcat(output, "Level\tTime Played\n");
    for (new i = 1; i <= maxLevel; i ++) {
        points = (i * 4);
        strcat(output, sprintf("Level: %d\t%d hours\n", i + 1, points + oldValue));
        oldValue += points;
    }

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Levels", output, "Close", "");
    return 1;
}

CMD:pvars(playerid, params[])
{
    new varname[128], varcount = GetPVarsUpperIndex(playerid), sgstr[128];
    if(varcount == 0) return SendClientMessage(playerid, -1, "No PVars found on your playerid.");
    for(new i = 0; i < varcount; i++)
    {
        GetPVarNameAtIndex(playerid, i, varname, 128);
        switch(GetPVarType(playerid, varname))
        {
            case PLAYER_VARTYPE_NONE: format(sgstr, sizeof(sgstr), "pVar %i: {FF0000}UNUSED", i);
            case PLAYER_VARTYPE_INT: format(sgstr, sizeof(sgstr), "pVar %i: %s - %i", i, varname, GetPVarInt(playerid, varname));
            case PLAYER_VARTYPE_STRING:
            {
                new pvarstring[128];
                GetPVarString(playerid, varname, pvarstring, 128);
                format(sgstr, sizeof(sgstr), "pVar %i: %s - %s", i, varname, pvarstring);
            }
            case PLAYER_VARTYPE_FLOAT: format(sgstr, sizeof(sgstr), "pVar %i: %s - %f", i, varname, GetPVarFloat(playerid, varname));
        }
        SendClientMessageEx(playerid, -1, sgstr);
    }
    return true;
}

CMD:lookup(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/lookup [playerid]");

    if(!IsPlayerConnected(userid))
        return SendErrorMessage(playerid, "Invalid player id.");

    new 
        city[24],
        country[24],
        region[24],
        isp[32];

    GetPlayerCountry(userid, country);
    GetPlayerCity(userid, city);
    GetPlayerRegion(userid, region);
    GetPlayerISP(userid, isp);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lookup", ""WHITE"Lookup data from "YELLOW"%s\n\n"WHITE"Country: {C0C0C0}%s\n"WHITE"City: {C0C0C0}%s\n"WHITE"Region: {C0C0C0}%s\n"WHITE"ISP: {C0C0C0}%s", "Close", "", ReturnName(userid, 0), country, city, region, isp);
    return 1;
}

CMD:claiminsurance(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1401.81, -21.20, 1001.00))
        return SendErrorMessage(playerid, "You're not in insurance center.");

    new
        count = 0,
        claimVehicle[256];

    strcat(claimVehicle, "Vehicle Model\tTime\n");
    for (new id = 0; id < MAX_DYNAMIC_VEHICLES; id ++) if (Iter_Contains(DynamicVehicles, id) && Vehicle_IsOwner(playerid, id) && VehicleData[id][cInsideInsurance])
    {
        ListedVehicles[playerid][count++] = id;
        strcat(claimVehicle, sprintf("%s\t%s\n", GetVehicleNameByModel(VehicleData[id][cModel]), (VehicleData[id][cInsuranceTime] < gettime()) ? ("Now") : ConvertTimestamp(Time:VehicleData[id][cInsuranceTime])));
    }

    if(count) Dialog_Show(playerid, ClaimInsurance, DIALOG_STYLE_TABLIST_HEADERS, "Claim Insurance", claimVehicle, "Claim", "Close");
    else SendErrorMessage(playerid, "There are nothing your vehicle here!.");
    return 1;
}

CMD:buyinsurance(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1401.81, -21.20, 1001.00))
        return SendErrorMessage(playerid, "You're not in insurance center.");

    if(!Vehicle_GetCount(playerid))
        return SendErrorMessage(playerid, "You don't have vehicle.");

    new
        count = 0,
        claimVehicle[256];

    strcat(claimVehicle, "Vehicle Model\tCurrent Insurance\tPrice\n");
    for (new id = 0; id < MAX_DYNAMIC_VEHICLES; id ++) if (Iter_Contains(DynamicVehicles, id) && Vehicle_IsOwner(playerid, id) && !VehicleData[id][cInsideInsurance])
    {
        ListedVehicles[playerid][count++] = id;
        strcat(claimVehicle, sprintf("%s\t%d\t$300\n", GetVehicleNameByModel(VehicleData[id][cModel]), VehicleData[id][cInsurance]));
    }

    if(count) Dialog_Show(playerid, BuyInsurance, DIALOG_STYLE_TABLIST_HEADERS, "Claim Insurance", claimVehicle, "Claim", "Close");
    else SendErrorMessage(playerid, "There is no vehicle!.");
    return 1;
}

CMD:usegold(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return 0;
    new str[256];
    format(str,sizeof(str),"Name\tAmount\n");
    format(str,sizeof(str),"%sReduce Warning\t50\n", str);
    format(str,sizeof(str),"%sCustom Mask Number\t100\n", str);
    format(str,sizeof(str),"%sCustom Number Plate\t150\n", str);
    format(str,sizeof(str),"%sCustom Number Phone\t200", str);
    if (PlayerData[playerid][pVipTime] > 0) {
        format(str,sizeof(str),"%s\nCustom House Exterior Mapping\t700\n",str);
        format(str,sizeof(str),"%sCustom Gate\t250",str);
    }
    Dialog_Show(playerid, UseGold, DIALOG_STYLE_TABLIST_HEADERS, "Gold Store", str, "Buy", "Cancel");
    return 1;
}

Dialog:UseGold(playerid, response, listitem, inputtext[]) {
    if (response) {
        switch (listitem) {
            case 0: {
                if (PlayerData[playerid][pGold] < 50)
                    return SendErrorMessage(playerid, "You don't have 50 Gold to Reduce Warning!");

                if (PlayerData[playerid][pWarnings] == 0)
                    return SendErrorMessage(playerid, "You don't have any warnings!");
                
                PlayerData[playerid][pWarnings]--;
                PlayerData[playerid][pGold] -= 50;
                SendCustomMessage(playerid, "Gold Store", "Your warning has been reduced -1.");
            }
            case 1: {
                if (PlayerData[playerid][pGold] < 100)
                    return SendErrorMessage(playerid, "You don't have 100 Gold to Custom Mask Number!");

                Dialog_Show(playerid, CustomMask, DIALOG_STYLE_INPUT, "Custom Mask Number", WHITE"Input mask number: ", "Submit", "Cancel");
            }
            case 2: {
                if (PlayerData[playerid][pGold] < 150)
                    return SendErrorMessage(playerid, "You don't have 150 Gold to Custom Phone Number!");

                new count = 0, info[256];

                strcat(info, "Vehicle\tPlate\n");
                for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] == -1 && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cInsideInsurance]) {
                    strcat(info, sprintf("%s\t%s\n", GetVehicleNameByModel(VehicleData[i][cModel]), VehicleData[i][cPlate]));
                    ListedVehicles[playerid][count++] = i;
                }
                if (count) Dialog_Show(playerid, CustomPlate, DIALOG_STYLE_TABLIST_HEADERS, "Custom Vehicle Number Plate", info, "Select", "Back");
                else SendErrorMessage(playerid, "You don't have any vehicle");
            }
            case 3: {
                if (PlayerData[playerid][pGold] < 200)
                    return SendErrorMessage(playerid, "You don't have 200 Gold to Custom Phone Number!");

                Dialog_Show(playerid, CustomNumber, DIALOG_STYLE_INPUT, "Custom Phone Number", WHITE"Input Phone Number: ", "Submit", "Cancel");
            }
            case 4: {
                if (PlayerData[playerid][pGold] < 700)
                    return SendErrorMessage(playerid, "You don't have 700 Gold to buying Custom House Exterior Mapping!");
                
                PlayerData[playerid][pGold] -= 700;
                PlayerData[playerid][pClaims][1] += 1;
                SendCustomMessage(playerid, "Gold Store", "You've been bought Custom House Exterior Mapping for "YELLOW"700 Gold points");
            }
            case 5: {
                if (PlayerData[playerid][pGold] < 250)
                    return SendErrorMessage(playerid, "You don't have 250 Gold to buying Custom Gate!");
                
                PlayerData[playerid][pGold] -= 250;
                PlayerData[playerid][pClaims][0] += 1;
                SendCustomMessage(playerid, "Gold Store", "You've been bought Custom Gate for "YELLOW"250 Gold points");
            }
        }
    }
    return 1;
}

Dialog:CustomMask(playerid, response, listitem, inputtext[]) {
    if (!response) {
        cmd_usegold(playerid, "\1");
    } else {
        new query[128];

        if (isnull(inputtext))
            return Dialog_Show(playerid, CustomMask, DIALOG_STYLE_INPUT, "Custom Mask Number", RED"ERROR: Mask Number cannot be blank!\n"WHITE"Input mask number: ", "Submit", "Cancel");

        if (strlen(inputtext) != 5)
            return Dialog_Show(playerid, CustomMask, DIALOG_STYLE_INPUT, "Custom Mask Number", RED"ERROR: Mask Number must only five digits!\n"WHITE"Input mask number: ", "Submit", "Cancel");
        
        format(query, sizeof(query), "SELECT `MaskID` FROM `characters` WHERE `MaskID` = '%d'", strval(inputtext));
        mysql_tquery(g_iHandle, query, "checkMaskNumber", "dd", playerid, strval(inputtext));
    }
    return 1;
}

Dialog:CustomNumber(playerid, response, listitem, inputtext[]) {
    if (!response) {
        cmd_usegold(playerid, "\1");
    } else {
        new query[128];

        if (isnull(inputtext))
            return Dialog_Show(playerid, CustomNumber, DIALOG_STYLE_INPUT, "Custom Phone Number", RED"ERROR: Phone number cannot be blank!\n"WHITE"Input Phone Number: ", "Submit", "Cancel");

        if (strlen(inputtext) < 4 && strlen(inputtext) > 10)
            return Dialog_Show(playerid, CustomNumber, DIALOG_STYLE_INPUT, "Custom Phone Number", RED"ERROR: Minumum Phone number are 4 digits or 10 digits of number!\n"WHITE"Input Phone Number: ", "Submit", "Cancel");

        format(query, sizeof(query), "SELECT `Phone` FROM `characters` WHERE `Phone` = '%d'", strval(inputtext));
        mysql_tquery(g_iHandle, query, "checkPhoneNumber", "dd", playerid, strval(inputtext));
    }
    return 1;
}

Dialog:BuyPlate(playerid, response, listitem, inputtext[]) {
    if (response) {
        new i = ListedVehicles[playerid][listitem];

        if (GetVehicleDistanceFromPoint(VehicleData[i][cVehicle], 1532.91, -1674.83, 13.38) > 7.0 && GetVehicleDistanceFromPoint(VehicleData[i][cVehicle],14.2801,-2746.0469,41.9038) > 7.0 && GetVehicleDistanceFromPoint(VehicleData[i][cVehicle],138.8200,-1921.7551,-0.5934) > 7.0)
            return SendErrorMessage(playerid, "Kendaraan yang dipilih harus berada di depan kantor SAPD atau Flint County Precint.");

        new newplate[24];
        format(newplate,sizeof(newplate),"LS-%d%d%d%d",random(10),random(10),random(10),random(10));

        mysql_tquery(g_iHandle, sprintf("SELECT `Plate` FROM `player_vehicles` WHERE `Plate` = '%s'", newplate), "GeneratePlateRegistration", "dds", playerid, i, newplate);
    }
    return 1;
}

Dialog:CustomPlate(playerid, response, listitem, inputtext[]) {
    if (!response) cmd_usegold(playerid, "\1");
    else {
        new i = ListedVehicles[playerid][listitem];

        PlayerTemp[playerid][temp_vehicleid] = i;

        Dialog_Show(playerid, InputPlate, DIALOG_STYLE_INPUT, "Input Plate", "Please input the vehicle plate wish you want: "GREEN"(input below)", "Change", "Close");
    }
    return 1;
}

Dialog:InputPlate(playerid, response, listitem, inputtext[]) {
    if (!response) cmd_usegold(playerid, "\1");
    else {
        new i = PlayerTemp[playerid][temp_vehicleid];

        if (isnull(inputtext))
            return Dialog_Show(playerid, InputPlate, DIALOG_STYLE_INPUT, "Input Plate", "Please input the vehicle plate wish you want: "GREEN"(input below)", "Change", "Close");

        if (strlen(inputtext) < 1 || strlen(inputtext) > 24)
            return Dialog_Show(playerid, InputPlate, DIALOG_STYLE_INPUT, "Input Plate", "Please input the vehicle plate wish you want: "GREEN"(input below)", "Change", "Close"), SendErrorMessage(playerid, "Max characters number plate is 24 character and at least 1 character");

        new Cache:check;

        check = mysql_query(g_iHandle, sprintf("SELECT `Plate` FROM `player_vehicles` WHERE `Plate` = '%s'", inputtext));

        if (cache_num_rows()) {
            Dialog_Show(playerid, InputPlate, DIALOG_STYLE_INPUT, "Input Plate", "Please input the vehicle plate wish you want: "GREEN"(input below)", "Change", "Close"), SendErrorMessage(playerid, "This vehicle number plate is already used by another vehicles");
        } else {
            new vehname[32];

            GetVehicleNameByVehicle(VehicleData[i][cVehicle], vehname);
            format(VehicleData[i][cPlate], 24, "%s", inputtext);
            RespawnVehicle(VehicleData[i][cVehicle]);
            Vehicle_Save(i);
            PlayerData[playerid][pGold] -= 150;
            SendCustomMessage(playerid, "Gold Store", "You've been changed your "CYAN"%s "WHITE"plate to "YELLOW"%s", vehname, inputtext);
        }

        cache_delete(check);
    }
    return 1;
}

Function:checkPhoneNumber(playerid, phonenumber) {
    new
        rows = cache_num_rows();

    if(!rows) {
        PlayerData[playerid][pPhone] = phonenumber;
        PlayerData[playerid][pGold] -= 150;
        mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `Phone` = '%d' WHERE `Character` = '%s'", phonenumber, SQL_ReturnEscaped(NormalName(playerid))));
        SendCustomMessage(playerid, "Gold Store", "Your Phone Number has been successfully changed!");
    } else {
        Dialog_Show(playerid, CustomNumber, DIALOG_STYLE_INPUT, "Custom Phone Number", RED"ERROR: This Phone Number is already used!\n"WHITE"Input Phone Number:", "Submit", "Cancel");
    }
    return 1;
}

Function:checkMaskNumber(playerid, maskid) {
    new
        rows = cache_num_rows();

    if(!rows) {
        PlayerData[playerid][pMaskID] = maskid;
        PlayerData[playerid][pGold] -= 100;
        mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `MaskID` = '%d' WHERE `Character` = '%s'", maskid, SQL_ReturnEscaped(NormalName(playerid))));
        SendCustomMessage(playerid, "Gold Store", "Your Mask Number has been successfully changed!");
    } else {
        Dialog_Show(playerid, CustomMask, DIALOG_STYLE_INPUT, "Custom Mask Number", RED"ERROR: This Mask Number is already used!"WHITE"\nInput mask number:", "Submit", "Cancel");
    }
    return 1;
}

Function:checkBankAccount(playerid, rekening) {
    if (!cache_num_rows()) {
        PlayerData[playerid][pRekening] = rekening;
        GiveMoney(playerid, -50);
        SendCustomMessage(playerid, "BANK", "You has registered a new bank account, your bank account is: "YELLOW"%d", PlayerData[playerid][pRekening]);
    } else {
        SendErrorMessage(playerid, "This account bank number has already owned by other players, please retype by using '"YELLOW"/newrek"WHITE"'");
        PlayerData[playerid][pRekening] = 0;
    }
    return 1;
}

CMD:forceinsurance(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/forceinsurance [playerid/PartOfNmae]");

    if (!IsPlayerConnected(userid))
        return SendErrorMessage(playerid, "Invalid playerid or name!");

    new
        count = 0,
        claimVehicle[256];

    strcat(claimVehicle, "Vehicle Model\tTime\n");
    for (new id = 0; id < MAX_DYNAMIC_VEHICLES; id ++) if (Iter_Contains(DynamicVehicles, id) && Vehicle_IsOwner(userid, id) && VehicleData[id][cInsideInsurance])
    {
        ListedVehicles[playerid][count++] = id;
        strcat(claimVehicle, sprintf("%s\t%s\n", GetVehicleNameByModel(VehicleData[id][cModel]), (VehicleData[id][cInsuranceTime] < gettime()) ? ("Now") : ConvertTimestamp(Time:VehicleData[id][cInsuranceTime])));
    }

    if(count) SetPVarInt(playerid, "forcePlayerCar", userid), Dialog_Show(playerid, ForceInsurance, DIALOG_STYLE_TABLIST_HEADERS, "Claim Insurance", claimVehicle, "Claim", "Close");
    else SendErrorMessage(playerid, "There are nothing insurance vehicle here!.");
    return 1;
}

Dialog:ForceInsurance(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new userid = GetPVarInt(playerid, "forcePlayerCar");

        if (PlayerData[userid][pVipTime] > 0 && PlayerData[userid][pVip] == 3) {
            if(Vehicle_GetCount(userid) >= MAX_PLAYER_VEHICLE+1)
                return SendErrorMessage(playerid, "That player are already owns the maximum amount of cars.");
        } else if (PlayerData[userid][pVipTime] > 0 && PlayerData[userid][pVip] == 4) {
            if(Vehicle_GetCount(userid) >= MAX_PLAYER_VEHICLE+2)
                return SendErrorMessage(playerid, "That player are already owns the maximum amount of cars.");
        } else {
            if(Vehicle_GetCount(userid) >= MAX_PLAYER_VEHICLE)
                return SendErrorMessage(playerid, "That player are already owns the maximum amount of cars.");
        }

        new vehIndex = ListedVehicles[playerid][listitem],
            idx = random(sizeof(insuranceSpawn));

        if(AccountData[playerid][pAdmin] < 4 && VehicleData[vehIndex][cInsuranceTime] > gettime()) 
            return SendErrorMessage(playerid, "Can't claim this vehicle now.");

        VehicleData[vehIndex][cInsuranceTime] = 0;
        VehicleData[vehIndex][cInsideInsurance] = 0;

        VehicleData[vehIndex][cPos][0] = insuranceSpawn[idx][0];
        VehicleData[vehIndex][cPos][1] = insuranceSpawn[idx][1]; 
        VehicleData[vehIndex][cPos][2] = insuranceSpawn[idx][2]; 
        VehicleData[vehIndex][cPos][3] = insuranceSpawn[idx][3];

        Vehicle_Spawn(vehIndex);
        RepairVeh(VehicleData[vehIndex][cVehicle]);

        if (IsABoat(VehicleData[vehIndex][cVehicle])) {
            VehicleData[vehIndex][cPos][0] = 2967.522;
            VehicleData[vehIndex][cPos][1] = 2082.020; 
            VehicleData[vehIndex][cPos][2] = -0.050; 
            VehicleData[vehIndex][cPos][3] = 275.41;
            SetVehiclePos(VehicleData[vehIndex][cVehicle], VehicleData[vehIndex][cPos][0], VehicleData[vehIndex][cPos][1], VehicleData[vehIndex][cPos][2]);
            SetVehicleZAngle(VehicleData[vehIndex][cVehicle], VehicleData[vehIndex][cPos][3]);
        }
        CoreVehicles[VehicleData[vehIndex][cVehicle]][vehFuel] = 100.0;
        Vehicle_Save(vehIndex);

        SendServerMessage(playerid, "Kendaraan dari asuransi telah di keluarkan!, lain kali untuk berhati-hati dalam berkendara.");
    } else DeletePVar(playerid, "forcePlayerCar");
    return 1;
}

Dialog:ClaimInsurance(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 3) {
            if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE+1)
                return SendErrorMessage(playerid, "You are already owns the maximum amount of cars.");
        } else if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 4) {
            if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE+2)
                return SendErrorMessage(playerid, "You are already owns the maximum amount of cars.");
        } else {
            if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE)
                return SendErrorMessage(playerid, "You are already owns the maximum amount of cars.");
        }

        new vehIndex = ListedVehicles[playerid][listitem],
            idx = random(sizeof(insuranceSpawn));

        if(AccountData[playerid][pAdmin] < 4 && VehicleData[vehIndex][cInsuranceTime] > gettime()) 
            return SendErrorMessage(playerid, "Can't claim this vehicle now.");

        VehicleData[vehIndex][cInsuranceTime] = 0;
        VehicleData[vehIndex][cInsideInsurance] = 0;

        VehicleData[vehIndex][cPos][0] = insuranceSpawn[idx][0];
        VehicleData[vehIndex][cPos][1] = insuranceSpawn[idx][1]; 
        VehicleData[vehIndex][cPos][2] = insuranceSpawn[idx][2]; 
        VehicleData[vehIndex][cPos][3] = insuranceSpawn[idx][3];

        Vehicle_Spawn(vehIndex);
        RepairVeh(VehicleData[vehIndex][cVehicle]);

        if (IsABoat(VehicleData[vehIndex][cVehicle])) {
            VehicleData[vehIndex][cPos][0] = 2967.522;
            VehicleData[vehIndex][cPos][1] = 2082.020; 
            VehicleData[vehIndex][cPos][2] = -0.050; 
            VehicleData[vehIndex][cPos][3] = 275.41;
            SetVehiclePos(VehicleData[vehIndex][cVehicle], VehicleData[vehIndex][cPos][0], VehicleData[vehIndex][cPos][1], VehicleData[vehIndex][cPos][2]);
            SetVehicleZAngle(VehicleData[vehIndex][cVehicle], VehicleData[vehIndex][cPos][3]);
        }
        CoreVehicles[VehicleData[vehIndex][cVehicle]][vehFuel] = 100.0;
        Vehicle_Save(vehIndex);

        SendServerMessage(playerid, "Kendaraan dari asuransi telah di keluarkan!, lain kali untuk berhati-hati dalam berkendara.");
    }
    return 1;
}

Dialog:BuyInsurance(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            vehIndex = ListedVehicles[playerid][listitem]
        ;

        if(GetMoney(playerid) < 300)
            return SendErrorMessage(playerid, "Uang anda tidak mencukupi.");

        if(VehicleData[vehIndex][cInsurance] == 3)
            return SendErrorMessage(playerid, "Kendaraan ini sudah mencapai batas maksimal asuransi!");

        VehicleData[vehIndex][cInsurance]++;
        GiveMoney(playerid, -300);
        new vehname[32];

        GetVehicleNameByVehicle(VehicleData[vehIndex][cVehicle], vehname);
        Vehicle_Save(vehIndex);
        SendServerMessage(playerid, "Asuransi kendaraan "CYAN"%s "WHITE"telah di tambahkan, dan anda membayar "GREEN"%s "WHITE"untuk ini.", vehname, FormatNumber(300));
    }
    return 1;
}

CMD:vehicledeathlist(playerid)
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    mysql_tquery(g_iHandle, sprintf("DELETE FROM cardestroy WHERE destroyTime < %d", (gettime()-(10*86400))));

    static
        Cache:cacheData,
        query[256];

    deathDialog[playerid] = 0;

    format(query, sizeof(query), "SELECT *, FROM_UNIXTIME(destroyTime, '%%d/%%m/%%Y %%H:%%i:%%s') AS Time FROM cardestroy ORDER BY destroyTime DESC LIMIT %d, 10", deathDialog[playerid] * 10);
    cacheData = mysql_query(g_iHandle, query);

    if(!cache_num_rows()) return SendErrorMessage(playerid, "Tidak ada kendaraan dalam list log."), cache_delete(cacheData);
    else
    {
        new 
            dialogText[650],
            owner[MAX_PLAYER_NAME],
            destroyed[MAX_PLAYER_NAME],
            time[24],
            model;

        strcat(dialogText, "Model\tDestroy\tOwner\tDate\n");
        for(new id = 0; id != cache_num_rows(); id++)
        {
            cache_get_value(id, "destroyBy", destroyed);
            cache_get_value(id, "destroyOwner", owner);
            cache_get_value(id, "Time", time);
            cache_get_value_int(id, "destroyModel", model);

            strcat(dialogText, sprintf("%s\t%s\t%s\t%s\n", GetVehicleNameByModel(model), destroyed, owner , time));
        }
        Dialog_Show(playerid, vehicleDeath, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Death Log", dialogText, "Next", "Close");
    }
    cache_delete(cacheData);
    return 1;
}
CMD:vdl(playerid)
    return cmd_vehicledeathlist(playerid);

CMD:bansrecord(playerid, params[]) {
    mysql_tquery(g_iHandle, "SELECT BannedBy, COUNT(BannedBy) as jumlah FROM blacklist GROUP BY BannedBy ORDER BY jumlah DESC LIMIT 10", "Blacklist_Record", "d", playerid);
    return 1;
}

CMD:fish(playerid, params[])
{
    new zone;

    // if(IsPlayerInWater(playerid)) 
    //     return SendErrorMessage(playerid, "Tidak dapat memancing sambil berenang.");

    if(PlayerData[playerid][pDelayFishing])
        return SendErrorMessage(playerid, "Tunggu %d menit untuk dapat memancing ikan kembali.", (PlayerData[playerid][pDelayFishing]/30));

    if(PlayerData[playerid][pFishing]) 
        return SendErrorMessage(playerid, "Anda sedang memancing.");
        
    if(PlayerData[playerid][pEnergy] <= 20) 
        return SendErrorMessage(playerid, "Anda terlalu lelah untuk memancing lagi.");
    
    if(IsPlayerInAnyVehicle(playerid)) 
        return SendErrorMessage(playerid, "Tidak bisa memancing saat mengemudi.");
    
    if(!Inventory_HasItem(playerid, "Fish Rod")) 
        return SendErrorMessage(playerid, "Anda tidak memiliki pancingan.");
    
    if(!Inventory_HasItem(playerid, "Bait")) 
        return SendErrorMessage(playerid, "Anda tidak memiliki umpan.");

    for(new i = 0; i < FISH_ZONE; i++) if(IsPlayerInDynamicArea(playerid, fishzone[i])) {
        if(!strcmp(zones_text[i], "Small", true)) zone = 1;
        else if(!strcmp(zones_text[i], "Medium", true)) zone = 2;
        else zone = 3;

        PlayerData[playerid][pFishing] = 1;
        SetPlayerAttachedObject(playerid, WEAPON_SLOT, 18632, 6, 0.00000, 0.00000, 0.00000, 0.00000, 180.00000, 90.00000, 1, 1, 1);
        ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,0);

        Inventory_Remove(playerid, "Fish Rod");
        Inventory_Remove(playerid, "Bait");

        SendServerMessage(playerid, "Anda mulai memancing, tunggu hingga satu menit untuk mendapatkan ikan! "YELLOW"(/cancelfish untuk menggagalkan)");

        stop PlayerData[playerid][pFishingTime];
        PlayerData[playerid][pFishingTime] = defer getFish(playerid, zone);
        return 1;
    }
    SendErrorMessage(playerid, "Tidak bisa memancing di sini.");
    return 1;
}

CMD:cancelfish(playerid, params[])
{
    if(!PlayerData[playerid][pFishing]) return SendErrorMessage(playerid, "Anda sedang tidak memancing.");

    if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) 
        RemovePlayerAttachedObject(playerid, 6);

    PlayerData[playerid][pFishing] = 0;
    ClearAnimations(playerid, 1);

    stop PlayerData[playerid][pFishingTime];
    SendServerMessage(playerid, "Anda telah berhenti melakukan pemancingan.");
    return 1;
}

CMD:myfish(playerid, params[])
{
    new 
        str[128];

    format(str, sizeof(str), "Fish Name\tWeight\n");
    for(new i = 0; i < MAX_FISH; i++) {
        if(FishWeight[playerid][i] > 0.0)
            format(str, sizeof(str), "%s%s\t%.3f\n", str, FishName[playerid][i], FishWeight[playerid][i]);
        else
            format(str, sizeof(str), "%sEmpty\t \n", str);
    } 
    Dialog_Show(playerid, ShowFish, DIALOG_STYLE_TABLIST_HEADERS, "Fish Inventory", str, "Release", "Close");
    return 1;
}

CMD:showfish(playerid, params[])
{
    new userid;

    if (sscanf(params,"u",userid))
        return SendSyntaxMessage(playerid, "/showfish [playerid/name]");
    
    if (userid == playerid)
        return SendErrorMessage(playerid, "Cannot shown to yourself.");

    new 
        str[128];

    format(str, sizeof(str), "Fish Name\tWeight\n");
    for(new i = 0; i < MAX_FISH; i++) {
        if(FishWeight[playerid][i] > 0.0)
            format(str, sizeof(str), "%s%s\t%.3f\n", str, FishName[playerid][i], FishWeight[playerid][i]);
        else
            format(str, sizeof(str), "%sEmpty\t \n", str);
    } 
    Dialog_Show(userid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "%s's Fishes", str, "Close", "", ReturnName(playerid,0));
    SendCustomMessage(playerid,"FISHING","You have shown your fishes to "YELLOW"%s",ReturnName(userid,0));
    SendCustomMessage(userid,"FISHING",YELLOW"%s "WHITE"has shown his fishes to you",ReturnName(playerid,0));
    return 1;
}

CMD:buyrod(playerid, params[])
{
    static
        confirm[8]
    ;
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1359.2423,1340.3364,10.8862)) 
        return SendErrorMessage(playerid, "You're not in fish store.");
    
    if(Inventory_HasItem(playerid, "Fish Rod")) 
        return SendErrorMessage(playerid, "Anda sudah memiliki pancingan.");
    
    if(GetMoney(playerid) < 25) 
        return SendErrorMessage(playerid, "Anda tidak memiliki uang $25.");

    if(sscanf(params, "s[8]", confirm))
        return SendSyntaxMessage(playerid, "/buyrod ['confirm'] (harga pancingan yaitu: "GREEN"$25"GREY_80", '/buyrod confirm' untuk setuju)");

    if(!strcmp(confirm, "confirm"))
    {
        Inventory_Add(playerid, "Fish Rod", 18632, 25);
        GiveMoney(playerid, -25);
        SendServerMessage(playerid, "Anda telah membeli pancingan dengan harga "GREEN"$25 dollar.");
        return 1;
    }
    SendSyntaxMessage(playerid, "Harga untuk pancingan yaitu: "GREEN"$25"GREY_80", "WHITE"/buyrod confirm "GREY_80"untuk setuju.)");
    return 1;
}

CMD:buybait(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1359.2423,1340.3364,10.8862)) 
        return SendErrorMessage(playerid, "You're not in fish store.");

    if(Inventory_Count(playerid, "Bait") > 100) 
        return SendErrorMessage(playerid, "Anda tidak bisa menampung umpan melebihi 100.");

    Dialog_Show(playerid, BuyBait, DIALOG_STYLE_INPUT, "Buy Bait", WHITE"Berapa banyak umpan yang akan anda beli?\nAnda akan mendapatkan "YELLOW"dua umpan/"GREEN"$1.\n"WHITE"Masukkan jumlah uang untuk membeli:", "Buy", "Close");
    return 1;
}

CMD:sellfish(playerid, params[])
{
    new Float:count = 0.0;
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1357.1354,1340.3186,10.8862)) return SendErrorMessage(playerid, "You're not in fish store.");

    if (ServerData[cargoStock][1] >= MAX_STOCK)
        return SendErrorMessage(playerid, "The cargo Retail stock is full.");

    for(new i = 0; i < MAX_FISH; i++) if(FishWeight[playerid][i] > 0.0) {
        count += FishWeight[playerid][i];
    }
    if(count != 0.0) {
        new total = floatround(count)*ServerData[fish_Price];
        Dialog_Show(playerid, SellFish, DIALOG_STYLE_MSGBOX, "Sell Fish", ""WHITE"Apakah anda akan menjual semua ikan yang anda miliki?\nHarga Ikan: "YELLOW"%s/lbs\n"WHITE"Berat total ikan: "YELLOW"%.3f\n"WHITE"Harga Jual: "YELLOW"%s\n\n"COL_LIGHTRED"PENTING: "WHITE"Jika anda menjual ikan, maka setelah ini anda harus menunggu 20 menit untuk dapat memancing ikan kembali!", "Jual", "Keluar", FormatNumber(ServerData[fish_Price]), count, FormatNumber(total));
        SetPVarInt(playerid, "TotalPrice", total);
    }
    else SendErrorMessage(playerid, "Anda tidak memiliki ikan untuk di jual.");
    return 1;
}

CMD:setmyskill(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1000);
    return 1;
}

CMD:acceptstuck(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static userid;
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/acceptstuck [playerid/PartOfName]");
    if (userid == INVALID_PLAYER_ID || !IsPlayerSpawned(userid)) return SendErrorMessage(playerid, "Invalid playerid or name!");
    if((gettime() - PlayerData[userid][pStuck]) > 60) return SendErrorMessage(playerid, "This player is'nt request anything.");
    PlayerData[userid][pStuck] = (gettime()-60);

    switch (GetPVarInt(userid, "stuckHelp")) {
        case 1: {
            SetPlayerVirtualWorld(userid, 0);
        }
        case 2: {
            SetPlayerInterior(userid, 0);
        }
        case 3: {
            SetPlayerPos(userid, 1482.0356,-1724.5726,13.5469);
            SetPlayerVirtualWorld(userid, 0);
            SetPlayerInterior(userid, 0);
        }
        case 4: {
            SetPlayerPos(userid, 1482.0356,-1724.5726,13.5469);
            SetPlayerVirtualWorld(userid, 0);
            SetPlayerInterior(userid, 0);
        }
        case 5: {
            ClearAnimations(userid, 1);

            PlayerData[userid][pInjured] = 0;
            SetPVarInt(userid, "GiveUptime", 0);
            SetPlayerHealth(userid, PlayerData[userid][pMaxHealth]);

            SetPlayerArmedWeapon(userid, 0);
            TextDrawHideForPlayer(userid, gServerTextdraws[0]);
        }
        case 6: {
            TogglePlayerControllable(userid, 1);
        }
    }

    SendCustomMessage(userid, "STUCK REQUEST","Administrator/Helper "RED"%s "WHITE"accept your stuck request.", ReturnAdminName(playerid));
    SendTesterMessage(X11_TOMATO_1, "STUCK REQUEST: %s accept %s stuck request.", ReturnAdminName(playerid), ReturnName(userid, 0));
    return 1;
}
CMD:as(playerid, params[])
    return cmd_acceptstuck(playerid, params);

CMD:stuck(playerid, params[])
{
    if((gettime() - PlayerData[playerid][pStuck]) < 60) return SendErrorMessage(playerid, "Tunggu 1 menit untuk mengulangi pelaporan.");
    Dialog_Show(playerid, Stuck, DIALOG_STYLE_LIST, "Stuck", "Wrong virtual world id.\nWrong interior id.\nStuck inside house/business/etc\nStuck at blueberry\nDeath without reason\nFreeze without reason", "Report", "Close");
    return 1;
}

CMD:deliverywood(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid),
        id;
     
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "You must be in driver to get wood.");
    if(GetVehicleModel(vehicleid) != 578) return SendErrorMessage(playerid, "This is not DFT Truck.");  
    if(CoreVehicles[vehicleid][vehWood] < 1) return SendErrorMessage(playerid, "This DFT is'nt loaded any woods.");

    if(PlayerData[playerid][pDelivery] != -1)
        id = PlayerData[playerid][pDelivery];
    else
        id = random(sizeof(WoodsCheckpoint));

    SetPVarInt(playerid, "DeliveryWood", 1);
    PlayerData[playerid][pDelivery] = id;

    SetPlayerRaceCheckpoint(playerid, 1, WoodsCheckpoint[id][0], WoodsCheckpoint[id][1], WoodsCheckpoint[id][2], 0.0, 0.0, 0.0, 5.0);
    SendServerMessage(playerid, "Deliver this wood to checkpoind marked on your map.");
    return 1;
}

CMD:getwood(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid),
        id = -1;

    if((id = Job_NearestPoint(playerid)) != -1 && JobData[id][jobType] == JOB_LUMBERJACK)
    {
        if (!PlayerData[playerid][pLumberLicenseExpired]) return SendErrorMessage(playerid, "You don't have any valid Lumberjack License.");
        if(PlayerData[playerid][pWoodDelay] > 0) return SendErrorMessage(playerid, "Waiting %d minutes again to start this job.", PlayerData[playerid][pWoodDelay]/60);
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "You must be in driver to get wood.");
        if(GetVehicleModel(vehicleid) != 578) return SendErrorMessage(playerid, "This is not DFT truck!");
        if(GetPVarInt(playerid, "DeliveryWood")) return SendErrorMessage(playerid, "You're on wood delivery.");
        if(GetEngineStatus(vehicleid)) return SendErrorMessage(playerid, "Turn off the engine first.");
        if(JobData[id][jobStock] < 1) return SendErrorMessage(playerid, "There are no one wood from this storage.");
        if(CoreVehicles[vehicleid][vehWood] >= 5) return SendErrorMessage(playerid, "This trunk is full.");
    
        JobData[id][jobStock] --;
        CoreVehicles[vehicleid][vehWood] ++;

        CoreVehicles[vehicleid][vehWoodObject][CoreVehicles[vehicleid][vehWood]-1] = CreateDynamicObject(1463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehWoodObject][CoreVehicles[vehicleid][vehWood]-1], vehicleid, Woods[CoreVehicles[vehicleid][vehWood]-1][0], Woods[CoreVehicles[vehicleid][vehWood]-1][1], Woods[CoreVehicles[vehicleid][vehWood]-1][2], 0.0, 0.0, 0.0);

        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);
        foreach(new pid : Player) if(IsPlayerInRangeOfPoint(pid, 15, x, y, z)) {
            Streamer_Update(pid);
        }

        SendServerMessage(playerid, "Now this vehicle loaded "YELLOW"%d/5 wood's.", CoreVehicles[vehicleid][vehWood]);

        if(CoreVehicles[vehicleid][vehWood] == 5) {
            SendServerMessage(playerid, "/deliverywood to deliver this wood to the factory.");
        }

        Job_Refresh(id);
        return 1;
    }
    SendErrorMessage(playerid, "You're not in lumberjack job point.");
    return 1;
}

CMD:countdown(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static interval;

    if(GetGVarInt("Countdown"))
    {
        TextDrawHideForAll(gServerTextdraws[1]);
        SetGVarInt("Countdown", 0);
        return 1;
    }
    
    if(sscanf(params, "d", interval)) return SendSyntaxMessage(playerid, "/countdown [interval]");

    TextDrawShowForAll(gServerTextdraws[1]);
    SetGVarInt("Countdown", 1);
    SetGVarInt("CDInterval", interval);
    SendTesterMessage(X11_TOMATO_1, "TeamWarn: %s start coutdown with %d second.", ReturnName2(playerid, 0), interval);
    return 1;
}

CMD:changelog(playerid)
{
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "NEW UPDATES", ""WHITE"Available update on {9ACD32}%s"WHITE"\n\n \
        "GREEN"Added:"WHITE"\n\
        |- Flat System with structures and furnitures system\n\
        |- Copy structure and store furniture with select object for Builder\n\
        |- Command alias for vehicle commands\n\
        |- Add protection when player logged with same ucp\n\
        |- Add object mapping for per business\n\
        |- `/searchtexture` to check available texture for Builder\n\
        |- Last suspect information on Speed Camera\n\n\
        "LIGHTBLUE"Changed:"WHITE"\n\
        |- Server version to 0.3.7-R2 before 0.3.DL\n\
        |- Auto roleplay `/me` changed to `/ame`\n\
        |- Change list of weather IDs\n\
        |- Updates anticheat settings\n\
        |- Decreased all mapping streamer distance\n\
        |- House structure & furniture also veh trunk load system\n\n\
        "RED"Bug fixed/Deleted:"WHITE"\n\
        |- Fix Furniture, structure house texture\n\
        |- Fix Streamer settings or `/maxobject`\n\
        |- Fix World time for player\n\
        |- Delete Apartment System\n\
        |- Delete Unused mapping\n\n\
        "WHITE"* Untuk informasi lebih lanjut silahkan kunjungi Discord kami di %s.","Close","", SERVER_REVISION,SERVER_DISCORD
    );

    return 1;
}

CMD:togboombox(playerid) {
    if (!IsPlayerConnected(playerid))
        return 0;
    
    PlayerData[playerid][pTogBoombox] = PlayerData[playerid][pTogBoombox] ? 0 : 1;
    if (PlayerData[playerid][pTogBoombox] == 1) StopAudioStreamForPlayer(playerid);
    SendCustomMessage(playerid, "BOOMBOX", "You've been %s "WHITE"radio stream", PlayerData[playerid][pTogBoombox] ? RED"disabled" : GREEN"enabled");
    return 1;
}

CMD:livemode(playerid) {
    if (!IsPlayerConnected(playerid))
        return 0;
    
    PlayerData[playerid][pLiveMode] = PlayerData[playerid][pLiveMode] ? 0 : 1;

    if (PlayerData[playerid][pLiveMode] == 1) PlayerData[playerid][pTogBoombox] = 1;
    else PlayerData[playerid][pTogBoombox] = 0;

    SendCustomMessage(playerid, "LIVEMODE", "You've been %s "WHITE"livemode", PlayerData[playerid][pLiveMode] ? GREEN"enabled" : RED"disabled");
    return 1;
}

CMD:hudmode(playerid) {
    if (!IsPlayerConnected(playerid))
        return 0;

    Dialog_Show(playerid, ChangeHudMode, DIALOG_STYLE_LIST, "Hudmode", "Modern\nSimple", "Change", "Close");
    return 1;
}

Dialog:ChangeHudMode(playerid, response, listitem, inputtext[]) {
    if (response) {
        PlayerData[playerid][pHUD] = (listitem+1);

        for (new i = 0; i < 12; i ++) {
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][i]);
        }

        for (new i = 0; i < 25; i ++) {
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_speedometer][i]);
        }

        HidePlayerProgressBar(playerid, PlayerData[playerid][hungry]);
        HidePlayerProgressBar(playerid, PlayerData[playerid][energy]);
        HidePlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);

        TogglePlayerGUI(playerid, true);

        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                ShowPlayerProgressBar(playerid, PlayerData[playerid][hungry]);
                ShowPlayerProgressBar(playerid, PlayerData[playerid][energy]);
            }
            case 2: {
                PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], ConvertHBEColor(floatround(PlayerData[playerid][pHunger])));
                PlayerTextDrawColor(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], ConvertHBEColor(floatround(PlayerData[playerid][pEnergy])));
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9], sprintf("%.0f%",PlayerData[playerid][pHunger]));
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8], sprintf("%.0f%",PlayerData[playerid][pEnergy]));
            }
        }

        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            new vehicleid = GetPlayerVehicleID(playerid);
            if(IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
            {
                ToggleSpeedometer(playerid, true);
                if (PlayerData[playerid][pHUD] == 1) ShowPlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);
            }
        }
    }
    return 1;
}

CMD:credits(playerid, params[])
{
    new str[128];
    format(str, sizeof(str), "Special thanks to:");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "Kalcor (kye) "WHITE"SA:MP Developer.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "pBlueG, maddinat0r "WHITE"for MySQL plugins.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "Y_Less "WHITE"for YSI Includes.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "SouthClaws "WHITE"for Progressbar2 plugins.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "YashasSamaga "WHITE"for izcmd plugins.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "Incognito "WHITE"for Streamer plugins.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "AGraber "WHITE"for samp-compat plugins.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "SA:MP Wiki "WHITE"for scripting support.");
    SendClientMessage(playerid,X11_CYAN,str);
    format(str, sizeof(str), "Lukman "WHITE"for scripting this server.");
    SendClientMessage(playerid,X11_CYAN,str);
    return 1;
}

CMD:vmodels(playerid, params[])
{
    new string[3500];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
    {
        format(string,sizeof(string), "%s%d - %s\n", string, i+400, g_arrVehicleNames[i]);
    }
    Dialog_Show(playerid, VehicleModels, DIALOG_STYLE_LIST, "Vehicle Models", string, "Close", "");
    return 1;
}

// CMD:adjwep(playerid, params[])
// {
//     if(PlayerData[playerid][pHidegun])
//     {
//         PlayerData[playerid][pHidegun] = 0;

//         for(new i=5; i < 10; i++) if(IsPlayerAttachedObjectSlotUsed(playerid,i)) {
//             RemovePlayerAttachedObject(playerid,i);
//         }
//     }
//     else PlayerData[playerid][pHidegun] = 1;

//     SendClientMessageEx(playerid, X11_LIGHTBLUE, "HOLDER: "WHITE"Weapon holder %s.", (PlayerData[playerid][pHidegun]) ? (""GREEN"Enabled") : (""RED"Disabled"));
//     return 1;
// }

CMD:createacc(playerid, params[])
{
    new player,
        model,
        type[24];
    
    if (CheckAdmin(playerid, 5))
        return NotAllowed(playerid);
    
    if(sscanf(params,"uds[24]", player, model, type))
        return SendSyntaxMessage(playerid, "/createacc [playerid] [model] [object name]");

    if (PlayerData[player][pVip] && PlayerData[player][pVipTime]) {
        if(Aksesoris_GetCount(player) >= MAX_ACC)
            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
    } else {
        if(Aksesoris_GetCount(player) >= MAX_ACC-2)
            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
    }
        
    Aksesoris_Create(player, model, type);
    SendServerMessage(playerid, "You have been create new Accessory for id: [%d] model: [%d] type: [%s]", player, model, type);
    return 1;
}

CMD:destroyacc(playerid, params[]) {
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    new userid,index;
    if (sscanf(params, "ud", userid,index))
        return SendSyntaxMessage(playerid, "/destroyacc [playerid/name] [acc index]");
    
    new string[128];
    AccData[userid][index][accExists] = 0;
    AccData[userid][index][accModel] = 0;
    
    if(IsPlayerAttachedObjectSlotUsed(userid, index))
    {
        RemovePlayerAttachedObject(userid, index);
        AccData[userid][index][accShow] = 0;
        Aksesoris_Save(userid, index);
    }
    format(string,sizeof(string),"DELETE FROM `aksesoris` WHERE `ID`='%d'", AccData[userid][index][accID]);
    mysql_tquery(g_iHandle, string);
    
    SendCustomMessage(playerid, "ACCESORY","You have removed %s accessory index #%d.", ReturnName(userid), index);
    SendCustomMessage(userid, "ACCESORY","%s has removed your accessory index #%d.", ReturnName(playerid), index);
    return 1;
}

CMD:showvehlic(playerid, params[])
{
    static
        userid, 
        id,
        vehicleid;

    if(sscanf(params, "ud", userid, vehicleid)) return SendErrorMessage(playerid, "/showvehlic [playerid/PartOfName] [vehicleid]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if((id = Vehicle_GetID(vehicleid)) != -1 && Vehicle_IsOwner(playerid, id)) {
        new str[64], vehname[32];
        if (VehicleData[id][cEngineUpgrade] && !VehicleData[id][cBodyUpgrade]) format(str,sizeof(str),"- Engine");
        else if (VehicleData[id][cBodyUpgrade] && !VehicleData[id][cEngineUpgrade]) format(str,sizeof(str),"- Body");
        // else if (VehicleData[id][cAlarm] && !VehicleData[id][cEngineUpgrade] && !VehicleData[id][cBodyUpgrade]) format(str,sizeof(str),"- Security Alarm");
        else if (VehicleData[id][cEngineUpgrade] && VehicleData[id][cBodyUpgrade]) format(str,sizeof(str),"- Engine, - Body");
        else format(str,sizeof(str),"None");

        GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
        Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Vehicle License", ""TURQUOISE_1"============ Vehicle License of %s ============\n\
            "YELLOW_2"Vehicle: "WHITE"%s\n\
            "YELLOW_2"Owner: "WHITE"%s\n\
            "YELLOW_2"Plate: "WHITE"%s\n\
            "YELLOW_2"License: "WHITE"%s\n\
            "YELLOW_2"Insurance: "WHITE"%d year(s)\n\
            "YELLOW_2"Upgrade: "WHITE"%s", "Close", "",
            vehname,
            vehname,
            ReturnName(playerid, 0),
            VehicleData[id][cPlate],
            VehicleData[id][cSTNK] ? (ConvertTimestamp(Time:VehicleData[id][cSTNK])) : ("None/Expired"),
            VehicleData[id][cInsurance],
            str
        );
        return 1;
    }
    SendErrorMessage(playerid, "That is not your car.");
    return 1;
}

CMD:vacc(playerid, params[])
{
    new 
        id = -1,
        str[255];

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You need to be driver to use this command.");

    if(IsPlayerInModshop(playerid) != -1)
    {
        if((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, id))
        {
            if(GetEngineStatus(GetPlayerVehicleID(playerid)))
                return SendErrorMessage(playerid, "Turn off vehicle engine first.");

            for (new i = 0; i < MAX_VEHICLE_OBJECT+5; i++)
            {
                if (PlayerData[playerid][pVipTime] > 0) {
                    if(VehicleObjects[id][i][object_exists]) format(str, sizeof(str), "%s%d: %s\n", str, i+1, (VehicleObjects[id][i][object_type] == OBJECT_TYPE_BODY) ? (Bodypart_Name(VehicleObjects[id][i][object_model])) : ("Sticker"));
                    else format(str, sizeof(str), "%s%d: Empty\n", str, i+1);
                } else {
                    if (i < 5) {
                        if(VehicleObjects[id][i][object_exists]) format(str, sizeof(str), "%s%d: %s\n", str, i+1, (VehicleObjects[id][i][object_type] == OBJECT_TYPE_BODY) ? (Bodypart_Name(VehicleObjects[id][i][object_model])) : ("Sticker"));
                        if (!VehicleObjects[id][i][object_exists]) format(str,sizeof(str),"%s%d: Empty\n",str,i+1);
                    }
                }
            }
            PlayerData[playerid][pVObject] = id;
            Dialog_Show(playerid, VACCS, DIALOG_STYLE_LIST, "Vehicle Accesories", str, "Select", "Close");
            return 1;
        }  
        SendErrorMessage(playerid, "This isn't owned by you.");
        return 1;
    }
    SendErrorMessage(playerid, "Anda tidak berada di modshop.");    
    return 1;
}

CMD:acc(playerid)
{
    new info[300],
        count = 0;

    strcat(info,"Index\tName\tBone\n");
    for (new id = 0; id != MAX_ACC; id++) if(AccData[playerid][id][accExists]) {
        if (!AccData[playerid][id][accBone]) { // proteksi buat player android
            AccData[playerid][id][accBone] = 1;
        }
        strcat(info,sprintf("%d\t%s\t%s\n", id, AccData[playerid][id][accName], accBones[AccData[playerid][id][accBone]-1]));
        if (count < 5) {
            ListedAcc[playerid][count] = id;
            count++;
        }
    }
    if(!count) SendErrorMessage(playerid, "You don't have some accesories.");
    else Dialog_Show(playerid, Aksesoris, DIALOG_STYLE_TABLIST_HEADERS, "Editing Accesories", info, "Select","Exit");
    return 1;
}

CMD:eject(playerid, params[])
{
    static
        userid,
        Float:x,
        Float:y,
        Float:z;
        
    if(sscanf(params,"u", userid))
        return SendSyntaxMessage(playerid, "/eject [name/playerid]");
            
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You need to be driver to use this command.");
            
    if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(userid))
        return SendErrorMessage(playerid, "That player not in this car");

    if(!IsPlayerInAnyVehicle(userid))
        return SendErrorMessage(playerid, "That player is not in any vehicle");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't eject yourself");

    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(userid,x,y,z+1);
    SendServerMessage(userid, "You have been thrown out the car by %s", ReturnName(playerid, 0));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has ejected %s from the vehicle.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:resetcursor(playerid, params[])
{
    if(!GetPVarInt(playerid,"SelectDia"))
        return SendErrorMessage(playerid, "You can't use this command.");

    return SelectTextDraw(playerid, 0xC0C0C0FF);
}

CMD:fine(playerid, params[])
{
    static
        userid,
        amount,
        reason[32];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "uds[32]", userid, amount, reason))
        return SendSyntaxMessage(playerid, "/fine [playerid/PartOfName] [money] [reason]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is no login.");

    if(amount > GetMoney(userid))
        return SendErrorMessage(playerid, "That player has no enough money!");

    if(amount < 1)
        return SendErrorMessage(playerid, "Amount must be at least $1!");

    if(amount > 10000)
        return SendErrorMessage(playerid, "Can't fine player that much!");

    GiveMoney(userid, -amount);

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was fined by %s for %s.", ReturnName2(userid, 0), ReturnName2(playerid, 0), FormatNumber(amount));
        SendClientMessageEx(i, X11_TOMATO_1, "Reason: %s", reason);
    }
    Log_Write("logs/fine_log.txt", "[%s] %s aws fined (%s) to %s.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));

    return 1;
}

CMD:x(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:npos;
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "f", npos)) return SendClientMessage(playerid, X11_TOMATO_1, "USAGE: /x [Cordinate]");
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x+npos, y, z);
    return 1;
}

CMD:y(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:npos;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "f", npos)) return SendClientMessage(playerid, X11_TOMATO_1, "USAGE: /y [Cordinate]");
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y+npos, z);
    return 1;
}

CMD:z(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:npos;
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "f", npos)) return SendClientMessage(playerid, X11_TOMATO_1, "USAGE: /z [Cordinate]");
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z+npos);
    return 1;
}

CMD:b(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1)
        return 1;

    if(IsPlayerInDynamicArea(playerid, NSArea) && GetGVarInt("ToggleNS", GLOBAL_VARTYPE_INT) && !AccountData[playerid][pAdmin])
        return SendErrorMessage(playerid, "Perintah /b dinonaktifkan sementara pada newbie school");

    if (IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan perintah /b ketika berada di event!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/b [local OOC]");

    if(strlen(params) > 64)
    {
        if(AccountData[playerid][pAdminDuty] == 1)
        {
            SendNearbyMessage(playerid, 15.0, 0xFF0000FF, "%s:"WHITE" (( %.64s ..", ReturnName(playerid, 0, 1), params);
            SendNearbyMessage(playerid, 15.0, X11_WHITE, ".. %s "WHITE"))", params[64]);
            return 1;
        }
        else
        {
            ProxDetector(playerid, 15.0, X11_WHITE, sprintf("%s: (( %.64s ..", ReturnName(playerid, 0, 1), params));
            ProxDetector(playerid, 15.0, X11_WHITE, sprintf(".. %s ))", params[64]));
            return 1;
        }
    }
    else
    {
        if(AccountData[playerid][pAdminDuty] == 1)
            return SendNearbyMessage(playerid, 15.0, 0xFF0000FF, "%s:"WHITE" (( %s ))", ReturnName(playerid, 0, 1), params);

        ProxDetector(playerid, 13.0, X11_WHITE, sprintf("%s: (( %s ))", ReturnName(playerid, 0, 1), params));
    }
    return 1;
}

CMD:try(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/try [action]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s %.64s ..", ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, ".. %s, %s", params[64], (random(2) == 0) ? ("and success") : ("but fail"));
    }
    else {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s %s, %s", ReturnName(playerid, 0, 1), params, (random(2) == 0) ? ("and success") : ("but fail"));
    }
    return 1;
}

/*CMD:faketext(playerid, params[])
{
    CheckAdmin(playerid, 5);
    if(isnull(params)) return SendSyntaxMessage(playerid, "/faketext [text]");
    SendClientMessageToAllEx(X11_WHITE, "%s", ColouredText(params));
    return 1;
}

CMD:faketextplayer(playerid, params[])
{
    CheckAdmin(playerid, 7);

    static
        userid, 
        text[128];

    if(sscanf(params, "us[128]", userid, text)) return SendSyntaxMessage(playerid, "/faketextplayer [playerid/PartOfName] [text]");
    SendClientMessageEx(userid, X11_WHITE, "%s", ColouredText(text));
    return 1;
}*/

CMD:ado(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    new flyingtext[164], Float:x, Float:y, Float:z;

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ado [text] 'off' to remove");

    if(strlen(params) > 128)
        return SendErrorMessage(playerid, "Max text can only maximmum 128 characters.");

    if(!strcmp(params, "off", true))
    {
        if(!PlayerData[playerid][pAdoActive])
            return SendErrorMessage(playerid, "You're not make ado actions.");

        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag]))
            DestroyDynamic3DTextLabel(PlayerData[playerid][pAdoTag]);

        PlayerData[playerid][pAdoTag] = Text3D:INVALID_STREAMER_ID;

        SendServerMessage(playerid, "You're removed your ado text.");
        PlayerData[playerid][pAdoActive] = false;
        return 1;
    }

    FixText(params);
    format(flyingtext, sizeof(flyingtext), "%s\n * (( %s )) *", params, ReturnName(playerid, 0, 1));

    if(strlen(params) > 64) {
        SendClientMessageEx(playerid, X11_PLUM, "* [ADO]: %.64s ..", params);
        SendClientMessageEx(playerid, X11_PLUM, ".. %s", params[64]);
    }
    else {
        SendClientMessageEx(playerid, X11_PLUM, "* [ADO]: %s", params);
    }

    GetPlayerPos(playerid, x, y, z);
    if(PlayerData[playerid][pAdoActive])
    {
        if(IsValidDynamic3DTextLabel(PlayerData[playerid][pAdoTag])) UpdateDynamic3DTextLabelText(PlayerData[playerid][pAdoTag], X11_PLUM, flyingtext);
        else {
            if (IsPlayerInAnyVehicle(playerid)) PlayerData[playerid][pAdoTag] = CreateDynamic3DTextLabel(flyingtext, X11_PLUM, x, y, z, 15, INVALID_PLAYER_ID, GetPlayerVehicleID(playerid), 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
            else PlayerData[playerid][pAdoTag] = CreateDynamic3DTextLabel(flyingtext, X11_PLUM, x, y, z, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        }
    }
    else
    {
        PlayerData[playerid][pAdoActive] = true;
        if (IsPlayerInAnyVehicle(playerid)) PlayerData[playerid][pAdoTag] = CreateDynamic3DTextLabel(flyingtext, X11_PLUM, x, y, z, 15, INVALID_PLAYER_ID, GetPlayerVehicleID(playerid), 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        else PlayerData[playerid][pAdoTag] = CreateDynamic3DTextLabel(flyingtext, X11_PLUM, x, y, z, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    }
    return 1;
}

CMD:ame(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    new flyingtext[164];

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ame [action]");

    if(strlen(params) > 128)
        return SendErrorMessage(playerid, "Max action can only maximmum 128 characters.");

    if(strlen(params) > 64) {
        SendClientMessageEx(playerid, X11_PLUM, "* [AME]: %.64s ..", params);
        SendClientMessageEx(playerid, X11_PLUM, ".. %s", params[64]);
    }
    else {
        SendClientMessageEx(playerid, X11_PLUM, "* [AME]: %s", params);
    }
    format(flyingtext, sizeof(flyingtext), "* %s %s*", ReturnName(playerid, 0, 1), params);
    SetPlayerChatBubble(playerid, flyingtext, X11_PLUM, 10.0, 10000);

    return 1;
}

CMD:me(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    if (IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan perintah /me ketika berada di event!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/me [action]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s %.64s ..", ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, ".. %s", params[64]);
    }
    else {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s %s", ReturnName(playerid, 0, 1), params);
    }
    return 1;
}

CMD:do(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    if (IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan perintah /do ketika berada di event!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/do [description]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %.64s ..", params);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, ".. %s (( %s ))", params[64], ReturnName(playerid, 0, 1));
    }
    else {
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s (( %s ))", params, ReturnName(playerid, 0, 1));
    }
    return 1;
}

CMD:lme(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    if (IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan perintah /lme ketika berada di event!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/lme [action]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 5.0, X11_PLUM4, "* %s %.64s ..", ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 5.0, X11_PLUM4, ".. %s", params[64]);
    }
    else {
        SendNearbyMessage(playerid, 5.0, X11_PLUM4, "* %s %s", ReturnName(playerid, 0, 1), params);
    }
    return 1;
}

CMD:ldo(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    if (IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan perintah /ldo ketika berada di event!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ldo [description]");

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 5.0, X11_PLUM4, "* %.64s ..", params);
        SendNearbyMessage(playerid, 5.0, X11_PLUM4, ".. %s (( %s ))", params[64], ReturnName(playerid, 0, 1));
    }
    else {
        SendNearbyMessage(playerid, 5.0, X11_PLUM4, "* %s (( %s ))", params, ReturnName(playerid, 0, 1));
    }
    return 1;
}

CMD:cw(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;
    if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You need to be driver to use this command");
    if(!IsWindowedVehicle(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "This vehicle doesn't have window.");
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(c)ar(w)hisper [whisper]");

    if (PlayerData[playerid][pAuto][4]) params[0] = toupper(params[0]);

    if(strlen(params) > 64) {
        SendVehicleMessage(GetPlayerVehicleID(playerid), X11_WHITE, "%s says [car]: %.64s ..", ReturnName(playerid, 0, 1), params);
        SendVehicleMessage(GetPlayerVehicleID(playerid), X11_WHITE, ".. %s", params[64]);
    }
    else{
        SendVehicleMessage(GetPlayerVehicleID(playerid), X11_WHITE, "%s says [car]: %s", ReturnName(playerid, 0, 1), params);
    }
    return 1;
}

CMD:s(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1) return 0;

    if (IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan perintah /s ketika berada di event!");

    if(isnull(params)) return SendSyntaxMessage(playerid, "/(s)hout [shout text]");
    if(IsPlayerInDynamicArea(playerid, JailArea) || IsPlayerInDynamicArea(playerid, NSArea) || AccountData[playerid][pAdminDuty] > 0) return cmd_b(playerid, params);

    if(strlen(params) < 128) {
        if (PlayerData[playerid][pAuto][4]) params[0] = toupper(params[0]);
        ProxDetector(playerid, 20.0, X11_WHITE, sprintf("%s shouts: %.128s!", ReturnName(playerid, 0, 1), params));

        // SendNearbyMessage(playerid, 15.0, X11_WHITE, "%s shouts: %.64s ..", ReturnName(playerid, 0, 1), params);
        // SendNearbyMessage(playerid, 15.0, X11_WHITE, "...%s!", params[64]);
    }
        // SendNearbyMessage(playerid, 15.0, X11_WHITE, "%s shouts: %s!", ReturnName(playerid, 0, 1), params);
    return 1;
}

CMD:accent(playerid, params[]) {
    new accent[24];
    if (sscanf(params, "s[24]", accent))
        return SendSyntaxMessage(playerid, "/accent [accent name/\"None\" to disabled accent]");

    if (!strcmp(accent, "None", true)) {
        format(PlayerData[playerid][pAccent], 24, "None");
        SendCustomMessage(playerid, "ACCENT", "You've deleted your accent.");
    } else {
        format(PlayerData[playerid][pAccent], 24, "%s", accent);
        SendCustomMessage(playerid, "ACCENT", "Your accent has been set to: "YELLOW"%s", PlayerData[playerid][pAccent]);
    }
    return 1;
}

CMD:l(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1)
        return 0;

    if(isnull(params)) 
        return SendSyntaxMessage(playerid, "/(l)ow [low text]");
    
    if(IsPlayerInDynamicArea(playerid, JailArea) || IsPlayerInDynamicArea(playerid, NSArea) || AccountData[playerid][pAdminDuty] > 0) 
        return cmd_b(playerid, params);

    if(strlen(params) < 128) {
        if (PlayerData[playerid][pAuto][4]) params[0] = toupper(params[0]);
        ProxDetector(playerid, 5.0, X11_WHITE, sprintf("%s says [low]: %s", ReturnName(playerid, 0, 1), params));
    }
    return 1;
}

CMD:asay(playerid, params[]) {
    new text[225];

    if(CheckAdmin(playerid, 1))
        return NotAllowed(playerid);

    if(sscanf(params,"s[225]",text))
        return SendSyntaxMessage(playerid, "/asay [text]");
        
    SendClientMessageToAllEx(X11_TOMATO_1,"Admin %s: %s", AccountData[playerid][pUsername],ColouredText(text));
    return 1;
}

CMD:o(playerid, params[])
{
    if(g_StatusOOC && AccountData[playerid][pAdmin] < 1)
        return SendErrorMessage(playerid, "An administrator has disabled global OOC chat.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/o [global OOC]");

    if(PlayerData[playerid][pDisableOOC])
        return SendErrorMessage(playerid, "You must enable OOC chat first.");

    if(strlen(params) < 90)
    {
        foreach (new i : Player) if(!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated])
        {
            if(AccountData[playerid][pAdminDuty] && AccountData[playerid][pAdmin] > 1)
                SendClientMessageEx(i, -1, "(( "COL_NICERED"Admin %s"WHITE" (%d): %s "WHITE"))", ReturnName2(playerid, 0), playerid, ColouredText(params));
            else if (AccountData[playerid][pAdminDuty] && AccountData[playerid][pAdmin] == 1)
                SendClientMessageEx(i, -1, "(( "COL_NICERED"Helper %s"WHITE" (%d): %s "WHITE"))", ReturnName2(playerid, 0), playerid, ColouredText(params));
            else
            {
                if(!strcmp(PlayerData[playerid][pAlias], "(null)")) SendClientMessageEx(i, -1, "(( {33FFCC}Player %s"WHITE" (%d): %s ))", ReturnName2(playerid, 0), playerid, params);
                else SendClientMessageEx(i, -1, "(( {33FFCC}%s %s"WHITE" (%d): %s ))", PlayerData[playerid][pAlias], ReturnName2(playerid, 0), playerid, params);
            }
        }
    }
    else
        return SendClientMessage(playerid, -1, "The text to long, maximum character is 90");

    return 1;
}

CMD:radio(playerid, params[])
{
    new text[128];
    
    if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must in faction member to use this command");
    if(GetFactionType(playerid) == FACTION_GANG) return SendErrorMessage(playerid, "Family doesn't have faction radio.");
    if (!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first");
    if(sscanf(params,"s[128]",text)) return SendSyntaxMessage(playerid, "/r(adio) [text]");
    if(strval(text) > 128) return SendErrorMessage(playerid,"Text too long.");
    
    foreach (new i : Player) if (PlayerData[i][pOnDuty] && PlayerData[i][pFaction] == PlayerData[playerid][pFaction] && !PlayerData[i][pDisableFaction]) {
        SendClientMessageEx(i, COLOR_RADIO, "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName2(playerid, 0), FormatRadio(playerid, text));
    }
    return 1;
}

CMD:r(playerid, params[])
    return cmd_radio(playerid, params);

CMD:ooc(playerid, params[])
    return cmd_o(playerid, params);

CMD:or(playerid, params[])
    return cmd_oocradio(playerid, params);

CMD:od(playerid, params[])
    return cmd_odept(playerid, params);

CMD:d(playerid, params[])
    return cmd_dept(playerid, params);

CMD:megaphone(playerid, params[])
    return cmd_m(playerid, params);

CMD:shout(playerid, params[])
    return cmd_s(playerid, params);

CMD:low(playerid, params[])
    return cmd_l(playerid, params);

CMD:w(playerid, params[])
    return cmd_whisper(playerid, params);

CMD:help(playerid, params[])
    return Dialog_Show(playerid, Help, DIALOG_STYLE_LIST, "Help List", "Account Commands\nBank Commands\nBusiness Commands\nChat Commands\nFaction Commands\nFishing Commands\nForager Commands\nGeneral Commands\nHouse Commands\nJob Commands\nProperty Commands\nVehicle Commands\nWorkshop Commands\nKeyboard Shortcut\nSidejob Guide\nRental Commands\nGarage Commands\nFurniture Store Commands\nFlat Commands\nVIP Commands", "Select", "Close");

CMD:changepass(playerid, params[]) {
    Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Change Password", "Please enter your existing password below:", "Submit", "Cancel");
    return 1;
}

CMD:lastlogged(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 24)
        return SendSyntaxMessage(playerid, "/lastlogged [name]");

    static
        query[128];

    format(query, sizeof(query), "SELECT `LoginDate` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
    mysql_tquery(g_iHandle, query, "OnLoginDate", "ds", playerid, params);

    return 1;
}

CMD:limitspeed(playerid, params[])
{
	new Float:speed;
	
    if (sscanf(params, "f", speed))
        return SendSyntaxMessage(playerid, "/limitspeed [speed]");
    
    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must in any vehicle to use this command!");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You must to be driver to use this command!");

    new vehicleid = GetPlayerVehicleID(playerid);
    if (speed == 0.0) {
        DisableVehicleSpeedCap(vehicleid);
        SendCustomMessage(playerid, "LIMITSPEED", "You has disabled speed limit for this vehicle");
        return 1;
    }
    
    SetVehicleSpeedCap(vehicleid, speed, false);
	SendCustomMessage(playerid, "LIMITSPEED", "Speed limit has been set to: "YELLOW"%.1f", speed);
    return 1;
}

CMD:v(playerid, params[])
{
    static
        type[20],
        string[225],
        vehicleid;

    if(sscanf(params, "s[20]S()[128]", type, string))
    {
        SendClientMessageEx(playerid,COLOR_CLIENT,"|__________________ Vehicle Command __________________|");
        SendCustomMessage(playerid,"VEHICLE", "/v [engine] [lights] [hood] [trunk] [find] [tow] [radio] [myveh] [acc] [window] [objectrefresh]");
        SendCustomMessage(playerid,"VEHICLE", "/v [sell] [trade] [untow] [speedometer] [lock] [findrentcar] [unrentveh] [storage] [unmod] [keys] [neon] [unstuck]");
        SendCustomMessage(playerid,"VEHICLE", "Press "RED"[Y] "WHITE" inside the car to interact the vehicle.");
        return 1;
    }
    if(!strcmp(type, "engine", true))
    {
        vehicleid = GetPlayerVehicleID(playerid);

        static 
            carid = -1;

        if(!IsEngineVehicle(vehicleid))
            return ShowPlayerFooter(playerid, "~r~ERROR: ~w~You are not in any vehicle.");

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            return ShowPlayerFooter(playerid, "~r~ERROR: ~w~You need to be driver to use this command.");

        if((carid = Vehicle_Inside(playerid)) != -1) {
            if (VehicleData[carid][cTireLock])
                return SendErrorMessage(playerid, "This vehicle is tire locked!");

            if(VehicleData[carid][cOwner])  {
                if((!Vehicle_IsOwner(playerid, carid)) && VehicleData[carid][cKeys] != GetPlayerSQLID(playerid))
                    return ShowPlayerFooter(playerid, "~r~ERROR: ~w~This is owned vehicle or you don't have key for this vehicle.");
            }
            else if(VehicleData[carid][cRent]) {
                if(VehicleData[carid][cRentOwned] != GetPlayerSQLID(playerid))
                    return ShowPlayerFooter(playerid, "~r~ERROR: ~w~This is rented vehicle or you don't have key for this vehicle.");
            }
        }

        if(CoreVehicles[vehicleid][vehFuel] < 1.0)
            return ShowPlayerFooter(playerid, "~r~ERROR: ~w~The fuel tank is empty.");

        // if(ReturnVehicleHealth(vehicleid) <= 300)
        //     return ShowPlayerFooter(playerid, "~r~ERROR: ~w~This vehicle is totalled and can't be started.");

        if(PlayerData[playerid][pTrashmasterJob])
            return ShowPlayerFooter(playerid, "~r~ERROR: ~w~You can't use this action now.");

        if(PlayerData[playerid][pEditingMode] == VEHICLE)
            return ShowPlayerFooter(playerid, "~r~ERROR: ~w~Turn off vehicle engine when editing vehicle attachment.");

        /*if(fuel_refilled[playerid] != -1 || fuel_reffiling[playerid] == true)
            return 0;*/

        switch (GetEngineStatus(GetPlayerVehicleID(playerid)))
        {
            case false:
            {
                if(GetPVarInt(playerid, "TungguMesin")) return 1;

                SetTimerEx("EngineStatus", 3000, false, "dd", playerid, GetPlayerVehicleID(playerid));
                ShowPlayerFooter(playerid, "Mencoba mengaktifkan mesin kendaraan ...");
                SetPVarInt(playerid, "TungguMesin", 1);
            }
            case true:
            {
                SetEngineStatus(GetPlayerVehicleID(playerid), false);
                SetLightStatus(GetPlayerVehicleID(playerid), false);

                if ((carid = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1) {
                    if (VehicleData[carid][cNeon]) {
                        if (VehicleData[carid][cNeonToggle] == 1) {
                            VehicleData[carid][cNeonToggle] = 0;
                            ReloadVehicleNeon(carid);
                        }
                    }
                }

                if (PlayerData[playerid][pAuto][3]) {
                    if (!IsABike(GetPlayerVehicleID(playerid)) && vehicle_handbreak[GetPlayerVehicleID(playerid)] == false) {
                        vehicle_handbreak[GetPlayerVehicleID(playerid)] = true;
                        SendCustomMessage(playerid, "VEHICLE", "Handbrake "GREEN"ON");
                    }
                }

                ShowPlayerFooter(playerid, "Mesin berhasil dimatikan");
            }
        }
    }
    else if(!strcmp(type,"window",true))
    {
        vehicleid = GetPlayerVehicleID(playerid);

        if(!IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You're not inside vehicle.");

        if(IsABike(vehicleid))
            return SendErrorMessage(playerid, "This vehicle doesn't have window.");

        new seatid;

        if(sscanf(string, "d", seatid))
        {
            new driver, passenger, backleft, backright;
            GetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright);

            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) Dialog_Show(playerid, WindowsControl, DIALOG_STYLE_LIST, "Vehicle windows control", "Driver: %s\nPassenger: %s\nBack Left: %s\nBack Right: %s\nToggle All", "Select", "Close", (driver) ? (""RED"close") : (""GREEN"open"), (passenger) ? (""RED"close") : (""GREEN"open"), (backleft) ? (""RED"close") : (""GREEN"open"), (backright) ? (""RED"close") : (""GREEN"open"));
            else 
            {
                switch(GetPlayerVehicleSeat(playerid))
                {
                    case 1: passenger = !passenger;
                    case 2: backleft = !backleft;
                    case 3: backright = !backright;
                }
                SetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright); 
                ShowPlayerFooter(playerid, "You've toggle vehicle window.");
            }
        }
    }
    else if(!strcmp(type,"lights",true))
    {
        vehicleid = GetPlayerVehicleID(playerid);

        if(!IsEngineVehicle(vehicleid))
            return SendErrorMessage(playerid, "You are not in any vehicle.");

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            return SendErrorMessage(playerid, "You need to be driver to use this command.");
            
        switch (GetLightStatus(vehicleid))
        {
            case false: SetLightStatus(vehicleid, true);
            case true: SetLightStatus(vehicleid, false);
        }
        ShowPlayerFooter(playerid, sprintf("Vehicle lights %s.", (GetLightStatus(vehicleid)) ? ("~g~On") : ("~r~Off")));
    }
    else if(!strcmp(type,"hood",true))
    {
        vehicleid = GetPlayerVehicleID(playerid);

        if(vehicleid == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "You are not standing near any vehicle.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "You are not as driver.");
        if(IsABike(vehicleid)) return SendErrorMessage(playerid, "This vehicle doesn't have hood.");

        switch (GetHoodStatus(vehicleid))
        {
            case false: SetHoodStatus(vehicleid, true);
            case true: SetHoodStatus(vehicleid, false);
        }
        ShowPlayerFooter(playerid, sprintf("Vehicle hood %s.", (GetHoodStatus(vehicleid)) ? ("~g~Opened") : ("~r~Close")));
    }
    else if(!strcmp(type,"trunk",true))
    {
        vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);

        if(vehicleid == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "You are not standing near any vehicle.");
        if(IsABike(vehicleid)) return SendErrorMessage(playerid, "This vehicle doesn't have trunk.");

        switch (GetTrunkStatus(vehicleid))
        {
            case false: SetTrunkStatus(vehicleid, true);
            case true: SetTrunkStatus(vehicleid, false);
        }
        ShowPlayerFooter(playerid, sprintf("Vehicle trunk %s.", (GetTrunkStatus(vehicleid)) ? ("~g~Opened") : ("~r~Close")));
    }
    else if(!strcmp(type,"find",true))
    {
        new
            Float:fX,
            Float:fY,
            Float:fZ,
            text[300],
            count = 0;

        if(Vehicle_GetCount(playerid) == 0)
            return SendErrorMessage(playerid, "You don't own any vehicles.");

        if(PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0 || PlayerData[playerid][pMissions] > 0 || GetPVarInt(playerid, "DeliveryWood") > 0)
            return SendErrorMessage(playerid, "You can't use this command at the moment.");

        format(text, sizeof(text),"ID\tModel\tLocation\n");
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] == -1 && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cInsideInsurance])
        {
            GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);

            format(text,sizeof(text), "%s%s\t%s\t%s\n", text, (!IsValidVehicle(VehicleData[i][cVehicle])) ? ("-") : (sprintf("%d", VehicleData[i][cVehicle])), GetVehicleNameByModel(VehicleData[i][cModel]), GetLocation(fX, fY, fZ));
            ListedVehicles[playerid][count++] = i;
        }
        if(count) Dialog_Show(playerid, CarList, DIALOG_STYLE_TABLIST_HEADERS, "Track Vehicle", text, "Find..", "Close");
        else SendErrorMessage(playerid, "There is nothing vehicle in track list (\"/v myveh\" to see).");
    }
    else if(!strcmp(type,"keys",true))
    {
        new text[64],
            count = 0;

        if(Vehicle_GetCount(playerid) == 0)
            return SendErrorMessage(playerid, "You don't own any vehicles.");

        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] == -1 && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cInsideInsurance] && !VehicleData[i][cGarageFlat])
        {
            strcat(text, sprintf("%s\n", GetVehicleNameByModel(VehicleData[i][cModel])));
            ListedVehicles[playerid][count++] = i;
        }
        if(count) Dialog_Show(playerid, GiveKey, DIALOG_STYLE_LIST, "Vehicle List", text, "Select", "Close");
        else SendErrorMessage(playerid, "There is no vehicle spawned.");
    }
    else if(!strcmp(type,"myveh",true))
    {
        new
            Float:fX,
            Float:fY,
            Float:fZ,
            text[512],
            location[24];

        format(text, sizeof(text),"Model\tStatus\tInsurance\tDistance\n");
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i))
        {
            GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);

            if(VehicleData[i][cInsideInsurance]) format(location, 24, "Insurance Center");
            else if(VehicleData[i][cImpounded] != -1) format(location, 24, "Impound");
            else if(IsVehicleOnGarage(i)) format(location, 24, "Garage");
            else format(location, 24, "Spawned");
            
            format(text,sizeof(text), "%s%s\t%s\t%d\t%.1f\n", text, GetVehicleNameByModel(VehicleData[i][cModel]), location, VehicleData[i][cInsurance], GetPlayerDistanceFromPoint(playerid, fX, fY, fZ));
        }
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "All Vehicle", text, "Close", "");
    }
    else if(!strcmp(type,"tow",true))
    {
        static
            id = -1;

        if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return SendErrorMessage(playerid, "You are not driving a tow truck.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "You need to be driver to use this command.");

        vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

        if(vehicleid == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "There is no vehicle in range.");
        if(!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid)) return SendErrorMessage(playerid, "You can't tow this vehicle.");

        new vehname[32];

        GetVehicleNameByVehicle(vehicleid, vehname);
        AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has hooked a %s onto their tow truck.", ReturnName(playerid, 0, 1), vehname);

        if((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cOwner] && GetFactionType(playerid) == FACTION_POLICE)
        {
            foreach(new i : Player) if(PlayerData[i][pID] == VehicleData[id][cOwner])
            {
                SendCustomMessage(playerid, "IMPOUND", "You have been towed the "YELLOW"%s "WHITE"that owned by "RED"%s"WHITE", report her/him if logged out.", vehname, ReturnName(i, 0));
                SendCustomMessage(i, "IMPOUND", "Your "YELLOW"%s "WHITE"is being impounded by "RED"%s"WHITE", do not /q avoid it!.", vehname, GetInitials(FactionData[PlayerData[playerid][pFaction]][factionName]));
            }
        }
    }
    else if(!strcmp(type,"untow",true))
    {
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
            return SendErrorMessage(playerid, "You are not driving a tow truck.");

        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            return SendErrorMessage(playerid, "You need to be driver to use this command.");

        new
            trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

        if(!trailerid)
            return SendErrorMessage(playerid, "There is no vehicle hooked onto the truck.");

        new vehname[32];

        GetVehicleNameByVehicle(trailerid, vehname);
        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has unhooked the %s from the tow truck.", ReturnName(playerid, 0, 1), vehname);
    }
    else if(!strcmp(type,"sell",true))
    {
        static
            pid,
            price,
            carid = -1;

        if(sscanf(string,"ud", pid, price)) return SendSyntaxMessage(playerid, "/v [sell] <playerid/PartOfName> <price>");
        if(price < 1) return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if (PlayerData[pid][pVipTime] > 0 && PlayerData[pid][pVip] == 3) {
            if(Vehicle_GetCount(pid) >= MAX_PLAYER_VEHICLE+1)
                return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");
        } else if (PlayerData[pid][pVipTime] > 0 && PlayerData[pid][pVip] == 4) {
            if(Vehicle_GetCount(pid) >= MAX_PLAYER_VEHICLE+2)
                return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");
        } else {
            if(Vehicle_GetCount(pid) >= MAX_PLAYER_VEHICLE)
                return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");
        }
        
        if(pid == playerid) return SendErrorMessage(playerid, "You can't sell to yourself.");
        if(PlayerData[pid][pHour] < 2) return SendErrorMessage(playerid, "This player must be played 2 hours to owned a vehicle.");
        if (!IsPlayerNearPlayer(playerid, pid, 5.0)) return SendErrorMessage(playerid, "You're not not near with that player");

        if((carid = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, carid)) {

            // if(VehicleData[carid][cGarage]) return SendErrorMessage(playerid, "Can't sell vehicle if in garage.");
            if(VehicleData[carid][cInsideInsurance]) return SendErrorMessage(playerid, "This vehicle inside insurance center.");
            if(VehicleData[carid][cImpounded] != -1) return SendErrorMessage(playerid, "This vehicle inside impound center.");

            PlayerData[pid][pCarSeller] = playerid;
            PlayerData[pid][pCarOffered] = carid;
            PlayerData[pid][pCarValue] = price;

            SendServerMessage(playerid, "You have requested %s to purchase your %s (%s).", ReturnName(pid, 0), GetVehicleNameByModel(VehicleData[carid][cModel]), FormatNumber(price));
            SendServerMessage(pid, "%s has offered you their %s for %s (type \"/approve car\" to accept).", ReturnName(playerid, 0), GetVehicleNameByModel(VehicleData[carid][cModel]), FormatNumber(price));
        }
        else SendErrorMessage(playerid, "You are not inside any of your vehicles.");
    }
    else if(!strcmp(type, "trade",true)) {
        static userid, vehid = -1;

        if(sscanf(string,"u",userid))
            return SendSyntaxMessage(playerid,"/v [trade] [playerid/name]");
        
        if (!IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You're not in any vehicle!");

        if (userid == playerid || userid == INVALID_PLAYER_ID)
            return SendErrorMessage(playerid, "Invalid playerid or name!");
        
        if (!IsPlayerNearPlayer(playerid, userid, 5.0))
            return SendErrorMessage(playerid, "You're not not near with that player");
        
        if((vehid = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, vehid)) {
            PlayerData[userid][pVehTraded] = vehid;
            PlayerData[userid][pVehTradedPlayer] = playerid;

            new info[256], count = 0, vehname[32];

            strcat(info,"Vehicle\tInsurance\n");
            for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(userid, i) && IsValidVehicle(VehicleData[i][cVehicle])) {
                GetVehicleNameByVehicle(VehicleData[i][cVehicle], vehname);
                strcat(info,sprintf("%s\t%d\n",vehname,VehicleData[i][cInsurance]));
                ListedVehicles[playerid][count++] = i;
            }
            if (count) Dialog_Show(playerid, VehicleTrade, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Trade", info, "Trade", "Cancel");
            else SendErrorMessage(playerid, "That player doesn't have any vehicle");
        }
        else SendErrorMessage(playerid, "You are not inside any of your vehicles.");
    }
    else if(!strcmp(type, "speedometer", true))
    {
        if(!PlayerData[playerid][pDisableSpeedo])
        {
            ToggleSpeedometer(playerid, false);
            HidePlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);

            PlayerData[playerid][pDisableSpeedo] = 1;
            SendServerMessage(playerid, "You have disabled the speedometer.");
        }
        else
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
            {
                ToggleSpeedometer(playerid, true);
                if (PlayerData[playerid][pHUD] == 1) ShowPlayerProgressBar(playerid, PlayerData[playerid][fuelbar]);
            }
            PlayerData[playerid][pDisableSpeedo] = 0;
            SendServerMessage(playerid, "You have enabled the speedometer.");
        }
    }
    else if(!strcmp(type,"lock",true))
    {
        new
            count = 0, text[1512];

        format(text,sizeof(text),"Vehicle\tStatus\n");
        format(text,sizeof(text),"%s"YELLOW"Nearest\t \n",text);
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && (Vehicle_IsOwner(playerid, i) && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cGarageFlat] && !VehicleData[i][cInsideInsurance]) || (VehicleData[i][cRent] && VehicleData[i][cRentOwned] == PlayerData[playerid][pID]) || VehicleData[i][cKeys] == PlayerData[playerid][pID])
        {
            if (VehicleData[i][cRent]) {
                format(text,sizeof(text),"%s"YELLOW"%s\t%s\n", text, GetVehicleNameByModel(VehicleData[i][cModel]), VehicleData[i][cLocked] ? (RED"Locked") : (GREEN"Unlocked"));
            } else if (VehicleData[i][cKeys]) {
                format(text,sizeof(text),"%s"CYAN"%s\t%s\n", text, GetVehicleNameByModel(VehicleData[i][cModel]), VehicleData[i][cLocked] ? (RED"Locked") : (GREEN"Unlocked"));
            } else {
                format(text,sizeof(text),"%s"WHITE"%s\t%s\n", text, GetVehicleNameByModel(VehicleData[i][cModel]), VehicleData[i][cLocked] ? (RED"Locked") : (GREEN"Unlocked"));
            }
            ListedVehicles[playerid][++count] = i;
        }

        if(count) Dialog_Show(playerid, CarLock, DIALOG_STYLE_TABLIST_HEADERS, "Lock Vehicle", text, "Toggle", "Close");
        else SendErrorMessage(playerid, "Tidak ada kendaraan yang dimuat ...");        
    }
    else if(!strcmp(type, "unmod", true))
    {
        new carid = GetPlayerVehicleID(playerid);

        if(!IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You must be inside your vehicle.");

/*        if(IsVehicleImpounded(carid))
            return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");*/

        if((carid = Vehicle_GetID(carid)) != -1 && Vehicle_IsOwner(playerid, carid))
        {
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
                return SendErrorMessage(playerid, "You need to be driver to use this command.");

            for (new i = 0; i < 14; i ++) {
                RemoveVehicleComponent(VehicleData[carid][cVehicle], VehicleData[carid][cMods][i]);

                VehicleData[carid][cMods][i] = 0;
            }
            Vehicle_Save(carid);
            SendServerMessage(playerid, "You have removed the modifications from this vehicle.");
        }
        else SendErrorMessage(playerid, "You are not inside anything you can unmodify.");
    }
    else if(!strcmp(type,"storage", true))
    {
        new
            id = -1;

        if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
        {
            if(PlayerData[playerid][pInjured]) 
                return SendErrorMessage(playerid, "You're injured.");
            
            if(IsPlayerInAnyVehicle(playerid)) 
                return SendErrorMessage(playerid, "You must exit the vehicle first.");
            
            if(IsABike(VehicleData[id][cVehicle]))
                return SendErrorMessage(playerid, "This vehicle doesn't have a trunk.");

            if (!Vehicle_IsOwner(playerid, id))
                return SendErrorMessage(playerid, "This is not your vehicle");
            
            if(!GetTrunkStatus(VehicleData[id][cVehicle])) 
                return SendErrorMessage(playerid, "You must open trunk the vehicle first.");
            
            if(VehicleData[id][cFaction] > 0 && VehicleData[id][cFaction] != GetFactionSQLID(playerid)) 
                return SendErrorMessage(playerid, "Can't access for this faction vehicle.");

            Car_ShowTrunk(playerid);
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any vehicle.");
    }
    else if(!strcmp(type,"unrentveh",true))
    {
        return cmd_unrentveh(playerid, "");
    }
    else if(!strcmp(type,"findrentcar",true))
    {
        new text[128],
            Float:fX,
            Float:fY,
            Float:fZ,
            count = 0;
        
        if(!Rental_GetCount(playerid))
            return SendErrorMessage(playerid, "You don't have vehicle rental.");
            
        strcat(text,"ID\tModel\tLocation\tTime Left\n",sizeof(text));
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cRent]) 
        {
            if(VehicleData[i][cRentOwned] == PlayerData[playerid][pID])
            {
                GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);

                format(string,sizeof(string), "{C0C0C0}%d\t"WHITE"%s\t%s\t%02d:%02d", VehicleData[i][cVehicle], GetVehicleNameByModel(VehicleData[i][cModel]), GetLocation(fX, fY, fZ), (VehicleData[i][cRentTime]/60), (VehicleData[i][cRentTime] % 60));
                strcat(text,string,sizeof(text));
                ListedVehicles[playerid][count++] = i;
            }
        }
        Dialog_Show(playerid, TrackRentCar, DIALOG_STYLE_TABLIST_HEADERS, "Track vehicle rental", text, "Find..", "Close");
    }
    else if(!strcmp(type,"neon",true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            return SendErrorMessage(playerid, "You need to be driver to use this command.");

        new id = -1;

        if((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1)
        {
            if(!VehicleData[id][cNeon]) return SendErrorMessage(playerid, "This vehicle does't have neon.");

            switch(VehicleData[id][cNeonToggle])
            {
                case 0: VehicleData[id][cNeonToggle] = 1;  
                case 1: VehicleData[id][cNeonToggle] = 0;
            }

            ReloadVehicleNeon(id);
            SendServerMessage(playerid, "Neon toggle %s.", (!VehicleData[id][cNeonToggle]) ? (""RED"OFF") : (""GREEN"ON"));
            return 1;
        }
    }
    else if(!strcmp(type,"radio",true))
    {
        new option[24];
        if (sscanf(string, "s[24]", option))
            return SendSyntaxMessage(playerid, "/v radio [listen/stop/url]");

        if(IsABike(GetPlayerVehicleID(playerid))) return SendErrorMessage(playerid, "Bike does't have radio.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid, "You need to be driver to use this command.");

        if (!strcmp(option, "listen", true)) {
            new output[1024];
            for (new i = 0; i < 34; i ++) {
                strcat(output, sprintf("%s\n", RadioStation[i][Name]));
            }
            Dialog_Show(playerid, RadioList, DIALOG_STYLE_LIST, "Radio List", output, "Select", "Close");
        } else if (!strcmp(option, "stop", true)) {
            StopVehicleRadio(GetPlayerVehicleID(playerid));
            SendCustomMessage(playerid, "RADIO", "You've been stopped vehicle radio.");
        } else if (!strcmp(option, "url", true)) {
            Dialog_Show(playerid, RadioLink, DIALOG_STYLE_INPUT, "Insert URL", "Masukkan link radio yang akan di dengar:", "Play", "Close");
        } else SendSyntaxMessage(playerid, "/v radio [listen/stop/url]");
    }
    else if(!strcmp(type,"acc",true))
    {
        cmd_vacc(playerid, "\1");
    }
    else if (!strcmp(type,"objectrefresh",true)) {
        new
            id = -1;

        if ((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, id)) {
            for (new slot = 0; slot < MAX_VEHICLE_OBJECT+5; slot ++) if (VehicleObjects[id][slot][object_exists]) {
                Vehicle_ObjectUpdate(id, slot);
            }
            SendCustomMessage(playerid, "MOD", "You've been refreshed this vehicle object");
            return 1;
        }
    }
    else if (!strcmp(type,"unstuck",true)) {
        new dialog[128], Float:vpos[3], count = 0;

        strcat(dialog, sprintf("Vehicle\tDistance\n"));
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && (Vehicle_IsOwner(playerid, i) && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cGarageFlat] && !VehicleData[i][cInsideInsurance]) || (VehicleData[i][cRent] && VehicleData[i][cRentOwned] == PlayerData[playerid][pID])) {
            GetVehiclePos(VehicleData[i][cVehicle], vpos[0], vpos[1], vpos[2]);

            strcat(dialog, sprintf("%s\t%.1f\n", GetVehicleNameByModel(VehicleData[i][cModel]), GetPlayerDistanceFromPoint(playerid, vpos[0], vpos[1], vpos[2])));
            ListedVehicles[playerid][count++] = i;
        }
        if (count) Dialog_Show(playerid, VehicleUnstuck, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Unstuck", dialog, "Unstuck", "Close");
        else SendErrorMessage(playerid, "You don't have any vehicles");
    }
    else {
        SendClientMessageEx(playerid,COLOR_CLIENT,"|__________________ Vehicle Command __________________|");
        SendCustomMessage(playerid,"VEHICLE", "/v [engine] [lights] [hood] [trunk] [find] [tow] [radio] [myveh] [acc] [window] [objectrefresh]");
        SendCustomMessage(playerid,"VEHICLE", "/v [sell] [trade] [untow] [speedometer] [lock] [findrentcar] [unrentveh] [storage] [unmod] [keys] [neon] [unstuck]");
        SendCustomMessage(playerid,"VEHICLE", "Press "RED"[Y] "WHITE" inside the car to interact the vehicle.");
        return 1;
    }
    return 1;
}

CMD:engine(playerid)
    return cmd_v(playerid, "engine");

CMD:lights(playerid)
    return cmd_v(playerid, "lights");

CMD:hood(playerid)
    return cmd_v(playerid, "hood");

CMD:findveh(playerid)
    return cmd_v(playerid, "find");

CMD:tow(playerid)
    return cmd_v(playerid, "tow");

CMD:vradio(playerid)
    return cmd_v(playerid, "radio");

CMD:myveh(playerid)
    return cmd_v(playerid, "myveh");

CMD:vehacc(playerid)
    return cmd_v(playerid, "acc");

CMD:window(playerid)
    return cmd_v(playerid, "window");

CMD:refreshveh(playerid)
    return cmd_v(playerid, "objectrefresh");

CMD:sellmyveh(playerid, params[])
    return cmd_v(playerid, sprintf("sell %s", params));

CMD:tradeveh(playerid, params[])
    return cmd_v(playerid, sprintf("trade %s", params));

CMD:untow(playerid)
    return cmd_v(playerid, "untow");

CMD:speedometer(playerid)
    return cmd_v(playerid, "speedometer");

CMD:lock(playerid)
    return cmd_v(playerid, "lock");

CMD:findrentveh(playerid)
    return cmd_v(playerid, "findrentcar");

CMD:vehstorage(playerid)
    return cmd_v(playerid, "storage");

CMD:unmodveh(playerid)
    return cmd_v(playerid, "unmod");

CMD:vehkeys(playerid)
    return cmd_v(playerid, "keys");

CMD:neon(playerid)
    return cmd_v(playerid, "neon");

CMD:unstuck(playerid)
    return cmd_v(playerid, "unstuck");

CMD:trunk(playerid)
    return cmd_v(playerid, "trunk");

CMD:charity(playerid, params[]) {
    new amount, reason[32], query[128];

    if (sscanf(params, "ds[32]", amount, reason))
        return SendSyntaxMessage(playerid, "/charity [amount] [reason]");
    
    if (amount < 1)
        return SendErrorMessage(playerid, "You can't charity 0 or negative amount.");
    
    if (GetMoney(playerid) < amount)
        return SendErrorMessage(playerid, "You don't have enough money.");
    
    if (strlen(reason) > 32)
        return SendErrorMessage(playerid, "Maximum character is 32 characters");
    
    GiveMoney(playerid, -amount);
    SendCustomMessage(playerid,"CHARITY", "You've been charity %s for %s", FormatNumber(amount), reason);

    format(query, sizeof(query), "INSERT INTO `charitylog` (`charid`, `amount`, `reason`, `date`) VALUES ('%d', '%d', '%s', '%d')", PlayerData[playerid][pID], amount, SQL_ReturnEscaped(reason), gettime());
    mysql_tquery(g_iHandle, query);
    return 1;
}

CMD:charitylog(playerid) {
    new Cache:check, query[64];

    format(query,sizeof(query),"SELECT * FROM `charitylog` WHERE `charid` = '%d'", PlayerData[playerid][pID]);
    check = mysql_query(g_iHandle, query);

    if (cache_num_rows()) {
        new dialog[256], amount, reason[32], date;

        strcat(dialog,"#\tAmount\tDate\tReason\n");
        for (new i = 0; i < cache_num_rows(); i ++) {
            cache_get_value_int(i, "amount", amount);
            cache_get_value_int(i, "date", date);
            cache_get_value(i, "reason", reason);

            strcat(dialog,sprintf("%d\t%s\t%s\t%s\n",i,FormatNumber(amount),ConvertTimestamp(Time:date,false,false,true),reason));
        }
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Charity Log", dialog, "Close", "");
    } else SendErrorMessage(playerid, "You don't have any charity records");

    cache_delete(check);
    return 1;
}

// Dialog:SelectWeapon(playerid, response, listitem, inputtext[]) {
//     if (response) {
//         new slot = ListedWeapons[playerid][listitem];

//         if (PlayerGuns[playerid][slot][weapon_ammo] < 1 || PlayerGuns[playerid][slot][weapon_durability] < 1)
//             return SendErrorMessage(playerid, "The selected weapon has no bullets or the weapon has been damaged");
        
//         SetPlayerArmedWeapon(playerid, PlayerGuns[playerid][slot][weapon_id]);
//     }
//     return 1;
// }

CMD:gov(playerid, params[]) {
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/gov [text]");
    if(PlayerData[playerid][pFactionRank] > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
        if(GetFactionType(playerid) == FACTION_POLICE) {
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"* %s: %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);
        }
        else if(GetFactionType(playerid) == FACTION_NEWS) {
            SendErrorMessage(playerid, "You aren't government!");
            /*SendClientMessageToAllEx(X11_GREEN_YELLOW,"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(X11_GREEN_YELLOW,"* %s : %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);*/
        }
        else if(GetFactionType(playerid) == FACTION_MEDIC) {
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"* %s: %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);
        }
        else if(GetFactionType(playerid) == FACTION_GOV) {
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"|___________ Government News Announcement ___________|");
            SendClientMessageToAllEx(FactionData[PlayerData[playerid][pFaction]][factionColor],"* %s: %s %s: %s **",GetInitials(Faction_GetName(playerid)),Faction_GetRank(playerid), ReturnName(playerid,1) ,params);
        }
        else
            return SendErrorMessage(playerid, "You're not in any faction");
    else
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);
    return 1;
}


/*================================= ADMIN COMMAND LIST ===============================
=============================================================================================*/

/*CMD:myactions(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Influencer Command", Inhelp, "CLOSE", "", "");
}*/

CMD:resetweps(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/resetweps [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    ResetWeapons(userid);
    SendAdminAction(playerid, "You have reset %s's weapons.", ReturnName(userid, 0));
    SendServerMessage(userid, ""RED"%s "WHITE"have reset your weapons.", ReturnAdminName(playerid));
    return 1;
}

CMD:resetjob(playerid, params[])
{
    new targetid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", targetid)) return SendSyntaxMessage(playerid, "/resetjob [playerid]");
    if(targetid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    PlayerData[targetid][pDelayFishing] = 0;
    PlayerData[targetid][pSweeperDelay] = 0;
    PlayerData[targetid][pBusDelay] = 0;
    PlayerData[targetid][pDelayTruck] = 0;
    PlayerData[targetid][pWork] = 0;
    PlayerData[targetid][pTrashmasterJob] = 0;
    PlayerData[targetid][pWoodDelay] = 0;
    SetSorterDelay(targetid, 0);
    SetUnloaderDelay(targetid, 0);
    SetMinerDelay(targetid, 0);
    PlayerData[targetid][pMissionsDelay] = 0;
    SetSmugglerDelay(targetid, 0);
    SendCustomMessage(targetid, "JOB RESET","Your job has been reset by "YELLOW"%s", ReturnName(playerid, 0));
    SendCustomMessage(playerid, "JOB RESET","Your has been reset "YELLOW"%s "WHITE"job!", ReturnName(targetid, 0));
    return 1;
}

CMD:aduty(playerid)
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!AccountData[playerid][pAdminDuty])
    {
        GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
        SetPlayerHealth(playerid, 9999.9);
        SetPVarInt(playerid, "PreviousColor", GetPlayerColor(playerid));
        SetPlayerColor(playerid, RemoveAlpha(X11_RED_2));
        AccountData[playerid][pAdminDuty] = 1;
        SetPlayerName(playerid,ReturnAdminName(playerid));
        SendAdminMessage(X11_LIGHTBLUE, "ADMINDUTY: "RED"%s "WHITE"is now duty as an admin/helper.", ReturnAdminName(playerid));
    }
    else
    {
        new 
            pFacIDx = PlayerData[playerid][pFaction];

        SetPlayerColor(playerid, (PlayerData[playerid][pFaction] != -1 && PlayerData[playerid][pOnDuty]) ? (RemoveAlpha(FactionData[pFacIDx][factionColor])) : (GetPVarInt(playerid, "PreviousColor")));
        SetPlayerName(playerid, NormalName(playerid));
        SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
        AccountData[playerid][pAdminDuty] = 0;
        SendAdminMessage(X11_LIGHTBLUE, "ADMINDUTY: "RED"%s "WHITE"is no longer on admin/helper duty.", ReturnAdminName(playerid));
    }
    return 1;
}

CMD:aod(playerid)
    return cmd_aduty(playerid);

// CMD:switchchar(playerid, params[]) {
//     if (CheckAdmin(playerid, 1))
//         return PermissionError(playerid);

//     SetPVarInt(playerid, "SwitchChar", 1);
//     new skin = GetPlayerSkin(playerid), Float:pos[3], Float:angle, classid;
//     GetPlayerPos(playerid, posArr{pos});
//     GetPlayerFacingAngle(playerid, angle);
//     classid = AddPlayerClass(skin, posArr{pos}, angle, 0, 0, 0, 0, 0, 0);
//     OnPlayerRequestClass(playerid, classid);
    
//     for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
//         if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
//     }
//     SwitchChar(playerid);
//     return 1;
// }

/*CMD:ipcheck(playerid, params[])
{
    new userid;
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/ipcheck [playerid/part of name]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SendClientMessageEx(playerid, X11_GREEN_YELLOW, "IP from %s: "WHITE"%s", ReturnName2(userid), ReturnIP(userid));
    return 1;
}*/

CMD:checkacc(playerid, params[])
{
    static
        character[32],
        Cache: charcheck,
        query[128];

    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]", character)) return SendSyntaxMessage(playerid, "/checkacc[character name]");

    format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", character);
    charcheck = mysql_query(g_iHandle, query);

    new rows = cache_num_rows();

    if(rows)
    {
        new username[32];
        cache_get_value(0, "Username", username, 32);
        SendClientMessageEx(playerid, X11_GREEN_YELLOW, "ACP for user named %s is: "WHITE"%s", character, username);
    }
    else
        SendErrorMessage(playerid, "%s isn't registered.", character);

    cache_delete(charcheck);
    return 1;
}

CMD:checkclaims(playerid, params[]) {
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new 
        query[128],
        Cache: claims,
        rows,
        charname[MAX_PLAYER_NAME];
    
    if (sscanf(params,"s[24]",charname))
        return SendSyntaxMessage(playerid, "/checkclaims [character name]");
    
    format(query, sizeof(query), "SELECT `Character`, `CustomGate`, `CustomMapping` FROM `characters` WHERE `Character` = '%s'", charname);
    claims = mysql_query(g_iHandle, query);
    rows = cache_num_rows();

    if(rows)
    {
        new 
            character[MAX_PLAYER_NAME],
            claim[2];

        for(new i = 0; i < rows; i ++)
        {
            cache_get_value(i, "Character", character);
            cache_get_value_int(i, "CustomGate", claim[0]);
            cache_get_value_int(i, "CustomMapping", claim[1]);
        }
        SendClientMessageEx(playerid,X11_WHITE,"Claims for Character "YELLOW"%s", character);
        SendClientMessageEx(playerid,X11_WHITE,"Custom Gate claims: "GREEN"%d", claim[0]);
        SendClientMessageEx(playerid,X11_WHITE,"Custom Mapping claims: "GREEN"%d", claim[1]);
    }
    else
        SendErrorMessage(playerid, "Invalid Character name.");
    
    cache_delete(claims);
    return 1;
}

CMD:listchars(playerid, params[]) {
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    static ucp[32];
    if (sscanf(params, "s[32]", ucp))
        return SendSyntaxMessage(playerid, "/listchars [ucp name]");

    static Cache:check, query[256];

    format(query,sizeof(query),"SELECT `Character`, `pScore`, `LoginDate` FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(ucp));
    check = mysql_query(g_iHandle, query);

    if (cache_num_rows()) {
        new level, lastlogin, name[MAX_PLAYER_NAME+1];

        SendClientMessageEx(playerid, X11_OLIVE_DRAB_1, "List characters of UCP "YELLOW"%s", ucp);
        for (new i = 0; i < cache_num_rows(); i ++) {
            cache_get_value_int(i, "pScore", level);
            cache_get_value_int(i, "LoginDate", lastlogin);
            cache_get_value(i, "Character", name);
            SendClientMessageEx(playerid, X11_YELLOW, "Name: "WHITE"%s "YELLOW"| Level: "WHITE"%d "YELLOW"| Last Login: "WHITE"%s", name, level, ConvertTimestamp(Time:lastlogin));
        }
    } else SendErrorMessage(playerid, "UCP doen't exists on database.");

    cache_delete(check);
    return 1;
}

CMD:boost(playerid, params[]) {
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    new Float:speed;
    if (sscanf(params, "f", speed))
        return SendSyntaxMessage(playerid, "/boost [speed]");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must in any vehicle to use this command!");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You must to be driver to use this command!");

    new vehicleid = GetPlayerVehicleID(playerid);
    SetVehicleSpeed(vehicleid, GetVehicleSpeed(vehicleid, false)+speed);
    return 1;
}

CMD:explode(playerid, params[]) {
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    new userid;
    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/explode [playerid/name]");

    if (!IsPlayerConnected(userid) && !IsPlayerSpawned(userid))
        return SendErrorMessage(playerid, "That player isn't connected and not spawned");

    new Float:pos[3];
    GetPlayerPos(userid, pos[0], pos[1], pos[2]);
    CreateExplosion(pos[0], pos[1], pos[2], 2, 5.0);
    return 1;
}

CMD:getip(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/getip [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SendServerMessage(playerid, "%s's IP address is %s.", ReturnName(userid, 0), ReturnIP(userid));
    return 1;
}

CMD:getipuser(playerid, params[])
{
    static
        ip[32];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]", ip)) return SendSyntaxMessage(playerid, "/getipuser [ip]");
    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `accounts` WHERE `IP`='%s'", ip), "Alias_Check", "ds", playerid, ip);
    return 1;
}

CMD:ogetip(playerid, params[])
{
    static 
        userid[MAX_PLAYER_NAME], 
        Cache: ipcheck, 
        query[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    
    if(sscanf(params, "s[32]", userid))
        return SendSyntaxMessage(playerid, "/ogetip [accounts name]");

    format(query, sizeof(query), "SELECT `IP` FROM `accounts` WHERE `Username` = '%s'", userid);
    ipcheck = mysql_query(g_iHandle, query);

    new rows = cache_num_rows();

    if(rows)
    {
        new ip[32];
        cache_get_value(0, "IP", ip, 32);
        SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Offline ip check from username/accounts %s: "WHITE"%s", userid, ip);
    }
    else
        SendErrorMessage(playerid, "%s isn't registered.", userid);

    cache_delete(ipcheck);
    return 1;
}
CMD:vowner(playerid, params[])
{
    static 
        vid,
        id = -1;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);


    if(sscanf(params, "d", vid)) return SendSyntaxMessage(playerid, "/vowner [vehicle id]");
    if((id = Vehicle_GetID(vid)) != -1) if(Iter_Contains(DynamicVehicles, id))
    {
        if(VehicleData[id][cOwner] != 0) {
            foreach(new i : Player) if(IsPlayerConnected(i) && VehicleData[id][cOwner] == GetPlayerSQLID(i)) {
                SendCustomMessage(playerid, "VEHICLE","This vehicle owned by "YELLOW"%s", ReturnName(i, 0));
                return 1;
            }
        }
        if(VehicleData[id][cRentOwned] != 0) {
            foreach(new i : Player) if(IsPlayerConnected(i) && VehicleData[id][cRentOwned] == GetPlayerSQLID(i)) {
                SendCustomMessage(playerid, "VEHICLE","This vehicle is rental vehicle and owned by "YELLOW"%s", ReturnName(i, 0));
                return 1;
            }
        }
        if(VehicleData[id][cFaction] != 0) {
            for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && VehicleData[id][cFaction] == GetFactionSQLID(i)) {
                SendCustomMessage(playerid, "VEHICLE","This vehicle owned by faction {%06x}%s", FactionData[i][factionColor] >>> 8, FactionData[i][factionName]);
                return 1;
            }
        }
        if(VehicleData[id][cWorkshop] != -1) {
            foreach (new i : Workshop) if(Iter_Contains(Workshop, i) && VehicleData[id][cWorkshop] == WorkshopData[i][wID]) {
                SendCustomMessage(playerid, "VEHICLE","This vehicle owned by workshop "YELLOW"%s", WorkshopData[i][wName]);
                return 1;
            }
        }
        if(VehicleData[id][cBiz] != -1) {
            for (new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessData[i][bizExists] && VehicleData[id][cBiz] == BusinessData[i][bizID]) {
                SendCustomMessage(playerid, "VEHICLE","This vehicle owned by business "YELLOW"%s", BusinessData[i][bizName]);
                return 1;
            }
        }
        else SendCustomMessage(playerid, "VEHICLE", "This is job vehicle");
        return 1;
    }
    SendErrorMessage(playerid, "This is not owned vehicle.");
    return 1;
}

CMD:mypos(playerid, params[]) {
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new Float:Pos[4];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    GetPlayerFacingAngle(playerid, Pos[3]);
    SendServerMessage(playerid, "Your Position: X = %.2f, Y = %.2f, Z = %.2f, Angle = %.2f", Pos[0], Pos[1], Pos[2], Pos[3]);
    return 1;
}

CMD:mark(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    GetPlayerPos(playerid, PlayerData[playerid][pAdmMark][0], PlayerData[playerid][pAdmMark][1], PlayerData[playerid][pAdmMark][2]);
    PlayerData[playerid][pAdmMarkInt] = GetPlayerInterior(playerid);
    PlayerData[playerid][pAdmMarkVW] = GetPlayerVirtualWorld(playerid);
    SendCustomMessage(playerid, "MARK", "You've been set your "YELLOW"mark location!");
    return 1;
}

CMD:gotomark(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SetPlayerPos(playerid, PlayerData[playerid][pAdmMark][0], PlayerData[playerid][pAdmMark][1], PlayerData[playerid][pAdmMark][2]);
    SetPlayerInterior(playerid, PlayerData[playerid][pAdmMarkInt]);
    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pAdmMarkVW]);
    SendClientMessage(playerid, COLOR_CLIENT, "Teleport: "WHITE"You have been teleport to the "YELLOW"marked location!");
    return 1;
}

CMD:acure(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/acure [playerid]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    PlayerData[userid][pCough] = 0;
    PlayerData[userid][pMigrainRate] = 0;
    PlayerData[userid][pFever] = 0;

    SendServerMessage(userid, "Administrator %s telah mereset penyakit di karakter anda.", ReturnAdminName(playerid));
    SendServerMessage(playerid, "Anda telah mereset penyakit karakter %s.", ReturnName(userid, 0));
    return 1;
}

CMD:forcedmv(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/forcedmv [playerid]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    PlayerData[userid][pDMVTime] = 0;

    SendServerMessage(userid, "Administrator %s telah mereset delay untuk test mengemudi anda.", ReturnAdminName(playerid));
    SendServerMessage(playerid, "Anda telah mereset delay untuk test mengemudi karakter %s.", ReturnName(userid, 0));
    return 1;
}

// CMD:in(playerid, params[])
// {
//     if(AccountData[playerid][pVolunteer] < 1)
//         return SendErrorMessage(playerid, "You dont have any permissions!");

//     if(isnull(params))
//         return SendSyntaxMessage(playerid, "/in [influencer text]");

//     if(AccountData[playerid][pVolunteer])
//     {
//         SendInfluencerMessage(COLOR_INFLUENCER, "[INFLUENCER] %s: {33FCFF}%s", ReturnName(playerid), params); 
//     }
//     return 1;
// }

CMD:setvolunteer(playerid, params[])
{
    static 
        userid;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/setvolunteer [playerid]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Invalid player ID.");

    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "That player are not connected.");

    AccountData[userid][pVolunteer] = 1;
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s have set %s as volunteer!", ReturnAdminName(playerid), ReturnName(userid, 0));
    SendAdminAction(userid, "You have been invited to be an Volunteer Team by %s! "YELLOW"(/volhelp)", ReturnAdminName(playerid));
    return 1;
}

CMD:removevolunteer(playerid, params[])
{
    static 
        userid;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/removevolunteer [playerid]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Invalid player ID.");

    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "That player are not connected.");

    AccountData[userid][pVolunteer] = 0;
    SendServerMessage(playerid, "You have removed %s from Volunteer!", ReturnName(userid, 0));
    SendServerMessage(userid, "You have been removed from Volunteer Team by %s!", ReturnAdminName(playerid));
    return 1;
}

CMD:a(playerid, params[])
{
    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(PlayerData[playerid][pDisableAdmin])
        return SendErrorMessage(playerid, "You disabled your admin message.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/a [admin text]");

    if(strlen(params) < 128) 
    {
        if(AccountData[playerid][pAdmin])
        {
            SendTesterMessage(X11_OLIVE_DRAB_1, "%s %s: {33EE33}%s", gAdminLevel[AccountData[playerid][pAdmin]], ReturnAdminName(playerid), params);
        }
        if (AccountData[playerid][pVolunteer]) {
            SendTesterMessage(X11_OLIVE_DRAB_1, "Volunteer %s: {33EE33}%s", ReturnAdminName(playerid), params);
        }
    }
    Log_Write("logs/adminchat.txt", "[%s] %s: %s", ReturnDate(), ReturnAdminName(playerid), params);
    return 1;
}
CMD:volhelp(playerid, params[])
{
    if(AccountData[playerid][pVolunteer] < 1)
        return PermissionError(playerid);

    new
        Inhelp[248];

    if(AccountData[playerid][pVolunteer] >= 1)
    {
        strcat(Inhelp, "/a\n/setvw\n/goto\n/getcar\n/gotoplayerscar\n/gethere\n/fixveh\n/revive\n/entercar\n/ans\n/ar");
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Volunteer Commands", Inhelp, "CLOSE", "", "");
    return 1;
}

CMD:fixmyname(playerid, params[])
{
    return Format_PlayerName(playerid);
}

Format_PlayerName(playerid) {
    if (AccountData[playerid][pAdminDuty])
        return SendErrorMessage(playerid, "You're on admin duty.");

	new newname[MAX_PLAYER_NAME], iPos, name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, newname, MAX_PLAYER_NAME);
	for(new i; i < MAX_PLAYER_NAME; i++) newname[i] = tolower(newname[i]);
	newname[0] = toupper(newname[0]);
	format(name, sizeof(name), "Formatting_%d", playerid);
	SetPlayerName(playerid, name);
	while((iPos = strfind(newname, "_", false, iPos)) != -1) iPos++, newname[iPos] = toupper(newname[iPos]);
	SetPlayerName(playerid, newname);

    if (IsPlayerDuty(playerid)) SetFactionColor(playerid);
    else SetPlayerColor(playerid, DEFAULT_COLOR);

    SendCustomMessage(playerid,"FIXNAME","Your name has been fixed.");
    return 1;
}

CMD:ahelp(playerid)
{   
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new
        AdmCmdStr1[4096] = "Admin Level\tAdmin Command\n";

    if(AccountData[playerid][pAdmin] >= 1)
    {
        strcat(AdmCmdStr1, "Helper\t/a\nHelper\t/aduty\nHelper\t/asay\nHelper\t/checkacc\nHelper\t/check\nHelper\t/spectate\nHelper\t/asks\nHelper\t/jail\nHelper\t/release\nHelper\t/kick\nHelper\t/warn\nHelper\t/unwarn\nHelper\t/mute\nHelper\t/unmute");
        strcat(AdmCmdStr1, "\nHelper\t/goto\nHelper\tgethere\nHelper\t/freeze\nHelper\t/unfreeze\nHelper\t/ban\nHelper\t/banacp\nHelper\t/unbanacp\nHelper\t/tempban\nHelper\t/otempban\nHelper\t/oban\nHelper\t/send\nHelper\t/setskin\nHelper\t/setfskin");
        strcat(AdmCmdStr1, "\nHelper\t/ans\nHelper\tgetcar\nHelper\t/gotocar\nHelper\t/setint\nHelper\t/setvw\nHelper\t/gotoplayerscar\nHelper\t/vowner\nHelper\t/checknumber\nHelper\t/apm");
        strcat(AdmCmdStr1, "\nHelper\t/maxenergy\nHelper\t/fixveh\nHelper\t/aslap\nHelper\t/aremovecall\nHelper\t/changeboard\nHelper\t/gotoco\nHelper\t/sethp\nHelper\t/jailed\nHelper\t/checkitem");
        strcat(AdmCmdStr1, "\nHelper\t/revive\nHelper\t/jetpack\nHelper\t/checkmask\nHelper\t/baninfo\nHelper\t/mark\nHelper\t/gotomark\nHelper\t/entercar\nHelper\t/vdl");
        strcat(AdmCmdStr1, "\nHelper\t/unban\nHelper\t/banip\nHelper\t/ogetip\nHelper\t/getip\nHelper\t/getipuser\nHelper\t/unbanip\nHelper\t/ogethere\nHelper\t/respawnfactioncars\nHelper\t/mark");
        strcat(AdmCmdStr1, "\nHelper\t/owarn\nHelper\t/forcehospital\nHelper\t/lookup\nHelper\t/nearplayer\nHelper\t/listwarns\nHelper\t/ft\nHelper\t/lt\nHelper\t/togoocns");
    }
    if(AccountData[playerid][pAdmin] >= 2)
    {
        strcat(AdmCmdStr1, "\nLevel 1\t/respawn\nLevel 1\t/respawncars\nLevel 1\t/shooter\nLevel 1\t/forcedmv\nLevel 1\t/countdown\nLevel 1\t/togooc");
        strcat(AdmCmdStr1, "\nLevel 1\t/destroyveh\nLevel 1\t/respawncar\nLevel 1\t/listguns\nLevel 1\t/masked\nLevel 1\t/setarmor");
        strcat(AdmCmdStr1, "\nLevel 1\t/flip\nLevel 1\t/vote");
    }
    if(AccountData[playerid][pAdmin] >= 3)
    {
        strcat(AdmCmdStr1, "\nLevel 2\t/resetweps\nLevel 2\t/forceinsurance\nLevel 2\t/near\nLevel 2\t/destroycar");
        strcat(AdmCmdStr1, "\nLevel 2\t/adestroybox \nLevel 2\t/setname\nLevel 2\t/addsalary\nLevel 2\t/setweather");
    }
    if(AccountData[playerid][pAdmin] >= 4)
    {
        strcat(AdmCmdStr1, "\nLevel 3\t/destroyveh\nLevel 3\t/destroyitem");
        strcat(AdmCmdStr1, "\nLevel 3\t/respawnnear\nLevel 3\t/resetdamage\nLevel 3\t/resetshooter");
    }
    if(AccountData[playerid][pAdmin] >= 5)
    {
        strcat(AdmCmdStr1, "\nLevel 4\t/checkstorage\nLevel 4\t/acolorcar\nLevel 4\t/setfuel\nLevel 4\t/clearinventory\nLevel 4\t/clearwarns\nLevel 4\t/gunauthority");
        strcat(AdmCmdStr1, "\nLevel 4\t/auction\nLevel 4\t/setplayer");
        strcat(AdmCmdStr1, "\nLevel 4\t/asetfaction\nLevel 4\t/setweather");
    }
    if(AccountData[playerid][pAdmin] >= 6)
    {
        strcat(AdmCmdStr1, "\nSr. Admin\t/spawnitem\nSr. Admin\t/setquantity\nSr. Admin\t/veh\nSr. Admin\t/setpump\nSr. Admin\t/asetrank\nSr. Admin\t/setvolunteer\nSr. Admin\t/removevolunteer");
        strcat(AdmCmdStr1, "\nSr. Admin\t/cpv\nSr. Admin\t/gunauthority\nSr. Admin\t/givewep\nSr. Admin\t/clearallreports");
    }
    if(AccountData[playerid][pAdmin] >= 7)
    {
        strcat(AdmCmdStr1, "\nLead Admin\t/gmx\nLead Admin\t/setmotd\nLead Admin\t/dynamichelp\nLead Admin\t/saveaccounts\nLead Admin\t/saveall");
        strcat(AdmCmdStr1, "\nLead Admin\t/cpv\nLead Admin\t/gunauthority\nLead Admin\t/givewep\nLead Admin\t/setleader\nLead Admin\t/setitem");
        strcat(AdmCmdStr1, "\nLead Admin\t/setadmin\nLead Admin\t/deletechar");
        strcat(AdmCmdStr1, "\nLead Admin\t/resetpassword\nLead Admin\t/earthquake");
    }
    if(AccountData[playerid][pAdmin] >= 8)
    {
        strcat(AdmCmdStr1, "\nDeputy Head Admin\t/setadmin\nDeputy Head Admin\t/deletechar\nDeputy Head Admin\t/creategiftcode");
        strcat(AdmCmdStr1, "\nDeputy Head Admin\t/resetpassword\nDeputy Head Admin\t/givemoney\nDeputy Head Admin\t/setvip");
    }
    if(AccountData[playerid][pAdmin] >= 9)
    {
        strcat(AdmCmdStr1, "\nHead Admin\t/panel\nHead Admin\t/givemoney\nHead Admin\t/creategiftcode\nHead Admin\t/setvip");

    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Admin Command", AdmCmdStr1, "CLOSE", "", "");
    return 1;
}
CMD:ah(playerid)
    return cmd_ahelp(playerid);

CMD:dynamichelp(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    new display[1500];

    strcat(display, "ATM\t/createatm, /destroyatm, /goto atm\n");
    strcat(display, "GARBAGE\t/creategarbage, /destroygarbage\n");
    strcat(display, "PUMP\t/createpump, /setpump, /destroypump\n");
    strcat(display, "RACK\t/createrack, /editrack, /destroyrack\n");
    strcat(display, "SPEED\t/createspeed, /editspeed, /destroyspeed, /goto speed\n");
    strcat(display, "JOB\t/createjob, /editjob, /destroyjob, /createjobcar\n");
    strcat(display, "WORKSHOP\t/createworkshop, /editworkshop, /destroyworkshop\n");
    strcat(display, "HOUSE\t/createhouse, /edithouse, /destroyhouse, /goto house\n");
    strcat(display, "LUMBER\t/lumbermenu, /nearestlumber, /gotolumber, /lumberhelp\n");
    strcat(display, "GATE\t/gatemenu, /nearestgate, /gotogate, /infogate, /gatehelp\n");
    strcat(display, "BUSINESS\t/createbiz, /editbiz, /destroybiz, /bizstate, /goto biz\n");
    strcat(display, "DEALERSHIP\t/createdealer, /editdealer, /destroydealer, /addcardealer\n");
    strcat(display, "ENTRANCE\t/createentrance, /editentrace, /destroyentrance, /goto entrance\n");
    strcat(display, "FACTION\t/createfaction, /editfaction, /destroyfaction, /createfactioncar\n");
    strcat(display, "OBJECT\t/createobject, /editobject, /destroyobject, /objectinfo\n");
    strcat(display, "APARTMENT\t/apart, /apartroom\n");
    strcat(display, "RENT\t/createrental, /editrental, /managerental, /deleterental\n");
    strcat(display, "PAYPHONE\t/payphone\n");
    strcat(display, "FARM\t/farm\n");
    strcat(display, "GYMOBJECT\t/gymobject\n");
    strcat(display, "OTHER\t/editcar, /destroyplant");
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST, "Dynamic Command", display, "Close", "");
    return 1;
}

CMD:cancel(playerid, params[]) {
    new option[24];
    if (sscanf(params, "s[24]", option))
        return SendSyntaxMessage(playerid, "/cancel [report/ask/taxi/mechanic]");

    if (!strcmp(option, "report", true)) {
        if(!Report_GetCount(playerid))
            return SendErrorMessage(playerid, "You don't have any active report.");

        Report_Clear(playerid);
        SendCustomMessage(playerid, "CANCEL", "You've been canceled your report.");
    } else if (!strcmp(option, "ask", true)) {
        if (!PlayerData[playerid][pAsk] || !Ask_GetCount(playerid))
            return SendErrorMessage(playerid, "You don't have any active ask.");

        PlayerData[playerid][pAsk] = false;
        PlayerData[playerid][pAskQ] = EOS;
        stop PlayerData[playerid][pAskTime];
        Ask_Clear(playerid);
        SendCustomMessage(playerid, "CANCEL", "You've been canceled your ask.");
    } else if (!strcmp(option, "taxi", true)) {
        if(!PlayerData[playerid][pTaxiCalled])
            return SendErrorMessage(playerid, "You're not requesting taxi service.");

        PlayerData[playerid][pTaxiCalled] = 0;
        SendCustomMessage(playerid, "CANCEL", "You've been canceled your taxi service.");
    } else if (!strcmp(option, "mechanic", true)) {
        if(!PlayerData[playerid][pMechanicCalled])
            return SendErrorMessage(playerid, "You're not requesting mechanic service.");

        PlayerData[playerid][pMechanicCalled] = 0;
        SendCustomMessage(playerid, "CANCEL", "You've been canceled your mechanic service.");
    } else SendSyntaxMessage(playerid, "/cancel [report/ask/taxi/mechanic]");
    return 1;
}

CMD:report(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/report [text]");

    if(Report_GetCount(playerid) > 0) return SendErrorMessage(playerid, "You already have an active reports!");
    if(PlayerData[playerid][pReportTime] >= gettime()) return SendErrorMessage(playerid, "You must wait %d minutes before sending another report.", PlayerData[playerid][pReportTime] - gettime());

    Dialog_Show(playerid, ConfirmReport, DIALOG_STYLE_MSGBOX, "Confirm Report", YELLOW_2"Laporan yang Anda buat adalah:\n"WHITE"\"%s\"\n\n"YELLOW_2"Mohon dibaca ketentuan report sebelum mengirim laporan Anda ke Staff:\n"WHITE"1. Dilarang bertanya melalui /report\n2. Jika ingin Report Refuse RP pastikan menunggu 30 menit\n3. Untuk kegiatan Fail RP harus memiliki bukti. Kirim di Discord\n4. Melaporkan player yang AFK cek terlebih dahulu pada /listafk\n5. Dilarang junk dan meminta kepada staff untuk hal keuntungan pribadi\n6. Dilarang junk untuk meminta respon Character Story, Unbanned, dsb", "Submit", "Cancel", params);
    SetPVarString(playerid, "reportText", params);
    return 1;
}

Dialog:ConfirmReport(playerid, response, listitem, inputtext[]) {
    if (response) {
        new reportid = -1, params[150];
        GetPVarString(playerid, "reportText", params, sizeof(params));

        if((reportid = Report_Add(playerid, params)) != -1)
        {
            SendClientMessageEx(playerid, X11_LIGHTBLUE, "YOUR REPORT: "YELLOW"%s", params);
            SendReportMessage(X11_TOMATO_1, "[Report: #%d] "COL_DEPARTMENT"%s (ID: %d) reported: %s", reportid, ReturnName2(playerid, 0), playerid, params);
            PlayerData[playerid][pReportTime] = gettime() + 5;
            DeletePVar(playerid, "reportText");
        }
        else SendErrorMessage(playerid, "The report list is full. Please wait for a while."), DeletePVar(playerid, "reportText");
    } else DeletePVar(playerid, "reportText");
    return 1;
}

CMD:reports(playerid, params[])
{
    if(!Report_Count()) return SendErrorMessage(playerid, "There are no one report active.");

    new
        dialog[900],
        text[128];

    format(dialog, sizeof(dialog),"ID\tReported\tReport\n");
    for (new i = 0; i != MAX_REPORTS; i ++) if(ReportData[i][rExists]) {
        strunpack(text, ReportData[i][rText]);

        if(strlen(text) > 32)
            format(dialog, sizeof(dialog), "%s%d\t%s (%d)\t%.32s ...\n", dialog, i, ReturnName(ReportData[i][rPlayer]), ReportData[i][rPlayer], text);
        else
            format(dialog, sizeof(dialog), "%s%d\t%s (%d)\t%s\n", dialog, i, ReturnName(ReportData[i][rPlayer]), ReportData[i][rPlayer], text);
    }
    if (AccountData[playerid][pAdmin]) Dialog_Show(playerid, DialogResult, DIALOG_STYLE_TABLIST_HEADERS,"Report List", dialog,"Next","Cancel");
    else Dialog_Show(playerid, DialogResult, DIALOG_STYLE_TABLIST_HEADERS,"Report List", dialog,"Details","Cancel");
    return 1;
}
CMD:asks(playerid, params[]) {
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!Ask_Count()) return SendErrorMessage(playerid, "There are no one ask active.");

    new
        dialog[900],
        text[128];

    format(dialog, sizeof(dialog),"ID\tIssuer\tQuestion\n");
    for (new i = 0; i != MAX_ASK; i ++) if(AskData[i][askExists]) {
        strunpack(text, AskData[i][askQuestion]);

        if(strlen(text) > 32)
            format(dialog, sizeof(dialog), "%s%d\t%s (%d)\t%.32s ...\n", dialog, i, ReturnName(AskData[i][askPlayer]), AskData[i][askPlayer], text);
        else
            format(dialog, sizeof(dialog), "%s%d\t%s (%d)\t%s\n", dialog, i, ReturnName(AskData[i][askPlayer]), AskData[i][askPlayer], text);
    }
    Dialog_Show(playerid, DialogAsks, DIALOG_STYLE_TABLIST_HEADERS,"Asks", dialog,"Next","Cancel");
    return 1;
}
CMD:checkpoint(playerid, params[])
{
    if(CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    
    SendClientMessageEx(playerid, X11_TOMATO_1, "Your REPORT point: %d", AccountData[playerid][pReportPoint]);
    return 1;
}
CMD:ar(playerid, params[])
{
    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(isnull(params)) return SendSyntaxMessage(playerid, "/ar [report id] (/reports for a list)");

    new
        reportid = strval(params);
        
    if((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
        return SendErrorMessage(playerid, "Invalid report ID. Reports list from 0 to %d.", MAX_REPORTS);

    SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s has accepted %s's report.", ReturnAdminName(playerid), ReturnName(ReportData[reportid][rPlayer], 0));
    SendClientMessageEx(ReportData[reportid][rPlayer], X11_LIGHTBLUE, "ACCEPT REPORT: "RED"%s "WHITE"accept your report.", ReturnAdminName(playerid));
    ++AccountData[playerid][pReportPoint];
    Report_Remove(reportid);
    return 1;
}

CMD:dr(playerid, params[])
{
    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    new reportid, msg[32];
    if(sscanf(params,"ds[32]", reportid, msg))
        return SendSyntaxMessage(playerid, "/dr [report id] [reason] (/reports for a list)");

    if((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
        return SendErrorMessage(playerid, "Invalid report ID. Reports list from 0 to %d.", MAX_REPORTS);

    SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s has denied %s's report.", ReturnAdminName(playerid), ReturnName(ReportData[reportid][rPlayer], 0));
    SendClientMessageEx(ReportData[reportid][rPlayer], X11_LIGHTBLUE, "DENY REPORT: "RED"%s "WHITE"accept your report: %s", ReturnAdminName(playerid), msg);

    Report_Remove(reportid);
    return 1;
}

CMD:spectate(playerid, params[])
{
    new userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!isnull(params) && !strcmp(params, "off", true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
            return SendErrorMessage(playerid, "You are not spectating any player.");

        SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

        PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
        PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

        PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;

        SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
        TogglePlayerSpectating(playerid, false);

        if(PlayerData[playerid][pOnDuty])  {
            SetPlayerSkinEx(playerid, PlayerData[playerid][pSkinFaction]);
        }

        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_spectate][1]);
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_spectate][0]);

        if(IsPlayerDuty(playerid)) RefreshFactionWeapon(playerid);
        else RefreshWeapon(playerid);

        return SendCustomMessage(playerid, "SPECTATE", "You are no longer in spectator mode.");
    }

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/spectate [playerid/PartOfName] - Type \"/spectate off\" to stop spectating.");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't spectate yourself.");
    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
        GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
        GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
        PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
    }

    PlayerData[playerid][pSpectator] = userid;
    TogglePlayerSpectating(playerid, 1);
    SetPlayerInterior(playerid, GetPlayerInterior(userid));
    SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));
    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
    GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

    if(IsPlayerInAnyVehicle(userid)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));
    else PlayerSpectatePlayer(playerid, userid);

    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_spectate][1]);
    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_spectate][0]);

    if(AccountData[playerid][pAdmin] < AccountData[userid][pAdmin])
        return SendCustomMessage(userid, "SPECTATE", ""YELLOW"%s"WHITE" is now "BLUE"spectating"WHITE" you!", ReturnName(playerid, 0));

    SendCustomMessage(playerid, "SPECTATE", "You are now spectating "YELLOW"%s (%d)", ReturnName(userid, 0), userid);
    return 1;
}
CMD:spec(playerid, params[])
    return cmd_spectate(playerid, params);

CMD:jail(playerid, params[])
{
    static
        userid,
        minutes,
        reason[64];


    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "uds[64]", userid, minutes, reason))
        return SendSyntaxMessage(playerid, "/jail [playerid/PartOfName] [minutes] [reason]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(minutes < 1 || minutes > 10000)
        return SendErrorMessage(playerid, "You can't jail a player for under 0 minutes or more than 10000 minutes for now.");


    new rand = random(sizeof(arrAdminJail));
    SetPlayerPosEx(userid, arrAdminJail[rand][0], arrAdminJail[rand][1], arrAdminJail[rand][2]+0.3, 5000);
    SetPlayerInterior(userid, 3);
    SetPlayerVirtualWorld(userid, 100);
    SetPlayerFacingAngle(userid, arrAdminJail[rand][3]);

    ClearAnimations(userid, 1);

    PlayerData[userid][pInjured] = 0;
    TextDrawHideForPlayer(userid, gServerTextdraws[0]);

    ResetPlayer(userid);
    ResetNameTag(userid);

    PlayerData[userid][pJailTime] = minutes * 60;
    PlayerData[userid][pPrisoned] = 0;
    format(PlayerData[userid][pJailedBy], 32, ReturnAdminName(playerid));
    format(PlayerData[userid][pJailReason], 64, reason);
    PlayerTextDrawShow(userid, PlayerTextdraws[userid][textdraw_prison]);

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was admin/helper jailed by %s for %d minutes.", ReturnName2(userid, 0), ReturnAdminName(playerid), minutes);
        SendClientMessageEx(i, X11_TOMATO_1, "Reason: %s", reason);
    }

    Log_Write("logs/jail_log.txt", "[%s] %s has jailed %s for %d minutes, reason: %s.", ReturnDate(), ReturnAdminName(playerid), ReturnName(userid, 0), minutes, reason);
    new query[255];
    format(query, sizeof(query), "INSERT INTO `wanrslog` (`ID`, `warnBy`, `warnReason`, `warnDate`, `warnType`) VALUES ('%d','%s','%s','%s','2')", PlayerData[userid][pID], ReturnAdminName(playerid), SQL_ReturnEscaped(reason), SQL_ReturnEscaped(ReturnDate()));
    mysql_tquery(g_iHandle, query);
    return 1;
}

CMD:release(playerid, params[])
{
    static
        userid,
        reason[32];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "us[32]", userid, reason))
        return SendSyntaxMessage(playerid, "/release [playerid/PartOfName] [reason]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!PlayerData[userid][pJailTime])
        return SendErrorMessage(playerid, "You can't release a player that's not in jail.");

    PlayerData[userid][pJailTime] = 0;
    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was released %s from admin/helper jail reason: %s.", ReturnAdminName(playerid), ReturnName(userid, 0), reason);
    }

    Log_Write("logs/jail_log.txt", "[%s] %s has released %s from jail.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:aslap(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/aslap [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    static
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(userid, x, y, z);
    SetPlayerPos(userid, x, y, z + 5);

    PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
    return 1;
}

CMD:kick(playerid, params[])
{
    static
        userid,
        reason[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "us[128]", userid, reason))
        return SendSyntaxMessage(playerid, "/kick [playerid/PartOfName] [reason]");

    if(userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was kicked by %s.", ReturnName2(userid, 0), ReturnAdminName(playerid));
        SendClientMessageEx(i, X11_TOMATO_1, "Reason: %s", reason);
    }
    Log_Write("logs/kick_log.txt", "[%s] %s has kicked %s for: %s", ReturnDate(), ReturnAdminName(playerid), ReturnName2(userid, 0), reason);

    new query[255];
    format(query, sizeof(query), "INSERT INTO `wanrslog` (`ID`, `warnBy`, `warnReason`, `warnDate`, `warnType`) VALUES ('%d','%s','%s','%s', '3')", PlayerData[userid][pID], ReturnAdminName(playerid), SQL_ReturnEscaped(reason), SQL_ReturnEscaped(ReturnDate()));
    mysql_tquery(g_iHandle, query);

    TerminateConnection(userid);
    KickEx(userid);
    return 1;
}

CMD:kickall(playerid, params[]) {
    if (CheckAdmin(playerid, 8))
        return PermissionError(playerid);

    foreach (new i : Player) {
        TerminateConnection(i);
        KickEx(i);
    }
    SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s has kicked all players.", ReturnAdminName(playerid));
    return 1;
}

CMD:mute(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/mute [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't mute yourself!");

    if(PlayerData[userid][pMuted])
        return SendErrorMessage(playerid, "The player you're attempting to mute is muted already.");

    PlayerData[userid][pMuted] = 1;

    SendAdminAction(playerid, "You have muted %s from using text and commands.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s has muted you from using text and commands.", ReturnAdminName(playerid));

    return 1;
}

CMD:unmute(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/unmute [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!PlayerData[userid][pMuted])
        return SendErrorMessage(playerid, "The player you're attempting to mute is not muted.");

    PlayerData[userid][pMuted] = 0;

    SendAdminAction(playerid, "You have unmuted %s from using text and commands.", ReturnName(userid, 0));
    SendAdminAction(userid, "You have been unmuted by %s.", ReturnAdminName(playerid));

    return 1;
}

CMD:freeze(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/freeze [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    PlayerData[playerid][pFreeze] = 1;

    TogglePlayerControllable(userid, 0);
    SendAdminAction(playerid, "You have frozen %s's movements.", ReturnName(userid, 0));
    return 1;
}

CMD:unfreeze(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/unfreeze [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    PlayerData[playerid][pFreeze] = 0;

    TogglePlayerControllable(userid, 1);
    SendAdminAction(playerid, "You have unfrozen %s's movements.", ReturnName(userid, 0));
    return 1;
}

CMD:revive(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/revive [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "You can't revive a player that's not injured.");

    if(IsPlayerDuty(userid)) RefreshFactionWeapon(userid);
    else RefreshWeapon(userid);

    ClearAnimations(userid, 1);

    PlayerData[userid][pInjured] = 0;
    SetPVarInt(userid, "GiveUptime", 0);
    SetPlayerHealth(userid, PlayerData[userid][pMaxHealth]);

    SetPlayerArmedWeapon(userid, 0);
    TextDrawHideForPlayer(userid, gServerTextdraws[0]);

    SendAdminAction(playerid, "You have revived %s's character.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s has revived your character.", ReturnName(playerid, 0));
    return 1;
}

CMD:forcehospital(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/forcehospital [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!PlayerData[userid][pHospitalTime])
        return SendErrorMessage(playerid, "You can't revive a player that's not injured.");

    PlayerData[userid][pHospitalTime] = 115;
    SendAdminAction(playerid, "You have force %s's character from hospital.", ReturnName(userid, 0));
    return 1;
}

CMD:respawn(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/respawn [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!IsPlayerSpawned(userid))
        return SendErrorMessage(playerid, "You can't respawn a player that's not spawned.");

    RespawnPlayer(userid);

    SendAdminAction(playerid, "You have respawned %s.", ReturnName(userid, 0));
    SendAdminAction(userid, "You have been respawned by %s.", ReturnName(playerid, 0));

    return 1;
}
CMD:modal(playerid, params[]) {
    if (PlayerData[playerid][pModalPertama] > 0)
        return SendErrorMessage(playerid, "You cannot use again this command!");

    PlayerData[playerid][pModalPertama] = 1;
    GiveMoney(playerid, 2000);
    SendCustomMessage(playerid, "STATERPACK", "You've been claimed the staterpack, and you got "GREEN"%s "WHITE"on your hand.", FormatNumber(2000));
    return 1;
}
// CMD:migraindong(playerid, params[])
// {
//     PlayerData[playerid][pMigrainRate] = 3;
// }
// CMD:feverdong(playerid, params[])
// {
//     PlayerData[playerid][pFever] = 1;
// }
CMD:sakitdong(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SetPlayerHunger(playerid, 5);
    SetPlayerEnergy(playerid, 5);
    return 1;
}
CMD:maxenergy(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    SetPlayerHunger(playerid, 100);
    SetPlayerEnergy(playerid, 100);
    return 1;
}

CMD:setskin(playerid, params[])
{
    static
        userid,
        skinid;

    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, skinid))
        return SendSyntaxMessage(playerid, "/setskin [playerid/PartOfName] [skin id]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(skinid < 0 || skinid > 311)
        return SendErrorMessage(playerid, "Invalid skin ID. Skins range from 0 to 311.");

    SetPlayerSkinEx(userid, skinid);

    SendCustomMessage(playerid, "SKIN", "You have set %s's skin to ID: %d.", ReturnName(userid, 0), skinid);
    SendCustomMessage(userid, "SKIN", "%s has set your skin to ID: %d.", ReturnName(playerid, 0), skinid);
    return 1;
}

CMD:setfskin(playerid, params[])
{
    static
        userid,
        skinid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, skinid))
        return SendSyntaxMessage(playerid, "/setfskin [playerid/PartOfName] [skin id]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if (!IsPlayerDuty(playerid))
        return SendErrorMessage(playerid, "That player must on duty as faction.");

    if(skinid < 0 || skinid > 311)
        return SendErrorMessage(playerid, "Invalid skin ID. Skins range from 0 to 311.");

    PlayerData[playerid][pSkinFaction] = skinid;
    SetPlayerSkinEx(playerid, PlayerData[playerid][pSkinFaction], 1);

    SendCustomMessage(playerid, "FSKIN", "You have set %s's faction skin to ID: %d.", ReturnName(userid, 0), skinid);
    SendCustomMessage(userid, "FSKIN", "%s has set your faction skin to ID: %d.", ReturnName(playerid, 0), skinid);
    return 1;
}

CMD:checknumber(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
        
    if(isnull(params) || strlen(params) > 24)
        return SendSyntaxMessage(playerid, "/checknumber [phone number]");

    static
        query[225];

    format(query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `Phone` = '%d'", strval(params));
    mysql_tquery(g_iHandle, query, "OnResolveNumber","dd",playerid, strval(params));
    return 1;
}

CMD:checkmask(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 24)
        return SendSyntaxMessage(playerid, "/checkmask [mask number]");

    static
        query[225];

    format(query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `MaskID` = '%d'", strval(params));
    mysql_tquery(g_iHandle, query, "OnResolveMask","dd",playerid, strval(params));
    return 1;
}

CMD:ostats(playerid, params[])
{
    new query[128],
        Cache: checkaccount;

    if(AccountData[playerid][pAdmin] < 1)
        return NotAllowed(playerid);

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ostats [offline player name]");

    if(strlen(params) > 24)
        return SendErrorMessage(playerid, "Yor're input name is too long.");

    format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Character`='%s' ORDER BY `ID` ASC", SQL_ReturnEscaped(params));
    checkaccount = mysql_query(g_iHandle, query);

    new rows = cache_num_rows();

    if(rows)
    {
        new gender,
            money,
            bank,
            rekening,
            faction,
            job,
            admin,
            helper,
            scoremath,
            level,
            playinghours,
            vw,
            interior,
            registerdate,
            warnings,
            s,m,h, username[24],origin[32],string[512],header[128],account[10]
        ;

        cache_get_value_int(0, "Gender", gender);
        cache_get_value_int(0, "Money", money);
        cache_get_value_int(0, "BankMoney", bank);
        cache_get_value_int(0, "Rekening", rekening);
        cache_get_value_int(0, "Faction", faction);
        cache_get_value_int(0, "Job", job);
        cache_get_value_int(0, "Admin", admin);
        cache_get_value_int(0, "Tester", helper);
        cache_get_value_int(0, "pScore", level);
        cache_get_value_int(0, "PlayingHours", playinghours);
        cache_get_value_int(0, "World", vw);
        cache_get_value_int(0, "Interior", interior);
        cache_get_value_int(0, "RegisterDate", registerdate);
        cache_get_value_int(0, "Warnings", warnings);

        scoremath = ((level)*4);

        //string output
        cache_get_value(0, "Played", header, 64);
        sscanf(header, "p<|>ddd", s, m, h);

        cache_get_value(0, "Origin", origin, 64);
        cache_get_value(0, "Username", username, 64);
                
        if(admin > 0) account = "Admin";
        else if(helper > 0) account = "Helper";
        else account = "Player";
        
        format(header,sizeof(header),""YELLOW"%s"WHITE" ("COL_LIGHTBLUE"%s"WHITE")", params,ReturnDate());
        format(string,sizeof(string),""COL_LIGHTRED"In Character"WHITE"\n");
        format(string,sizeof(string),"%sGender: [%s] | Origin: [%s] | Money: [%s] | Bank: [%s] | Bank Account: [%d]\n", string, (gender == 2) ? ("Female") : ("Male"), origin, FormatNumber(money), FormatNumber(bank), rekening);
        format(string,sizeof(string),"%sJob: [%s] | Member Faction: [%s]\n\n", string, (!job) ? ("Unemployed") : (Job_GetName(job)),(faction == -1) ? ("Civilian") : (GetInitials(Faction_GetName(faction))));
        format(string,sizeof(string),"%s"COL_LIGHTRED"Out of Character"WHITE"\n",string);
        format(string,sizeof(string),"%sAccount: [%s - %s] | Level score: [%d/%d]\n", string, account, username, playinghours,scoremath);
        format(string,sizeof(string),"%sAdmin: [%s] | Tester: [%s] | Time Played: [%d hour(s) %d minute(s) %02d second(s)]\n", string, (admin) ? ("Yes") : ("No"), (helper) ? ("Yes") : ("No"), h,m,s);
        format(string,sizeof(string),"%sInterior: [%d] | Virtual World: [%d] | Warnings: [%d/20] | Register Date: [%s]", string, interior, vw, warnings, ConvertTimestamp(Time:registerdate));

        Dialog_Show(playerid, ShowStats, DIALOG_STYLE_MSGBOX, header, string, "Close", "");

        SendServerMessage(playerid, "Now you showing offline stats of %s.", params);
    }
    else
        SendErrorMessage(playerid, "Username is not found.");

    cache_delete(checkaccount);
    return 1;
}

CMD:stats(playerid, params[])
{
    if (PlayerData[playerid][pLiveMode]) {
        ShowStatsForPlayer(playerid, playerid, 1);
    } else {
        ShowStatsForPlayer(playerid, playerid);
    }
    return 1;
}

Player_Item(playerid, targetid)
{
    new str[1024],
        name[64];

    format(str, sizeof(str), "Item\tAmount\n");
    strcat(str, sprintf("Money\t%s\n", FormatNumber(GetMoney(targetid))));

    //Inside Inventory
    for (new i = 0; i < PlayerData[targetid][pCapacity]; i ++) if(InventoryData[targetid][i][invExists]) {
        strunpack(name, InventoryData[targetid][i][invItem]);
        strcat(str, sprintf("%s\t%d\n", name, InventoryData[targetid][i][invQuantity]));
    }
    for (new i = 1; i != MAX_WEAPON_SLOT; i++) if(PlayerGuns[targetid][i][weapon_id]) {
        strcat(str, sprintf(RED"[Weapon] %s [durability:%s]\t[ammo:%s]\n", ReturnWeaponName(PlayerGuns[targetid][i][weapon_id]), (i == 1) ? (" ") : sprintf("%d", PlayerGuns[targetid][i][weapon_durability]), (i == 1) ? (" ") :  (sprintf("%d", PlayerGuns[targetid][i][weapon_ammo]))));
    }
    for(new i = 0; i < MAX_FISH; i++) {
        if(FishWeight[playerid][i] > 0.0)
            strcat(str, sprintf("%s\t%.3f lbs\n", FishName[targetid][i], FishWeight[targetid][i]));
    } 
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, sprintf("%s item's", ReturnName(targetid, 0)), str, "Close", "");
    return 1;
}

CMD:checkitem(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new
        targetid;

    if(sscanf(params, "u", targetid)) return SendSyntaxMessage(playerid, "/checkitem [playerid/PartOfName]");

    Player_Item(playerid, targetid);
    return 1;
}

/*CMD:itemcheck(playerid, params[])
{
    CheckAdmin(playerid, 1);
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Item Information", ""WHITE"Item Name: "YELLOW"%s\n"WHITE"Item Amount: "YELLOW"%d\n"WHITE"Dropped By: "YELLOW"%s\n"WHITE"Int: "YELLOW"%d\n"WHITE"Vw: "YELLOW"%d\n"WHITE"Weapon: "RED"%s\n"WHITE"Ammo:"RED" %d", "Close", "", 
            DroppedItems[i][droppedItem], 
            DroppedItems[i][droppedQuantity], 
            DroppedItems[i][droppedPlayer], 
            DroppedItems[i][droppedInt], 
            DroppedItems[i][droppedWorld], 
            DroppedItems[i][droppedWeaponId] != 0 ? ReturnWeaponName(DroppedItems[i][droppedWeaponId]) : ("-"), 
            DroppedItems[i][droppedAmmo]
        );
        return 1;
    }
    SendErrorMessage(playerid, "There is no item in near you.");
    return 1;
}*/

CMD:check(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/check [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    if(!PlayerData[userid][pLogged]) return SendErrorMessage(playerid, "That player is not logged in yet.");

    if (PlayerData[playerid][pLiveMode]) ShowStatsForPlayer(playerid, userid, 1);
    else ShowStatsForPlayer(playerid, userid);
    return 1;
}

CMD:shooter(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/shooter [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    new str[128*10];

    for(new i = (10-1), end = 0; end <= i; --i) {
        format(str, sizeof(str), "%s%s\n", str, damageList[userid][i]);
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "10 Latest damage", str, "Close", "");
    }
    return 1;
}

CMD:resetshooter(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/shooter [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");

    for(new i = 0; i < 10; i++) {
        damageList[userid][i] = "None";
    }
    SendServerMessage(playerid, "Successfull reset shooter list for %s.", ReturnName(userid));
    return 1;
}

CMD:gotoplayerscar(playerid, params[])
{
    new 
        userid,
        count,
        Float:fX, 
        Float:fY, 
        Float:fZ,
        string[1024],
        location[24];

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params,"u", userid))
        return SendSyntaxMessage(playerid, "/gotoplayerscar [playerid/part of name]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Invalid player id.");

    SendServerMessage(playerid, "Vehicles registered to %s (ID: %d):", ReturnName2(userid, 0), userid);

    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(userid, i))
    {
        GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);

        if(IsVehicleOnGarage(i)) format(location, 24, "Garage");
        else if(VehicleData[i][cInsideInsurance]) format(location, 24, "Insurance Center");
        else if(VehicleData[i][cImpounded] != -1) format(location, 24, "Impound Center");
        else format(location, 24, GetLocation(fX, fY, fZ));

        strcat(string, sprintf("ID: %s  %s ("GREEN"%s"WHITE") "YELLOW"%d"WHITE"| insurance\n",(!IsValidVehicle(VehicleData[i][cVehicle])) ? ("-") : (sprintf("%d", VehicleData[i][cVehicle])), GetVehicleNameByModel(VehicleData[i][cModel]), location, VehicleData[i][cInsurance]));
        ListedVehicles[playerid][count++] = i;
    }
    Dialog_Show(playerid, GotoCars, DIALOG_STYLE_LIST, "Vehicle List", string, "Goto", "Close");
    return 1;
}

CMD:goto(playerid, params[])
{
    static
        id,
            type[24],
        string[64];

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "u", id))
    {
        SendSyntaxMessage(playerid, "/goto [player or name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" spawn, prison, house, business, entrance, job, hospital, interior, billboard, actor, mechanic");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" jail, ls, lv, sf, atm, speed, crate, workshop, garage, insurance, blackmarket, object");
        return 1;
    }
    else if(id == INVALID_PLAYER_ID)
    {
        {
            if(sscanf(params, "s[24]S()[64]", type, string))
            {
                SendSyntaxMessage(playerid, "/goto [player or name]");
                SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" spawn, prison, house, business, entrance, job, interior, billboard, actor, garbage");
                SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" jail, ls, lv, sf, atm, speed, crate, workshop, garage, insurance, blackmarket");
                return 1;
            }

            if(!strcmp(type, "spawn", true)) {
                SetDefaultSpawn(playerid);
                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke spawn awal.");
            }
            else if(!strcmp(type,"ls", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),1482.0356,-1724.5726,13.5469);
                }
                else {
                    SetPlayerPos(playerid,1482.0356,-1724.5726,13.5469);
                }
                SetPlayerFacingAngle(playerid,179.4088);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke los santos.");
            }
            else if(!strcmp(type,"sf", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),-1425.8307,-292.4445,14.1484);
                }
                else {
                    SetPlayerPos(playerid,-1425.8307,-292.4445,14.1484);
                }
                SetPlayerFacingAngle(playerid,179.4088);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke san fierro.");
            }
            else if(!strcmp(type,"lv", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),1686.0118,1448.9471,10.7695);
                }
                else {
                    SetPlayerPos(playerid,1686.0118,1448.9471,10.7695);
                }
                SetPlayerFacingAngle(playerid,179.4088);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke las venturas.");
            }
            else if(!strcmp(type,"insurance", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),1111.6385,-1795.5822,16.5938);
                }
                else {
                    SetPlayerPos(playerid,1111.6385,-1795.5822,16.5938);
                }
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke insurance center.");
            }
            else if(!strcmp(type,"mechanic", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),2427.5293,-2089.8679,13.5469);
                }
                else {
                    SetPlayerPos(playerid,2427.5293,-2089.8679,13.5469);
                }
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke mechanic center.");
            }
            else if(!strcmp(type,"blackmarket", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),-2172.4424,680.0792,55.1613);
                }
                else {
                    SetPlayerPos(playerid, 308.21, 1121.27, 1083.88);
                }
                SetPlayerInterior(playerid, 5);
                SetPlayerVirtualWorld(playerid, 7108);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke blackmarket.");
            }
            else if(!strcmp(type,"hospital", true)) {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid),1188.7565,-1323.5248,13.5668);
                }
                else {
                    SetPlayerPos(playerid,1188.7565,-1323.5248,13.5668);
                }
                SetPlayerFacingAngle(playerid,255.7494);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke hospital.");
            }
            else if(!strcmp(type, "jail", true)) {
                SetPlayerPosEx(playerid,-3426.8687,1569.8800,98.9130, 5000);
                SetPlayerVirtualWorld(playerid, 100);
                SetPlayerInterior(playerid, 3);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke jail.");
            }
            else if(!strcmp(type, "prison", true))
            {
                SetPlayerPos(playerid, 1807.03, -1579.94, 13.48);
                SetPlayerFacingAngle(playerid, 84.59);

                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);

                return SendServerMessage(playerid, "Anda telah melakukan teleportasi ke prison facility.");
            }
            else if (!strcmp(type, "object")) {
                if (sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto object [object id]");

                if (!Iter_Contains(Obj, id))
                    return SendErrorMessage(playerid, "Invalid object id!");

                SetPlayerPos(playerid, ObjData[id][oPos][0], ObjData[id][oPos][1], ObjData[id][oPos][2]+2);
                SetPlayerVirtualWorld(playerid, ObjData[id][oVw]);
                SetPlayerInterior(playerid, ObjData[id][oInt]);
                SendCustomMessage(playerid, "TELE", "You've been teleported object id "YELLOW"%d", id);
                return 1;
            }
            // else if(!strcmp(type, "billboard", true))
            // {
            //     if(sscanf(string, "d", id))
            //         return SendSyntaxMessage(playerid, "/goto billboard [billboard ID]");

            //     if((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
            //         return SendErrorMessage(playerid, "You have specified an invalid billboard ID.");

            //     SetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);
            //     SendServerMessage(playerid, "You have teleported to billboard ID: %d.", id);
            //     return 1;
            // }
            else if(!strcmp(type, "crate", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto crate [crate ID]");

                if((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
                    return SendErrorMessage(playerid, "You have specified an invalid crate ID.");

                SetPlayerPos(playerid, CrateData[id][cratePos][0], CrateData[id][cratePos][1], CrateData[id][cratePos][2]);
                SendServerMessage(playerid, "You have teleported to crate ID: %d.", id);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                return 1;
            }
            else if(!strcmp(type, "garage", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto garage [garage ID]");

                if((id < 0 || id >= MAX_GARAGE) || !GarageData[id][garageExists])
                    return SendErrorMessage(playerid, "You have specified an invalid garage ID.");

                SetPlayerPos(playerid, GarageData[id][garageLoc][0], GarageData[id][garageLoc][1], GarageData[id][garageLoc][2]);
                SendServerMessage(playerid, "You have teleported to garage ID: %d.", id);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                return 1;
            }
            else if(!strcmp(type, "dealer", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto dealer [dealer ID]");

                if((id < 0 || id >= MAX_DEALER) || !DealershipData[id][dExists])
                    return SendErrorMessage(playerid, "You have specified an invalid dealer ID.");

                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid, DealershipData[id][dPos][0], DealershipData[id][dPos][1], DealershipData[id][dPos][2]);
                SendServerMessage(playerid, "You have teleported to dealership ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "actor", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto actor [actor ID]");

                if(!Iter_Contains(Actors, id))
                    return SendErrorMessage(playerid, "You have specified an invalid actor ID.");

                SetPlayerPos(playerid, ActorData[id][actorPos][0], ActorData[id][actorPos][1], ActorData[id][actorPos][2]);
                SetPlayerInterior(playerid, ActorData[id][actorInterior]);

                SetPlayerVirtualWorld(playerid, ActorData[id][actorVirtualWorld]);
                SendServerMessage(playerid, "You have teleported to actor ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "house", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto house [house ID]");

                if(!Iter_Contains(Houses, id))
                    return SendErrorMessage(playerid, "You have specified an invalid house ID.");

                SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
                SetPlayerInterior(playerid, HouseData[id][houseExterior]);

                SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
                SendServerMessage(playerid, "You have teleported to house ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "business", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto business [business ID]");

                if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
                    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

                SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
                SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

                SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
                SendServerMessage(playerid, "You have teleported to business ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "entrance", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto entrance [entrance ID]");

                if((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
                    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

                SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
                SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

                SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
                SendServerMessage(playerid, "You have teleported to entrance ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "job", true))
            {
                if(sscanf(string, "d", id)) return SendSyntaxMessage(playerid, "/goto job [job ID pickup]");

                if((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
                    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

                SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
                SetPlayerInterior(playerid, JobData[id][jobInterior]);

                SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
                SendServerMessage(playerid, "You have teleported to job PICKUP ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "workshop", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto workshop [workshop ID]");

                if((id < 0 || id >= MAX_WORKSHOP) || !Iter_Contains(Workshop,id))
                    return SendErrorMessage(playerid, "You have specified an invalid workshop ID.");

                SetPlayerPos(playerid, WorkshopData[id][wPos][0], WorkshopData[id][wPos][1], WorkshopData[id][wPos][2]);
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SendServerMessage(playerid, "You have teleported to workshop ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "garbage", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto garbage [garbage ID]");

                if((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
                    return SendErrorMessage(playerid, "You have specified an invalid garbage ID.");

                SetPlayerPos(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2]);
                SetPlayerInterior(playerid, GarbageData[id][garbageInterior]);
                SetPlayerVirtualWorld(playerid, GarbageData[id][garbageWorld]);
                SendServerMessage(playerid, "You have teleported to garbage ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "atm", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto atm [atm ID]");

                if((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
                    return SendErrorMessage(playerid, "You have specified an invalid atm ID.");

                SetPlayerPos(playerid, ATMData[id][atmPos][0] - (2.5 * floatsin(-ATMData[id][atmPos][3], degrees)), ATMData[id][atmPos][1] - (2.5 * floatcos(-ATMData[id][atmPos][3], degrees)), ATMData[id][atmPos][2]);
                SetPlayerInterior(playerid, ATMData[id][atmInterior]);

                SetPlayerVirtualWorld(playerid, ATMData[id][atmWorld]);
                SendServerMessage(playerid, "You have teleported to atm ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "speed", true))
            {
                if(sscanf(string, "d", id))
                    return SendSyntaxMessage(playerid, "/goto speed [speed ID]");

                if((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
                    return SendErrorMessage(playerid, "You have specified an invalid speed ID.");

                SetPlayerPos(playerid, SpeedData[id][speedPos][0] - (2.5 * floatsin(-SpeedData[id][speedPos][3], degrees)), SpeedData[id][speedPos][1] - (2.5 * floatcos(-SpeedData[id][speedPos][3], degrees)), SpeedData[id][speedPos][2]);
                SetPlayerInterior(playerid, 0);

                SetPlayerVirtualWorld(playerid, 0);
                SendServerMessage(playerid, "You have teleported to speed ID: %d.", id);
                return 1;
            }
            else if(!strcmp(type, "interior", true))
            {
                static
                    str[1536];

                str[0] = '\0';

                for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
                    strcat(str, g_arrInteriorData[i][e_InteriorName]);
                    strcat(str, "\n");
                }
                Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Teleport: Interior List", str, "Select", "Cancel");
                return 1;
            }
            else if(!strcmp(type, "houseint", true))
            {
                new str[255];
                for(new i; i < sizeof(houseArray); i++) {
                    format(str, sizeof(str), "%sHouse int %d\n", str,i);
                }
                Dialog_Show(playerid, FurnitureHouse, DIALOG_STYLE_LIST, "House Interior", str, "Teleport", "Close");

            }
            else return SendErrorMessage(playerid, "You have specified an invalid player.");
        }
    }

    if(!IsPlayerSpawned(id))
        return SendErrorMessage(playerid, "You can't teleport to a player that's not spawned.");

    SendPlayerToPlayer(playerid, id);
    SendCustomMessage(id, "TELE",""RED"%s "WHITE"have been "YELLOW"teleported"WHITE" to you!", ReturnName(playerid, 0));
    SendCustomMessage(playerid, "TELE",""WHITE"You have been teleported to "RED"%s", ReturnName(id, 0));
    return 1;
}

CMD:send(playerid, params[])
{
    static
        userid,
        type[24];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "us[32]", userid, type))
    {
        SendSyntaxMessage(playerid, "/send [player] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" spawn, prison, ls, lv, sf");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!strcmp(type, "spawn", true))
    {
        SetDefaultSpawn(userid);
    }
    else if(!strcmp(type, "prison", true))
    {
        SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
        SetPlayerFacingAngle(playerid, 180.0000);

        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
    }
    else if(!strcmp(type,"ls")) {
        if(GetPlayerState(userid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(userid),1482.0356,-1724.5726,13.5469);
        }
        else {
            SetPlayerPos(userid,1482.0356,-1724.5726,13.5469);
        }
        SetPlayerFacingAngle(userid,179.4088);
        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);
    }
    else if(!strcmp(type,"sf")) {
        if(GetPlayerState(userid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(userid),-1425.8307,-292.4445,14.1484);
        }
        else {
            SetPlayerPos(userid,-1425.8307,-292.4445,14.1484);
        }
        SetPlayerFacingAngle(userid,179.4088);
        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);
    }
    else if(!strcmp(type,"lv")) {
        if(GetPlayerState(userid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(userid),1686.0118,1448.9471,10.7695);
        }
        else {
            SetPlayerPos(userid,1686.0118,1448.9471,10.7695);
        }
        SetPlayerFacingAngle(userid,179.4088);
        SetPlayerInterior(userid, 0);
        SetPlayerVirtualWorld(userid, 0);
    }
    SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s have teleported %s to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), type);
    return 1;
}

CMD:ogethere(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);


    static name[MAX_PLAYER_NAME];
    if(sscanf(params, "s[24]", name)) return SendSyntaxMessage(playerid, "/ogethere [username]");
    mysql_tquery(g_iHandle, sprintf("SELECT `Character` FROM `characters` WHERE `Character`='%s'", name), "OfflineBring", "ds", playerid, name);
    return 1;
}

Function:OfflineBring(playerid, name[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "Username does'nt exists.");

    static
        Float:x,Float:y,Float:z;

    GetPlayerPos(playerid, x, y, z);

    mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `PosX`='%.4f', `PosY`='%.4f', `PosZ`='%.4f' WHERE `Character`='%s'", x, y, z, name));    
    return SendServerMessage(playerid, "Successfull offline bring %s to you.", name);
}

CMD:gethere(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);
    if(sscanf(params, "u", userid))return SendSyntaxMessage(playerid, "/gethere [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID)return SendErrorMessage(playerid, "You have specified an invalid player.");
    if(!IsPlayerSpawned(userid))return SendErrorMessage(playerid, "You can't teleport a player that's not spawned.");

    SendPlayerToPlayer(userid, playerid);
    SendCustomMessage(userid, "TELEPORT", "You have been teleported by "RED"%s", ReturnName(playerid));
    SendServerMessage(playerid, "You have teleported "RED"%s "WHITE"to you.", ReturnName(userid, 0));
    return 1;
}

CMD:inventory(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || IsPlayerInEvent(playerid))
        return SendErrorMessage(playerid, "You can't open your inventory right now.");

    OpenInventory(playerid);
    return 1;
}

CMD:setint(playerid, params[])
{
    static
        userid,
            interior;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, interior))
        return SendSyntaxMessage(playerid, "/setinterior [playerid/PartOfName] [interior]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SetPlayerInterior(userid, interior);
    PlayerData[userid][pInterior] = interior;

    SendServerMessage(playerid, "You have set %s's interior to %d.", ReturnName(userid, 0), interior);
    return 1;
}

CMD:setvw(playerid, params[])
{
    static
        userid,
            world;

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, world))
        return SendSyntaxMessage(playerid, "/setvw [playerid/PartOfName] [world]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SetPlayerVirtualWorld(userid, world);
    PlayerData[userid][pWorld] = world;

    SendServerMessage(playerid, "You have set %s's virtual world to %d.", ReturnName(userid, 0), world);
    return 1;
}

CMD:apm(playerid, params[])
{
    static
        userid,
            text[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "us[128]", userid, text))
        return SendSyntaxMessage(playerid, "/apm [playerid/PartOfName] [message]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    SendClientMessageEx(userid, X11_TOMATO_1, "PM from "RED"Admin: %s", text);
    SendTesterMessage(X11_TOMATO_1, "(!) "YELLOW"%s "WHITE"PMED to "RED"%s"WHITE"(%d) for: "YELLOW"%s", ReturnAdminName(playerid), ReturnName2(userid,0), userid, text);
    return 1;
}

CMD:sendto(playerid, params[])
{
    static
        userid,
            targetid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "uu", userid, targetid))
        return SendSyntaxMessage(playerid, "/sendto [playerid/PartOfName] [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || targetid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "The specified user(s) are not connected.");

    SendPlayerToPlayer(userid, targetid);

    SendServerMessage(playerid, "You have teleported "RED"%s"WHITE" to "RED"%s.", ReturnName(userid, 0), ReturnName(targetid));
    SendServerMessage(userid, ""RED"%s"WHITE" has teleported you to "RED"%s.", ReturnName(playerid, 0), ReturnName(targetid));
    return 1;
}

CMD:togooc(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(!g_StatusOOC)
    {
        SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s has disabled global OOC chat.", ReturnName(playerid, 0));
        g_StatusOOC = true;
    }
    else
    {
        SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s has enabled global OOC chat.", ReturnName(playerid, 0));
        g_StatusOOC = false;
    }
    return 1;
}

CMD:togoocns(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!GetGVarInt("ToggleNS", GLOBAL_VARTYPE_INT))
    {
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has disable newbie school OOC chat.", ReturnName(playerid, 0));
        SetGVarInt("ToggleNS", true, GLOBAL_VARTYPE_INT);
    }
    else
    {
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has enable newbie school OOC chat.", ReturnName(playerid, 0));
        SetGVarInt("ToggleNS", false, GLOBAL_VARTYPE_INT);
    }
    return 1;
}

CMD:sethp(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "uf", userid, amount))
        return SendSyntaxMessage(playerid, "/sethp [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(amount > 150 || amount < 0)
        return SendErrorMessage(playerid, "Amount of sethp must between 0 - 150");

    SetPlayerHealth(userid, amount);
    SendServerMessage(playerid, "You have set %s's health to %.2f.", ReturnName(userid, 0), amount);
    return 1;
}

CMD:setarmor(playerid, params[])
{
    static
        userid,
        Float:amount;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "uf", userid, amount))
        return SendSyntaxMessage(playerid, "/setarmor [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(amount > 100 || amount < 0)
        return SendErrorMessage(playerid, "Amount of set armor must between 0 - 100");

    SetPlayerArmour(userid, amount);
    SendServerMessage(playerid, "You have set %s's armor to %.2f.", ReturnName(userid, 0), amount);
    return 1;
}

/*CMD:arepairall(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    for(new i, j = GetVehiclePoolSize(); i <= j; i++) if(IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID) {
        RepairVehicle(i);
    }
    SendTesterMessage(X11_TOMATO_1, "AdmWarn: %s repaired all vehicle.", NormalName(playerid));
    return 1;
}*/

CMD:fixveh(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(vehicleid > 0 && isnull(params))
    {
        RepairVeh(vehicleid);
        SendServerMessage(playerid, "You have repaired your current vehicle.");
    }
    else
    {
        if(sscanf(params, "d", vehicleid))
            return SendSyntaxMessage(playerid, "/fixveh [vehicle ID]");

        else if(!IsValidVehicle(vehicleid))
            return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

        RepairVeh(vehicleid);
        SendServerMessage(playerid, "You have repaired vehicle ID: %d.", vehicleid);
    }
    return 1;
}

CMD:lowlevellist(playerid) {
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    
    new dialog[512], count = 0;
    strcat(dialog, "ID\tName\tLevel\n");
    foreach (new i : Player) if (SQL_IsCharacterLogged(i) && (GetPlayerScore(i) == 1 || GetPlayerScore(i) == 2)) {
        strcat(dialog, sprintf("%d\t%s\t%d\n", i, ReturnName(i), GetPlayerScore(i)));
        count++;
    }
    if (count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Player Low Level List", dialog, "Close", "");
    else SendErrorMessage(playerid, "There are no player below level 3");
    return 1;
}

CMD:lt(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        Float:x,
        Float:y,
        Float:z,
        Float:subparam;
        
    if (isnull(params)) {    
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x + 1, y, z);
    } else {
        if (!sscanf(params, "f", subparam)) {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerPos(playerid, x + subparam, y, z);
            return 1;
        }
    }
    return 1;
}
CMD:ft(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        Float:x,
        Float:y,
        Float:z,
        Float:subparam;
        
    if (isnull(params)) {
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x + 1, y + 1, z);
    } else {
        if (!sscanf(params, "f", subparam)) {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerPos(playerid, x + subparam, y + subparam, z);
            return 1;
        }
    }
    return 1;
}

CMD:up(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    static
        Float:x,
        Float:y,
        Float:z,
        Float:subparam;

    if (isnull(params)) {
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1);
    } else {
        if (!sscanf(params, "f", subparam)) {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerPos(playerid, x, y, z + subparam);
            return 1;
        }
    }
    return 1;
}

CMD:dn(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);
    static
        Float:x,
        Float:y,
        Float:z,
        Float:subparam;

    if (isnull(params)) {
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z - 1);
    } else {
        if (!sscanf(params, "f", subparam)) {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerPos(playerid, x, y, z - subparam);
            return 1;
        }
    }
    return 1;
}

CMD:gotocar(playerid, params[])
{
    new vehicleid;

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "d", vehicleid))
        return SendSyntaxMessage(playerid, "/gotocar [veh]");

    if(vehicleid < 1 || vehicleid > GetVehiclePoolSize() || !IsValidVehicle(vehicleid))
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    static
        Float:x,
        Float:y,
        Float:z;

    GetVehiclePos(vehicleid, x, y, z);
    SetPlayerPos(playerid, x, y - 2, z + 2);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vehicleid));
    return 1;
}

CMD:getcar(playerid, params[])
{
    new vehicleid;

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "d", vehicleid))
        return SendSyntaxMessage(playerid, "/getcar [veh]");

    if(vehicleid < 1 || vehicleid > GetVehiclePoolSize() || !IsValidVehicle(vehicleid))
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    static
        Float:x,
        Float:y,
        Float:z
    ;

    GetPlayerPos(playerid, z, z, z);

    GetXYInFrontOfPlayer(playerid, x, y, 3.0);
    SetVehiclePos(vehicleid, x, y, z);

    SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

    if(IsVehicleHandBrake(vehicleid)) {
        static
            seatid
        ;
        seatid = GetAvailableSeat(vehicleid, 0);

        if(seatid == -1)
            return SendErrorMessage(playerid, "There are no seats left to enter.");

        PutPlayerInVehicleEx(playerid, vehicleid, seatid);
    }
    return 1;
}

CMD:entercar(playerid, params[])
{
    new vehicleid, seatid;

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "d", vehicleid))
        return SendSyntaxMessage(playerid, "/entercar [veh]");

    if(vehicleid < 1 || vehicleid > GetVehiclePoolSize() || !IsValidVehicle(vehicleid))
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    seatid = GetAvailableSeat(vehicleid, 0);

    if(seatid == -1)
        return SendErrorMessage(playerid, "There are no seats left to enter.");

    PutPlayerInVehicleEx(playerid, vehicleid, seatid);
    return 1;
}


CMD:respawnfactioncars(playerid, params[])
{
    static
        faction;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "d", faction)) return SendErrorMessage(playerid, "/respawnfactioncars [factionid (/factions)]");
    if(!FactionData[faction][factionExists]) return SendErrorMessage(playerid, "This faction does'nt exists.");

    static 
        count = 0;

    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cFaction] == FactionData[faction][factionID] && IsValidVehicle(VehicleData[i][cVehicle]) && GetVehicleDriver(VehicleData[i][cVehicle]) == INVALID_PLAYER_ID) {
        RespawnVehicle(VehicleData[i][cVehicle]);
        count++;
    }

    if(!count) return SendErrorMessage(playerid, "There are no vehicles to respawn.");
    SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,1), faction);
    SendFactionMessage(faction, COLOR_CLIENT, "FACTIONCARS: "WHITE"Administrator "RED"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnAdminName(playerid));
    return 1;
}

CMD:respawncar(playerid, params[])
{
    new vehicleid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "d", vehicleid)) return SendSyntaxMessage(playerid, "/respawncar [veh]");
    if(vehicleid < 1 || vehicleid > GetVehiclePoolSize() || !IsValidVehicle(vehicleid)) return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");
    RespawnVehicle(vehicleid);
    SendServerMessage(playerid, "You have respawned vehicle ID: %d.", vehicleid);
    return 1;
}

CMD:respawncars(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    new count;

    for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
    {
        if(IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
        {
            RespawnVehicle(i);
            count++;
        }
    }
    if(!count)
        return SendErrorMessage(playerid, "There are no vehicles to respawn.");

    SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle", ReturnName(playerid,1));
    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s now respawned all unused vehicle", ReturnName(playerid,1));
    }
    return 1;
}

CMD:respawnnear(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    new Float:near, count;
    if(sscanf(params, "F(50.0)", near))
        return SendSyntaxMessage(playerid, "/respawnnear [radius]");

    for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++)
    {
        static
            Float:fX,
            Float:fY,
            Float:fZ;

        if(IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
        {
            GetVehiclePos(i, fX, fY, fZ);

            if(IsPlayerInRangeOfPoint(playerid, near, fX, fY, fZ))
            {
                RespawnVehicle(i);
                count++;
            }
        }
    }
    if(!count)
        return SendErrorMessage(playerid, "There are no closest vehicles to respawn.");

    SendServerMessage(playerid, "You have respawned the %d closest vehicles.", count);
    return 1;
}

CMD:veh(playerid, params[])
{
    static
        model[32],
        color1,
        color2;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]I(0)I(0)", model, color1, color2))
        return SendSyntaxMessage(playerid, "/veh [model id/name] <color 1> <color 2>");

    if((model[0] = GetVehicleModelByName(model)) == 0)
        return SendErrorMessage(playerid, "Invalid model ID.");

    static
        Float:x,
        Float:y,
        Float:z,
        Float:a,
        vehicleid;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    vehicleid = CreateVehicle(model[0], x, y, z, a, color1, color2, 0);

    if(GetPlayerInterior(playerid) != 0)
        LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

    if(GetPlayerVirtualWorld(playerid) != 0)
        SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

    if(IsABoat(vehicleid) || IsAPlane(vehicleid) || IsAHelicopter(vehicleid))
        PutPlayerInVehicleEx(playerid, vehicleid, 0);

    ResetVehicle(vehicleid);

    CoreVehicles[vehicleid][vehTemporary] = true;
    CoreVehicles[vehicleid][vehFuel] = 100.0;
    SetVehicleNumberPlate(vehicleid, "STATIC");
    SetEngineStatus(vehicleid, true);
    SendServerMessage(playerid, "You have spawned a %s (%d, %d).", GetVehicleNameByModel(model[0]), color1, color2);
    return 1;
}

CMD:destroyveh(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(!isnull(params) && !strcmp(params, "all", true))
    {
        for (new i = 1, j = GetVehiclePoolSize(); i <= j; i ++) if(IsValidVehicle(i) && CoreVehicles[i][vehTemporary])
        {
            CoreVehicles[i][vehTemporary] = false;

            DestroyVehicle(i);
            ResetVehicle(i);
        }
        SendServerMessage(playerid, "You have destroyed the temporary vehicles.");
        return 1;
    }
    else if(IsPlayerInAnyVehicle(playerid))
    {
        new vehicleid = GetPlayerVehicleID(playerid);

        if(CoreVehicles[vehicleid][vehTemporary])
        {
            CoreVehicles[vehicleid][vehTemporary] = false;
            DestroyVehicle(vehicleid);

            ResetVehicle(vehicleid);
            SendServerMessage(playerid, "You have destroyed the temporary vehicles.");
        }
        else
        {
            SendErrorMessage(playerid, "You cannot destroy a non-temporary vehicle.");
        }
    }
    return 1;
}

CMD:givewep(playerid, params[])
{
    new
        userid,
        weaponid,
        durability,
        ammo;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "uiii", userid, weaponid, ammo, durability))
        return SendSyntaxMessage(playerid, "/givewep [playerid/PartOfName] [weaponid] [ammo] [durability]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Player id yang targetkan tidak terhubung tidak ada diserver.");

    if(IsPlayerDuty(userid))
        return SendErrorMessage(playerid, "Player sedang duty faction tidak dapat diberikan.");

    if(!(0 < weaponid < 46))
        return SendErrorMessage(playerid, "Id weapon tidak valid.");

    if(ammo < 1 || ammo > 2000)
        return SendErrorMessage(playerid, "Aminisi hanya dibatasi 1 - 2000");

    if(durability < 1 || durability > 1000)
        return SendErrorMessage(playerid, "Durability hanya dibatasi 1 - 1000");

    GivePlayerWeaponEx(userid, weaponid, ammo, durability);

    SendServerMessage(playerid, "Kamu memberikan %s sebuah %s dengan %d amunisi.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    Log_Write("logs/weap_log.txt", "[%s] %s give %s a %s with %d ammo.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    return 1;
}

CMD:setplayer(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        userid,
        type[16],
        amount[32];

    if(sscanf(params, "us[16]S()[32]", userid, type, amount))
    {
        SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" gender, birthdate, origin, bank, playinghours, drivinglic, businesslic, workshoplic");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" job, warrants, channel, level, phonenumber, wooddelay, fightstyle, story, idcard, farmlic");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!strcmp(type, "gender", true))
    {
        if(isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [gender] [1: male - 2: female]");

        PlayerData[userid][pGender] = strval(amount);

        if(PlayerData[userid][pGender] == 1)
            SendAdminWarning(X11_TOMATO_1, "%s have set %s's gender to male.", ReturnAdminName(playerid), ReturnName(userid, 0));

        else if(PlayerData[userid][pGender] == 2)
            SendAdminWarning(X11_TOMATO_1, "%s have set %s's gender to female.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "drivinglic", true))
    {
        PlayerData[userid][pDrivingLicense] = 1;
        PlayerData[userid][pDrivingLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's"WHITE" driving licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "businesslic", true))
    {
        PlayerData[userid][pBusinessLicense] = 1;
        PlayerData[userid][pBusinessLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's"WHITE" business licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "workshoplic", true))
    {
        PlayerData[userid][pWorkshopLicense] = 1;
        PlayerData[userid][pWorkshopLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's"WHITE" workshop licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "farmlic", true))
    {
        PlayerData[userid][pFarmLicense] = 1;
        PlayerData[userid][pFarmLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's"WHITE" farm licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "boatlic", true))
    {
        PlayerData[userid][pBoatLicense] = 1;
        PlayerData[userid][pBoatLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's"WHITE" boat licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "flyinglic", true))
    {
        PlayerData[userid][pFlyingLicense] = 1;
        PlayerData[userid][pFlyingLicenseExpired] = (gettime()+((24*3600)*30));
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's"WHITE" flying licenses.", ReturnAdminName(playerid), ReturnName(userid, 0));
    }
    else if(!strcmp(type, "level", true))
    {
        if(CheckAdmin(playerid, 7))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [level]");

        PlayerData[userid][pScore] = strval(amount);
        SetPlayerScore(userid, PlayerData[userid][pScore]);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s"WHITE" level to %s", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if(!strcmp(type, "birthdate", true))
    {
        if(isnull(amount) || strlen(amount) > 24)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [birthdate] [birth date]");

        format(PlayerData[userid][pBirthdate], 24, amount);
        SendServerMessage(playerid, "You have set %s's birthdate to \"%s\".", ReturnName(userid, 0), amount);
        SendClientMessageEx(userid, X11_FOREST_GREEN, "Your birthdate has been set to \"%s\" by Admin %s", amount, ReturnAdminName(playerid));
    }
    else if(!strcmp(type, "origin", true))
    {
        if(isnull(amount) || strlen(amount) > 32)
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [origin] [new origin]");

        format(PlayerData[userid][pOrigin], 32, amount);
        SendServerMessage(playerid, "You have set %s's origin to \"%s\".", ReturnName(userid, 0), amount);
        SendClientMessageEx(userid, X11_FOREST_GREEN, "Your origin has been set to \"%s\" by Admin %s", amount, ReturnAdminName(playerid));
    }
    else if(!strcmp(type, "bank", true))
    {
        if(CheckAdmin(playerid, 9))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [bank] [bank funds]");

        PlayerData[userid][pBankMoney] = strval(amount);
        SendServerMessage(playerid, "You have set %s's bank money to %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
    }
    else if(!strcmp(type, "playinghours", true))
    {
        if(CheckAdmin(playerid, 7))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [playinghours] [amount]");

        PlayerData[userid][pHour] = strval(amount);
        SendAdminMessage(X11_TOMATO_1, "%s have set %s's playing hours to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if(!strcmp(type, "paycheck", true))
    {
        if(CheckAdmin(playerid, 7))
            return PermissionError(playerid);

        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [paycheck] [amount]");

        PlayerData[userid][pPlayingHours] = strval(amount); //pPlayingHours = paycheck
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s "WHITE"have set "BLUE"%s's "WHITE"paycheck to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if(!strcmp(type, "job1", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [job1] [amount]");

        if(strval(amount) < 0 || strval(amount) > 12)
            return SendErrorMessage(playerid, "You have specified an invalid job ID.");

        PlayerData[userid][pJob][0] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s have set "BLUE"%s's "WHITE"primary job to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob][0]));
    }
    else if(!strcmp(type, "job2", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [job2] [amount]");

        if(strval(amount) < 0 || strval(amount) > 12)
            return SendErrorMessage(playerid, "You have specified an invalid job ID.");

        PlayerData[userid][pJob][1] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s have set "BLUE"%s's "WHITE"secondary job to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob][1]));
    }
    else if(!strcmp(type, "warrants", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [warrants] [amount]");

        PlayerData[userid][pWarrants] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s have set "BLUE"%s's "WHITE"warrants to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if(!strcmp(type, "channel", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [channel] [radio channel]");

        PlayerData[userid][pChannel] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s have set "BLUE"%s's "WHITE"radio channel to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if(!strcmp(type, "wooddelay", true))
    {
        PlayerData[userid][pWoodDelay] = 0;
        SendServerMessage(playerid, "You have reset %s's delay for wood courier.", ReturnName(userid, 0));
    }
    else if(!strcmp(type, "phonenumber", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [phonenumber] [number]");

        PlayerData[userid][pPhone] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s have set "BLUE"%s's "WHITE"phone number to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if(!strcmp(type, "minutes", true))
    {
        if(isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [minutes] [minute(s)]");

        PlayerData[userid][pMinutes] = strval(amount);
        SendServerMessage(playerid, "You have set %s's minute to %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    }
    else if (!strcmp(type, "fightstyle", true)) {
        if (isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [fightstyle] [4/5/6/7/15/16]");
        
        if (strval(amount) < 4 && strval(amount) > 7 || strval(amount) < 15 && strval(amount) > 16)
            return SendErrorMessage(playerid, "Invalid fight style!");

        SetPlayerFightingStyle(userid, strval(amount));
        SendServerMessage(playerid, "You have set %s's fight style to %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
    }
    else if (!strcmp(type, "gold", true)) {
        if (isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [gold] [amount]");

        PlayerData[userid][pGold] += strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s have give "BLUE"%s's "WHITE"gold to %s.", ReturnAdminName(playerid), ReturnName(userid, 0), FormatNumber(strval(amount), ""));
    } else if (!strcmp(type, "story", true)) {
        if (isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [story] [1 = accepted, 0 = denied]");

        PlayerData[userid][pStory] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s has set "BLUE"%s's "WHITE"story to %s", ReturnAdminName(playerid), ReturnName(userid, 0), (strval(amount) == 1) ? ("accepted") : ("denied"));
    } else if (!strcmp(type, "idcard", true)) {
        if (isnull(amount))
            return SendSyntaxMessage(playerid, "/setplayer [playerid/PartOfName] [idcard] [1 = create, 0 = delete]");

        PlayerData[userid][pIDCard] = strval(amount);
        SendAdminWarning(X11_TOMATO_1, ""YELLOW"AdmWarn:"RED"%s has set "BLUE"%s's "WHITE"ID Card to %d", ReturnAdminName(playerid), ReturnName(userid, 0), strval(amount));
    }
    Log_Write("logs/setplayer_log.txt", "[%s] %s set %s of %s for %s.", ReturnDate(), ReturnName(playerid), type, ReturnName(userid), amount);
    return 1;
}

CMD:finegold(playerid, params[]) {
    static
        userid,
        amount,
        reason[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if (sscanf(params, "uds[128]", userid, amount, reason))
        return SendSyntaxMessage(playerid, "/finegold [playerid/name] [amount] [reason]");

    if (userid == INVALID_PLAYER_ID && !IsPlayerConnected(userid))
        return SendErrorMessage(playerid, "Invalid playerid or name!");

    PlayerData[playerid][pGold] -= amount;
    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was fined gold by %s for %d. Reason: %s", ReturnName(userid), ReturnAdminName(playerid), amount, reason);
    }
    return true;
}

CMD:goldstore(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You are not logged in!");

    new
        str[512];

    format(str,sizeof(str),""GREEN"==================== "WHITE"GOLD STORE "GREEN"===================="WHITE"\n\n");
    format(str,sizeof(str),"%s1. "WHITE"50 Gold (RP. 10.000)\n",str);
    format(str,sizeof(str),"%s2. "WHITE"200 Gold (RP. 40.000)\n",str);
    format(str,sizeof(str),"%s3. "WHITE"500 Gold (RP. 80.000)\n",str);
    format(str,sizeof(str),"%s4. "WHITE"1000 Gold (RP. 100.000)\n",str);
    format(str,sizeof(str),"%s5. "WHITE"1500 Gold (RP. 180.000)\n",str);
    format(str,sizeof(str),"%s6. "WHITE"2000 Gold (RP. 200.000)\n",str);
    format(str,sizeof(str),"%s7. "WHITE"3000 Gold (RP. 250.000)\n",str);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Gold Store Price List", str, "Ok", "");
    return 1;
}

CMD:vipcontact(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You are not logged in!");

    new
        str[512];

    format(str,sizeof(str),""GREEN"==================== "WHITE"VIP CONTACT INFORMATION "GREEN"===================="WHITE"\n\n");
    format(str,sizeof(str),"%s"WHITE"Discord: "YELLOW"Leonardoshz#3202\n",str);
    format(str,sizeof(str),"%s"WHITE"DANA: "YELLOW"081933486728 A/N Leonardo\n",str);
    format(str,sizeof(str),"%s"WHITE"GoPay: "YELLOW"081291124836 A/N Lukman\n\n",str);
    format(str,sizeof(str),"%s"WHITE"Pulsa Telkomsel: "YELLOW"+62 812-8617-7740 A/N Cozta\n\n",str);
    format(str,sizeof(str),"%s"GREEN"==================== "WHITE"TATA CARA BERDONASI "GREEN"====================\n\n",str); 
    format(str,sizeof(str),"%s"WHITE"- Kirim Bukti Transfer ke Contact di atas dengan Nama IC\n- Jika belum di proses mohon tunggu dan hubungi kembali Contact di atas\n- Bertutur kata yang sopan dan ramah saat Contact/Chat"WHITE"\n\n",str);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Vip Contact", str, "Ok", "");
    return 1;
}

CMD:vip(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You are not logged in!");

    new
        str[2500];

    format(str,sizeof(str),""GREEN"==================== "WHITE"VIP BENEFIT "GREEN"===================="WHITE"\n\n");
    format(str,sizeof(str),"%s1. "YELLOW"Basic Donator"GREEN"(Rp. 40.000 / bulan)\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat menggunakan command /ad dan /paycheck dimana saja.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan Gold sebesar 500.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 5 aksesoris.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 1 custom gate.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat membeli mobil sport yang ada di Rodeo.\n\n",str);
    format(str,sizeof(str),"%s2. "YELLOW"Advanced Donator"GREEN"(Rp. 75.000 / bulan)\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat menggunakan command /ad dan /paycheck dimana saja.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan Gold sebesar 1000.\n", str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 3 rumah slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 5 aksesoris.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 3 garasi slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 2 custom gate.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 1 custom exterior mapping untuk rumah (MAX 30 OBJECT).\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat membeli mobil sport yang ada di Rodeo.\n\n",str);
    format(str,sizeof(str),"%s3. "YELLOW"Professional Donator"GREEN"(Rp. 100.000 / bulan)\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat menggunakan command /ad dan /paycheck dimana saja.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan Gold sebesar 1500.\n", str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 4 rumah slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 5 aksesoris.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 3 garasi slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 2 business slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 2 workshop slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 3 custom gate.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 2 custom exterior mapping untuk rumah (MAX 30 OBJECT).\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat membeli mobil sport yang ada di Rodeo.\n\n",str);
    format(str,sizeof(str),"%s4. "YELLOW"Lifetime Donator "GREEN"(Rp. 250.000 / tahun)\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat menggunakan command /ad dan /paycheck dimana saja.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan Gold sebesar 2000.\n", str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 5 rumah slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 5 aksesoris.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 3 garasi slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 2 business slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat memiliki 2 workshop slot.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 4 custom gate.\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda akan mendapatkan 2 custom exterior mapping untuk rumah (MAX 30 OBJECT).\n",str);
    format(str,sizeof(str),"%s"WHITE"- Anda dapat membeli mobil sport yang ada di Rodeo.\n\n",str);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Vip Information", str, "Ok", "");
    return 1;
}

CMD:setvip(playerid, params[]) {
    static
        userid,
        vip,
        time;

    if (CheckAdmin(playerid, 8))
        return PermissionError(playerid);
    
    if (sscanf(params, "udd", userid, vip, time)) {
        SendSyntaxMessage(playerid, "/setvip [playerid/name] [vip type] [days]");
        SendClientMessageEx(playerid, X11_YELLOW_2, "[TYPES]: "WHITE"1 = Basic Donator, 2 = Advanced Donator, 3 = Professional Donator, 4 = Lifetime Donator");
        return true;
    }

    if (userid == INVALID_PLAYER_ID && !IsPlayerConnected(userid))
        return SendErrorMessage(playerid, "Invalid playerid or name!");

    if (vip < 0 || vip > 4)
        return SendErrorMessage(playerid, "Invalid vip type!");

    switch (vip) {
        case 1: {
            PlayerData[userid][pVip] = vip;
            PlayerData[userid][pVipTime] = (gettime()+((24*3600)*time));
            PlayerData[userid][pGold] += 500;
            PlayerData[userid][pClaims][0] += 1;
        }
        case 2: {
            PlayerData[userid][pVip] = vip;
            PlayerData[userid][pVipTime] = (gettime()+((24*3600)*time));
            PlayerData[userid][pGold] += 1000;
            PlayerData[userid][pClaims][0] += 2;
            PlayerData[userid][pClaims][1] += 1;
        }
        case 3: {
            PlayerData[userid][pVip] = vip;
            PlayerData[userid][pVipTime] = (gettime()+((24*3600)*time));
            PlayerData[userid][pGold] += 1500;
            PlayerData[userid][pClaims][0] += 3;
            PlayerData[userid][pClaims][1] += 2;
        }
        case 4: {
            time = 365;
            PlayerData[userid][pVip] = vip;
            PlayerData[userid][pVipTime] = (gettime()+((24*3600)*time));
            PlayerData[userid][pGold] += 2000;
            PlayerData[userid][pClaims][0] += 4;
            PlayerData[userid][pClaims][1] += 2;
        }
    }

    SendCustomMessage(playerid, "VIP", "You've give "YELLOW"%s %s "WHITE"vip"WHITE", expired on %s.", ReturnName2(userid, 0), GetVipType(userid), GetVipTime(userid));
    SendCustomMessage(userid, "VIP", "You've got %s "WHITE"vip, expired on %s"WHITE", from Admin "RED"%s"WHITE".", GetVipType(userid), GetVipTime(userid), ReturnAdminName(playerid));
    return true;
}

CMD:claims(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You are not logged in!");

    new
        str[128];

    format(str,sizeof(str),"Claims\tAmount\n");
    format(str,sizeof(str),"%sCustom Gate\t%d\n",str,PlayerData[playerid][pClaims][0]);
    format(str,sizeof(str),"%sCustom Exterior Mapping\t%d",str,PlayerData[playerid][pClaims][1]);
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "My Claims", str, "Ok", "");
    return 1;
}

CMD:fineclaims(playerid, params[]) {
    if (CheckAdmin(playerid, 8))
        return PermissionError(playerid);

    new 
        userid,
        type,
        amount;
    
    if (sscanf(params, "udd", userid, type, amount)) {
        SendSyntaxMessage(playerid, "/fineclaims [playerid/name] [type] [amount]");
        SendClientMessageEx(playerid, X11_YELLOW_2, "[TYPES]: "WHITE"0 = Custom gate, 1 = Custom mapping");
        return 1;
    }

    if (type > 1 || type < 0)
        return SendErrorMessage(playerid, "Invalid type!");

    switch (type) {
        case 0: {
            PlayerData[userid][pClaims][0] -= amount;
            SendCustomMessage(playerid, "VIP", "You've fined "YELLOW"%s "WHITE"custom gate claims for "YELLOW"%d.", ReturnName(userid), amount);
            SendCustomMessage(userid, "VIP", "Admin "RED"%s "WHITE"has fined you custom gate claims for "YELLOW"%d.", ReturnAdminName(playerid), amount);
        }
        case 1: {
            PlayerData[userid][pClaims][1] -= amount;
            SendCustomMessage(playerid, "VIP", "You've fined "YELLOW"%s "WHITE"custom mapping claims for "YELLOW"%d.", ReturnName(userid), amount);
            SendCustomMessage(userid, "VIP", "Admin "RED"%s "WHITE"has fined you custom mapping claims for "YELLOW"%d.", ReturnAdminName(playerid), amount);
        }
    }
    return 1;
}

CMD:vipchat(playerid, params[]) {
    if (PlayerData[playerid][pVipTime] == 0)
        return SendErrorMessage(playerid, "Only donater can use this command!");

    new msg[128], str[128];
    if (sscanf(params, "s[128]", msg))
        return SendSyntaxMessage(playerid, "/vipchat [message (OOC)]");

    if (PlayerData[playerid][pTogVipchat])
        return SendErrorMessage(playerid, "Your vip chat is currently disabled, '/toggle' to enable it.");

    format(str,sizeof(str),"* %s"YELLOW_2" %s:"GREEN" %s", GetVipType(playerid), ReturnName2(playerid, 0), msg);

    foreach (new i : Player) if (!PlayerData[i][pTogVipchat] && PlayerData[i][pVipTime] > 0) {
        SendClientMessageEx(i, X11_OLIVE_DRAB_1, str);
    }
    return 1;
}

CMD:setadmin(playerid, params[])
{
    static
        player,
        level;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);
            
    if(sscanf(params, "ud", player, level))
        return SendSyntaxMessage(playerid, "/setadmin [playerid/PartOfName] [level]");
            
    if(player == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Invalid player id.");
            
    if(!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "That player are not connected..");
            
    if(AccountData[playerid][pAdmin] < 9)
    {
        if(level < 0 || level > 6)
            return SendErrorMessage(playerid, "You can't set people above admin level 6!");
    }

    if(level < 1) format(AccountData[player][pAdminRankName], 24, gAdminLevel[AccountData[player][pAdmin]]);

    SendAdminAction(player, "%s has %s you to a %s admin level (%d).", ReturnName(playerid, 0), (level <= 0) ? ("demoted") : ("promoted"), (level < AccountData[player][pAdmin]) ? ("lower") : ("higher"), level);
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has %s %s to a %s admin level (%d).", ReturnName(playerid, 0), (level <= 0) ? ("demoted") : ("promoted"), ReturnName(player, 0), (level < AccountData[player][pAdmin]) ? ("lower") : ("higher"), level);

    AccountData[player][pAdmin] = level;
    AccountData[player][pAdminHide] = 0;

    format(AccountData[player][pAdminRankName], MAX_PLAYER_NAME, "none");
    Log_Write("logs/setadminlog.txt", "[%s] %s has just set admin for %s to %d", ReturnDate(), ReturnName(playerid), ReturnName(player), AccountData[playerid][pAdminRankName]);
    return 1;
}

CMD:setucp(playerid, params[]) {
    if (CheckAdmin(playerid, 9))
        return PermissionError(playerid);
    
    new userid, newucp[24];

    if (sscanf(params,"us[24]",userid,newucp))
        return SendSyntaxMessage(playerid, "/setucp [playerid/name] [new ucp]");
    
    if (strlen(newucp) > 24)
        return SendErrorMessage(playerid, "Max ucp character length is 24 char");
    
    new Cache:check;

    check = mysql_query(g_iHandle, sprintf("SELECT `ID` FROM `accounts` WHERE `Username` = '%s';",newucp));

    if (cache_num_rows())
        SendErrorMessage(playerid, "New UCP has already used by another players");
    else {
        format(AccountData[userid][pUsername],MAX_PLAYER_NAME + 1,"%s",newucp);
        mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `Username`='%s' WHERE `ID`='%d';", SQL_ReturnEscaped(newucp), GetPlayerSQLID(userid)));
        SendCustomMessage(playerid, "NEWUCP", "You've been set new ucp name for "YELLOW"%s "WHITE"to "YELLOW"%s", ReturnName(userid), newucp);
        SendCustomMessage(userid, "NEWUCP", RED"%s "WHITE"has been set your new ucp name to "YELLOW"%s", ReturnAdminName(playerid), newucp);
    }

    cache_delete(check);
    return 1;
}

/*CMD:factionmod(playerid, params[])
{
    static
        userid;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/factionmod [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(PlayerData[userid][pFactionMod])
    {
        PlayerData[userid][pFactionMod] = false;

        SendAdminAction(playerid, "You have taken away %s's faction management status.", ReturnName(userid, 0));
        SendAdminAction(userid, "%s has kicked you from the faction management team.", ReturnName(playerid, 0));
    }
    else
    {
        PlayerData[userid][pFactionMod] = true;

        SendAdminAction(playerid, "You have invited %s to the faction management team.", ReturnName(userid, 0));
        SendAdminAction(userid, "%s has invited you to the faction management team.", ReturnName(playerid, 0));
    }
    return 1;
}*/

CMD:setname(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid,
        newname[24],
        query[128];

    if(sscanf(params, "us[24]", userid, newname))
        return SendSyntaxMessage(playerid, "/setname [playerid/PartOfName] [new name]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(!PlayerData[userid][pLogged])
        return SendErrorMessage(playerid, "That player hasn't set a character yet.");

    if(!IsValidPlayerName(newname))
        return SendErrorMessage(playerid, "You have specified an invalid name format.");

    foreach (new i : Player) if(!strcmp(ReturnName(i), newname)) {
        SendErrorMessage(playerid, "The specified name is in use.");
        break;
    }
    format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(newname));
    mysql_tquery(g_iHandle, query, "OnNameChange", "dds", playerid, userid, newname);

    return 1;
}

CMD:setwhitelist(playerid, params[]) {
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new ucp[32];
    if (sscanf(params, "s[32]", ucp))
        return SendSyntaxMessage(playerid, "/setwhitelist [ucp name]");

    mysql_tquery(g_iHandle, sprintf("SELECT `WhiteList` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(ucp)), "SetWhiteList", "ds", playerid, ucp);
    return 1;
}

Function:SetWhiteList(playerid, username[]) {
    new rows = cache_num_rows(), whitelist;

    if (!rows)
        return SendErrorMessage(playerid, "This account doesn't exists!");

    cache_get_value_int(0, "WhiteList", whitelist);
    if (whitelist == 1) 
        return SendErrorMessage(playerid, "This account has already in white list!");

    mysql_tquery(g_iHandle, sprintf("UPDATE `accounts` SET `WhiteList` = '1' WHERE `Username` = '%s'", SQL_ReturnEscaped(username)));
    SendCustomMessage(playerid, "WHITELIST", "You've successfully added "YELLOW"%s "WHITE"to white list.", username);
    return 1;
}

CMD:clear(playerid, params[])
{
    ClearPlayerChat(playerid, 50);
    return 1;
}

CMD:gotoco(playerid, params[])
{
    static
        Float:x,
        Float:y,
        Float:z,
        interior;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "dfff", interior, x, y, z))
        return SendSyntaxMessage(playerid, "/gotoco [interior] [x] [y] [z]");

    SetPlayerPos(playerid, x, y, z);
    SetPlayerInterior(playerid, interior);

    return 1;
}

CMD:destroydealer(playerid, params[])
{
    static
        id,
        query[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params,"d",id))
        return SendSyntaxMessage(playerid, "/destroydealer [dealer id]");
            
    if((id < 0 || id > MAX_DEALER) || !DealershipData[id][dExists])
        return SendErrorMessage(playerid, "Invalid dealer id.");
        
    format(query,sizeof(query), "DELETE FROM `dealership` WHERE `ID` = '%d'", DealershipData[id][dID]);
    mysql_tquery(g_iHandle, query);
    
    DealershipData[id][dExists] = false;
    DealershipData[id][dStock] = 0;
        
    if(IsValidDynamicPickup(DealershipData[id][dPickup]))
        DestroyDynamicPickup(DealershipData[id][dPickup]);

    format(query,sizeof(query), "DELETE FROM `dealervehicle` WHERE `Dealer` = '%d'", DealershipData[id][dID]);
    mysql_tquery(g_iHandle, query);
    
    SendClientMessageEx(playerid, X11_LIGHTBLUE,"DEALER: "WHITE"You have been destroy dealership ID(%d)", id);
    return 1;
}

CMD:createdealer(playerid, params[])
{
    static
        name[32],
        stocknya,
        Float:x,
        Float:y,
        Float:z,
        Float:a;
        
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params,"ds[32]", stocknya, name))
        return SendSyntaxMessage(playerid, "/createdealer [stock] [name]");

    if(strlen(name) > 32)
        return SendErrorMessage(playerid, "Name is too long, you must enter under 24 characters.");
            
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
            
    for (new i; i < MAX_DEALER; i++)
    {
        if(!DealershipData[i][dExists])
        {
            DealershipData[i][dExists] = true;
            DealershipData[i][dPos][0] = x;
            DealershipData[i][dPos][1] = y;
            DealershipData[i][dPos][2] = z;
            format(DealershipData[i][dName], 32, name);
            DealershipData[i][dStock] = stocknya;
            DealershipData[i][dLock] = 1;
            DealershipData[i][dType] = 0;
            SendServerMessage(playerid, "You have successfully created dealership ID: %d.", i);
            SendServerMessage(playerid, "Type /editdealer [id] [spawn] to set spawn point.");
            Dealership_Refresh(i);
            mysql_tquery(g_iHandle, "INSERT INTO `dealership` (`Lock`) VALUES(1)", "OnDealerCreated", "d", i);
            return 1;
        }
    }
    return 1;
}

CMD:buycar(playerid, params[])
{
    new id, query[128];

    if((id = Dealer_Nearest(playerid)) != -1)
    {
        /*if(PlayerData[playerid][pScore] < 2) 
            return SendErrorMessage(playerid, "You must level 2 to buy vehicle.");*/

        if (DealershipData[id][dType]) {
            if (PlayerData[playerid][pVipTime] <= 0)
                return SendErrorMessage(playerid, "Only donator can buy vehicle in this dealer.");
            
            if(DealershipData[id][dLock]) 
                return SendErrorMessage(playerid, "This dealer is locked.");
            
            if(!DealershipData[id][dStock]) 
                return SendErrorMessage(playerid, "This dealer doesn't have stock.");

            PlayerData[playerid][pDealerEdit] = id;

            mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `dealervehicle` WHERE Dealer='%d'", DealershipData[id][dID]);
            mysql_tquery(g_iHandle, query, "LoadDealerVehicles", "d", playerid);
        } else {
            if(DealershipData[id][dLock]) 
                return SendErrorMessage(playerid, "This dealer is locked.");
            
            if(!DealershipData[id][dStock]) 
                return SendErrorMessage(playerid, "This dealer doesn't have stock.");

            PlayerData[playerid][pDealerEdit] = id;

            mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `dealervehicle` WHERE Dealer='%d'", DealershipData[id][dID]);
            mysql_tquery(g_iHandle, query, "LoadDealerVehicles", "d", playerid);
        }
    }
    else SendErrorMessage(playerid, "You're not in near dealership.");
    return 1;
}

Function:LoadDealerVehicles(playerid)
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "There is no vehicle on this dealer.");

    new detail[12 * 64], model, price;

    for (new i; i < cache_num_rows(); ++i)
    {
        cache_get_value_int(i, "Model", model);
        cache_get_value_int(i, "Price", price);
        format(detail, sizeof(detail), "%s%i\t%s %s\n", detail, model, GetVehicleNameByModel(model), FormatNumber(price));
        
        cache_get_value_int(i, "ID", ListedBuyVehicle[playerid][i]);
    }
    ShowPlayerDialog(playerid, DIALOG_BUYCAR, DIALOG_STYLE_PREVIEW_MODEL, "Buy Car", detail, "Select", "Close");
    return 1;
}

CMD:addcardealer(playerid, params[])
{
    static
        dealer,
        model,
        price,
        string[128];

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "ddd", dealer, model, price))
        return SendSyntaxMessage(playerid, "/addcardealer [dealer ID] [model ID] [price]");

    if((dealer < 0 || dealer >= MAX_DEALER) || !DealershipData[dealer][dExists])
        return SendErrorMessage(playerid, "You have specified an invalid dealership ID.");

    if(model < 400 || model > 611)
        return SendErrorMessage(playerid, "Invalid vehicle model.");

    if(price < 0)
        return SendErrorMessage(playerid, "Invalid price");

    if(VehicleDealer_GetCount(dealer) >= MAX_DEALER_VEHICLES)
        return SendErrorMessage(playerid, "Can't add more vehicle in this dealer.");

    format(string, sizeof(string), "INSERT INTO `dealervehicle` SET `Model`='%d', `Price`='%d', `Dealer`='%d'", model, price, DealershipData[dealer][dID]);
    mysql_tquery(g_iHandle, string, "OnVehicleDealershipCreated", "dddd", playerid, dealer, model, price);
    return 1;
}

Function:OnVehicleDealershipCreated(playerid, dealer, model, price)
{
    new id = cache_insert_id();
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Dealership Vehicle","You've successfully created new vehicle for dealer (ID: %d)\n\n"YELLOW"Vehicle Database ID: "WHITE"%d\n"YELLOW"Vehicle: "WHITE"%s\n"YELLOW"Price: "WHITE"%s\n\n"WHITE"NOTE: You can remove it on /buycar.","Close","", dealer, id, GetVehicleNameByModel(model), FormatNumber(price));
    return 1;
}

CMD:editdealer(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editdealer [id] [location/name/spawn/stock/lock]");
        return 1;
    }
    if((id < 0 || id >= MAX_DEALER) || !DealershipData[id][dExists])
        return SendErrorMessage(playerid, "You have specified an invalid dealership ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, DealershipData[id][dPos][0], DealershipData[id][dPos][1], DealershipData[id][dPos][2]);
        Dealership_Refresh(id);
        SendClientMessageEx(playerid, -1, "DEALER: "WHITE"You've been edit dealership (id:%d) position.", id);
    }
    else if(!strcmp(type, "spawn", true))
    {
        GetPlayerPos(playerid, DealershipData[id][dSpawnPos][0], DealershipData[id][dSpawnPos][1], DealershipData[id][dSpawnPos][2]);
        GetPlayerFacingAngle(playerid,DealershipData[id][dSpawnPos][3]);
        Dealership_Refresh(id);
        SendClientMessageEx(playerid, -1, "DEALER: "WHITE"You've been edit dealership id (id: %d) spawn position.", id);
    }
    else if(!strcmp(type, "stock", true))
    {
        static
            vehstock;
        
        if(sscanf(string, "d", vehstock))
            return SendSyntaxMessage(playerid, "/editdealer [id] [stock] [value]");

        DealershipData[id][dStock] = vehstock;
        SendClientMessageEx(playerid, X11_LIGHTBLUE, "DEALER: "WHITE"You've been edit stock (new stock: %d) dealership (id: %d)", vehstock, id);
        Dealership_Save(id);
    }
    else if(!strcmp(type, "name", true))
    {
        static
            name[32];
        
        if(sscanf(string, "s[32]", name))
            return SendSyntaxMessage(playerid, "/editdealer [id] [name] [dealer name]");

        format(DealershipData[id][dName], 32, name);
        SendClientMessageEx(playerid, X11_LIGHTBLUE, "DEALER: "WHITE"You've been edit name dealer id %d to %s", id, name);
        Dealership_Save(id);
    }
    else if(!strcmp(type, "lock", true))
    {
        static
            lock;

        if(sscanf(string, "d", lock))
            return SendSyntaxMessage(playerid, "/editdealer [id] [lock] [locktype] (0=Unlock | 1=Lock)");

        DealershipData[id][dLock] = lock;
        SendClientMessageEx(playerid, X11_LIGHTBLUE, "DEALER: "WHITE"You've been %s dealership (id: %d).", (DealershipData[id][dLock] ? ("Lock") : ("Unlock")), id);
        Dealership_Save(id);
    } else if (!strcmp(type, "vip", true)) {
        static
            vip;

        if (sscanf(string, "d", vip))
            return SendSyntaxMessage(playerid, "/editdealer [id] [vip] [0=Non Vip/1=Vip Player]");

        DealershipData[id][dType] = vip;
        SendCustomMessage(playerid, "DEALER", "You've been only %s player can buy car on this dealership (id: %d)", (DealershipData[id][dType]) ? ("Vip") : ("Normal"), id);
        Dealership_Save(id);
    }
    return 1;
}

CMD:createhouse(playerid, params[])
{
    static
        price,
        id,
        type,
        address[32];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "dds[32]", type, price, address))
        return SendSyntaxMessage(playerid, "/createhouse [interior (0. Small, 1. Medium, 2. Large)] [price] [house address]");

    if(type < 0 || type > 2) return SendErrorMessage(playerid, "The specified interior must be between 0-2.");
    if(price < 0) return SendErrorMessage(playerid, "Price can't under zero.");

    foreach (new i : Houses) if(!strcmp(HouseData[i][houseAddress], address, true)) {
        return SendErrorMessage(playerid, "The address \"%s\" is already in use (ID: %d).", address, i);
    }

    if((id = House_Create(playerid, price, address, type)) == cellmin) return SendErrorMessage(playerid, "The server has reached the limit for houses.");

    SendServerMessage(playerid, "You have successfully created house ID: %d.", id);
    return 1;
}

// CMD:createallhouseint(playerid) {
//     if (CheckAdmin(playerid, 8))
//         return PermissionError(playerid);

//     foreach (new i : Houses) {
//         HouseData[i][houseInt][0] = arrHouseInteriors[HouseData[i][houseType]-1][eHouseX];
//         HouseData[i][houseInt][1] = arrHouseInteriors[HouseData[i][houseType]-1][eHouseY];
//         HouseData[i][houseInt][2] = arrHouseInteriors[HouseData[i][houseType]-1][eHouseZ];
//         HouseData[i][houseInt][3] = arrHouseInteriors[HouseData[i][houseType]-1][eHouseAngle];
//         HouseData[i][houseInterior] = arrHouseInteriors[HouseData[i][houseType]-1][eHouseInterior];

//         // for (new id = 0; id < MAX_HOUSE_STRUCTURE; id ++) if (Iter_Contains(HouseStruct, id) && HouseStructure[id][structureHouse] == HouseData[i][houseID]) {
//         //     HouseStructure_Delete(id);
//         // }

//         CreateHouseInterior(i);
//     }
//     SendCustomMessage(playerid, "HOUSE", "You've been created all house interior, total: %d houses", Iter_Count(Houses));
//     return 1;
// }

CMD:destroyhouse(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyhouse [house id]");

    if(!Iter_Contains(Houses, id))
        return SendErrorMessage(playerid, "You have specified an invalid house ID.");

    House_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed house ID: %d.", id);
    return 1;
}

CMD:bizcmds(playerid, params[])
{
    SendCustomMessage(playerid, "BUSINESSES", "/buy, /bm, /abandon, /bizlock, /bshipment.");
    return 1;
}

CMD:flatcmds(playerid) {
    SendCustomMessage(playerid, "FLAT", "/buyflat, /flatmenu, /flock, /storeveh, /takeveh, /sell");
    return 1;
}

CMD:housecmds(playerid, params[])
{
    SendCustomMessage(playerid, "HOUSES", "/buy, /hm, /doorbell, /hlock.");
    return 1;
}

CMD:farmcmds(playerid, params[]) {
    SendCustomMessage(playerid, "FARM", "/farmmenu (/fm)");
    return 1;
}

CMD:furnstorecmds(playerid,params[]) {
    SendCustomMessage(playerid, "FURNSTORE", "/buyfurnstore, /fsm, /furnlock.");
    return 1;
}

CMD:buymats(playerid, params[])
    return cmd_buymaterials(playerid, params);

/*CMD:blackmarketlock(playerid, params[])
{
    new hour, minute, second;
    gettime(hour, minute, second);

    if(PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "On duty can't access blackmarket.");
    
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2164.0056,-246.5920,36.5156)) 
        return SendErrorMessage(playerid, "You're not in blackmarket.");

    if (CheckAdmin(playerid, 4))
    {
        switch(hour)
        {
            case 0 .. 5, 8 .. 10: ShowCategories(playerid);
            default: SendErrorMessage(playerid, "Blackmarket is close, open on 00:00 - 05:00 or 08:00 - 10:00.");
        }
    }
    else ShowCategories(playerid);
    return 1;
}*/

CMD:addcategory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    Dialog_Show(playerid, BM_Category, DIALOG_STYLE_INPUT, "Add Category", "Inser name of category", "Create", "Close");
    return 1;
}

CMD:removecategory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowCategories(playerid, 1);
    return 1;
}

CMD:renamecategory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowCategories(playerid, 2);
    return 1;
}

CMD:addweapon(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowWeaponList(playerid);
    return 1;
}

CMD:removeweapon(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    ShowCategories(playerid, 4);
    return 1;
}

CMD:buy(playerid, params[])
{
    static
        id = -1;

    if((id = House_Nearest(playerid)) != -1)
    {
        if (!PlayerData[playerid][pStory])
            return SendErrorMessage(playerid, "You must have accepted character story to buying any property");

        if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 2) {
            if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES+1)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES+1);
        } else if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 3) {
            if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES+2)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES+2);
        } else if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 4) {
            if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES+3)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES+3);
        } else {
            if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
                return SendErrorMessage(playerid, "You can only own %d houses at a time.", MAX_OWNABLE_HOUSES);           
        }

        if(HouseData[id][houseOwner] != 0)
            return SendErrorMessage(playerid, "This house is already owned at the moment.");

        if(HouseData[id][housePrice] > GetMoney(playerid))
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        HouseData[id][houseOwner] = GetPlayerSQLID(playerid);
        HouseData[id][houseLastVisited] = gettime();
        format(HouseData[id][houseOwnerName],32,"%s", NormalName(playerid));

        for(new garage = 0; garage != MAX_GARAGE; garage++) if(GarageData[garage][garageExists] && GarageData[garage][garageHouseLink] == HouseData[id][houseID]) {
            GarageData[garage][garageOwnerId] = HouseData[id][houseOwner];
            format(GarageData[garage][garageOwner], MAX_PLAYER_NAME, HouseData[id][houseOwnerName]);

            Garage_Sync(garage);
        }

        House_Refresh(id);
        House_Save(id);

        GiveMoney(playerid, -HouseData[id][housePrice]);
        SendServerMessage(playerid, "You have purchased \"%s\" for %s!", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));

        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a house!");
        Log_Write("logs/house_log.txt", "[%s] %s has purchased house ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
    }
    else if((id = Business_Nearest(playerid)) != -1)
    {
        if (!PlayerData[playerid][pStory])
            return SendErrorMessage(playerid, "You must have accepted character story to buying any property");

        if(!PlayerData[playerid][pBusinessLicenseExpired])
            return SendErrorMessage(playerid, "You don't have business licenses.");


        if (PlayerData[playerid][pVip] >= 3 && PlayerData[playerid][pVipTime] > 0) {
            if(Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES+1)
                return SendErrorMessage(playerid, "You can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES+1);
        } else {
            if(Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES)
                return SendErrorMessage(playerid, "You can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES);
        }

        if(BusinessData[id][bizOwner] != 0)
            return SendErrorMessage(playerid, "This business is already owned at the moment.");

        if(BusinessData[id][bizPrice] > GetMoney(playerid))
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);
        BusinessData[id][bizLastVisited] = gettime();
        format(BusinessData[id][bOwnerName],25,"%s",NormalName(playerid));
        BusinessEmployee_RemoveAll(id);
        Business_RemoveObjects(id);

        Business_Refresh(id);
        Business_Save(id);

        GiveMoney(playerid, -BusinessData[id][bizPrice]);
        SendServerMessage(playerid, "You have purchased \"%s\" for %s!", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a business!");
        Log_Write("logs/biz_log.txt", "[%s] %s has purchased business ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(BusinessData[id][bizPrice]));
    }
    else if((id = Workshop_Nearest(playerid)) != -1)
    {
        if (!PlayerData[playerid][pStory])
            return SendErrorMessage(playerid, "You must have accepted character story to buying any property");

        if(!PlayerData[playerid][pWorkshopLicenseExpired])
            return SendErrorMessage(playerid, "That player don't have workshop licenses.");

        if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] >= 3) {
            if(Workshop_GetCount(playerid) >= MAX_OWNABLE_WORKSHOP+1)
                return SendErrorMessage(playerid, "You can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP+1);
        } else {
            if(Workshop_GetCount(playerid) >= MAX_OWNABLE_WORKSHOP)
                return SendErrorMessage(playerid, "You can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP);
        }

        if(WorkshopData[id][wOwner] != 0)
            return SendErrorMessage(playerid, "This workshop is already owned at the moment.");

        if(WorkshopData[id][wPrice] > GetMoney(playerid))
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        WorkshopData[id][wOwner] = GetPlayerSQLID(playerid);
        format(WorkshopData[id][wOwnerName],MAX_PLAYER_NAME,"%s",NormalName(playerid));
        WorkshopData[id][wLastVisited] = gettime();
        format(WorkshopData[id][wText], 128, "Owned by %s", NormalName(playerid));
        RemoveWorkshopEmploye(id);

        Workshop_Refresh(id);
        Workshop_Save(id);

        GiveMoney(playerid, -WorkshopData[id][wPrice]);
        SendServerMessage(playerid, "You have purchased \"%s\" for %s!", WorkshopData[id][wName], FormatNumber(WorkshopData[id][wPrice]));

        ShowPlayerFooter(playerid, "You have ~g~purchased~w~ a workshop!");
    }
    else if ((id = Farm_Nearest(playerid)) != -1) {
        if (!PlayerData[playerid][pStory])
            return SendErrorMessage(playerid, "You must have accepted character story to buying any property");
        
        if(!PlayerData[playerid][pFarmLicenseExpired])
            return SendErrorMessage(playerid, "You don't have farm licenses.");

        if (Farm_GetCount(playerid))
            return SendErrorMessage(playerid, "You have already owned private farm!");

        if (FarmData[id][farmOwner] != 0)
            return SendErrorMessage(playerid, "This farm is already owned by other players!");

        if (GetMoney(playerid) < FarmData[id][farmPrice])
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        FarmData[id][farmOwner] = PlayerData[playerid][pID];
        FarmData[id][farmLastVisited] = gettime();
        format(FarmData[id][farmOwnerName], MAX_PLAYER_NAME, "%s", NormalName(playerid));
        Farm_RemoveAllEmployees(id);

        Farm_Refresh(id);
        Farm_Save(id);

        GiveMoney(playerid, -FarmData[id][farmPrice]);
        SendCustomMessage(playerid, "FARM", "You've been purchased private farm id: "YELLOW"%d "WHITE"for "GREEN"%s", id, FormatNumber(FarmData[id][farmPrice]));
    }
    else if((id = Business_Inside(playerid)) != -1)
    {
        if(BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
            return SendErrorMessage(playerid, "This business is closed!");

        if(BusinessData[id][bizType] == 5) {
            Business_CarMenu(playerid, id);
        } else {
            if(PlayerTemp[playerid][temp_selecttextdraw])
                return 0;

            Business_PurchaseMenu(playerid, id);
        }
    } else if ((id = Business_NearestDeliver(playerid)) != -1) {
        if (!IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You must in any vehicle to purchase menu");

        if(BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner] || BusinessData[id][bizSeal])
            return SendErrorMessage(playerid, "This business is closed!");

        if (BusinessData[id][bizType] == 4) {
            if(PlayerTemp[playerid][temp_selecttextdraw])
                return 0;

            Business_PurchaseMenu(playerid, id);
        }
    }
    return 1;
}

CMD:buygun(playerid) {
    if(GetPlayerInterior(playerid) == 7 && IsPlayerInRangeOfPoint(playerid, 3.0, 308.1450,-140.9854,999.6016))
    {
        if(PlayerData[playerid][pFirearmLicenseExpired] < 1)
            return SendErrorMessage(playerid, "This store only sells to people with a firearm license.");

        if (IsPlayerDuty(playerid))
            return SendErrorMessage(playerid, "You must off duty as faction to use this command!");

        Dialog_Show(playerid, AmmunationDialog, DIALOG_STYLE_LIST, "Ammunation", "Buy weapon\nBuy ammo\nRepair gun", "Select", "Close");
    } else SendErrorMessage(playerid, "You must be inside ammunation to use this command!");
    return 1;
}

stock const g_buyWeapon[][] = 
{
    //weapon id price type name
    {23, 3500, 1, "Small Gun"}, //silenced
    {24, 10000, 1, "Small Gun"}, //desert eagle
    {25, 8000, 2, "Heavy Gun"}, //shotgun
    {33, 10000, 2, "Heavy Gun"}, //rifle
    {29, 15000, 3, "Automatic Gun"}, //mp 5
    {31, 20000, 3, "Automatic Gun"} //m4
};

Dialog:AmmunationDialog(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                new list_weapon[512];

                strcat(list_weapon, "Weapon\tPrice\tType\n");
                for(new i = 0; i != sizeof(g_buyWeapon); i++) {
                    strcat(list_weapon, sprintf("%s\t%s\t%s\n", ReturnWeaponName(g_buyWeapon[i][0]), FormatNumber(g_buyWeapon[i][1]), g_buyWeapon[i][3]));
                }
                Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_TABLIST_HEADERS, "Buy Weapon", list_weapon, "Select", "Back");
            }
            case 1:
            {
                new weaponid;

                if((weaponid = GetWeapon(playerid)) == 0) 
                    return SendErrorMessage(playerid, "You're not holding any weapon.");

                if(g_aWeaponSlots[weaponid] == 1)
                    return SendErrorMessage(playerid, "This weapon isn't firearm weapon.");

                if (ReturnWeaponAmmo(playerid, weaponid) >= MaxGunAmmo[weaponid])
                    return SendErrorMessage(playerid, "This weapon is already have maximum of ammo.");

                new ammo = (MaxGunAmmo[weaponid]-ReturnWeaponAmmo(playerid, weaponid)), price = floatround((ammo/2));

                if (GetMoney(playerid) < price)
                    return SendErrorMessage(playerid, "You need %s to buying %d ammo(s)", FormatNumber(price), ammo);

                if(weaponid > 22 || weaponid < 38) {
                    PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_ammo] += ammo;
                    GiveMoney(playerid, -price);
                    SendCustomMessage(playerid, "AMMUNATION", "You've been bought "YELLOW"%s %d ammo(s) "WHITE"for "GREEN"%s", ReturnWeaponName(weaponid), ammo, FormatNumber(price));
                }
            }
            case 2: {
                new weaponid;

                if((weaponid = GetWeapon(playerid)) == 0) 
                    return SendErrorMessage(playerid, "You're not holding any weapon.");

                if(g_aWeaponSlots[weaponid] == 1)
                    return SendErrorMessage(playerid, "This weapon isn't firearm weapon.");

                if (ReturnWeaponDurability(playerid, weaponid) >= MaxGunAmmo[weaponid])
                    return SendErrorMessage(playerid, "This weapon is already have maximum of durabillity.");

                new durabillity = (MaxGunAmmo[weaponid]-ReturnWeaponDurability(playerid, weaponid)), price = floatround((durabillity/2));

                if (GetMoney(playerid) < price)
                    return SendErrorMessage(playerid, "You need %s to repairing %s", FormatNumber(price), ReturnWeaponName(weaponid));

                if(weaponid > 22 || weaponid < 38) {
                    PlayerGuns[playerid][g_aWeaponSlots[weaponid]][weapon_durability] += durabillity;
                    GiveMoney(playerid, -price);
                    SendCustomMessage(playerid, "AMMUNATION", "You've been repaired your "YELLOW"%s "WHITE"for "GREEN"%s", ReturnWeaponName(weaponid), FormatNumber(price));
                }
            }
        }
    }
    return 1;
}

Dialog:BuyWeapon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if (PlayerData[playerid][pFirearmLicenseType] != g_buyWeapon[listitem][2])
            return SendErrorMessage(playerid, "You can only buy a %s type weapon.", GetFirearmLicType(playerid));

        if(GetMoney(playerid) < g_buyWeapon[listitem][1])
            return SendErrorMessage(playerid, "Uang yang Kamu miliki tidak mencukupi untuk membeli %s.", ReturnWeaponName(g_buyWeapon[listitem][0]));

        if(PlayerHasWeapon(playerid, g_buyWeapon[listitem][0]))
            return SendErrorMessage(playerid, "Kamu sudah memiliki senjata yang sama.");

        if(PlayerHasWeaponInSlot(playerid, g_buyWeapon[listitem][0]))
            return SendErrorMessage(playerid, "Senjata ini berada satu slot dengan senjata yang kamu punya.");

        GivePlayerWeaponEx(playerid, g_buyWeapon[listitem][0], ((MaxGunAmmo[g_buyWeapon[listitem][0]] * 2)/10), MaxGunAmmo[g_buyWeapon[listitem][0]]);

        SendCustomMessage(playerid, "AMMUNATION", "You've been bought "CYAN"%s "WHITE"for "GREEN"%s", ReturnWeaponName(g_buyWeapon[listitem][0]), FormatNumber(g_buyWeapon[listitem][1]));
        GiveMoney(playerid, -g_buyWeapon[listitem][1]);
    }
    else Dialog_Show(playerid, AmmunationDialog, DIALOG_STYLE_LIST, "Ammunation", "Buy weapon\nBuy ammo\nRepair gun", "Select", "Close");
    return 1;
}

CMD:abandon(playerid, params[])
{
    static
        id = -1;

    if(!IsPlayerInAnyVehicle(playerid) && (id = Workshop_Nearest(playerid)) != -1 && WorkshopData[id][wOwner] == GetPlayerSQLID(playerid))
    {
        if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        {
            SendSyntaxMessage(playerid, "/abandon [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You are about to abandon your workshop with no refund.");
        }
        else if(!strcmp(params, "confirm", true))
        {
            if(WorkshopData[id][wSeal]) return SendErrorMessage(playerid, "Can't abandon sealed propery.");
            WorkshopData[id][wOwner] = 0;
            format(WorkshopData[id][wOwnerName],MAX_PLAYER_NAME,"None");
            WorkshopData[id][wComponent] = 0;
            WorkshopData[id][wVault] = 0;

            Workshop_Refresh(id);
            Workshop_Save(id);

            SendServerMessage(playerid, "You have abandoned your workshop: %s.", WorkshopData[id][wName]);
        }
    }
    else if(!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
    {
        if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        {
            SendSyntaxMessage(playerid, "/abandon [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" You are about to abandon your business with no refund.");
        }
        else if(!strcmp(params, "confirm", true))
        {
            if(BusinessData[id][bizSeal]) return SendErrorMessage(playerid, "Can't abandon sealed propery.");
            BusinessData[id][bizOwner] = 0;
            BusinessData[id][bizVault] = 0;

            if (Business_VehGetCount(id)) {
                for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                    Vehicle_Delete(i);
                }
            }

            BusinessEmployee_RemoveAll(id);
            Business_RemoveObjects(id);

            Business_Refresh(id);
            Business_Save(id);

            SendServerMessage(playerid, "You have abandoned your business: %s.", BusinessData[id][bizName]);
            Log_Write("logs/biz_log.txt", "[%s] %s has abandoned business ID: %d.", ReturnDate(), ReturnName(playerid), id);
        }
    }
    else SendErrorMessage(playerid, "You are not in range of anything you can abandon.");
    return 1;
}

CMD:hm(playerid, params[]) {
    static
        id = -1;

    if ((id = House_Inside(playerid)) != -1) {
        if (House_IsOwner(playerid, id)) {
            Dialog_Show(playerid, House_Menu, DIALOG_STYLE_LIST, "House Menu", "Toggle lock\nToggle light\nStorage\nFurniture\nStructure list\nAssign Builder\nAbandon", "Select", "Cancel");
            return 1;
        }
        SendErrorMessage(playerid, "You must be in your house to open house menu.");
        return 1;
    }
    SendErrorMessage(playerid, "You must be in a house to open house menu.");
    return 1;
}

CMD:dyoh(playerid, params[]) {
    static
        id = -1;

    if (GetPlayerJob(playerid, 0) != JOB_BUILDER && GetPlayerJob(playerid, 1) != JOB_BUILDER)
        return SendErrorMessage(playerid, "You're not a Builder!");

    if ((id = House_Inside(playerid)) != -1) {
        if (HouseData[id][houseBuilder] == PlayerData[playerid][pID] || House_IsOwner(playerid, id)) {
            Dialog_Show(playerid, House_Structure, DIALOG_STYLE_LIST, "House Structure", "Add structure\nMove structure\nRetexture structure\nDestroy structure\nCopy structure\nDestroy all structure\nStructure list\nMove furniture\nDestroy furniture\nStore furniture\nFurniture list", "Select", "Back");
            return 1;
        }
        SendErrorMessage(playerid, "You don't have any permission to access this house structures");
        return 1;
    }
    SendErrorMessage(playerid, "You're not in any house.");
    return 1;
}

CMD:searchtexture(playerid, params[]) {
    if (GetPlayerJob(playerid, 0) != JOB_BUILDER && GetPlayerJob(playerid, 1) != JOB_BUILDER)
        return SendErrorMessage(playerid, "You're not a Builder!");

    new texturename[32];
    if (sscanf(params, "s[32]", texturename))
        return SendSyntaxMessage(playerid, "/searchtexture [texture name]");
    
    SearchTextures(playerid, texturename);
    return 1;
}

Dialog:House_Menu(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = House_Inside(playerid);
        if (id != -1) {
            switch (listitem) {
                case 0: {
                    if(!HouseData[id][houseLocked]) {
                        HouseData[id][houseLocked] = true;
                        House_Save(id);

                        ShowPlayerFooter(playerid, "You have ~r~locked~w~ your house!");
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        cmd_hm(playerid, "\0");
                    } else {
                        HouseData[id][houseLocked] = false;
                        House_Save(id);

                        ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ your house!");
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        cmd_hm(playerid, "\0");
                    }
                }
                case 1: {
                    if(HouseData[id][houseLights]) {
                        foreach (new i : Player) if(House_Inside(i) == id) {
                            PlayerTextDrawShow(i, PlayerTextdraws[i][textdraw_switch]);
                        }
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s flicks the light switch off.", ReturnName(playerid, 0, 1));
                        HouseData[id][houseLights] = false;
                        cmd_hm(playerid, "\0");
                    } else {
                        foreach (new i : Player) if(House_Inside(i) == id) {
                            PlayerTextDrawHide(i, PlayerTextdraws[i][textdraw_switch]);
                        }
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s flicks the light switch on.", ReturnName(playerid, 0, 1));
                        HouseData[id][houseLights] = true;
                        cmd_hm(playerid, "\0");
                    }
                }
                case 2: House_OpenStorage(playerid, id);
                case 3: {
                    new
                        count = 0,
                        string[MAX_FURNITURE * 64];

                    if(!Furniture_GetCount(id))
                        return SendErrorMessage(playerid, "This house doesn't have any furniture spawned.");

                    strcat(string, "Model\tDistance\n");
                    foreach (new i : HouseFurnitures[id])
                    {
                        if(FurnitureData[id][i][furnitureUnused]) 
                            strcat(string, sprintf("%s\t(Not placed)\n", FurnitureData[id][i][furnitureName]));
                        else 
                            strcat(string, sprintf("%s\t%.2f\n", FurnitureData[id][i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[id][i][furniturePos][0], FurnitureData[id][i][furniturePos][1], FurnitureData[id][i][furniturePos][2])));

                        ListedFurniture[playerid][count++] = i;
                    }
                    Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_TABLIST_HEADERS, "House Furniture", string, "Select", "Cancel");
                }
                case 4: {
                    new
                        string[MAX_HOUSE_STRUCTURES * 128];

                    if(!HouseStructure_GetCount(id))
                        return SendErrorMessage(playerid, "This house doesn't have any structures.");

                    SendClientMessage(playerid, X11_RED, "WARNING: "YELLOW"This option is only show your house structure, if you want to edit structure use '/dyoh'");

                    strcat(string, "Model\tDistance\n");
                    foreach (new i : HouseStruct[id]) {
                        if (HouseStructure[id][i][structureType] > 0) strcat(string, sprintf(ORANGE"Static\t%.2f\n", GetPlayerDistanceFromPoint(playerid, HouseStructure[id][i][structurePos][0], HouseStructure[id][i][structurePos][1], HouseStructure[id][i][structurePos][2])));
                        else strcat(string, sprintf("%s\t%.2f\n", GetStructureNameByModel(HouseStructure[id][i][structureModel]), GetPlayerDistanceFromPoint(playerid, HouseStructure[id][i][structurePos][0], HouseStructure[id][i][structurePos][1], HouseStructure[id][i][structurePos][2])));
                    }
                    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "House Structure", string, "Close", "");
                }
                case 5: {
                    if (HouseData[id][houseBuilder]) Dialog_Show(playerid, House_FiredBuilder, DIALOG_STYLE_MSGBOX, "Fired Builder", WHITE"Your house is already assigned a Builder the contract will be expire on "GREEN"%s"WHITE", do you want to fired them?", "Yes", "Back", ConvertTimestamp(Time:HouseData[id][houseBuilderTime]));
                    else Dialog_Show(playerid, House_AssignBuilder, DIALOG_STYLE_INPUT, "House Assign Builder", "Please input the playerid or name:", "Assign", "Back");
                }
                case 6: Dialog_Show(playerid, House_Abandon, DIALOG_STYLE_MSGBOX, "House Abandon", "Are you sure want to abandon your house?", "Sure", "Back");
            }
        }
    }
    return 1;
}

Dialog:House_Abandon(playerid, response, listitem, inputtext[]) {
    new id = House_Inside(playerid);
    if (id != -1) {
        if (response) {
            HouseData[id][houseOwner] = 0;

            for(new garage = 0; garage != MAX_GARAGE; garage++) if(GarageData[garage][garageExists] && GarageData[garage][garageHouseLink] == HouseData[id][houseID]) {
                if(GarageData[garage][garageInside])
                    return SendErrorMessage(playerid, "Take out all vehicle from your house garage.");

                GarageData[garage][garageOwnerId] = 0;
                GarageData[garage][garageOwner] = EOS;

                Garage_Sync(garage);
            }
            
            House_RemoveFurniture(id);
            House_RemoveAllItems(id);
            HouseStructure_DeleteAll(id);
            House_RemoveAllGateAndObject(id);
            House_Refresh(id);
            House_Save(id);

            SendCustomMessage(playerid, "HOUSE", "You have abandoned your house: %s.", HouseData[id][houseAddress]);
            Log_Write("logs/house_log.txt", "[%s] %s has abandoned house ID: %d.", ReturnDate(), ReturnName(playerid), id);
        }
    } else cmd_hm(playerid, "\0");
    return 1;
}

Dialog:House_AssignBuilder(playerid, response, listitem, inputtext[]) {
    new houseid = House_Inside(playerid);

    if (houseid != -1) {
        if (response) {
            new userid;
            if (isnull(inputtext))
                return Dialog_Show(playerid, House_AssignBuilder, DIALOG_STYLE_INPUT, "House Assign Builder", "Please input the playerid or name:", "Assign", "Back"), SendErrorMessage(playerid, "Invalid input!");

            if (sscanf(inputtext, "u", userid))
                return Dialog_Show(playerid, House_AssignBuilder, DIALOG_STYLE_INPUT, "House Assign Builder", "Please input the playerid or name:", "Assign", "Back"), SendErrorMessage(playerid, "Invalid input!");

            if (!IsPlayerConnected(userid))
                return SendErrorMessage(playerid, "Invalid playerid or name!");

            if (userid == playerid)
                return SendErrorMessage(playerid, "Cannot assign yourself");

            if (GetPlayerJob(userid, 0) != JOB_BUILDER && GetPlayerJob(userid, 1) != JOB_BUILDER)
                return SendErrorMessage(playerid, "That player are not a Bulder");

            HouseData[houseid][houseBuilder] = PlayerData[userid][pID];
            HouseData[houseid][houseBuilderTime] = (gettime()+((24*3600)*7));
            SendCustomMessage(playerid, "HOUSE", "You've been assigned "YELLOW"%s "WHITE"as your house builder, it will automatically fired for 7 days.", ReturnName(userid, 0));
            SendCustomMessage(userid, "HOUSE", ""YELLOW"%s "WHITE"has assigned you as house builder.", ReturnName(playerid, 0));
        }
    }
    return 1;
}

Dialog:House_FiredBuilder(playerid, response, listitem, inputtext[]) {
    if (!response)
        return cmd_hm(playerid, "\0");
    
    new houseid = House_Inside(playerid);
    if (houseid != -1) {
        HouseData[houseid][houseBuilder] = 0;
        HouseData[houseid][houseBuilderTime] = 0;
        SendCustomMessage(playerid, "HOUSE", "You've been fired your house builder.");
    }
    return 1;
}

CMD:buyfurniture(playerid, params[])
{
	static
		id = -1;

	if((id = FurnStore_Inside(playerid)) != -1)
	{
        if (!storeData[id][storeOwner])
            return SendErrorMessage(playerid, "This furniture store has no owner, you cannot buy furniture on here.");

        if (storeData[id][storeSeal])
            return SendErrorMessage(playerid, "This furniture store is sealed by authority.");
        
        new i;
        if (sscanf(params, "d", i))
            return SendSyntaxMessage(playerid, "/buyfurniture [furniture id]");

		if (!Iter_Contains(FurnObject, i))
            return SendErrorMessage(playerid, "Invalid furniture id.");
        
        if (FurnStore[i][furnStoreId] == storeData[id][storeID]) {
            if (!FurnStore[i][furnStock])
                return SendErrorMessage(playerid, "Tidak ada furniture yang dapat di jual sekarang.");
            
            if (GetMoney(playerid) < FurnStore[i][furnPrice])
			    return SendErrorMessage(playerid, "You don't have enough money.");

		    SetPVarInt(playerid, "furnObject", i);
            Dialog_Show(playerid, SelectProperty, DIALOG_STYLE_LIST, "Select Property", "House\nFlat", "Select", "Cancel");
        }
	}
	else SendErrorMessage(playerid, "You're not inside furniture store.");
	return 1;
}

// Dialog:BuyFurniture(playerid, response, listitem, inputtext[]) {
// 	if (response) {
// 		new id = ListedFurnObject[playerid][listitem];

// 		if (GetMoney(playerid) < FurnStore[id][furnPrice])
// 			return SendErrorMessage(playerid, "You don't have enough money.");

// 		SetPVarInt(playerid, "furnObject", id);
//         Dialog_Show(playerid, SelectProperty, DIALOG_STYLE_LIST, "Select Property", "House\nFlat", "Select", "Cancel");
// 	}
// 	return 1;
// }

Dialog:SelectProperty(playerid, response, listitem, inputtext[]) {
    if (response) {
        switch (listitem) {
            case 0: {
                new str[256], count = 0;
                strcat(str, "ID\tAddress\tLocation\n");
                foreach (new i : Houses) if(House_IsOwner(playerid, i) || HouseData[i][houseBuilder] == PlayerData[playerid][pID]) {
                    strcat(str,sprintf("%d\t%s\t%s\n",i,HouseData[i][houseAddress],GetLocation(HouseData[i][housePos][0],HouseData[i][housePos][1],HouseData[i][housePos][2])));
                    ListedHouse[playerid][count++] = i;
                }
                if (count) Dialog_Show(playerid, HouseFurniture, DIALOG_STYLE_TABLIST_HEADERS, "Select House", str, "Select", "Close");
                else SendErrorMessage(playerid, "You don't have any house");
            }
            case 1: {
                new str[256], count = 0, address[32], location[64];
                strcat(str, "ID\tFlat Name\tLocation\n");
                foreach (new flatroom : FlatRooms) if (FlatRoom_IsOwner(playerid, flatroom) || FlatRoom_IsBuilder(playerid, flatroom)) {
                    FlatRoom_GetAddress(flatroom, address);
                    FlatRoom_GetLocation(flatroom, location);
                    strcat(str, sprintf("%d\t%s\t%s\n",flatroom,address,location));
                    ListedFlat[playerid][count++] = flatroom;
                }
                if (count) Dialog_Show(playerid, FlatFurniture, DIALOG_STYLE_TABLIST_HEADERS, "Select Flat", str, "Select", "Close");
                else SendErrorMessage(playerid, "You don't have any flat");
            }
        }
    }
    return 1;
}

Dialog:HouseFurniture(playerid, response, listitem, inputtext[]) {
	if (response) {
		new furnid = -1,
			id = GetPVarInt(playerid, "furnObject"),
			storeid = FurnStore_Inside(playerid),
			price = FurnStore[id][furnPrice],
			model = FurnStore[id][furnModel],
			houseid = ListedHouse[playerid][listitem];

		if (storeid != -1) {
            if (!House_IsBuilder(playerid) && !House_IsOwner(playerid, houseid))
                return SendErrorMessage(playerid, "You're not the owner or builder of this house.");

            if(Furniture_GetCount(houseid) >= Furniture_GetMaxItems(houseid))
                return SendErrorMessage(playerid, "You can only have %d furniture items in your house.", Furniture_GetMaxItems(houseid));

            furnid = Furniture_Add(houseid, FurnStore[id][furnName], model, 0.0, 0.0, 0.0);

            if(furnid == cellmin)
                return SendErrorMessage(playerid, "You don't have any house furniture slots left.");

            for (new i = 0; i < MAX_MATERIALS; i ++) if (FurnStore[id][furnMaterials][i] > 0) {
                FurnitureData[houseid][furnid][furnitureMaterials][i] = FurnStore[id][furnMaterials][i];
            }

            Furniture_Save(furnid, houseid);
            GiveMoney(playerid, -price);
            SendCustomMessage(playerid, "FURNSTORE", "\"%s"WHITE"\" has arrived to your house", FurnStore[id][furnName]);

            FurnStore[id][furnStock]--;
            storeData[storeid][storeVault] += Tax_Percent(price);

            FurnObject_Refresh(id);
            FurnStore_Save(storeid);
            Tax_AddPercent(price);
		}
	}
	return 1;
}

Dialog:FlatFurniture(playerid, response, listitem, inputtext[]) {
	if (response) {
		new furnid = -1,
			id = GetPVarInt(playerid, "furnObject"),
			storeid = FurnStore_Inside(playerid),
			price = FurnStore[id][furnPrice],
			model = FurnStore[id][furnModel],
            flatid = ListedFlat[playerid][listitem];

		if (storeid != -1) {
            if (!FlatRoom_IsOwner(playerid, flatid) && !FlatRoom_IsBuilder(playerid, flatid))
                return SendErrorMessage(playerid, "You're not the owner or builder of this flat.");

            if(FlatFurniture_GetCount(flatid) >= FlatRoom_GetItemsMax(flatid))
                return SendErrorMessage(playerid, "You can only have %d furniture items in your flat.", FlatRoom_GetItemsMax(flatid));

            furnid = FlatFurniture_Add(flatid, FurnStore[id][furnName], model, 0.0, 0.0, 0.0);

            if(furnid == cellmin)
                return SendErrorMessage(playerid, "You don't have any flat furniture slots left.");

            for (new i = 0; i < MAX_MATERIALS; i ++) if (FurnStore[id][furnMaterials][i] > 0) {
                FlatFurniture[flatid][furnid][furnMaterials][i] = FurnStore[id][furnMaterials][i];
            }

            FlatFurniture_Save(furnid, flatid);
            GiveMoney(playerid, -price);
            SendCustomMessage(playerid, "FURNSTORE", "\"%s"WHITE"\" has arrived to your flat", FurnStore[id][furnName]);

            FurnStore[id][furnStock]--;
            storeData[storeid][storeVault] += Tax_Percent(price);

            FurnObject_Refresh(id);
            FurnStore_Save(storeid);
            Tax_AddPercent(price);
		}
	}
	return 1;
}

CMD:hlock(playerid) {
    static
        id = -1;

    if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1) {
        if (House_IsOwner(playerid, id)) {
            if(!HouseData[id][houseLocked]) {
                HouseData[id][houseLocked] = true;
                House_Save(id);

                ShowPlayerFooter(playerid, "You have ~r~locked~w~ your house!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            } else {
                HouseData[id][houseLocked] = false;
                House_Save(id);

                ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ your house!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
        }
    }
    else SendErrorMessage(playerid, "You are not in range of your house.");
    return 1;
}

CMD:bizlock(playerid) {
    static
        id = -1;
    
    if(!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
    {
        if(Business_IsOwner(playerid, id) || Business_IsEmployee(playerid, id))
        {
            if(!BusinessData[id][bizLocked])
            {
                BusinessData[id][bizLocked] = true;

                Business_Refresh(id);
                Business_Save(id);

                ShowPlayerFooter(playerid, "You have ~r~locked~w~ the business!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
            else
            {
                BusinessData[id][bizLocked] = false;

                Business_Refresh(id);
                Business_Save(id);

                ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the business!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
        }
    }
    else SendErrorMessage(playerid, "You are not in range of your business.");
    return 1;
}

CMD:furnlock(playerid) {
    static
        id = -1;

    if(!IsPlayerInAnyVehicle(playerid) && (id = (FurnStore_Inside(playerid) == -1) ? (FurnStore_Nearest(playerid)) : (FurnStore_Inside(playerid))) != -1)
    {
        if(FurnStore_IsOwner(playerid, id) || FurnStore_IsEmployee(playerid, id))
        {
            if(!storeData[id][storeLocked])
            {
                storeData[id][storeLocked] = true;
                FurnStore_Refresh(id);

                ShowPlayerFooter(playerid, "You have ~r~locked~w~ the furniture store!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
            else
            {
                storeData[id][storeLocked] = false;
                FurnStore_Refresh(id);

                ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the furniture store!");
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
        }
    }
    else SendErrorMessage(playerid, "You are not in range of your furniture store.");
    return 1;
}

CMD:sell(playerid, params[])
{
    new
        targetid,
        type[24],
        string[128];

    if(sscanf(params, "us[24]S()[128]", targetid, type, string))
    {
        SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" house, business, workshop, furnstore, flat");
        return 1;
    }
    if(targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendErrorMessage(playerid, "The player is disconnected or not near you.");
    if(PlayerData[targetid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(targetid == playerid) return SendErrorMessage(playerid, "You cannot sell to yourself.");
    if (!PlayerData[targetid][pStory])
        return SendErrorMessage(playerid, "That player must have accepted character story to buying any property");

    if(!strcmp(type, "house", true))
    {
        static
            price,
            houseid = -1;

        if (PlayerData[targetid][pVipTime] > 0 && PlayerData[targetid][pVip] == 2) {
            if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES+1)
                return SendErrorMessage(playerid, "This player can only own %d houses at a time.", MAX_OWNABLE_HOUSES+1);
        } else if (PlayerData[targetid][pVipTime] > 0 && PlayerData[targetid][pVip] == 3) {
            if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES+2)
                return SendErrorMessage(playerid, "This player can only own %d houses at a time.", MAX_OWNABLE_HOUSES+2);
        } else if (PlayerData[targetid][pVipTime] > 0 && PlayerData[targetid][pVip] == 4) {
            if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES+3)
                return SendErrorMessage(playerid, "This player can only own %d houses at a time.", MAX_OWNABLE_HOUSES+3);
        } else {
            if(House_GetCount(targetid) >= MAX_OWNABLE_HOUSES)
                return SendErrorMessage(playerid, "This player can only own %d houses at a time.", MAX_OWNABLE_HOUSES);           
        }

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [house] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid)) {
            if (House_GetGarageCount(houseid) > 0) {
                new count = 0;

                for (new i = 0; i != MAX_GARAGE; i ++) if (GarageData[i][garageExists] && GarageData[i][garageHouseLink] == HouseData[houseid][houseID]) {
                    count += GarageData[i][garageInside];
                }

                if (count > 0)
                    return SendErrorMessage(playerid, "You cannot sell your house while there are vehicles inside.");
            }

            PlayerData[targetid][pHouseSeller] = playerid;
            PlayerData[targetid][pHouseOffered] = houseid;
            PlayerData[targetid][pHouseValue] = price;

            SendCustomMessage(playerid, "HOUSE", "You have requested %s to purchase your house (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendCustomMessage(targetid, "HOUSE", "%s has offered you their house for %s (type \"/approve house\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your houses.");
    }
    else if(!strcmp(type, "business", true))
    {
        static
            price,
            bizid = -1;

        if(!PlayerData[targetid][pBusinessLicenseExpired])
            return SendErrorMessage(playerid, "That player don't have business licenses.");

        if (PlayerData[targetid][pVip] >= 3 && PlayerData[targetid][pVipTime] > 0) {
            if(Business_GetCount(targetid) >= MAX_OWNABLE_BUSINESSES+1)
                return SendErrorMessage(playerid, "That player can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES+1);
        } else {
            if(Business_GetCount(targetid) >= MAX_OWNABLE_BUSINESSES)
                return SendErrorMessage(playerid, "That player can only own %d businesses at a time.", MAX_OWNABLE_BUSINESSES);
        }

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [business] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
            if(BusinessData[bizid][bizSeal]) return SendErrorMessage(playerid, "Can't sell sealed property.");
            PlayerData[targetid][pBusinessSeller] = playerid;
            PlayerData[targetid][pBusinessOffered] = bizid;
            PlayerData[targetid][pBusinessValue] = price;

            SendCustomMessage(playerid, "BUSINESS", "You have requested %s to purchase your business (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendCustomMessage(targetid, "BUSINESS", "%s has offered you their business for %s (type \"/approve business\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your businesses.");
    }
    else if(!strcmp(type, "workshop", true))
    {
        static
            price,
            ws = -1;

        if(!PlayerData[targetid][pWorkshopLicenseExpired])
            return SendErrorMessage(playerid, "That player don't have workshop licenses.");

        if (PlayerData[targetid][pVipTime] > 0 && PlayerData[targetid][pVip] >= 3) {
            if(Workshop_GetCount(targetid) >= MAX_OWNABLE_WORKSHOP+1)
                return SendErrorMessage(playerid, "That player can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP+1);
        } else {
            if(Workshop_GetCount(targetid) >= MAX_OWNABLE_WORKSHOP)
                return SendErrorMessage(playerid, "That player can only own %d workshop at a time.", MAX_OWNABLE_WORKSHOP);
        }

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [workshop] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((ws = Workshop_Nearest(playerid)) != -1 && Workshop_IsOwner(playerid, ws)) {
            if(WorkshopData[ws][wSeal]) return SendErrorMessage(playerid, "Can't sell sealed property.");
            PlayerData[targetid][pWorkshopSeller] = playerid;
            PlayerData[targetid][pWorkshopOffered] = ws;
            PlayerData[targetid][pWorkshopValue] = price;

            SendCustomMessage(playerid, "WORKSHOP", "You have requested %s to purchase your workshop (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendCustomMessage(targetid, "WORKSHOP", "%s has offered you their workshop for %s (type \"/approve workshop\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your workshop.");
    }
    else if(!strcmp(type, "furnstore", true))
    {
        static
            price,
            id = -1;

        if (FurnStore_GetCount(targetid) > 0)
            return SendErrorMessage(playerid, "That player already have furniture store.");

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [furnstore] [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "The price you've entered cannot below the value of $1.");

        if((id = FurnStore_Nearest(playerid)) != -1 && FurnStore_IsOwner(playerid, id)) {
            if(storeData[id][storeSeal]) return SendErrorMessage(playerid, "Can't sell sealed property.");
            PlayerData[targetid][pFurnstoreSeller] = playerid;
            PlayerData[targetid][pFurnstoreOffered] = id;
            PlayerData[targetid][pFurnstoreValue] = price;

            SendCustomMessage(playerid, "FURNSTORE", "You have requested %s to purchase your furniture store (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendCustomMessage(targetid, "FURNSTORE", "%s has offered you their furniture store for %s (type \"/approve furnstore\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your furniture store.");
    } else if (!strcmp(type, "flat", true)) {
        static
            price,
            id = -1;
        
        if (FlatRoom_GetCount(targetid) >= FlatRoom_GetMaxCount(targetid))
            return SendErrorMessage(playerid, "That player have reached flat limit of "YELLOW"%d", FlatRoom_GetMaxCount(targetid));
        
        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/sell [playerid/PartOfName] [flat] [price]");
        
        if ((id = FlatRoom_Nearest(playerid)) != -1 || (id = FlatRoom_Inside(playerid)) != -1) {
            if (FlatRoom[id][flatRoomSeal])
                return SendErrorMessage(playerid, "Can't sell sealed property.");
            
            PlayerData[targetid][pFlatSeller] = playerid;
            PlayerData[targetid][pFlatOffered] = id;
            PlayerData[targetid][pFlatValue] = price;
            SendCustomMessage(playerid, "FLAT", "You have requested %s to purchase your furniture store (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendCustomMessage(targetid, "FLAT", "%s has offered you their furniture store for %s (type \"/approve flat\" to accept).", ReturnName(playerid, 0), FormatNumber(price));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any of your flat.");
    }
    return 1;
}

CMD:sellveh(playerid, params[]) {
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 2618.99, -2226.67, 13.38))
        return SendErrorMessage(playerid, "You are not in Valley Docks Import!");
    
    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must in any vehicle to use this command!");

    new price, vehid = GetPlayerVehicleID(playerid), id = -1, vehname[32];

    GetVehicleNameByVehicle(vehid, vehname);
    if (IsABike(vehid)) {
        price = 100;
    } else if (IsABoat(vehid)) {
        price = 300;
    } else if (IsDoorVehicle(vehid)){
        price = 1000;
    }

    if (isnull(params)) {
        SendCustomMessage(playerid, "SELLVEH", "You can sell your "GREEN"%s "WHITE"for "YELLOW"%s", vehname, FormatNumber(price));
        SendCustomMessage(playerid, "SELLVEH", "Type /sellveh [confirm]");
        return 1;
    }

    if (!strcmp(params, "confirm")) {
        if ((id = Vehicle_GetID(vehid)) != -1) {
            if (!Vehicle_IsOwner(playerid, id))
                return SendErrorMessage(playerid, "This is not your vehicle");

            GiveMoney(playerid, price);
            Vehicle_Delete(id);
            SendCustomMessage(playerid, "SELLVEH", "You has successfully sell your vehicle to Valley Docks Import.");
            SendCustomMessage(playerid, "SELLVEH", "You got %s for selling your vehicle.", FormatNumber(price));
            return 1;
        }
    } else {
        SendCustomMessage(playerid, "SELLVEH", "You can sell your "GREEN"%s "WHITE"for "YELLOW"%s", vehname, FormatNumber(price));
        SendCustomMessage(playerid, "SELLVEH", "Type /sellveh [confirm]");
    }
    return 1;
}

CMD:approve(playerid, params[])
{
    if(isnull(params))
    {
        SendSyntaxMessage(playerid, "/approve [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" house, business, workshop, car, food, faction, greet, frisk, plate, body, stnk, inspect, marriage, divorce, shareloc, trade");
        return 1;
    }
    if(!strcmp(params, "plate", true) && PlayerData[playerid][pCustomPlate])
    {
        static 
            id = -1,
            userid;

        userid = PlayerData[playerid][pPlateID];

        if(!IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You're not inside a vehicle.");

        if((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1 && Vehicle_IsOwner(playerid, id))
        {
            format(VehicleData[id][cPlate], 24, "%s", PlayerData[playerid][pPlate]);
         
            SendServerMessage(userid, "%s accept custom plate request.", ReturnName2(playerid, 0));
            SendServerMessage(playerid, "You're now accept custom plate number!.");

            Log_Write("logs/customplate.txt", "[%s] %s give permission %s to change custom plate (%s).", ReturnDate(), ReturnName2(userid), ReturnName2(playerid), PlayerData[playerid][pPlate]);

            PlayerData[playerid][pCustomPlate] = 0;
            PlayerData[playerid][pPlateID] = INVALID_PLAYER_ID;
            PlayerData[playerid][pPlate] = EOS;

            RespawnVehicle(VehicleData[id][cVehicle]);
            Vehicle_Save(id);
        }
        else
            SendErrorMessage(playerid, "You're not inside your vehicle.");
    }
    if(!strcmp(params, "house", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pHouseSeller],
            houseid = PlayerData[playerid][pHouseOffered],
            price = PlayerData[playerid][pHouseValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this house.");

        if(House_Nearest(playerid) != houseid)
            return SendErrorMessage(playerid, "You must be near the house to purchase it.");

        if(!House_IsOwner(sellerid, houseid))
            return SendErrorMessage(playerid, "This house offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's house for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your house for %s.", ReturnName(playerid, 0), FormatNumber(price));

        format(HouseData[houseid][houseOwnerName], MAX_PLAYER_NAME, NormalName(playerid));
        HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
        HouseData[houseid][houseLastVisited] = gettime();

        new query[1024];
        for(new garage = 0; garage != MAX_GARAGE; garage++) if(GarageData[garage][garageExists] && GarageData[garage][garageHouseLink] == HouseData[houseid][houseID]) {
            GarageData[garage][garageOwnerId] = HouseData[houseid][houseOwner];
            format(GarageData[garage][garageOwner], MAX_PLAYER_NAME, HouseData[houseid][houseOwnerName]);
            GarageData[garage][garageInside] = 0;

            for (new j = 0; j < MAX_DYNAMIC_VEHICLES; j ++) if (Iter_Contains(DynamicVehicles, j) && VehicleData[j][cOwner] && VehicleData[j][cGarage] == GarageData[garage][garageID])
            {
                VehicleData[j][cGarage] = 0;
                VehicleData[j][cInt] = 0;
                VehicleData[j][cVw] = 0;
                VehicleData[j][cPos][0] = GarageData[garage][garageLoc][0];
                VehicleData[j][cPos][1] = GarageData[garage][garageLoc][1];
                VehicleData[j][cPos][2] = GarageData[garage][garageLoc][2];
                VehicleData[j][cPos][3] = GarageData[garage][garageLoc][3];

                Vehicle_Spawn(j);
            }

            format(query,sizeof(query),"UPDATE `player_vehicles` SET `Garage`= '0', `Pos1` = '%.01f', `Pos2` = '%.01f', `Pos3` = '%.01f', `Pos4` = '%.01f' WHERE `Garage`='%d'", GarageData[garage][garageLoc][0], GarageData[garage][garageLoc][1], GarageData[garage][garageLoc][2], GarageData[garage][garageLoc][3], GarageData[garage][garageID]);
            mysql_tquery(g_iHandle, query);

            Garage_Sync(garage);
        }

        House_RemoveAllItems(houseid);
        House_RemoveAllGateAndObject(houseid);
        House_Refresh(houseid);
        House_Save(houseid);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a house to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price));

        PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pHouseOffered] = -1;
        PlayerData[playerid][pHouseValue] = 0;
    }
    if(!strcmp(params, "business", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pBusinessSeller],
            bizid = PlayerData[playerid][pBusinessOffered],
            price = PlayerData[playerid][pBusinessValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this business.");

        if(Business_Nearest(playerid) != bizid)
            return SendErrorMessage(playerid, "You must be near the business to purchase it.");

        if(!Business_IsOwner(sellerid, bizid))
            return SendErrorMessage(playerid, "This business offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's business for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your business for %s.", ReturnName(playerid, 0), FormatNumber(price));

        format(BusinessData[bizid][bOwnerName], MAX_PLAYER_NAME, NormalName(playerid));
        BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
        BusinessData[bizid][bizLastVisited] = gettime();

        BusinessEmployee_RemoveAll(bizid);
        Business_RemoveObjects(bizid);

        Business_Save(bizid);
        Business_Refresh(bizid);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a business to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price));

        PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pBusinessOffered] = -1;
        PlayerData[playerid][pBusinessValue] = 0;
    }
    if(!strcmp(params, "workshop", true) && PlayerData[playerid][pWorkshopSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pWorkshopSeller],
            ws = PlayerData[playerid][pWorkshopOffered],
            price = PlayerData[playerid][pWorkshopValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this workshop.");

        if(Workshop_Nearest(playerid) != ws)
            return SendErrorMessage(playerid, "You must be near the workshop to purchase it.");

        if(!Workshop_IsOwner(sellerid, ws))
            return SendErrorMessage(playerid, "This workshop offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's workshop for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your workshop for %s.", ReturnName(playerid, 0), FormatNumber(price));

        WorkshopData[ws][wOwner] = GetPlayerSQLID(playerid);
        format(WorkshopData[ws][wOwnerName],MAX_PLAYER_NAME,"%s",NormalName(playerid));
        WorkshopData[ws][wLastVisited] = gettime();
        WorkshopData[ws][wComponent] = 0;
        WorkshopData[ws][wVault] = 0;

        Workshop_Save(ws);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        PlayerData[playerid][pWorkshopSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pWorkshopOffered] = -1;
        PlayerData[playerid][pWorkshopValue] = 0;
    }
    if(!strcmp(params, "furnstore", true) && PlayerData[playerid][pFurnstoreSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pFurnstoreSeller],
            id = PlayerData[playerid][pFurnstoreOffered],
            price = PlayerData[playerid][pFurnstoreValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this Furniture Store.");

        if(FurnStore_Nearest(playerid) != id)
            return SendErrorMessage(playerid, "You must be near the Furniture Store to purchase it.");

        if(!FurnStore_IsOwner(sellerid, id))
            return SendErrorMessage(playerid, "This furniture store offer is no longer valid.");

        SendServerMessage(playerid, "You have successfully purchased %s's Furniture Store for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your Furniture Store for %s.", ReturnName(playerid, 0), FormatNumber(price));

        storeData[id][storeOwner] = GetPlayerSQLID(playerid);
        format(storeData[id][storeOwnerName], MAX_PLAYER_NAME, ReturnName2(playerid));
        storeData[id][storeVault] = 0;
        storeData[id][storeEmploye][0] = storeData[id][storeEmploye][1] = storeData[id][storeEmploye][2] = 0;

        FurnStore_Refresh(id);
		FurnStore_Save(id);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        PlayerData[playerid][pFurnstoreSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFurnstoreOffered] = -1;
        PlayerData[playerid][pFurnstoreValue] = 0;
    }
    if(!strcmp(params, "flat", true) && PlayerData[playerid][pFlatSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pFlatSeller],
            id = PlayerData[playerid][pFlatOffered],
            price = PlayerData[playerid][pFlatValue];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this Flat.");

        if(FlatRoom_Nearest(playerid) != id && FlatRoom_Inside(playerid) != id)
            return SendErrorMessage(playerid, "You must be near the Flat to purchase it.");

        if(!FlatRoom_IsOwner(sellerid, id))
            return SendErrorMessage(playerid, "This flat offer is no longer valid.");

        SendCustomMessage(playerid, "FLAT", "You have successfully purchased %s's Flat for %s.", ReturnName(sellerid, 0), FormatNumber(price));
        SendCustomMessage(sellerid, "FLAT", "%s has successfully purchased your Flat for %s.", ReturnName(playerid, 0), FormatNumber(price));

        FlatRoom[id][flatRoomOwner] = GetPlayerSQLID(playerid);
        FlatRoom[id][flatRoomMoney] = 0;
        FlatRoom[id][flatRoomLastVisited] = gettime();
        Flat_RemoveAllItems(id);

        FlatRoom_Refresh(id);
		FlatRoom_Save(id);

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        PlayerData[playerid][pFlatSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFlatOffered] = -1;
        PlayerData[playerid][pFlatValue] = 0;
    }
    if(!strcmp(params, "car", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pCarSeller],
            carid = PlayerData[playerid][pCarOffered],
            price = PlayerData[playerid][pCarValue],
            vehicleid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,5.0,false));

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds to purchase this vehicle.");

        if(vehicleid != carid)
            return SendErrorMessage(playerid, "You must be near the vehicle to purchase it.");

        if(!Vehicle_IsOwner(sellerid, carid))
            return SendErrorMessage(playerid, "This vehicle offer is no longer valid.");

        if(IsVehicleOnGarage(carid))
            return SendErrorMessage(playerid, "This vehicle in your garage, take out from the garage first.");

        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);

        SendServerMessage(playerid, "You have successfully purchased %s's %s for %s.", ReturnName(sellerid, 0), GetVehicleNameByModel(VehicleData[carid][cModel]), FormatNumber(price));
        SendServerMessage(sellerid, "%s has successfully purchased your %s for %s.", ReturnName(playerid, 0), GetVehicleNameByModel(VehicleData[carid][cModel]), FormatNumber(price));

        VehicleData[carid][cOwner] = GetPlayerSQLID(playerid);
        Vehicle_Save(carid);

        Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a %s to %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], GetVehicleNameByModel(VehicleData[carid][cModel]), ReturnName(sellerid, 0), AccountData[sellerid][pIP], FormatNumber(price));

        PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pCarOffered] = -1;
        PlayerData[playerid][pCarValue] = 0;
    }
    if (!strcmp(params,"trade",true) && PlayerData[playerid][pVehTradedPlayer] != INVALID_PLAYER_ID) {
        new
            tradeplayer = PlayerData[playerid][pVehTradedPlayer],
            playerveh = PlayerData[playerid][pVehTraded],
            myveh = PlayerData[tradeplayer][pVehTraded];

        if(!IsPlayerNearPlayer(playerid, tradeplayer, 5.0))
            return SendErrorMessage(playerid, "You are not near that player.");
        
        VehicleData[playerveh][cOwner] = GetPlayerSQLID(playerid);
        VehicleData[myveh][cOwner] = GetPlayerSQLID(tradeplayer);
        Vehicle_Save(playerveh);
        Vehicle_Save(myveh);

        SendCustomMessage(tradeplayer, "VEHICLE", "Your request has been accepted by "YELLOW"%s"WHITE", and transaction was successfull.",ReturnName(playerid, 0));
        SendCustomMessage(playerid, "VEHICLE", "You has accepted "YELLOW"%s"WHITE" request, and transaction was successfull.",ReturnName(tradeplayer, 0));

        PlayerData[tradeplayer][pVehTradedPlayer] = PlayerData[playerid][pVehTradedPlayer] = INVALID_PLAYER_ID;
        PlayerData[tradeplayer][pVehTraded] = PlayerData[playerid][pVehTraded] = -1;
    }
    if(!strcmp(params, "food", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
    {
        new
            sellerid = PlayerData[playerid][pFoodSeller],
            type = PlayerData[playerid][pFoodType],
            price = PlayerData[playerid][pFoodPrice];

        if(!IsPlayerNearPlayer(playerid, sellerid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        if(GetPlayerState(sellerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(sellerid)) != 423)
            return SendErrorMessage(playerid, "The seller not inside the job vehicle.");

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds for the food.");

        switch (type)
        {
            case 3:
            {
                if(CoreVehicles[GetPlayerVehicleID(sellerid)][vehFood] < 4)
                    return SendErrorMessage(playerid, "Stock is out of stock");

                if(Inventory_Add(playerid, "Cooked Burger", 2703) == -1)
                    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

                SendServerMessage(playerid, "You have purchased a burger from %s for $%d (added to inventory).", ReturnName(sellerid, 0), price);
                SendServerMessage(sellerid, "%s has acceptedthe burger for $%d.", ReturnName(playerid, 0), price);
                CoreVehicles[GetPlayerVehicleID(sellerid)][vehFood] -= 4;
            }
            case 4:
            {
                if(CoreVehicles[GetPlayerVehicleID(sellerid)][vehFood] < 5)
                    return SendErrorMessage(playerid, "Stock is out of stock");

                if(Inventory_Add(playerid, "Cooked Pizza", 2702) == -1)
                    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

                SendServerMessage(playerid, "You have purchased a slice of pizza from %s for $%d (added to inventory).", ReturnName(sellerid, 0), price);
                SendServerMessage(sellerid, "%s has accepted the slice of pizza for $%d.", ReturnName(playerid, 0), price);
                CoreVehicles[GetPlayerVehicleID(sellerid)][vehFood] -= 5;
            }
            case 5:
            {
                if(CoreVehicles[GetPlayerVehicleID(sellerid)][vehFood] < 6)
                    return SendErrorMessage(playerid, "Stock is out of stock");

                if(Inventory_Add(playerid, "Chicken", 2663) == -1)
                    return SendErrorMessage(playerid, "You don't have anymore room in your inventory.");

                SendServerMessage(playerid, "You have purchased some chicken from %s for $%d (added to inventory).", ReturnName(sellerid, 0), price);
                SendServerMessage(sellerid, "%s has accepted the chicken for $%d.", ReturnName(playerid, 0), price);
                CoreVehicles[GetPlayerVehicleID(sellerid)][vehFood] -= 6;
            }
        }
        GiveMoney(playerid, -price);
        GiveMoney(sellerid, price);
        PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFoodType] = 0;
        PlayerData[playerid][pFoodPrice] = 0;
    }
    if(!strcmp(params, "faction", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pFactionOffer],
            factionid = PlayerData[playerid][pFactionOffered];

        if(!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
            return SendErrorMessage(playerid, "The faction offer is no longer available.");

        SetFaction(playerid, factionid);
        PlayerData[playerid][pFactionRank] = 1;

        SendServerMessage(playerid, "You have accepted %s's offer to join \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
        SendServerMessage(targetid, "%s has accepted your offer to join \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
    }
    if(!strcmp(params, "greet", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pShakeOffer],
            type = PlayerData[playerid][pShakeType];

        if(!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        SetPlayerToFacePlayer(playerid, targetid);
        SetPlayerToFacePlayer(targetid, playerid);

        PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pShakeType] = 0;

        switch (type)
        {
            case 1:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 2:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 3:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 4:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 5:
            {
                ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
            }
            case 6:
            {
                ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
                ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
            }
        }
        SendServerMessage(playerid, "You have accepted %s's handshake.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s has accepted your handshake.", ReturnName(playerid, 0));
    }
    if(!strcmp(params, "frisk", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pFriskOffer];

        if(!IsPlayerNearPlayer(playerid, targetid, 6.0))
            return SendErrorMessage(playerid, "You are not near that player.");

        Player_Item(targetid, playerid);
        PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
    }
    if (!strcmp(params, "marriage") && PlayerData[playerid][pMarriageOffer] != INVALID_PLAYER_ID) {
        new
            targetid = PlayerData[playerid][pMarriageOffer];

        if (PlayerData[playerid][pMarried] || PlayerData[targetid][pMarried])
            return SendErrorMessage(playerid, "That player or you is already married");

        format(PlayerData[playerid][pCoupleName], MAX_PLAYER_NAME, "%s", NormalName(targetid));
        format(PlayerData[targetid][pCoupleName], MAX_PLAYER_NAME, "%s", NormalName(playerid));
        PlayerData[playerid][pMarried] = 1;
        PlayerData[targetid][pMarried] = 1;
        GiveMoney(targetid, -250);
        SendClientMessageToAllEx(X11_WHITE, "MARRIAGE: Please congratulate to our new "YELLOW"%s", (PlayerData[playerid][pGender] == 2 && PlayerData[targetid][pGender] == 2) ? ("lesbian couple") : ((PlayerData[playerid][pGender] == 1 && PlayerData[targetid][pGender] == 1) ? ("gay couple") : ("couple")));
        SendClientMessageToAllEx(X11_WHITE, "MARRIAGE: "YELLOW"%s "WHITE"and "YELLOW"%s", NormalName(playerid), NormalName(targetid));
    }
    if (!strcmp(params, "divorce") && PlayerData[playerid][pDivorceOffer] != INVALID_PLAYER_ID) {
        new
            targetid = PlayerData[playerid][pDivorceOffer];

        if (strcmp(PlayerData[playerid][pCoupleName], NormalName(targetid)) && strcmp(PlayerData[targetid][pCoupleName], NormalName(playerid)))
            return SendErrorMessage(playerid, "You're not married with this player");

        format(PlayerData[playerid][pCoupleName], MAX_PLAYER_NAME, "None");
        format(PlayerData[targetid][pCoupleName], MAX_PLAYER_NAME, "None");
        PlayerData[playerid][pMarried] = 0;
        PlayerData[targetid][pMarried] = 0;
        SendCustomMessage(playerid, "MARRIAGE", "You've been approved the divorce from "YELLOW"%s", NormalName(targetid));
        SendCustomMessage(targetid, "MARRIAGE", "%s been approved the divorce from you", NormalName(playerid));
    }
    if(!strcmp(params, "stnk", true) && PlayerData[playerid][pSTNKUserid] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pSTNKUserid];

        if(!IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendErrorMessage(playerid, "Anda tidak berada di dekat player tersebut.");
        if(GetMoney(playerid) < PlayerData[playerid][pSTNKPrice]) return SendErrorMessage(playerid, "Uang anda tidak mencukupi, Anda butuh %s untuk membayarnya.", PlayerData[playerid][pSTNKPrice]);
        if(!Vehicle_IsOwner(playerid, PlayerData[playerid][pSTNKVehicle])) return SendErrorMessage(playerid, "Kendaraan ini bukan milik anda lagi.");

        VehicleData[PlayerData[playerid][pSTNKVehicle]][cSTNK] = (gettime()+((3600*24)*90));
        GiveMoney(playerid, -PlayerData[playerid][pSTNKPrice]);
        FactionData[PlayerData[PlayerData[playerid][pSTNKUserid]][pFaction]][factionMoney] += PlayerData[playerid][pSTNKPrice];

        SendCustomMessage(playerid, "VEHICLE", "Kendaraan anda sudah dilengkapi dengan STNK, anda dapat melihatnya dengan perntah \"/showvehlic\"");
        SendCustomMessage(PlayerData[playerid][pSTNKUserid], "VEHICLE", YELLOW"%s "WHITE"menerima STNK, uang otomatis tersimpat ke dalam faction bank.", ReturnName(playerid, 0));

        format(FactionData[PlayerData[PlayerData[playerid][pSTNKUserid]][pFaction]][factionDeposit], MAX_PLAYER_NAME, "STNK - %s", NormalName(PlayerData[playerid][pSTNKUserid]));
        PlayerData[playerid][pSTNKUserid] = INVALID_PLAYER_ID;
        PlayerData[playerid][pSTNKVehicle] = 0;
        PlayerData[playerid][pSTNKPrice] = 0;
    }
    if(!strcmp(params, "examine", true) && PlayerData[playerid][pAcceptInspect] != INVALID_PLAYER_ID)
    {
        new
            targetid = PlayerData[playerid][pAcceptInspect];

        if(!IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendErrorMessage(playerid, "Anda tidak berada di dekat player tersebut.");
        // CheckCondition(targetid, playerid);
        Health_Show(targetid, playerid);

        PlayerData[playerid][pAcceptInspect] = INVALID_PLAYER_ID;
    }
    if (!strcmp(params, "shareloc", true) && PlayerData[playerid][pSharelocOffer] != INVALID_PLAYER_ID) {
        new
            targetid = PlayerData[playerid][pSharelocOffer];

        new Float:pos[3], name[64];
        GetPlayerPos(targetid, pos[0], pos[1], pos[2]);
        format(name,sizeof(name),"%s - Location", ReturnName(targetid, 0));
        SetPlayerWaypoint(playerid, name, pos[0], pos[1], pos[2]);
        PlayerData[playerid][pSharelocOffer] = INVALID_PLAYER_ID;
        SendCustomMessage(playerid, "SHARELOC", "You've been approved %s's sharing location, please follow the waypoint.", ReturnName(targetid, 0));
        SendCustomMessage(targetid, "SHARELOC", "%s has approved your sharing location.", ReturnName(playerid, 0));
    }
    return 1;
}

CMD:checkstorage(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        houseid = -1;

    if((houseid = House_Inside(playerid)) != -1) {
        House_OpenStorage(playerid, houseid);
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of your house interior.");
    return 1;
}

CMD:edithouse(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/edithouse [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, intworld, interior, price, address, type, lock, resetstorage");
        return 1;
    }
    if(!Iter_Contains(Houses, id))
        return SendErrorMessage(playerid, "You have specified an invalid house ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
        GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

        HouseData[id][houseExterior] = GetPlayerInterior(playerid);
        HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of house ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "intworld", true))
    {
        GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
        GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

        HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
        {
            if(PlayerData[i][pHouse] == HouseData[id][houseID])
            {
                SetPlayerPosEx(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2], 5000);
                SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

                SetPlayerInterior(i, HouseData[id][houseInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        House_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior spawn of house ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "price", true))
    {
        new price;

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/edithouse [id] [price] [new price]");

        HouseData[id][housePrice] = price;

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of house ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
    }
    else if(!strcmp(type, "address", true))
    {
        new address[32];

        if(sscanf(string, "s[32]", address))
            return SendSyntaxMessage(playerid, "/edithouse [id] [address] [new address]");

        format(HouseData[id][houseAddress], 32, address);

        House_Refresh(id);
        House_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the address of house ID: %d to \"%s\".", ReturnName(playerid, 0), id, address);
    }
    else if(!strcmp(type, "lock", true))
    {
        new lockid;

        if(sscanf(string, "d", lockid))
            return SendSyntaxMessage(playerid, "/edithouse [id] [lock] [0/1]");

        HouseData[id][houseLocked] = lockid;
        SendServerMessage(playerid, "You've %s this house.", HouseData[id][houseLocked] ? ("locked") : ("unlock"));
    }
    else if(!strcmp(type, "resetstorage", true))
    {
        House_RemoveAllItems(id);
        SendServerMessage(playerid, "You've reset house storage id %d.", id);
        Log_Write("logs/resetstorage_log.txt", "[%s] %s (%s) mereset storage rumah index %d.", ReturnDate(), ReturnAdminName(playerid), AccountData[playerid][pIP], id);
    }
    else if(!strcmp(type, "interior", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
            return SendSyntaxMessage(playerid, "/edithouse [id] [interior] [interior 0:Small 1:Medium 2:Big]");

        if(typeint < 0 || typeint > 2)
            return SendErrorMessage(playerid, "The specified interior must be between 0-2.");

        HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
        HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
        HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
        HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];
        HouseData[id][houseType] = typeint+1;

        foreach (new i : HouseStruct[id]) {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `housestruct` WHERE `ID`='%d'", HouseStructure[id][i][structureID]));

            if (IsValidDynamicObject(HouseStructure[id][i][structureObject])) {
                DestroyDynamicObject(HouseStructure[id][i][structureObject]);
                HouseStructure[id][i][structureObject] = INVALID_STREAMER_ID;
            }

            new tmp_houseStructure[houseStructure];
            HouseStructure[id][i] = tmp_houseStructure;

            new current = i;
            Iter_SafeRemove(HouseStruct[id], current, i);
        }

        CreateHouseInterior(id);

        foreach (new i : Player) if(PlayerData[i][pHouse] == HouseData[id][houseID])
        {
            SetPlayerPosEx(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2], 5000);
            SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

            SetPlayerInterior(i, HouseData[id][houseInterior]);
            SetCameraBehindPlayer(i);
        }
        House_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior of house ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    return 1;
}

CMD:near(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    static
        id = -1;

    if((id = House_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near house ID: %d.", id);

    if((id = Business_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near business ID: %d.", id);

    if((id = Entrance_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near entrance ID: %d.", id);

    if((id = Job_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near job ID: %d.", id);

    if((id = Arrest_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near arrest point ID: %d.", id);

    if((id = Pump_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near pump ID: %d.", id);

    // if((id = Crate_Nearest(playerid)) != -1)
    //     SendServerMessage(playerid, "You are standing near crate ID: %d.", id);

    if((id = ATM_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near ATM ID: %d.", id);

    if((id = Garbage_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near garbage bin ID: %d.", id);

    // if((id = Rack_Nearest(playerid)) != -1)
    //     SendServerMessage(playerid, "You are standing near weapon rack ID: %d.", id);

    if((id = Speed_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near speed camera ID: %d.", id);

    // if((id = Detector_Nearest(playerid)) != -1)
    //     SendServerMessage(playerid, "You are standing near detector ID: %d.", id);
    
    if((id = Dealer_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near dealer ID: %d.", id);

    if((id = Workshop_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near workshop ID: %d.", id);

    if((id = Garage_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near garage ID: %d.", id);

    if ((id = Object_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near object ID: %d.", id);

    if ((id = Bush_Nearest(playerid)) != -1)
        SendServerMessage(playerid, "You are standing near bush ID: %d.", id);

    return 1;
}

CMD:givecarlic(playerid, params[])
{
    static
        userid, 
        id,
        price,
        vehicleid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You're not a member of SAPD.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(sscanf(params, "udd", userid, vehicleid, price)) return SendSyntaxMessage(playerid, "/givecarlic [playerid/PartOfName] [vehicleid] [price]");
    if(userid == playerid) return SendErrorMessage(playerid, "Can't give to yourself.");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(price < 0 || price > 1000) return SendErrorMessage(playerid, "Price must between 0$ - 1000$.");

    if((id = Vehicle_GetID(vehicleid)) != -1 && Vehicle_IsOwner(userid, id)) 
    {
        new vehname[32];

        if(VehicleData[id][cSTNK] != 0) return SendErrorMessage(playerid, "This vehicle already have a vehicle STNK.");

        PlayerData[userid][pSTNKVehicle] = id;
        PlayerData[userid][pSTNKUserid] = playerid;
        PlayerData[userid][pSTNKPrice] = price;

        GetVehicleNameByVehicle(vehicleid, vehname);
        SendServerMessage(userid, ""YELLOW"%s "WHITE"memberi tawaran untuk surat kendaraan "YELLOW"%s "WHITE"Anda dengan harga "GREEN"%s.", ReturnName(playerid, 0), vehname, FormatNumber(price));
        SendServerMessage(userid, "Gunakan perintah \"/approve stnk\" untuk menerimanya.");
        return 1;
    }
    SendErrorMessage(playerid, "This is not player vehicle or not his vehicle.");
    return 1;
}

CMD:givelicenses(playerid, params[])
{
    new userid, opsi[10], string[128];

    if(GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "You're not a member of Goverment.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);
    if(sscanf(params, "us[10]S()[128]", userid, opsi, string)) return SendSyntaxMessage(playerid, "/givelicenses [playerid/PartOfName] [business/workshop/farm]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 3.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't give yourself a license.");

    if(!strcmp(opsi, "business", true)) {
        if(PlayerData[userid][pBusinessLicenseExpired]) return SendErrorMessage(playerid, "That player already has a business license.");
        PlayerData[userid][pBusinessLicense] = 1;
        PlayerData[userid][pBusinessLicenseExpired] = (gettime()+((24*3600)*30));
        SendCustomMessage(playerid, "LICENSE","You've gave business license to "YELLOW"%s.", ReturnName(userid, 0));
        SendCustomMessage(userid, "LICENSE",""YELLOW"%s "WHITE"has given a business license. valid until "GREEN"%s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[userid][pBusinessLicenseExpired]));
        Log_Write("logs/license_log.txt", "[%s] %s (%s) has given business license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    }
    else if(!strcmp(opsi, "workshop", true)) {
        if(PlayerData[userid][pWorkshopLicenseExpired]) return SendErrorMessage(playerid, "That player already has a workshop license.");
        PlayerData[userid][pWorkshopLicense] = 1;
        PlayerData[userid][pWorkshopLicenseExpired] = (gettime()+((24*3600)*30));
        SendCustomMessage(playerid, "LICENSE","You've gave workshop license to "YELLOW"%s.", ReturnName(userid, 0));
        SendCustomMessage(userid, "LICENSE",""YELLOW"%s "WHITE"has given a workshop license. valid until "GREEN"%s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[userid][pWorkshopLicenseExpired]));
        Log_Write("logs/license_log.txt", "[%s] %s (%s) has given workshop license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    }
    else if(!strcmp(opsi, "farm", true)) {
        if(PlayerData[userid][pFarmLicenseExpired]) return SendErrorMessage(playerid, "That player already has a farm license.");
        PlayerData[userid][pFarmLicense] = 1;
        PlayerData[userid][pFarmLicenseExpired] = (gettime()+((24*3600)*30));
        SendCustomMessage(playerid, "LICENSE","You've gave farm license to "YELLOW"%s.", ReturnName(userid, 0));
        SendCustomMessage(userid, "LICENSE",""YELLOW"%s "WHITE"has given a farm license. valid until "GREEN"%s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[userid][pFarmLicenseExpired]));
        Log_Write("logs/license_log.txt", "[%s] %s (%s) has given farm license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    }
    else SendSyntaxMessage(playerid, "/givelicenses [playerid/PartOfName] [business/workshop/farm]");
    return 1;
}

CMD:unseal(playerid, params[])
{
    static 
        id;

    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < 5) return SendErrorMessage(playerid, "You must rank 5 to unseal this.");

    if((id = Business_Nearest(playerid)) != -1) if(BusinessData[id][bizSeal])
    {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        BusinessData[id][bizSeal] = 0;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been unsealed business id %d.", ReturnName2(playerid,1), id);

        Business_Refresh(id);
        Business_Save(id);
    }
    else SendErrorMessage(playerid, "This business already to unseal");
    
    if((id = Workshop_Nearest(playerid)) != -1) if(WorkshopData[id][wSeal])
    {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        WorkshopData[id][wSeal] = 0;
        WorkshopData[id][wStatus] = 0;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been unsealed workshop id %d.", ReturnName2(playerid,1), id);

        Workshop_Refresh(id);
        Workshop_Save(id);
    }
    else SendErrorMessage(playerid, "This workshop already to unseal");

    if ((id = House_Nearest(playerid)) != -1) if (HouseData[id][houseSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_POLICE)
            return SendErrorMessage(playerid, "You are not a government official or police officer.");

        HouseData[id][houseSeal] = 0;
        SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "SEAL: %s have been unsealed house id %d.", ReturnName2(playerid,1), id);

        House_Save(id);
        House_Refresh(id);
    }
    else SendErrorMessage(playerid, "This house already to unseal");

    if ((id = FurnStore_Nearest(playerid)) != -1) if (storeData[id][storeSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        storeData[id][storeSeal] = 0;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been unsealed furnitore store id %d.", ReturnName2(playerid,1), id);
        FurnStore_Refresh(id);
        FurnStore_Save(id);
    } else SendErrorMessage(playerid, "This furnsiture store already to unseal");

    if ((id = Farm_Nearest(playerid)) != -1) if (FarmData[id][farmSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        FarmData[id][farmSeal] = 0;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been unsealed private farm id %d.", ReturnName2(playerid,1), id);
        Farm_Refresh(id);
        Farm_Save(id);
    } else SendErrorMessage(playerid, "This private farm already to unseal");

    if ((id = FlatRoom_Nearest(playerid)) != -1) if (FlatRoom[id][flatRoomSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_POLICE)
            return SendErrorMessage(playerid, "You are not a government official or a police officer.");
        
        FlatRoom[id][flatRoomSeal] = 0;
        SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "SEAL: %s have been unsealed flat id %d.", ReturnName2(playerid,1), id);
        FlatRoom_Refresh(id);
        FlatRoom_Save(id);
    } else SendErrorMessage(playerid, "This flat already to unseal");
    return 1;
}

CMD:seal(playerid, params[])
{
    static 
        id;

    if((id = Business_Nearest(playerid)) != -1) if(!BusinessData[id][bizSeal])
    {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        if(!PlayerData[playerid][pOnDuty])
            return SendErrorMessage(playerid, "You must duty first.");

        if(PlayerData[playerid][pFactionRank] < 5)
            return SendErrorMessage(playerid, "You must rank 5 or above to seal this.");

        BusinessData[id][bizSeal] = 1;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been sealed business id %d.", ReturnName2(playerid,1), id);

        Business_Refresh(id);
        Business_Save(id);
    }
    else SendErrorMessage(playerid, "This business already to seal");

    if((id = Workshop_Nearest(playerid)) != -1) if(!WorkshopData[id][wSeal])
    {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        if(!PlayerData[playerid][pOnDuty])
            return SendErrorMessage(playerid, "You must duty first.");
            
        if(PlayerData[playerid][pFactionRank] < 5)
            return SendErrorMessage(playerid, "You must rank 5 or above to seal this.");

        WorkshopData[id][wSeal] = 1;
        WorkshopData[id][wStatus] = 0;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been sealed workshop id %d.", ReturnName2(playerid,1), id);

        Workshop_Refresh(id);
        Workshop_Save(id);
    }
    else SendErrorMessage(playerid, "This Workshop already to seal");

    if ((id = House_Nearest(playerid)) != -1) if (!HouseData[id][houseSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_POLICE)
            return SendErrorMessage(playerid, "You are not a government official or a police officer.");

        if(!PlayerData[playerid][pOnDuty])
            return SendErrorMessage(playerid, "You must duty first.");
            
        if(PlayerData[playerid][pFactionRank] < 5)
            return SendErrorMessage(playerid, "You must rank 5 or above to seal this.");

        HouseData[id][houseSeal] = 1;
        SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "SEAL: %s have been sealed house id %d.", ReturnName2(playerid,1), id);

        House_Save(id);
        House_Refresh(id);
    }
    else SendErrorMessage(playerid, "This house already to seal");

    if ((id = FurnStore_Nearest(playerid)) != -1) if (!storeData[id][storeSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        if(!PlayerData[playerid][pOnDuty])
            return SendErrorMessage(playerid, "You must duty first.");

        if(PlayerData[playerid][pFactionRank] < 5)
            return SendErrorMessage(playerid, "You must rank 5 or above to seal this.");

        storeData[id][storeSeal] = 1;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been sealed furnitore store id %d.", ReturnName2(playerid,1), id);
        FurnStore_Refresh(id);
        FurnStore_Save(id);
    } else SendErrorMessage(playerid, "This furnsiture store already to seal");

    if ((id = Farm_Nearest(playerid)) != -1) if (!FarmData[id][farmSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV)
            return SendErrorMessage(playerid, "You are not a government official.");

        if(!PlayerData[playerid][pOnDuty])
            return SendErrorMessage(playerid, "You must duty first.");

        if(PlayerData[playerid][pFactionRank] < 5)
            return SendErrorMessage(playerid, "You must rank 5 or above to seal this.");

        FarmData[id][farmSeal] = 1;
        SendFactionMessageEx(FACTION_GOV, COLOR_RADIO, "SEAL: %s have been sealed private farm id %d.", ReturnName2(playerid,1), id);
        Farm_Refresh(id);
        Farm_Save(id);
    } else SendErrorMessage(playerid, "This private farm already to seal");

    if ((id = FlatRoom_Nearest(playerid)) != -1) if (!FlatRoom[id][flatRoomSeal]) {
        if(GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_POLICE)
            return SendErrorMessage(playerid, "You are not a government official or a police officer.");

        if(!PlayerData[playerid][pOnDuty])
            return SendErrorMessage(playerid, "You must duty first.");

        if(PlayerData[playerid][pFactionRank] < 5)
            return SendErrorMessage(playerid, "You must rank 5 or above to seal this.");

        FlatRoom[id][flatRoomSeal] = 1;
        FlatRoom[id][flatRoomLocked] = 1;
        SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "SEAL: %s have been sealed flat id %d.", ReturnName2(playerid,1), id);
        FlatRoom_Refresh(id);
        FlatRoom_Save(id);
    } else SendErrorMessage(playerid, "This flat already to seal");
    return 1;
}

CMD:createbiz(playerid, params[])
{
    static
        type,
        price,
        id;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "dd", type, price))
    {
        SendSyntaxMessage(playerid, "/createbiz [type] [price]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station | 7: Furniture | 8: Electronic Store | 9. GYM.");
        return 1;
    }
    if(type < 1 || type > 9)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 9.");

    // if(type == 5)
    //     return SendErrorMessage(playerid, "This type is locked for a moment.");

    id = Business_Create(playerid, type, price);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for businesses.");

    SendServerMessage(playerid, "You have successfully created business ID: %d.", id);
    return 1;
}

CMD:editbiz(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editbiz [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, interior, deliver, name, price, stock, type, cars, spawn, lock");
        return 1;
    }
    if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
        GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

        BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
        BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of business ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "interior", true))
    {
        GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
        GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

        BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
        {
            if(PlayerData[i][pBusiness] == BusinessData[id][bizID])
            {
                SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
                SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

                SetPlayerInterior(i, BusinessData[id][bizInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior spawn of business ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "deliver", true))
    {
        if(BusinessData[id][bizType] == 5)
            return SendErrorMessage(playerid, "This business doesn't accept deliveries.");

        if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
            return SendErrorMessage(playerid, "You can only place the delivery point outside interiors.");

        GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
        Business_Refresh(id);

        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the deliver point of business ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "price", true))
    {
        new price;

        if(sscanf(string, "d", price))
            return SendSyntaxMessage(playerid, "/editbiz [id] [price] [new price]");

        BusinessData[id][bizPrice] = price;

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of business ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
    }
    else if(!strcmp(type, "lock", true))
    {
        new lock;

        if(sscanf(string, "d", lock))
            return SendSyntaxMessage(playerid, "/editbiz [id] [lock] [0/1]");

        BusinessData[id][bizLocked] = lock;
        SendServerMessage(playerid, "You've %s this business.", BusinessData[id][bizLocked] ? ("locked") : ("unlock"));
    }
    else if(!strcmp(type, "stock", true))
    {
        new amount;

        if(sscanf(string, "d", amount))
            return SendSyntaxMessage(playerid, "/editbiz [id] [stock] [product amount]");

        BusinessData[id][bizProducts] = amount;

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the static of business ID: %d to %s products.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
    }
    else if(!strcmp(type, "name", true))
    {
        new name[32];

        if(sscanf(string, "s[32]", name))
            return SendSyntaxMessage(playerid, "/editbiz [id] [name] [new name]");

        format(BusinessData[id][bizName], 32, name);

        Business_Refresh(id);
        Business_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of business ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "type", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
        {
            SendSyntaxMessage(playerid, "/editbiz [id] [type] [business type]");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station | 7: Furniture | 8: Electronic Store | 9: GYM");
            return 1;
        }
        if(typeint < 1 || typeint > 9)
            return SendErrorMessage(playerid, "The specified type must be between 1 and 9.");

        // if(typeint == 5)
        // return SendErrorMessage(playerid, "Dealership move to new system, /createdealer");

        BusinessData[id][bizType] = typeint;

        switch (typeint) {
            case 1: {
                BusinessData[id][bizInt][0] = -27.3074;
                BusinessData[id][bizInt][1] = -30.8741;
                BusinessData[id][bizInt][2] = 1003.5573;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 4;
            }
            case 2: {
                BusinessData[id][bizInt][0] = 316.3963;
                BusinessData[id][bizInt][1] = -169.8375;
                BusinessData[id][bizInt][2] = 999.6010;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 6;
            }
            case 3: {
                BusinessData[id][bizInt][0] = 161.4801;
                BusinessData[id][bizInt][1] = -96.5368;
                BusinessData[id][bizInt][2] = 1001.8047;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 18;
            }
            case 4: {
                BusinessData[id][bizInt][0] = 363.3402;
                BusinessData[id][bizInt][1] = -74.6679;
                BusinessData[id][bizInt][2] = 1001.5078;
                BusinessData[id][bizInt][3] = 315.0000;
                BusinessData[id][bizInterior] = 10;
            }
            case 5: {
                BusinessData[id][bizInt][0] = 1494.5612;
                BusinessData[id][bizInt][1] = 1304.2061;
                BusinessData[id][bizInt][2] = 1093.2891;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 3;
            }
            case 6: {
                BusinessData[id][bizInt][0] = -27.3383;
                BusinessData[id][bizInt][1] = -57.6909;
                BusinessData[id][bizInt][2] = 1003.5469;
                BusinessData[id][bizInt][3] = 0.0000;
                BusinessData[id][bizInterior] = 6;
            }
            case 7: {
                BusinessData[id][bizInt][0] = -2240.4954;
                BusinessData[id][bizInt][1] = 128.3774;
                BusinessData[id][bizInt][2] = 1035.4210;
                BusinessData[id][bizInt][3] = 270.0000;
                BusinessData[id][bizInterior] = 6;
            }
        }
        foreach (new i : Player)
        {
            if(PlayerData[i][pBusiness] == BusinessData[id][bizID])
            {
                SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
                SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

                SetPlayerInterior(i, BusinessData[id][bizInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Business_Refresh(id);

        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of business ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    else if(!strcmp(type, "cars", true))
    {
        if(BusinessData[id][bizType] != 5)
            return SendErrorMessage(playerid, "This business is not a dealership!");

        PlayerData[playerid][pDealership] = id;
        Business_EditCars(playerid, id);
    }
    else if(!strcmp(type, "spawn", true))
    {
        if(BusinessData[id][bizType] != 5)
            return SendErrorMessage(playerid, "This business is not a dealership!");

        if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
            return SendErrorMessage(playerid, "You can only place the vehicle spawn outside interiors.");

        GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
        GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

        BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

        Business_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the vehicle spawn of business ID: %d.", ReturnName(playerid, 0), id);
    }
    return 1;
}

CMD:bizstate(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/bizstate [biz id]");

    if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    BusinessData[id][bizOwner] = 99999999;

    Business_Refresh(id);
    Business_Save(id);

    SendServerMessage(playerid, "This business is now owned by the state.", id);
    return 1;
}

CMD:destroybiz(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroybiz [biz id]");

    if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    Business_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed business ID: %d.", id);
    return 1;
}

SSCANF:GYMObjectMenu(string[]) {
    if (!strcmp(string, "create", true)) return 1;
    else if (!strcmp(string, "edit", true)) return 2;
    else if (!strcmp(string, "delete", true)) return 3;
    else if (!strcmp(string, "condition", true)) return 4;
    else if (!strcmp(string, "biz", true)) return 5;
    else if (!strcmp(string, "goto", true)) return 6;
    return 0;
}

// GYM SYSTEM
CMD:gymobject(playerid, params[]) {
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    new id, action, subparam[64];
    if (sscanf(params, "k<GYMObjectMenu>S()[64]", action, subparam))
        return SendSyntaxMessage(playerid, "/gymobject [create/edit/delete/condition/biz/goto]");

    switch (action) {
        case 1: {
            new bizid, type[10];
            if (sscanf(subparam, "ds[10]", bizid, type))
                return SendSyntaxMessage(playerid, "/gymobject create [bizid] [bike/treadmill/boxing]");

            if (!BusinessData[bizid][bizExists])
                return SendErrorMessage(playerid, "Invalid business id!");

            new Float:pos[4];
            GetPlayerPos(playerid, pos[2], pos[2], pos[2]);
            GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 3.0);
            GetPlayerFacingAngle(playerid, pos[3]);

            if (!strcmp(type, "bike", true)) {
                id = GYMObject_Add(bizid, 2630, 1, pos[0], pos[1], pos[2], 0.0, 0.0, pos[3]);

                if (id == cellmin)
                    return SendErrorMessage(playerid, "Server has been reached the maximum of GYM Object");

                SendCustomMessage(playerid, "GYMOBJECT", "You've been created gym object id: "YELLOW"%d", id);
            } else if (!strcmp(type, "treadmill", true)) {
                id = GYMObject_Add(bizid, 2627, 2, pos[0], pos[1], pos[2], 0.0, 0.0, pos[3]);

                if (id == cellmin)
                    return SendErrorMessage(playerid, "Server has been reached the maximum of GYM Object");

                SendCustomMessage(playerid, "GYMOBJECT", "You've been created gym object id: "YELLOW"%d", id);
            } else if (!strcmp(type, "boxing", true)) {
                id = GYMObject_Add(bizid, 1985, 3, pos[0], pos[1], pos[2], 0.0, 0.0, pos[3]);

                if (id == cellmin)
                    return SendErrorMessage(playerid, "Server has been reached the maximum of GYM Object");

                SendCustomMessage(playerid, "GYMOBJECT", "You've been created gym object id: "YELLOW"%d", id);
            } else SendErrorMessage(playerid, "Invalid type!");
        }
        case 2: {
            if (sscanf(subparam, "d", id))
                return SendSyntaxMessage(playerid, "/gymobject edit [gymobject id]");

            if (!Iter_Contains(GYMObjects, id))
                return SendErrorMessage(playerid, "Invalid gymobject id!");

            PlayerData[playerid][pEditGYMObject] = id;
            PlayerData[playerid][pEditingMode] = GYMOBJECT;
            EditDynamicObject(playerid, GYMObject[id][object]);
            SendCustomMessage(playerid, "GYMOBJECT", "You're now editing gymobject id: "YELLOW"%d", id);
        }
        case 3: {
            if (sscanf(subparam, "d", id))
                return SendSyntaxMessage(playerid, "/gymobject delete [gymobject id]");

            if (!Iter_Contains(GYMObjects, id))
                return SendErrorMessage(playerid, "Invalid gymobject id!");

            GYMObject_Destroy(id);
            SendCustomMessage(playerid, "GYMOBJECT", "You've been deleted gymobject id: "YELLOW"%d", id);
        }
        case 4: {
            new amount;
            if (sscanf(subparam, "dd", id, amount))
                return SendSyntaxMessage(playerid, "/gymobject condition [gymobject id] [amount]");

            if (!Iter_Contains(GYMObjects, id))
                return SendErrorMessage(playerid, "Invalid gymobject id!");

            new bizid = Business_Inside(playerid);

            if (bizid != -1) {
                GYMObject[id][objectCondition] = amount;
                GYMObject_Refresh(id, bizid);
                GYMObject_Save(id);
                SendCustomMessage(playerid, "GYMOBJECT", "You've been set condition of gymobject id: "YELLOW"%d "WHITE"to "YELLOW"%d", id, amount);
            }
        }
        case 5: {
            new bizid;
            if (sscanf(subparam, "dd", id, bizid))
                return SendSyntaxMessage(playerid, "/gymobject biz [gymobject id] [biz id]");

            if (!Iter_Contains(GYMObjects, id))
                return SendErrorMessage(playerid, "Invalid gymobject id!");

            if (!BusinessData[bizid][bizExists])
                return SendErrorMessage(playerid, "Invalid business id!");

            GYMObject[id][objectBiz] = BusinessData[bizid][bizID];
            GYMObject_Save(id);
            SendCustomMessage(playerid, "GYMOBJECT", "You've been set biz id of gymobject id: "YELLOW"%d "WHITE"to "YELLOW"%d", id, bizid);
        }
        case 6: {
            if (sscanf(subparam, "d", id))
                return SendSyntaxMessage(playerid, "/gymobject goto [gymobject id]");

            if (!Iter_Contains(GYMObjects, id))
                return SendErrorMessage(playerid, "Invalid gymobject id!");

            SetPlayerPos(playerid, GYMObject[id][objectPos][0], GYMObject[id][objectPos][1], GYMObject[id][objectPos][2]);
            SetPlayerFacingAngle(playerid, GYMObject[id][objectRot][2]);

            SendCustomMessage(playerid, "TELE", "You've been teleported gymobject id: "YELLOW"%d", id);
        }
        default: SendSyntaxMessage(playerid, "/gymobject [create/edit/delete/condition/biz/goto]");
    }
    return 1;
}


CMD:fitness(playerid, params[])
{
    new bizid = -1;

    if ((bizid = Business_Inside(playerid)) != -1 && BusinessData[bizid][bizType] == 9)
    {
        if (PlayerData[playerid][pGYMMember] != BusinessData[bizid][bizID])
            return SendErrorMessage(playerid, "You don't have any valid GYM Membership on this GYM.");

        if (PlayerData[playerid][pEnergy] <= 20)
            return SendErrorMessage(playerid, "You're thirsty right now!");

        if (PlayerData[playerid][pFitnessTimer])
            return SendErrorMessage(playerid, "You're being fitness right now!");

        new id = -1;
        if ((id = GYMObject_Nearest(playerid)) != -1)
        {
            if (GYMObject[id][objectStatus] == 2 || GYMObject[id][objectStatus] == 3)
                return SendErrorMessage(playerid, "This GYM Fitness is being used by other players or has already broken!");

            // Set waktu fitness berdasarkan energi yang tersedia
            PlayerData[playerid][pFitnessTimer] = floatround(PlayerData[playerid][pEnergy] - 20);
            PlayerData[playerid][pFitnessType] = GYMObject[id][objectType];

            // Mengurangi kondisi alat fitness
            GYMObject[id][objectCondition] -= RandomEx(50,100);
            GYMObject[id][objectStatus] = 2;
            SetPVarInt(playerid, "holdingGYMEquip", id);

            new Float:rot[3], Float:x, Float:y, Float:z;
            GetDynamicObjectRot(GYMObject[id][object], rot[0], rot[1], rot[2]);
            x = GYMObject[id][objectPos][0];
            y = GYMObject[id][objectPos][1];
            z = GYMObject[id][objectPos][2];

            // Penyesuaian posisi berdasarkan jenis alat fitness
            switch (PlayerData[playerid][pFitnessType])
            {
                case 1: // Alat jenis pertama (misalnya Bench Press)
                {
                    /*z += 0.3; // Naik sedikit agar tidak menembus objek
                    x += 0.5 * floatsin(-rot[2], degrees); // Adjust posisi X relatif terhadap rotasi objek
                    y += 0.5 * floatcos(-rot[2], degrees); // Adjust posisi Y relatif terhadap rotasi objek*/
                    z += 0.4;
                    x -= 0.2 * floatsin(rot[2], degrees);
                    y -= 0.2 * floatcos(rot[2], degrees);
                    rot[2] += 180.0; // Membalik arah hadap player
                    if (rot[2] >= 360.0) rot[2] -= 360.0;
                }
                case 2: // Alat jenis kedua (misalnya Treadmill)
                {
                    /*z += 0.5; // Naik lebih tinggi agar tidak menembus treadmill
                    x += 0.3 * floatsin(-rot[2], degrees);
                    y += 0.3 * floatcos(-rot[2], degrees);*/
                    z += 0.5;
                    x -= 0.5 * floatsin(rot[2], degrees); // pakai minus
                    y -= 0.3 * floatcos(rot[2], degrees);
                }
            }

            SetPlayerPos(playerid, x, y, z);
            SetPlayerFacingAngle(playerid, rot[2]);
            SetCameraBehindPlayer(playerid);
            SetPlayerFitnessAnimation(playerid);
            GYMObject_Refresh(id, bizid);
            SendCustomMessage(playerid, "GYM", "You're now in fitness, you can stop anytime using '/stopfitness'");
        }
        else SendErrorMessage(playerid, "You're not in any GYM Fitness");
    }
    else SendErrorMessage(playerid, "You're not in any GYM.");
    return 1;
}


CMD:stopfitness(playerid) {
    if (!PlayerData[playerid][pFitnessTimer])
        return SendErrorMessage(playerid, "You're not in fitness.");

    new id = GetPVarInt(playerid, "holdingGYMEquip"), bizid = Business_Inside(playerid);
    if (bizid != -1) {
        ClearAnimations(playerid, 1);
        GYMObject[id][objectStatus] = 1;
        GYMObject_Refresh(id, bizid);
        DeletePVar(playerid, "holdingGYMEquip");
        PlayerData[playerid][pFitnessTimer] = 0;
        PlayerData[playerid][pFitnessType] = 0;
    }
    return 1;
}

CMD:changefightstyle(playerid) {
    Dialog_Show(playerid, ChangeFightStyle, DIALOG_STYLE_LIST, "Change fighting style", "Boxing style\nKungfu style\nKneehead style\nNormal style", "Change", "Cancel");
    return 1;
}

Dialog:ChangeFightStyle(playerid, response, listitem, inputtext[]) {
    if (response) {
        if (listitem < 3) {
            if (PlayerData[playerid][pFightStyle][listitem] == 0)
                return SendErrorMessage(playerid, "You haven't learning this fighting style");
    
            PlayerData[playerid][pUsedFightStyle] = listitem;
            SendCustomMessage(playerid, "FIGHTSTYLE", "You've been changed your fighting style to %s", inputtext);
        } else {
            PlayerData[playerid][pUsedFightStyle] = listitem;
            SendCustomMessage(playerid, "FIGHTSTYLE", "You've been changed your fighting style to %s", inputtext);
        }
        switch (PlayerData[playerid][pUsedFightStyle]) {
            case 0: SetPlayerFightingStyle(playerid, 5);
            case 1: SetPlayerFightingStyle(playerid, 6);
            case 2: SetPlayerFightingStyle(playerid, 7);
            default: SetPlayerFightingStyle(playerid, 15);
        }
    }
    return 1;
}

SetPlayerFitnessAnimation(playerid) {
    switch (PlayerData[playerid][pFitnessType]) {
        case 1: ApplyAnimation(playerid, "GYMNASIUM", "gym_bike_faster", 4.1, 1, 0, 0, 1, 0, 1);
        case 2: ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_sprint", 4.1, 1, 0, 0, 1, 0, 1);
        case 3: ApplyAnimation(playerid, "GYMNASIUM", "GYMshadowbox", 4.1, 1, 0, 0, 1, 0, 1);
    }
    return 1;
}

FinishFitness(playerid) {
    new Float:oldvar, Float:rand, Float:total;
    switch (PlayerData[playerid][pFitnessType]) {
        case 1: {
            SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Fitness Report:\n");
            oldvar = PlayerData[playerid][pFitnessRating][1];
            rand = RandomFloat(1.0,1.5);
            total += rand;
            PlayerData[playerid][pFitnessRating][1] += rand;
            if (PlayerData[playerid][pFitnessRating][1] >= 150.0) PlayerData[playerid][pFitnessRating][1] = 150.0;
            SendCustomMessage(playerid, "Groin", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][1]);
            oldvar = PlayerData[playerid][pFitnessRating][2];
            rand = RandomFloat(0.8,1.0);
            total += rand;
            PlayerData[playerid][pFitnessRating][2] += rand;
            if (PlayerData[playerid][pFitnessRating][2] >= 150.0) PlayerData[playerid][pFitnessRating][2] = 150.0;
            SendCustomMessage(playerid, "Right Arm", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][2]);
            oldvar = PlayerData[playerid][pFitnessRating][3];
            PlayerData[playerid][pFitnessRating][3] += rand;
            if (PlayerData[playerid][pFitnessRating][3] >= 150.0) PlayerData[playerid][pFitnessRating][3] = 150.0;
            SendCustomMessage(playerid, "Left Arm", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][3]);
            oldvar = PlayerData[playerid][pFitnessRating][4];
            rand = RandomFloat(1.0,1.5);
            total += rand;
            PlayerData[playerid][pFitnessRating][4] += rand;
            if (PlayerData[playerid][pFitnessRating][4] >= 150.0) PlayerData[playerid][pFitnessRating][4] = 150.0;
            SendCustomMessage(playerid, "Right Leg", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][4]);
            oldvar = PlayerData[playerid][pFitnessRating][5];
            PlayerData[playerid][pFitnessRating][5] += rand;
            if (PlayerData[playerid][pFitnessRating][5] >= 150.0) PlayerData[playerid][pFitnessRating][5] = 150.0;
            SendCustomMessage(playerid, "Left Leg", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][5]);
            PlayerData[playerid][pMaxHealth] += total;
            if (PlayerData[playerid][pMaxHealth] >= 150.0) PlayerData[playerid][pMaxHealth] = 150.0;
        }
        case 2: {
            SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Fitness Report:\n");
            for (new i = 0; i < 6; i ++) {
                oldvar = PlayerData[playerid][pFitnessRating][i];
                rand = RandomFloat(0.5,1.0);
                total += rand;
                PlayerData[playerid][pFitnessRating][i] += rand;
                if (PlayerData[playerid][pFitnessRating][i] >= 150.0) PlayerData[playerid][pFitnessRating][i] = 150.0;
                SendCustomMessage(playerid, "%s", "%.2f > %.2f", GetFitnessBodyPart(i), oldvar, PlayerData[playerid][pFitnessRating][i]);
            }
            PlayerData[playerid][pMaxHealth] += total;
            if (PlayerData[playerid][pMaxHealth] >= 150.0) PlayerData[playerid][pMaxHealth] = 150.0;
        }
        case 3: {
            SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Fitness Report:\n");
            oldvar = PlayerData[playerid][pFitnessRating][0];
            rand = RandomFloat(1.0, 1.5);
            PlayerData[playerid][pFitnessRating][0] += rand;
            SendCustomMessage(playerid, "Torso", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][0]);
            oldvar = PlayerData[playerid][pFitnessRating][2];
            PlayerData[playerid][pFitnessRating][2] += rand;
            SendCustomMessage(playerid, "Right Arm", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][2]);
            oldvar = PlayerData[playerid][pFitnessRating][3];
            PlayerData[playerid][pFitnessRating][3] += rand;
            SendCustomMessage(playerid, "Left Arm", "%.2f > %.2f", oldvar, PlayerData[playerid][pFitnessRating][3]);
            total += rand;
            PlayerData[playerid][pMaxHealth] += total;
            if (PlayerData[playerid][pMaxHealth] >= 150.0) PlayerData[playerid][pMaxHealth] = 150.0;
        }
    }
    new id = GetPVarInt(playerid, "holdingGYMEquip"), bizid = Business_Inside(playerid);
    if (bizid != -1) {
        ClearAnimations(playerid, 1);
        GYMObject[id][objectStatus] = 1;
        GYMObject_Refresh(id, bizid);
        DeletePVar(playerid, "holdingGYMEquip");
        PlayerData[playerid][pFitnessTimer] = 0;
        PlayerData[playerid][pFitnessType] = 0;
    }
}

GetFitnessBodyPart(index) {
    new result[16];
    switch (index) {
        case 0: format(result, sizeof(result), "Torso");
        case 1: format(result, sizeof(result), "Groin");
        case 2: format(result, sizeof(result), "Right Arm");
        case 3: format(result, sizeof(result), "Left Arm");
        case 4: format(result, sizeof(result), "Right Leg");
        case 5: format(result, sizeof(result), "Left Leg");
        case 6: format(result, sizeof(result), "Head");
    }
    return result;
}

CMD:cook(playerid, params[])
{
    new houseid = House_Inside(playerid);

    if(houseid == -1)
        return SendErrorMessage(playerid, "Perintah ini hanya dapat dilakukan didalam rumah.");

    if(PlayerData[playerid][pCuffed])
        return SendErrorMessage(playerid, "Tangan sedang diborgol, tidak dapat menggunakan perintah ini!.");

    if(PlayerData[playerid][pCuffed])
        return SendErrorMessage(playerid, "Kamu dalam kondisi injured, tidak dapat menggunakan perintah ini!.");

    if(PlayerData[playerid][pCooking])
        return SendErrorMessage(playerid, "Kamu sedang memasak.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/cook [burger/pizza]");

    if(!strcmp(params, "burger", true))
    {
        if(!Inventory_HasItem(playerid, "Frozen Burger"))
            return SendErrorMessage(playerid, "Kamu tidak memiliki (Frozen Burger).");

        PlayerData[playerid][pCooking] = 1;
        PlayerData[playerid][pCookingTime] = 20;
        PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Frozen Burger");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s prepares the microwave and heats up a frozen burger (20 seconds).", ReturnName(playerid, 0, 1));
    }
    else if(!strcmp(params, "pizza", true))
    {
        if(!Inventory_HasItem(playerid, "Frozen Pizza"))
            return SendErrorMessage(playerid, "Kamu tidak memiliki (Frozen Pizza).");

        PlayerData[playerid][pCooking] = 2;
        PlayerData[playerid][pCookingTime] = 55;
        PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Frozen Pizza");
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s prepares the oven and heats up a frozen pizza (55 seconds).", ReturnName(playerid, 0, 1));
    }
    return 1;
}

CMD:vest(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(!Inventory_HasItem(playerid, "Armored Vest"))
        return SendErrorMessage(playerid, "You don't have an armored vest.");

    if(ReturnArmour(playerid) > 49)
        return SendErrorMessage(playerid, "You already have a full vest on.");

    SetPlayerArmour(playerid, 50.0);

    Inventory_Remove(playerid, "Armored Vest");
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a kevlar vest and puts it on.", ReturnName(playerid, 0, 1));
    return 1;
}

CMD:board(playerid, params[])
{
    static
        text[128];
        
    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must in faction member to use this command");
        
    if(PlayerData[playerid][pFactionRank] < 2)
        return SendErrorMessage(playerid, "You must rank 2 to manage this board");

    if(sscanf(params,"s[128]",text))
        return SendSyntaxMessage(playerid,"/board [text]");
        
    if(strval(text) > 128)
        return SendErrorMessage(playerid, "Text length is too long maximum is 128 character's.");

    FixText(text);
    
    if(GetFactionType(playerid) == FACTION_GOV)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 4,284.399,1915.851,908.906))
            return SendErrorMessage(playerid, "You're not in range of and board");
        
        SetDynamicObjectMaterialText(board[1], 0, ColouredText(text), 130, "Ariel", 30, 1, -1, -16777216, 1);
    }
    if(GetFactionType(playerid) == FACTION_NEWS)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 4,701.3701,-1372.0260,500.2203))
            return SendErrorMessage(playerid, "You're not in range of any board");

        SetDynamicObjectMaterialText(board[2], 0, ColouredText(text), 130, "Ariel", 30, 1, -1, -16777216, 1);
    }
    else if(GetFactionType(playerid) == FACTION_POLICE)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 4,2320.6140,732.3339,1013.5460))
            return SendErrorMessage(playerid, "You're not in range of any board");

        SetDynamicObjectMaterialText(board[0], 0, ColouredText(text), 130, "Ariel", 33, 1, -1, -16777216, 1);
    }
    else
        return SendErrorMessage(playerid, "This faction don't have board");
    return 1;
}

CMD:extendlicense(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
        return SendErrorMessage(playerid, "You are not in range of the pickup.");

    if(!PlayerData[playerid][pDrivingLicense])
        return SendErrorMessage(playerid, "You don't have driving license!");

    if(PlayerData[playerid][pDrivingLicenseExpired])
        return SendErrorMessage(playerid, "Driving license doesn't expired.");

    if(GetMoney(playerid) < 50)
        return SendErrorMessage(playerid, "You don't have $50 for the extend driving license.");

    PlayerData[playerid][pDrivingLicenseExpired] = (gettime()+((24*3600)*30));
    GiveMoney(playerid, -50);
    SendCustomMessage(playerid, "LICENSE", "Now you have been extend vehicle license, your license now expired on %s.", ConvertTimestamp(Time:PlayerData[playerid][pDrivingLicenseExpired]));
    return 1;
}

CMD:drivingtest(playerid, params[])
{
    if(PlayerData[playerid][pDrivingTest])
        return SendErrorMessage(playerid, "Anda sedang melakukan test sekarang!");

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
        return SendErrorMessage(playerid, "You are not in range of the DMV.");

    if(PlayerData[playerid][pDMVTime])
        return SendErrorMessage(playerid, "You must waiting %d minute(s) to get test again.", (PlayerData[playerid][pDMVTime]-gettime())/60);

    if(PlayerData[playerid][pDrivingLicense])
        return SendErrorMessage(playerid, "You have driving license already!");
    
    if(GetMoney(playerid) < 75)
        return SendErrorMessage(playerid, "You don't have $75 for the driving test.");

    static
        sitid;

    sitid = random(sizeof(g_arrSitSpawns));

    SetPlayerPos(playerid, g_arrSitSpawns[sitid][0], g_arrSitSpawns[sitid][1], g_arrSitSpawns[sitid][2]);
    SetPlayerFacingAngle(playerid, 270.8077);
    ApplyAnimation(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);

    SetCameraBehindPlayer(playerid);
    ClearPlayerChat(playerid, 20);

    InterpolateCameraPos(playerid, -2035.210327, -116.656990, 1037.193847, -2023.569458, -116.668258, 1036.047607, 10000);
    InterpolateCameraLookAt(playerid, -2030.548095, -116.844726, 1035.396972, -2018.569702, -116.623390, 1036.041748, 10000);

    Dialog_Show(playerid, DrivingTest, DIALOG_STYLE_MSGBOX, "Ujian Materi - DMV", "Selamat datang, beberapa aturan yang harus di lakukan:\n\nI. Sebelum melanjutkan ke step selanjutnya, akan di adakan test teori sebelumnya.\nII. Tersedia 10 soal berbeda dan anda harus menjawab semuanya dengan benar.\nIII. Di harapkan berhati-hati untuk menjawabnya.\nIV. Jika sengaja keluar pada saat test, maka akan otomatis gagal dalam test.\nV. Saat gagal test anda harus menunggu 1 jam untuk melakukan test kembali.\n\nIkuti aturan di atas agar sukses dalam menjawab soal yang di berikan.", "Lanjut", "Menyerah");
    return 1;
}

CMD:createentrance(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 32)
        return SendSyntaxMessage(playerid, "/createentrance [name]");

    new id = Entrance_Create(playerid, ColouredText(params));

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for entrances.");

    SendServerMessage(playerid, "You have successfully created entrance ID: %d.", id);
    return 1;
}

CMD:editentrance(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editentrance [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, interior, password, name, locked, type, custom, virtual, vehable, faction");
        return 1;
    }
    if((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

    if(!strcmp(type, "location", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

        EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
        EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

        Entrance_Refresh(id);
        Entrance_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of entrance ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "interior", true))
    {
        GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
        GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

        EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
        {
            if(PlayerData[i][pEntrance] == EntranceData[id][entranceID])
            {
                SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
                SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

                SetPlayerInterior(i, EntranceData[id][entranceInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Entrance_Refresh(id);
        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the interior spawn of entrance ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "custom", true))
    {
        new status;

        if(sscanf(string, "d", status))
            return SendSyntaxMessage(playerid, "/editentrance [id] [custom] [0/1]");

        if(status < 0 || status > 1)
            return SendErrorMessage(playerid, "You must specify at least 0 or 1.");

        EntranceData[id][entranceCustom] = status;
        Entrance_Save(id);

        if(status) {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has enabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
        }
        else {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has disabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
        }
    }
    else if(!strcmp(type, "virtual", true))
    {
        new worldid;

        if(sscanf(string, "d", worldid))
            return SendSyntaxMessage(playerid, "/editentrance [id] [virtual] [interior world]");

        EntranceData[id][entranceWorld] = worldid;

        foreach (new i : Player) if(Entrance_Inside(i) == id) {
            SetPlayerVirtualWorld(i, worldid);
        }
        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the virtual of entrance ID: %d to %d.", ReturnName(playerid, 0), id, worldid);
    }
    else if(!strcmp(type, "vehable", true))
    {
        new vehable;

        if(sscanf(string, "d", vehable))
            return SendSyntaxMessage(playerid, "/editentrance [id] [vehable] [0/1]");

        if(vehable < 0 || vehable > 1)
            return SendErrorMessage(playerid, "Invalid value. Use 0 for not-able and 1 for able.");

        EntranceData[id][entranceVehAble] = vehable;
        Entrance_Save(id);
        Entrance_Refresh(id);

        if(vehable) {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has locked vehicle entrable entrance ID: %d.", ReturnName(playerid, 0), id);
        } else {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unlocked vehicle enterable entrance ID: %d.", ReturnName(playerid, 0), id);
        }
    }
    else if(!strcmp(type, "password", true))
    {
        new password[32];

        if(sscanf(string, "s[32]", password))
            return SendSyntaxMessage(playerid, "/editentrance [id] [password] [entrance pass] (use 'none' to disable)");

        if(!strcmp(password, "none", true)) EntranceData[id][entrancePass][0] = 0;
        else format(EntranceData[id][entrancePass], 32, password);

        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the password of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, password);
    }
    else if(!strcmp(type, "locked", true))
    {
        new locked;

        if(sscanf(string, "d", locked))
            return SendSyntaxMessage(playerid, "/editentrance [id] [locked] [locked 0/1]");

        if(locked < 0 || locked > 1)
            return SendErrorMessage(playerid, "Invalid value. Use 0 for unlocked and 1 for locked.");

        EntranceData[id][entranceLocked] = locked;
        Entrance_Save(id);

        if(locked) {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has locked entrance ID: %d.", ReturnName(playerid, 0), id);
        } else {
            SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unlocked entrance ID: %d.", ReturnName(playerid, 0), id);
        }
    }
    else if(!strcmp(type, "name", true))
    {
        new name[128];

        if(sscanf(string, "s[128]", name))
            return SendSyntaxMessage(playerid, "/editentrance [id] [name] [new name]");

        format(EntranceData[id][entranceName], 128, ColouredText(name));

        Entrance_Refresh(id);
        Entrance_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, ColouredText(name));
    }
    else if(!strcmp(type, "faction", true))
    {
        new factionid;

        if(sscanf(string, "d", factionid))
            return SendSyntaxMessage(playerid, "/editentrance [id] [faction] [faction id]");

        EntranceData[id][entranceFaction] = factionid;

        Entrance_Refresh(id);
        Entrance_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the faction of entrance ID: %d to faction id %d.", ReturnName(playerid, 0), id, factionid);
    }
    else if(!strcmp(type, "type", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
        {
            SendSyntaxMessage(playerid, "/editentrance [id] [type] [entrance type]");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 0: None | 1: DMV | 2: Bank | 3: Warehouse | 4: City Hall | 5: Shooting Range");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 6: Newbie School | 7: Police Department | 8: City Hall | 9: Parking Lot | 10: Hospital");
            SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 11: Fish Factory");

            return 1;
        }
        if(typeint < 0 || typeint > 11)
            return SendErrorMessage(playerid, "The specified type must be between 0 and 11.");

        // if(EntranceData[id][entranceType] == 3 && typeint != 3) {
        //     DestroyForklifts(id);
        // }
        // else if(EntranceData[id][entranceType] != 3 && typeint == 3) {
        //     CreateForklifts(id);
        // }
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
                EntranceData[id][entranceInt][0] = -2029.5531;
                EntranceData[id][entranceInt][1] = -118.8003;
                EntranceData[id][entranceInt][2] = 1035.1719;
                EntranceData[id][entranceInt][3] = 0.0000;
                EntranceData[id][entranceInterior] = 3;
            }
            case 2: {
                EntranceData[id][entranceInt][0] = 1387.02;
                EntranceData[id][entranceInt][1] = 75.43;
                EntranceData[id][entranceInt][2] = 1000.99;
                EntranceData[id][entranceInt][3] = 271.26;
                EntranceData[id][entranceInterior] = BANK_INTERIOR;
            }
            case 3: {
                EntranceData[id][entranceInt][0] = 1291.8246;
                EntranceData[id][entranceInt][1] = 5.8714;
                EntranceData[id][entranceInt][2] = 1001.0078;
                EntranceData[id][entranceInt][3] = 180.0000;
                EntranceData[id][entranceInterior] = 18;
            }
            case 4: {
                EntranceData[id][entranceInt][0] = 1207.53;
                EntranceData[id][entranceInt][1] = 2349.74;
                EntranceData[id][entranceInt][2] = 3001.09;
                EntranceData[id][entranceInt][3] = 88.71;
                EntranceData[id][entranceInterior] = 5;
                EntranceData[id][entranceWorld] = 225;
            }
            case 5: {
                EntranceData[id][entranceInt][0] = 304.0165;
                EntranceData[id][entranceInt][1] = -141.9894;
                EntranceData[id][entranceInt][2] = 1004.0625;
                EntranceData[id][entranceInt][3] = 90.0000;
                EntranceData[id][entranceInterior] = 7;
            }
            case 6: {
                EntranceData[id][entranceInt][0] = 1498.9725;
                EntranceData[id][entranceInt][1] = -1540.2023;
                EntranceData[id][entranceInt][2] = 15.0255;
                EntranceData[id][entranceInt][3] = 175.0971;
                EntranceData[id][entranceInterior] = 5;
            }
            case 7: {
                EntranceData[id][entranceInt][0] = 2313.8975;
                EntranceData[id][entranceInt][1] = 746.0663;
                EntranceData[id][entranceInt][2] = 1011.1710;
                EntranceData[id][entranceInt][3] = 90.0;
                EntranceData[id][entranceInterior] = 4;
                EntranceData[id][entranceWorld] = PRISON_WORLD;
            }
            case 8: {
                EntranceData[id][entranceInt][0] = 303.9583;
                EntranceData[id][entranceInt][1] = 1893.9885;
                EntranceData[id][entranceInt][2] = 904.4109;
                EntranceData[id][entranceInt][3] = 180.0;
                EntranceData[id][entranceInterior] = 5;
            }
            case 9: {
                EntranceData[id][entranceInt][0] = -1744.3235;
                EntranceData[id][entranceInt][1] = 982.0571;
                EntranceData[id][entranceInt][2] = 17.4917;
                EntranceData[id][entranceInt][3] = 271.2382;
                EntranceData[id][entranceInterior] = 0;
            }
            case 10: {
                SendErrorMessage(playerid, "Lagi error");
            }
            /*
                EntranceData[id][entranceInt][0] = 1946.9366;
                EntranceData[id][entranceInt][1] = -2288.5347;
                EntranceData[id][entranceInt][2] = 13.6328;
                EntranceData[id][entranceInt][3] = 175.1091;
                EntranceData[id][entranceInterior] = HOSPITAL_INTERIOR_MAP;
            */
            // case 11: {
            //     EntranceData[id][entranceInt][0] = 1353.6514;
            //     EntranceData[id][entranceInt][1] = 1326.0586;
            //     EntranceData[id][entranceInt][2] = 10.8862;
            //     EntranceData[id][entranceInt][3] = 260.5;
            //     EntranceData[id][entranceInterior] = FISHFAC_INTERIOR_MAP;
            // }
        }
        foreach (new i : Player)
        {
            if(PlayerData[i][pEntrance] == EntranceData[id][entranceID])
            {
                SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
                SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

                SetPlayerInterior(i, EntranceData[id][entranceInterior]);
                SetCameraBehindPlayer(i);
            }
        }
        Entrance_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of entrance ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    return 1;
}

CMD:destroyentrance(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyentrance [entrance id]");

    if((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
        return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

    Entrance_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed entrance ID: %d.", id);
    return 1;
}

CMD:faq(playerid, params[])
{
    Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST, "Frequently Asked Questions", "Saya harus kemana?\nBagaimana cara untuk masuk ke ruangan?\nBagaimana saya bisa mengakses inventory?\nBagaimana saya mengambil item yang ada di bawah tanah?\nApa maksudnya gambar pojok kanan bawah di layar saya?\nBagaimana saya bisa mengisi energy dan hunger saya kembali?\nBagaimana saya bisa mengetahui lokasi yang ada di server ini?\nBagaimana keluar dari kontrak pekerjaan yang di lakoni?\nBagaimana cara untuk menggunakan weapon serta mengisi peluru di dalamnya\nBagaimana cara memodifikasi rumah dengan system furniture?", "Select", "Cancel");
    return 1;
}

CMD:atm(playerid, params[])
{
    if(ATM_Nearest(playerid) == -1)
        return SendErrorMessage(playerid, "You are not in range of any ATM machine.");

    if (!PlayerData[playerid][pRekening])
        return SendErrorMessage(playerid, "You don't have any bank account, please create new one by using '"YELLOW"/newrek"WHITE"'");

    if(PlayerData[playerid][pCanPaycheck]) Dialog_Show(playerid, Atm, DIALOG_STYLE_LIST, "ATM Account","Withdraw funds\nMake a transfer\nGet paycheck","Select","Close");
    else Dialog_Show(playerid, Atm, DIALOG_STYLE_LIST, "ATM Account","Withdraw funds\nMake a transfer","Select","Close");
    return 1;
}

CMD:deposit(playerid, params[])
{
    new deposit;
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if(sscanf(params,"d", deposit))
        return SendSyntaxMessage(playerid, "/deposit [amount]");

    if (!PlayerData[playerid][pRekening])
        return SendErrorMessage(playerid, "You don't have any bank account, please create new one by using '"YELLOW"/newrek"WHITE"'");

    if(deposit < 1 || deposit > 100000)
        return SendErrorMessage(playerid, "You can deposit between $1 - $100,000");

    if(GetMoney(playerid) < deposit)
        return SendErrorMessage(playerid, "You can't deposit %s, you have only %s in your hand.", FormatNumber(deposit), FormatNumber(GetMoney(playerid)));

    PlayerData[playerid][pBankMoney] += deposit;
    GiveMoney(playerid, -deposit);

    SendServerMessage(playerid, "You have deposited %s into your bank account (bank balance: %s).", FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney]));
    return 1;
}

CMD:balance(playerid, params[])
{
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if (!PlayerData[playerid][pRekening])
        return SendErrorMessage(playerid, "You don't have any bank account, please create new one by using '"YELLOW"/newrek"WHITE"'");

    SendClientMessage(playerid, -1, "|__________ "GREEN"CHECK BALANCE "WHITE"__________|");
    SendClientMessageEx(playerid, -1,"Bank balance: "GREEN"%s", FormatNumber(PlayerData[playerid][pBankMoney]));
    return 1;
}

CMD:transfer(playerid, params[])
{
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if (!PlayerData[playerid][pRekening])
        return SendErrorMessage(playerid, "You don't have any bank account, please create new one by using '"YELLOW"/newrek"WHITE"'");

    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the bank account of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
    return 1;
}
CMD:withdraw(playerid, params[])
{
    new deposit;
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if(sscanf(params,"d", deposit))
        return SendSyntaxMessage(playerid, "/withdraw [amount]");

    if (!PlayerData[playerid][pRekening])
        return SendErrorMessage(playerid, "You don't have any bank account, please create new one by using '"YELLOW"/newrek"WHITE"'"); 

    if(deposit < 1 || deposit > 20000)
        return SendErrorMessage(playerid, "You can withdraw between $1 - $20,000");

    if(PlayerData[playerid][pBankMoney] < deposit)
        return SendErrorMessage(playerid, "You can't withdraw %s, you have %s in your bank account.", FormatNumber(deposit), FormatNumber(PlayerData[playerid][pBankMoney]));

    PlayerData[playerid][pBankMoney] -= deposit;
    GiveMoney(playerid, deposit);

    SendServerMessage(playerid, "You have withdrawn %s from your bank account.", FormatNumber(deposit));
    return 1;
}

CMD:newrek(playerid, params[]) {
    if(!IsPlayerInBank(playerid))
        return SendErrorMessage(playerid, "You are not in range of any bank.");

    if (GetMoney(playerid) < 50)
        return SendErrorMessage(playerid, "You need $50 to registering a bank account.");

    if (!PlayerData[playerid][pRekening]) {
        PlayerData[playerid][pRekening] = random(9000000) + 1000000;
        mysql_tquery(g_iHandle, sprintf("SELECT `Rekening` FROM `characters` WHERE `Rekening`='%d'", PlayerData[playerid][pRekening]), "checkBankAccount", "dd", playerid, PlayerData[playerid][pRekening]);
    } else SendErrorMessage(playerid, "You're already have a bank account.");
    return 1;
}

CMD:paycheck(playerid, params[])
{
    if (PlayerData[playerid][pVipTime] == 0 && PlayerData[playerid][pVip] != 4) {
        if(!IsPlayerInBank(playerid))
            return SendErrorMessage(playerid, "You are not in range of any bank.");

        Paycheck(playerid);
    } else if (PlayerData[playerid][pVipTime] > 0) {
        Paycheck(playerid);
    }

    return 1;
}


CMD:createpump(playerid, params[])
{
    static
        id,
        bizid = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", bizid))
        return SendSyntaxMessage(playerid, "/createpump [business id]");

    if((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    if(BusinessData[bizid][bizType] != 6)
        return SendErrorMessage(playerid, "This business is not a gas station!");

    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
        return SendErrorMessage(playerid, "You can only create gas pumps outside interiors.");

    id = Pump_Create(playerid, bizid);

    if(id == -1)
        return SendErrorMessage(playerid, "The business has reached the limit for gas pumps.");

    PlayerData[playerid][pEditPump] = id;
    PlayerData[playerid][pEditingMode] = PUMP;
    EditDynamicObject(playerid, PumpData[id][pumpObject]);
    
    SendServerMessage(playerid, "You have successfully created gas pump ID: %d.", id);
    return 1;
}

CMD:destroypump(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroypump [pump id]");

    if((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
        return SendErrorMessage(playerid, "Invalid pump ID.");

    Pump_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed pump ID: %d.", id);
    return 1;
}

CMD:setpump(playerid, params[])
{
    static
        id = 0,
        amount;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "dd", id, amount))
        return SendSyntaxMessage(playerid, "/setpump [pump id] [fuel amount]");

    if((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
        return SendErrorMessage(playerid, "Invalid pump ID.");

    PumpData[id][pumpFuel] = amount;

    Pump_Refresh(id);
    Pump_Save(id);

    SendServerMessage(playerid, "You have set the fuel to %d for pump ID: %d.", amount, id);
    return 1;
}

CMD:refuel(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), id;

    if(PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
    {
        BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
        Business_Save(PlayerData[playerid][pGasStation]);

        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

        SendServerMessage(playerid, "You have refueled your vehicle for $%d.", PlayerData[playerid][pRefillPrice]);
        StopRefilling(playerid);

        return 1;
    }
    if(!vehicleid)
        return SendErrorMessage(playerid, "You are not inside any vehicle!");

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You need to be driver to use this command.");

    if(GetEngineStatus(vehicleid))
        return SendErrorMessage(playerid, "You must turn the engine off first.");

    if((id = Pump_Nearest(playerid)) != -1)
    {
        if(BusinessData[PumpData[id][pumpBusiness]][bizSeal] == 1) return SendErrorMessage(playerid, "This pump business owned is sealed by authority");
        if(CoreVehicles[vehicleid][vehFuel] > 95.0) return SendErrorMessage(playerid, "This vehicle doesn't need any fuel.");
        if(IsPumpOccupied(id)) return SendErrorMessage(playerid, "This fuel pump is already occupied.");
        if(PumpData[id][pumpFuel] < 1) return SendErrorMessage(playerid, "This pump doesn't have enough fuel.");
        if(PumpData[id][pumpRefilled]) return SendErrorMessage(playerid, "This pump can't used now.");
        if(GetMoney(playerid) < BusinessData[PumpData[id][pumpBusiness]][bizPrices][3]) return SendErrorMessage(playerid, "You don't have %s to start refuel this vehicle.", FormatNumber(BusinessData[PumpData[id][pumpBusiness]][bizPrices][3]));
        Dialog_Show(playerid, Refill, DIALOG_STYLE_MSGBOX, "Refill Vehicle", ""WHITE"Toko ini menjual "GREEN"%s"YELLOW"/2 liter "WHITE"nya\n\nApakah anda ingin mengisi bensin disini?", "Ya", "Tidak", FormatNumber(BusinessData[PumpData[id][pumpBusiness]][bizPrices][3]));
        SetPVarInt(playerid, "PumpID", id);
        return 1;
    }    
    SendErrorMessage(playerid, "You're not in near gas pump.");
    return 1;
}

CMD:bm(playerid, params[])
{
    new
        id = -1;

    id = Business_Inside(playerid);

    new bizid = -1;
    if ((bizid  = Business_NearestDeliver(playerid, 20.0)) != -1) {
        if(!Business_IsOwner(playerid, bizid) && !Business_IsEmployee(playerid, bizid))
            return SendErrorMessage(playerid, "This is not on your business or you are not employee of this business.");

        SetPVarInt(playerid,"BM", bizid);

        if (BusinessData[bizid][bizType] == 4) {
            new count = 0;
            for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[bizid][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                count++;
            }
            Dialog_Show(playerid, BusinessVehicle, DIALOG_STYLE_LIST, "Business Vehicle", "%s Vehicle\nChange Plate\nTrack\nSet spawn", "Select", "Close", (count) ? ("Sell") : ("Buy"));
        }
        return 1;
    }
    
    if(id == -1)
        return SendErrorMessage(playerid, "You are not in interior of your business.");
    
    if(!Business_IsOwner(playerid, id) && !Business_IsEmployee(playerid, id))
        return SendErrorMessage(playerid, "This is not on your business or you are not employee of this business.");

    SetPVarInt(playerid,"BM", id);
    if (Business_IsOwner(playerid, id)) {
        if (BusinessData[id][bizType] == 4) Dialog_Show(playerid, DialogBusiness, DIALOG_STYLE_LIST, "Business Management","Show Info\nChange Name\nSet Message\nVault\nProduct Menu\nSell Product Price\nEmployees\nVehicle","Next","Close");
        else Dialog_Show(playerid, DialogBusiness, DIALOG_STYLE_LIST, "Business Management","Show Info\nChange Name\nSet Message\nVault\nProduct Menu\nSell Product Price\nEmployees","Next","Close");
    }
    else if (Business_IsEmployee(playerid, id)) {
        if (BusinessData[id][bizType] == 4) Dialog_Show(playerid, DialogBusiness, DIALOG_STYLE_LIST, "Business Management","Show Info\nVault\nProduct Menu\nVehicle","Next","Close");
        else Dialog_Show(playerid, DialogBusiness, DIALOG_STYLE_LIST, "Business Management","Show Info\nVault\nProduct Menu","Next","Close");
    }
    return 1;
}

CMD:restock(playerid, params[]) {
    new
        id = -1,
        vehid = -1,
        amount;

    id = Business_NearestDeliver(playerid, 15.0);

    if (sscanf(params, "d", amount))
        return SendSyntaxMessage(playerid, "/restock [amount]");
    
    if(id == -1)
        return SendErrorMessage(playerid, "You are not in delivery point of your business.");

    if (amount < 1)
        return SendErrorMessage(playerid, "Invalid amount!");
    
    if(!Business_IsOwner(playerid, id) && !Business_IsEmployee(playerid, id))
        return SendErrorMessage(playerid, "This is not on your business or you are not employee of this business.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You're not in any vehicle!");

    if ((vehid = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1) {
        if (VehicleData[vehid][cBiz] == BusinessData[id][bizID]) {
            if (amount > BusinessData[id][bizProducts])
                return SendErrorMessage(playerid, "This business doesn't have enough products!");

            VehicleData[vehid][cFood] += amount;
            BusinessData[id][bizProducts] -= amount;
            Business_Save(id);
            Business_Refresh(id);
            Vehicle_Save(vehid);
            Storage_GUI(playerid, true, "Food Storage", sprintf("%d stock", VehicleData[vehid][cFood]));
            SendCustomMessage(playerid, "DELIVERY", "You've been restocked this vehicle delivery!");
        } else return SendErrorMessage(playerid, "You must in your vehicle business");
    }
    return 1;
}

CMD:givemenu(playerid, params[]) {
    new userid;
    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/givemenu [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "Invalid player id or name!");

    if (userid == playerid)
        return SendErrorMessage(playerid, "Cannot giving menu to yourself!");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must in any vehicle to use this command!");

    new id = -1;
    if ((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1) {
        new bizid = GetBusinessByID(VehicleData[id][cBiz]);
        if (bizid != -1) {
            if (VehicleData[id][cBiz] == BusinessData[bizid][bizID]) {
                if (VehicleData[id][cFood] < 1)
                    return SendErrorMessage(playerid, "This vehicle don't have food storage, please restock the storage by using /restock");

                PlayerData[userid][pOfferMenu] = bizid;
                PlayerData[userid][pMenuSeller] = playerid;
                Business_PurchaseMenu(userid, bizid);
                SendCustomMessage(playerid, "MENU", "You've been give your business menu to "YELLOW"%s", ReturnName(userid, 0, 1));
                SendCustomMessage(userid, "MENU", YELLOW"%s "WHITE"has given menu to you", ReturnName(playerid, 0, 1));
            } else return SendErrorMessage(playerid, "You must in your vehicle business");
        }
    }
    return 1;
}

CMD:resetpassword(playerid, params[])
{
    static 
        password[32], 
        string[128], 
        accounts[32];

    if (CheckAdmin(playerid, 7))
        return NotAllowed(playerid);

    if(sscanf(params, "s[24]s[32]", accounts, password))
        return SendSyntaxMessage(playerid, "/resetpassword [accounts name] [password 32 char]");

    if(strlen(password) > 32)
        return SendErrorMessage(playerid, "Password must under 32 characters.");

    if(strlen(password) < 4)
        return SendErrorMessage(playerid, "Password must above 4 characters.");

    if(strlen(accounts) < 3)
        return SendErrorMessage(playerid, "Accounts name can't below of three characters!");

    format(string,sizeof(string), "SELECT `salt` FROM `accounts` WHERE `Username`='%s'", accounts);
    mysql_tquery(g_iHandle, string, "ResetPassword", "dss", playerid, accounts, password);
    return 1;
}

Function:ResetPassword(playerid, accounts[], password[])
{
    static 
        string[500],
        salt[65],
        hash[65];

    if(cache_num_rows())
    {
        cache_get_value(0, "salt", salt);

        SHA256_PassHash(password, salt, hash, sizeof(hash));
        // WP_Hash(buffer, sizeof(buffer), password);
        format(string,sizeof(string),"UPDATE `accounts` SET `Password`='%s' WHERE `Username`='%s'", hash, accounts);
        mysql_tquery(g_iHandle, string);
        format(string,sizeof(string),"UPDATE `characters` SET `password`='%s' WHERE `Username`='%s'",hash,accounts);
        mysql_tquery(g_iHandle, string);
        SendServerMessage(playerid, "You have reset password account "RED"%s "WHITE"to "GREEN"%s",accounts, password);
    }
    else SendErrorMessage(playerid, "Accounts isn't exists.");

    return 1;
}

CMD:refreshall(playerid, params[]) {
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    new str[32];
    if (sscanf(params, "s[32]", str))
        return SendSyntaxMessage(playerid, "/refreshall [house/biz]");

    if (!strcmp(str, "house")) {
        foreach (new i : Houses) {
            House_Refresh(i);
        }
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has refresh all houses.", ReturnName(playerid));
    } else if (!strcmp(str, "biz")) {
        for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists]) {
            Business_Refresh(i);
        }
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has refresh all business.", ReturnName(playerid));
    }
    return 1;
}

CMD:ojail(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid); 
    {
        new name[MAX_PLAYER_NAME], minutes, reason[64], query[512], jailedby[32];
        if(sscanf(params, "s[24]ds[64]", name, minutes,reason)) return SendClientMessageEx(playerid, X11_WHITE, "USAGE: /ojail [player name] [time (minutes)] [reason]");

        //SendClientMessageEx(playerid, X11_TOMATO_1, "Attempting to jail %s's account for %d minutes for %s", name, minutes, reason);

        format(query,sizeof(query),"SELECT `JailTime` FROM `characters`  WHERE `Character` = '%s'", name);
        mysql_tquery(g_iHandle, query, "OnJailAccount", "ddsss", playerid, (minutes*60), reason, jailedby, name);
    }
    return 1;
}

CMD:createjob(playerid, params[])
{
    static
        type,
        id = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", type))
    {
        SendSyntaxMessage(playerid, "/createjob [type]");
        SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"1: Trucker | 2: Mechanic | 3: Taxi Driver | 4: Cargo Unloader | 5. Miner | 6. Food Vendor");
        SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"7: Package sorter | 8: Arms Dealer | 9: Lumberjack | 10: Smuggler | 11. Farmer | 12. Builder");
        return 1;
    }
    if(type < 1 || type > 12)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 12.");

    id = Job_Create(playerid, type);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for jobs.");

    SendServerMessage(playerid, "You have successfully created job ID: %d.", id);
    return 1;
}

CMD:destroyjob(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyjob [job id]");

    if((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
        return SendErrorMessage(playerid, "You have specified an invalid job ID.");

    Job_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed job ID: %d.", id);
    return 1;
}

CMD:editjob(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editjob [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, type, point, deliver, stock");
        return 1;
    }
    if((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
        return SendErrorMessage(playerid, "You have specified an invalid job ID.");

    if(!strcmp(type, "location", true))
    {
        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        JobData[id][jobPos][0] = x;
        JobData[id][jobPos][1] = y;
        JobData[id][jobPos][2] = z;

        JobData[id][jobInterior] = GetPlayerInterior(playerid);
        JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of job ID: %d.", ReturnName(playerid, 0), id);
        Log_Write("logs/dynamicjob.txt", "[%s] %s has adjusted the location of JOB ID: (%d) to %s.", ReturnDate(), ReturnName(playerid, 0), id, JobData[id][jobPos]);
    }
    else if(!strcmp(type, "jobids", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint))
        {
            SendSyntaxMessage(playerid, "/editjob [id] [type] [new type]");
            SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"1: Trucker | 2: Mechanic | 3: Taxi Driver | 4: Cargo Unloader | 5: Miner | 6: Food Vendor.");
            SendClientMessageEx(playerid, X11_YELLOW_2,"TYPES: "WHITE"7: Package sorter | 8: Arms Dealer | 9: Lumberjack | 10: Smuggler | 11: Farmer | 12: Builder");
            return 1;
        }
        if(typeint < 1 || typeint > 12)
            return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 12.");

        JobData[id][jobType] = typeint;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of job ID: %d to %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
        Log_Write("logs/dynamicjob.txt", "[%s] %s has adjusted the type of JOB ID: (%d) to %s.", ReturnDate(), ReturnName(playerid, 0), id, Job_GetName(typeint));
    }
    else if(!strcmp(type, "stock", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint)) return SendSyntaxMessage(playerid, "/editjob [id] [stock] [stock]");

        if(typeint < 0 || typeint > 150)
            return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 150.");

        JobData[id][jobStock] = typeint;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the stock of job ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    else if(!strcmp(type, "point", true))
    {
        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        JobData[id][jobPoint][0] = x;
        JobData[id][jobPoint][1] = y;
        JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the point of job ID: %d.", ReturnName(playerid, 0), id);
        Log_Write("logs/dynamicjob.txt", "[%s] %s has adjusted the point of JOB ID: (%d)", ReturnDate(), ReturnName(playerid, 0), id);

    }
    else if(!strcmp(type, "deliver", true))
    {
        if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
            return SendErrorMessage(playerid, "You can't place the deliver point inside interiors.");

        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        JobData[id][jobDeliver][0] = x;
        JobData[id][jobDeliver][1] = y;
        JobData[id][jobDeliver][2] = z;

        Job_Refresh(id);
        Job_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the deliver point of job ID: %d.", ReturnName(playerid, 0), id);
        Log_Write("logs/dynamicjob.txt", "[%s] %s has adjusted the deliver point of JOB ID: (%d).", ReturnDate(), ReturnName(playerid, 0), id);
    }
    return 1;
}

CMD:quitjob(playerid, params[])
{
    if(GetPlayerJob(playerid, 0) != JOB_NONE || GetPlayerJob(playerid, 1) != JOB_NONE)
    {
        new subparam[24];
        if (sscanf(params, "s[24]", subparam))
            return SendSyntaxMessage(playerid, "/quitjob [primary/secondary]");

        if (!strcmp(subparam, "primary", true)) {
            if(PlayerData[playerid][pJobLeave] > 0)
                return SendErrorMessage(playerid, "You can't leave from the job before getting %d paycheck",PlayerData[playerid][pJobLeave]);

            SendCustomMessage(playerid, "JOB", "You have quit your primary job as a "YELLOW"%s.", Job_GetName(PlayerData[playerid][pJob][0]));
            PlayerData[playerid][pJob][0] = JOB_NONE;
            PlayerData[playerid][pJobLeave] = 0;
        } else if (!strcmp(subparam, "secondary", true)) {
            if(PlayerData[playerid][pJobLeave] > 0)
                return SendErrorMessage(playerid, "You can't leave from the job before getting %d paycheck",PlayerData[playerid][pJobLeave]);

            SendCustomMessage(playerid, "JOB", "You have quit your secondary job as a "YELLOW"%s.", Job_GetName(PlayerData[playerid][pJob][1]));
            PlayerData[playerid][pJob][1] = JOB_NONE;
            PlayerData[playerid][pJobLeave] = 0;
        } else return SendSyntaxMessage(playerid, "/quitjob [primary/secondary]");

        new vehicleid = GetPlayerVehicleID(playerid);

        if(PlayerData[playerid][pMinedRock])
        {
            PlayerData[playerid][pMinedRock] = 0;
            PlayerData[playerid][pMineCount] = 0;

            DisablePlayerCheckpoint(playerid);

            RemovePlayerAttachedObject(playerid, JOB_SLOT);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        }
        if(PlayerData[playerid][pJobDuty])
        {
            SetPlayerColor(playerid, DEFAULT_COLOR);
            PlayerData[playerid][pSalary] = 0;
            PlayerData[playerid][pJobDuty] = false;

            if(GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI)
            {
                foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
                    LeaveTaxi(i, playerid);
                }
            }
            stop PlayerData[playerid][pJobDutyTime];
        }
        if(GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 8)
        {
            CoreVehicles[vehicleid][vehLoadType] = 0;
            DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

            CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
            DisablePlayerCheckpoint(playerid);
        }
    }
    else SendErrorMessage(playerid, "You don't have a job to quit.");
    return 1;
}

CMD:takejob(playerid, params[])
{
    static
        id = -1;

    if((id = Job_Nearest(playerid)) != -1)
    {
        if(GetPlayerJob(playerid, 0) && GetPlayerJob(playerid, 1))
            return SendErrorMessage(playerid, "You must '/quitjob' to get new job.");

        if(GetPlayerJob(playerid, 0) == JobData[id][jobType] || GetPlayerJob(playerid, 1) == JobData[id][jobType])
            return SendErrorMessage(playerid, "You have this job already.");

        new subparam[24], confirm[10];
        if(sscanf(params, "s[24]s[10]", subparam, confirm))
        {
            SendServerMessage(playerid, "/takejob [primary/secondary] [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" /takejob 'confirm' to take this job.");
            return 1;
        }
        if(!strcmp(confirm, "confirm", true))
        {
            if (JobData[id][jobType] == JOB_ARMS_DEALER || JobData[id][jobType] == JOB_SMUGGLER) {
                if (GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_NEWS)
                    return SendErrorMessage(playerid, "You can't take this job.");

                if (PlayerData[playerid][pScore] < 3)
                    return SendErrorMessage(playerid, "You must level 3 to join illegal jobs");
            }

            if (!strcmp(subparam, "primary", true)) {
                if (GetPlayerJob(playerid, 0) != JOB_NONE)
                    return SendErrorMessage(playerid, "You are already have primary job, please type '/quitjob primary' to quit from your primary job!");

                PlayerData[playerid][pJob][0] = JobData[id][jobType];
                PlayerData[playerid][pJobLeave] = 2;

                SendCustomMessage(playerid, "JOB", "You are now a "YELLOW"%s "WHITE"- type "YELLOW"\"/help > Job Commands\" "WHITE"for job commands.", Job_GetName(JobData[id][jobType]));
            } else if (!strcmp(subparam, "secondary", true)) {
                if (GetPlayerJob(playerid, 1) != JOB_NONE)
                    return SendErrorMessage(playerid, "You are already have secondary job, please type '/quitjob secondary' to quit from your secondary job!");

                PlayerData[playerid][pJob][1] = JobData[id][jobType];
                PlayerData[playerid][pJobLeave] = 2;

                SendCustomMessage(playerid, "JOB", "You are now a "YELLOW"%s "WHITE"- type "YELLOW"\"/help > Job Commands\" "WHITE"for job commands.", Job_GetName(JobData[id][jobType]));
            } else return SendServerMessage(playerid, "/takejob [primary/secondary] [confirm]");
        }
        else
        {
            SendServerMessage(playerid, "/takejob [primary/secondary] [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" /takejob 'confirm' to take this job.");
        }
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of any job pickup.");
    return 1;
}

/*
CMD:takejob(playerid, params[])
{
    static
        id = -1;

    if((Job_Nearest(playerid)) != -1)
    {
        if(PlayerData[playerid][pJob])
            return SendErrorMessage(playerid, "You must '/quitjob' to get new job.");

        if(PlayerData[playerid][pJob] == JobData[id][jobType])
            return SendErrorMessage(playerid, "You have this job already.");

        if(JobData[id][jobType] == JOB_LUMBERJACK && PlayerData[playerid][pScore] < 2) 
            return SendErrorMessage(playerid, "You must level 2 to join this job.");

        if(isnull(params))
        {
            SendServerMessage(playerid, "/takejob [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" /takejob 'confirm' to take this job.");
            return 1;
        }
        if(!strcmp(params, "confirm", true))
        {
            PlayerData[playerid][pJob] = JobData[id][jobType];
            PlayerData[playerid][pJobLeave] = 2;

            SendServerMessage(playerid, "You are now a "YELLOW"%s "WHITE"- type "YELLOW"\"/help > Job Commands\" "WHITE"for job commands.", Job_GetName(JobData[id][jobType]));

//            if(PlayerData[playerid][pJob] == JOB_COURIER)
            {
                SendCustomMessage(playerid, "TRUCKER","Untuk memulai pekerjaan ini, telebih dahulu Kamu menggunakan perintah (/shipments) untuk memulai pekerjaan awal.");
                SendCustomMessage(playerid, "TRUCKER","Setelah itu, Kamu bisa menggunakan perintah /startdelivery untuk mengumpulkan crate ke dalam truck, sesuai dengan jenis ..-");
                SendCustomMessage(playerid, "TRUCKER","Yang Kamu pilih sewaktu menggunakan perintah /shipments.");
            } // stop disini
        }
        else
        {
            SendServerMessage(playerid, "/takejob [confirm]");
            SendClientMessage(playerid, X11_TOMATO_1, "WARNING:"WHITE" /takejob 'confirm' to take this job.");
        }
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of any job pickup.");
    return 1;
}

CMD:unload(playerid, params[])
{
    new
        id = Business_NearestDeliver(playerid),
        vid = GetPlayerVehicleID(playerid);

    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(id == -1)
        return SendErrorMessage(playerid, "You are not in range of any delivery point.");

    if(!IsLoadableVehicle(vid))
        return SendErrorMessage(playerid, "You are not inside any loadable vehicle.");

    if(!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
        return SendErrorMessage(playerid, "There is nothing loaded in this vehicle.");

    if(PlayerData[playerid][pUnloading] != -1)
        return SendErrorMessage(playerid, "You are already unloading your crates.");

    if(PlayerData[playerid][pShipment] != 0 && id != PlayerData[playerid][pShipment])
        return SendErrorMessage(playerid, "You didn't accept shipment for this business.");

    switch (CoreVehicles[vid][vehLoadType])
    {
        case 1:
        {
            if(BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6)
                return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
        }
        case 2..4:
        {
            if(BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
                return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
        }
        case 5:
        {
            if(BusinessData[id][bizType] != 6)
                return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
        }
        case 6:
        {
            if(BusinessData[id][bizType] != 7)
                return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
        }
        case 7:
        {
            if(BusinessData[id][bizType] != 8)
                return SendErrorMessage(playerid, "This business can't accept this load (wrong type).");
        }
    }
    static
        Float:fX,
        Float:fY,
        Float:fZ;

    DisableWaypoint(playerid);

    GetVehicleBoot(vid, fX, fY, fZ);
    RemovePlayerFromVehicle(playerid);

    PlayerData[playerid][pUnloading] = id;
    PlayerData[playerid][pUnloadVehicle] = vid;

    SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
    SendServerMessage(playerid, "Please unload the crates and deliver them to the point.");

    return 1;
}*/

CMD:buycomponent(playerid, params[])
{
    static 
        id = -1,
        component;

    if((GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC) && (GetPlayerJob(playerid, 0) != JOB_BUILDER && GetPlayerJob(playerid, 1) != JOB_BUILDER))
        return SendErrorMessage(playerid, "You aren't mechanic or builder.");

    if((id = Job_NearestPoint(playerid)) != -1)
    {
        if(JobData[id][jobType] != JOB_MECHANIC)
            return SendErrorMessage(playerid, "You're not in component warehouse.");

        if(sscanf(params, "d", component))
            return SendSyntaxMessage(playerid, "/buycomponent [amount]");

        if(component > 250 || component < 1)
            return SendErrorMessage(playerid, "Amount of component must between 1 - 250 component.");

        if(GetMoney(playerid) < (component))
            return SendErrorMessage(playerid, "You don't have enough money to buy component.");

        if((Inventory_Count(playerid, "Component")+component) > 250)
            return SendErrorMessage(playerid, "You have maximmum component on you, put on your vehicle first to get more.");

        GiveMoney(playerid, -1*component);

        Inventory_Add(playerid, "Component", 18633, component);
        SendCustomMessage(playerid, "COMPONENT","You have buy "YELLOW"%d component "WHITE"for "GREEN"%s. "WHITE" Now you have "YELLOW"%d component on your inventory.", component, FormatNumber(component), Inventory_Count(playerid, "Component"));
    }
    return 1;
}

CMD:mechanicmenu(playerid)
{
    new 
        vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false),
        id = -1;

    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC) 
        return SendErrorMessage(playerid, "Kamu bukan seorang mekanik.");

    if(vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "Tidak ada kendaraan didekatmu.");

    if(IsPlayerInAnyVehicle(playerid)) 
        return SendErrorMessage(playerid, "Keluar dari kendaraan untuk menggunakan perintah ini.");

    if((id = Workshop_Nearest(playerid)) != -1) 
    {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) 
            return SendErrorMessage(playerid, "Kamu bukan pekerja diworkshop ini.");

        if(WorkshopData[id][wSeal]) 
            return SendErrorMessage(playerid, "Workshop ini disegel oleh pemerintahan.");

        if((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cOwner])
            SendCustomMessage(Vehicle_GetOwner(id), "MECHANIC", ""YELLOW"%s "WHITE"mencoba memeriksa kondisi kendaraanmu.", ReturnName(playerid, 0, 1));
    
        Dialog_Show(playerid, VehicleMenu, DIALOG_STYLE_TABLIST_HEADERS, "Workshop Menu", "Menu\tQuantity\nRepair Engine\t2 component(for 25 health)\nRepair Tires\t20 component\nRepair Body\t40 component\nInstall Neon\t50 Component\nMods\t70 component\nPaintjob\t15 component\nUpgrade Engine\t250 component\nUpgrade Body\t250 component\nUninstall Mods\t50 component", "Select", "Close");
    }
    else if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1]))
    {
        if((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cOwner]) SendCustomMessage(Vehicle_GetOwner(id), "MECHANIC", ""YELLOW"%s "WHITE"mencoba memeriksa kondisi kendaraanmu.", ReturnName(playerid, 0, 1));        
        Dialog_Show(playerid, VehicleMenu, DIALOG_STYLE_TABLIST_HEADERS, "Mechanic Menu", "Menu\tQuantity\nRepair Engine\t2 component(for 25 health)\nRepair Tires\t20 component\nRepair Body\t40 component\nInstall Neon\t50 Component\nColor Car\t35 component\nUpgrade Engine\t250 component\nUpgrade Body\t250 component", "Select", "Close");
    }
    else {
        if((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cOwner]) SendCustomMessage(Vehicle_GetOwner(id), "MECHANIC", ""YELLOW"%s "WHITE"mencoba memeriksa kondisi kendaraanmu.", ReturnName(playerid, 0, 1));        
        Dialog_Show(playerid, VehicleMenu, DIALOG_STYLE_TABLIST_HEADERS, "Mechanic Menu", "Menu\tQuantity\nRepair Tires\t20 component", "Select", "Close");
    }

    return 1;
}
CMD:mm(playerid)
    return cmd_mechanicmenu(playerid);

CMD:repairtires(playerid, params[])
{
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false),
        id = -1;

    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC)
        return SendErrorMessage(playerid, "You're not mechanic.");

    // if(!IsPlayerInDynamicArea(playerid, zones[0]) && Workshop_Nearest(playerid) == -1) 
    //     return SendErrorMessage(playerid, "You're not in mechanic center or workshop.");

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not near any vehicle.");

    if((id = Workshop_Nearest(playerid)) != -1)
    {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) return SendErrorMessage(playerid, "You are't work in this workshop.");
        if(WorkshopData[id][wComponent] < 15) return SendErrorMessage(playerid, "This workshop does't enough component to repair tires.");
    } else if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
        if(!PlayerData[playerid][pJobDuty])
            return SendErrorMessage(playerid, "You must mechanic duty to repair this vehicle.");

        if(Inventory_Count(playerid, "Component") < 15)
            return SendErrorMessage(playerid, "You don't have enough component to repair vehicle tires (15 component).");
    }

    if(IsABoat(vehicleid))
        return SendErrorMessage(playerid, "Boat doesn't have it's tire!");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must exit the vehicle first.");

    if(PlayerData[playerid][pMekanik])
        return SendErrorMessage(playerid, "You already repair this vehicle.");

    if(PlayerData[playerid][pEnergy] <= 20.0)
        return SendErrorMessage(playerid, "You're so tired, can't repair this vehicle.");

    PlayerData[playerid][pRepairTime] = repeat repairVehicle(playerid, vehicleid, REPAIR_TIRES);
    PlayerData[playerid][pMekanik] = 1;
    PlayerData[playerid][pMekanikTime] = 0;
    SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");
    return 1;
}

// CMD:userepairkit(playerid, params[]) {
//     new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false),
//         id = -1,
//         Float:hpreq;

//     if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
//         return SendErrorMessage(playerid, "You can't use this command at the moment.");

//     if (vehicleid == INVALID_VEHICLE_ID)
//         return SendErrorMessage(playerid, "You are not near any vehicle.");

//     if (Inventory_Count(playerid, "Repair Kit") < 1)
//         return SendErrorMessage(playerid, "You need at least one repair kit to repair this vehicle.");

//     if(IsPlayerInAnyVehicle(playerid))
//         return SendErrorMessage(playerid, "You must exit the vehicle first.");

//     if(PlayerData[playerid][pMekanik])
//         return SendErrorMessage(playerid, "You already repair this vehicle.");

//     if(GetEngineStatus(vehicleid))
//         return SendErrorMessage(playerid, "Turn off vehicle engine first.");

//     // if(!IsABoat(vehicleid) && !IsABike(vehicleid))
//     // {
//     //     if(!IsPlayerNearHood(playerid, vehicleid)) return SendErrorMessage(playerid, "You must be in front of vehicle hood.");
//     // }

//     if ((id = Vehicle_GetID(vehicleid)) != -1) {
//         if (VehicleData[id][cEngineUpgrade] && !IsABike(vehicleid)) hpreq = VehicleData[id][cMaxHealth];
//         else if (VehicleData[id][cEngineUpgrade] && IsABike(vehicleid)) hpreq = 1499.0;
//         else hpreq = 999.0;

//         if (ReturnVehicleHealth(vehicleid) >= hpreq)
//             return SendErrorMessage(playerid, "This vehicle health is good");

//         PlayerData[playerid][pMekanik] = 1;
//         PlayerData[playerid][pMekanikTime] = 0;
//         PlayerData[playerid][pRepairTime] = repeat RepairKit(playerid, vehicleid);
//         SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");
//         return 1;
//     }
//     return 1;
// }

CMD:repairengine(playerid, params[])
{
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false),
        vehid = -1,
        id  = -1,
        Float:hpreq;

    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC)
        return SendErrorMessage(playerid, "You're not mechanic.");

    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "You can't use this command at the moment.");

    if(!IsPlayerInDynamicArea(playerid, zones[0]) && !IsPlayerInDynamicArea(playerid, zones[1]) && Workshop_Nearest(playerid) == -1) 
        return SendErrorMessage(playerid, "You're not in mechanic center or workshop.");

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not near any vehicle.");

    if((id = Workshop_Nearest(playerid)) != -1)
    {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) return SendErrorMessage(playerid, "You are't work in this workshop.");
        if(WorkshopData[id][wComponent] < 2) return SendErrorMessage(playerid, "This workshop does't enough component to repair engine.");
    }

    if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
        if(!PlayerData[playerid][pJobDuty])
            return SendErrorMessage(playerid, "You must mechanic duty to repair this vehicle.");

        if(Inventory_Count(playerid, "Component") < 2)
            return SendErrorMessage(playerid, "You don't have enough component to repair vehicle engine (2 component).");
    }

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must exit the vehicle first.");

    if(PlayerData[playerid][pMekanik])
        return SendErrorMessage(playerid, "You already repair this vehicle.");

    if(PlayerData[playerid][pEnergy] <= 20.0)
        return SendErrorMessage(playerid, "You're so tired, cant repair this vehicle.");

    if(GetEngineStatus(vehicleid))
        return SendErrorMessage(playerid, "Turn off vehicle engine first.");

    // if(!IsABoat(vehicleid) && !IsABike(vehicleid))
    // {
    //     if(!IsPlayerNearHood(playerid, vehicleid)) return SendErrorMessage(playerid, "You must be in front of vehicle hood.");
    // }

    if ((vehid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1) {
        if (VehicleData[vehid][cEngineUpgrade] && !IsABike(vehicleid)) hpreq = VehicleData[vehid][cMaxHealth];
        else if (VehicleData[vehid][cEngineUpgrade] && IsABike(vehicleid)) hpreq = 1499.0;
        else hpreq = 999.0;

        if (ReturnVehicleHealth(vehicleid) >= hpreq)
            return SendErrorMessage(playerid, "This vehicle health is good");

        PlayerData[playerid][pRepairTime] = repeat repairVehicle(playerid, vehicleid, REPAIR_ENGINE);
        PlayerData[playerid][pMekanik] = 1;
        PlayerData[playerid][pMekanikTime] = 0;
        SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");
    } else SendErrorMessage(playerid, "There are no vehicle in near you.");
    return 1;
}

CMD:repairbody(playerid, params[])
{
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false),
        id = -1;

    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC)
        return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai mekanik.");

    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "Tidak bisa menggunakan perintah ini juka injured dan diborgol.");

    if((id = Workshop_Nearest(playerid)) != -1)
    {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) 
            return SendErrorMessage(playerid, "Kamu bukan pekerja diworkshop ini.");

        if(WorkshopData[id][wComponent] < 40) 
            return SendErrorMessage(playerid, "Komponen yang tersedia diworkshop tidak mencukupi (40 component).");
    }
    else if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1]))
    {
        if(!PlayerData[playerid][pJobDuty])
            return SendErrorMessage(playerid, "Duty mekanik terlebih dahulu.");

        if(Inventory_Count(playerid, "Component") < 40)
            return SendErrorMessage(playerid, "Komponen yang kamu miliki tidak mencukupi (40 component).");
    }
    else return SendErrorMessage(playerid, "Kamu tidak berada di workshop ataupun mechanic center.");

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not near any vehicle.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Tidak dapat menggunakan perintah ini didalam kendaraan.");

    if(PlayerData[playerid][pMekanik])
        return SendErrorMessage(playerid, "Kamu sedang memperbaiki kendaraan.");

    if(PlayerData[playerid][pEnergy] <= 20.0)
        return SendErrorMessage(playerid, "Kamu terlalu lelah untuk memperbaiki kendaraan ini (isi energy mu).");

    if(GetEngineStatus(vehicleid))
        return SendErrorMessage(playerid, "Matikan mesin kendaraan yang akan diperbaiki.");

    if (IsABike(vehicleid))
        return SendErrorMessage(playerid, "Kendaraan ini tidak dapat di repair bodynya!");

    PlayerData[playerid][pMekanik] = 1;
    PlayerData[playerid][pMekanikTime] = 0;
    PlayerData[playerid][pRepairTime] = repeat repairVehicle[1500](playerid, vehicleid, REPAIR_BODY);
    SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");
    return 1;
}

CMD:repairhealth(playerid, params[])
{
    new i = GetNearestVehicleToPlayer(playerid,4.0,false),
        id = -1,
        Float:hpreq,
        vehid = -1;
    
    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC) return SendErrorMessage(playerid, "You don't have the appropriate job.");
    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured]) return SendErrorMessage(playerid, "You can't use this command at the moment.");
    if(PlayerData[playerid][pEnergy] <= 20.0) return SendErrorMessage(playerid, "You're so tired, cant repair this vehicle.");
    if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You must exit the vehicle first.");
    if(PlayerData[playerid][pMekanik]) return SendErrorMessage(playerid, "You already repair this vehicle.");
    if((id = Workshop_Nearest(playerid)) != -1) {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) return SendErrorMessage(playerid, "You're employe on this workshop.");
        if(WorkshopData[id][wComponent] < 3) return SendErrorMessage(playerid, "This workshop must have 3 component to repair health.");
    } else if (IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
        if(Inventory_Count(playerid, "Component") < 3)
            return SendErrorMessage(playerid, "You must have 3 component to repair health.");
    } else return SendErrorMessage(playerid, "You are not in Mechanic Center or any Workshop!");

    if (i == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not near any vehicle.");

    // if(!IsABoat(i))
    // {
    //     if(!IsPlayerNearHood(playerid, i)) return SendErrorMessage(playerid, "You must be in front of vehicle hood.");
    // }

    if ((vehid = Vehicle_GetID(i)) != -1) {
        if (VehicleData[vehid][cEngineUpgrade] && !IsABike(i)) hpreq = VehicleData[vehid][cMaxHealth];
        else if (VehicleData[vehid][cEngineUpgrade] && IsABike(i)) hpreq = 1499.0;
        else hpreq = 999.0;
    
        if(GetEngineStatus(i))
            return SendErrorMessage(playerid, "Turn off vehicle engine first.");

        if(ReturnVehicleHealth(i) >= hpreq)
            return SendErrorMessage(playerid, "This vehicle health is good.");

        if(!IsEngineVehicle(i))
            return SendErrorMessage(playerid, "This vehicle can't be repaired.");

        SetHoodStatus(i,true);
        PlayerData[playerid][pRepairTime] = repeat repairVehicle(playerid, VehicleData[vehid][cVehicle], REPAIR_ENGINE);
        PlayerData[playerid][pMekanik] = 1;
        PlayerData[playerid][pMekanikTime] = 0;
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s starts to repair the vehicle.", ReturnName(playerid, 0, 1));
        SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");
    }
    return 1;
}

CMD:repairgymequip(playerid, params[]) {
    new id = -1;

    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if ((id = GYMObject_Nearest(playerid)) != -1) {
        if(Inventory_Count(playerid, "Component") < 100)
            return SendErrorMessage(playerid, "Minimal harus mempunyai 100 komponen untuk memperbaiki GYM Equipment.");

        if (GYMObject[id][objectCondition] >= 2500)
            return SendErrorMessage(playerid, "This GYM Equip condition is good.");

        if(PlayerData[playerid][pMekanik])
            return SendErrorMessage(playerid, "Kamu sedang memperbaiki sesuatu.");

        PlayerData[playerid][pRepairTime] = repeat repairGYMEquip(playerid, id);
        PlayerData[playerid][pMekanik] = 1;
        PlayerData[playerid][pMekanikTime] = 0;
    } else SendErrorMessage(playerid, "You're not near in any GYM Equipment");
    return 1;
}

CMD:upgrade(playerid, params[])
{
    new i = GetNearestVehicleToPlayer(playerid,4.0,false),
        id = -1,
        vehid = -1,
        type[24];

    if (sscanf(params, "s[24]", type)) {
        SendSyntaxMessage(playerid, "/upgrade [type]");
        SendClientMessageEx(playerid, X11_YELLOW_2, "[TYPES]: "WHITE"engine, body");
        return 1;
    }
    
    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC) return SendErrorMessage(playerid, "You don't have the appropriate job.");
    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured]) return SendErrorMessage(playerid, "You can't use this command at the moment.");
    if(PlayerData[playerid][pEnergy] <= 20.0) return SendErrorMessage(playerid, "You're so tired, cant repair this vehicle.");
    if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You must exit the vehicle first.");
    if((id = Workshop_Nearest(playerid)) != -1) {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) return SendErrorMessage(playerid, "You're employe on this workshop.");
        if(WorkshopData[id][wComponent] < 250) return SendErrorMessage(playerid, "This workshop must have 250 component to upgrade.");
    } else if (IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
        if(Inventory_Count(playerid, "Component") < 250)
            return SendErrorMessage(playerid, "You must have 250 component to upgrade.");
    } else return SendErrorMessage(playerid, "You are not in Mechanic Center or any Workshop!");

    if (i == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not near any vehicle.");

    // if(!IsABoat(i))
    // {
    //     if(!IsPlayerNearHood(playerid, i)) return SendErrorMessage(playerid, "You must be in front of vehicle hood.");
    // }

    if ((vehid = Vehicle_GetID(i)) != -1) {
        if (!strcmp(type, "engine")) {
            if (VehicleData[vehid][cEngineUpgrade])
                return SendErrorMessage(playerid, "This vehicle is already engine upgrade!");

            if (PlayerData[playerid][pUpgrade])
                return SendErrorMessage(playerid, "You're being upgrading!");

            PlayerData[playerid][pUpgrade] = 0;
            PlayerData[playerid][pUpgradeTimer] = repeat UpgradeCar(playerid, i, 1);
            SendServerMessage(playerid, "Don't move from your position or you will failed to upgrade this vehicle.");
        } else if (!strcmp(type, "body")) {
            if (IsABike(i))
                return SendErrorMessage(playerid, "Kendaraan ini tidak bisa diupgrade body!");

            if (VehicleData[vehid][cBodyUpgrade])
                return SendErrorMessage(playerid, "This vehicle is already body upgrade!");

            if (PlayerData[playerid][pUpgrade])
                return SendErrorMessage(playerid, "You're being upgrading!");

            PlayerData[playerid][pUpgrade] = 0;
            PlayerData[playerid][pUpgradeTimer] = repeat UpgradeCar(playerid, i, 0);
            SendServerMessage(playerid, "Don't move from your position or you will failed to upgrade this vehicle.");
        }
        // else if (!strcmp(type, "alarm")) {
        //     if (IsABike(i))
        //         return SendErrorMessage(playerid, "Kendaraan ini tidak bisa diupgrade body!");

        //     if (VehicleData[vehid][cAlarm])
        //         return SendErrorMessage(playerid, "This vehicle is already installed security alarm!");

        //     if (PlayerData[playerid][pUpgrade])
        //         return SendErrorMessage(playerid, "You're being upgrading!");

        //     PlayerData[playerid][pUpgrade] = 0;
        //     PlayerData[playerid][pUpgradeTimer] = repeat UpgradeCar(playerid, i, 2);
        //     SendServerMessage(playerid, "Don't move from your position or you will failed to upgrade this vehicle.");
        // }
    }
    
    return 1;
}

CMD:paintcar(playerid, params[])
{
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), paint1, paint2, id = -1;
    
    if(GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_MECHANIC)
        return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai mekanik.");

    if(PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "Tidak bisa menggunakan perintah ini juka injured dan diborgol.");

    if((id = Workshop_Nearest(playerid)) != -1)
    {
        if(!Workshop_IsOwner(playerid, id) && !Workshop_Employe(playerid, id)) 
            return SendErrorMessage(playerid, "Kamu bukan pekerja diworkshop ini.");

        if(WorkshopData[id][wComponent] < 40) 
            return SendErrorMessage(playerid, "Komponen yang tersedia diworkshop tidak mencukupi (40 component).");
    }
    else if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1]))
    {
        if(!PlayerData[playerid][pJobDuty])
            return SendErrorMessage(playerid, "Duty mekanik terlebih dahulu.");

        if(Inventory_Count(playerid, "Component") < 40)
            return SendErrorMessage(playerid, "Komponen yang kamu miliki tidak mencukupi (40 component).");
    }
    else return SendErrorMessage(playerid, "Kamu tidak berada di workshop ataupun mechanic center.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Tidak dapat menggunakan perintah ini didalam kendaraan.");

    if(vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "Tidak ada kendaraan didekatmu.");

    if(!Inventory_HasItem(playerid, "Spray Can"))
        return SendErrorMessage(playerid, "Kamu tidak memiliki Spray Can belilah di Retail Store!");

    if(sscanf(params, "dd", paint1, paint2))
        return SendSyntaxMessage(playerid, "/paintcar [color1] [color2]");

    SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");

    PlayerData[playerid][pSprayTimer] = repeat ResprayCar(playerid, vehicleid, paint1, paint2);
    PlayerData[playerid][pSpray] = 0;
    return 1;
}

CMD:loadcomponent(playerid, params[]) {
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), carid = -1;

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You're not near any vehicle!");

    if (GetVehicleModel(vehicleid) != 543 && GetVehicleModel(vehicleid) != 554 && GetVehicleModel(vehicleid) != 422 && GetVehicleModel(vehicleid) != 525)
        return SendErrorMessage(playerid, "Ini bukan kendaraan pickup, seperti Bobcat, Sadler, Yosemite, atau Tow Truck.");

    if ((carid = Vehicle_GetID(vehicleid)) != -1) {
        new amount, vehname[32];
        if (sscanf(params, "d", amount))
            return SendSyntaxMessage(playerid, "/loadcomponent [amount]");

        if (amount > Inventory_Count(playerid, "Component"))
            return SendErrorMessage(playerid, "You don't have component that much!");

        if (VehicleData[carid][cComponent] >= 1000)
            return SendErrorMessage(playerid, "This vehicle has already have maximum amount of Component.");

        GetVehicleNameByVehicle(vehicleid, vehname);
        StoreComponentIntoVehicle(carid, amount);
        Inventory_Remove(playerid, "Component", amount);
        SendCustomMessage(playerid, "VEHICLE", "You've been stored "YELLOW"%d component(s) "WHITE"to "CYAN"%s"WHITE", total: "GREEN"%d component(s)", amount, vehname, VehicleData[carid][cComponent]);
        return 1;
    }
    return 1;
}

CMD:unloadcomponent(playerid, params[]) {
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), carid = -1;

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You're not near any vehicle!");

    if ((carid = Vehicle_GetID(vehicleid)) != -1) {
        if (!VehicleData[carid][cComponent])
            return SendErrorMessage(playerid, "There are no component on this vehicle.");

        new ws = -1;
        if((ws = Workshop_Nearest(playerid)) != -1) 
        {
            if (!Workshop_IsOwner(playerid, ws) && !Workshop_Employe(playerid, ws))
                return SendErrorMessage(playerid, "You cannot stored vehicle on this workshop.");

            WorkshopData[ws][wComponent] += VehicleData[carid][cComponent];
            SendCustomMessage(playerid, "WORKSHOP", "You've been stored "YELLOW"%d component(s) "WHITE" to your workshop storage. Total: "GREEN"%d component(s)", VehicleData[carid][cComponent], WorkshopData[ws][wComponent]);
            VehicleData[carid][cComponent] = 0;

            if (IsValidDynamicObject(VehicleData[carid][cComponentObject]))
                DestroyDynamicObject(VehicleData[carid][cComponentObject]);

            VehicleData[carid][cComponentObject] = INVALID_STREAMER_ID;
            Storage_GUI(playerid, false);
        } else {
            if (IsPlayerInAnyVehicle(playerid))
                return SendErrorMessage(playerid, "You must be on foot to use this command!");

            new amount;
            if (sscanf(params, "d", amount))
                return SendSyntaxMessage(playerid, "/unloadcomponent [amount]");

            if (amount < 1)
                return SendErrorMessage(playerid, "Amount must be at least 1 amount.");

            if (amount > VehicleData[carid][cComponent])
                return SendErrorMessage(playerid, "This vehicle don't have stored component that much!");
                
            new id = Inventory_Add(playerid, "Component", 18633, amount), vehname[32];

            if (id != -1) {
                GetVehicleNameByVehicle(VehicleData[carid][cVehicle], vehname);
                VehicleData[carid][cComponent] -= amount;
                if (VehicleData[carid][cComponent] <= 0) {
                    if (IsValidDynamicObject(VehicleData[carid][cComponentObject]))
                        DestroyDynamicObject(VehicleData[carid][cComponentObject]);

                    VehicleData[carid][cComponentObject] = INVALID_STREAMER_ID;
                    Storage_GUI(playerid, false);
                }
                SendCustomMessage(playerid, "VEHICLE", "You've been taken "YELLOW"%d component(s) "WHITE"from your "CYAN"%s"WHITE". Current component: "GREEN"%d component(s)", amount, vehname, VehicleData[carid][cComponent]);
            }
        }
    }
    return 1;
}

CMD:acceptcall(playerid, params[])
{
    if((GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 0) != JOB_TAXI) && (GetPlayerJob(playerid, 1) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_TAXI))
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(!PlayerData[playerid][pJobDuty])
        return SendErrorMessage(playerid, "You must be on duty to accept calls.");
        
    if (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI) Taxi_ShowCalls(playerid);
    else if (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) Mechanic_ShowCalls(playerid);
    return 1;
}

CMD:jobduty(playerid, params[])
{
    if((GetPlayerJob(playerid, 0) != JOB_MECHANIC && GetPlayerJob(playerid, 0) != JOB_TAXI) && (GetPlayerJob(playerid, 1) != JOB_MECHANIC && GetPlayerJob(playerid, 1) != JOB_TAXI))
        return SendErrorMessage(playerid, "This job can't on duty.");

    if(PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "You can't use this action when injured.");

    if(PlayerData[playerid][pMaskOn])
        return SendErrorMessage(playerid, "Disable your mask first.");

    if(AccountData[playerid][pAdminDuty] > 0)
        return SendErrorMessage(playerid, "You're on admin duty.");

    if(PlayerData[playerid][pJobDuty])
    {
        SendCustomMessage(playerid, "JOBDUTY","You are no longer on job duty!");
        if (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI) Taxi_GUI(playerid, false);
        PlayerData[playerid][pJobDuty] = 0;
        SetPlayerColor(playerid, DEFAULT_COLOR);
        stop PlayerData[playerid][pJobDutyTime];
    }
    else
    {
        if (IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
            if (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) {
                if(Inventory_Count(playerid, "Component") < 20)
                    return SendErrorMessage(playerid, "Anda tidak mencukupi komponen untuk bekerja mekanik.");

                if(PlayerData[playerid][pEnergy] < 20)
                    return SendErrorMessage(playerid, "Anda terlalu lelah untuk bekerja.");

                SendCustomMessage(playerid, "MECHANIC","You're now duty as mechanic.");
                SetPlayerColor(playerid, 0xADFF2F00);
                PlayerData[playerid][pSalary] = 0;
                PlayerData[playerid][pJobDuty] = 1;
                stop PlayerData[playerid][pJobDutyTime];
                PlayerData[playerid][pJobDutyTime] = repeat JobDutyTime(playerid);
            }
        } else if (IsPlayerInAnyVehicle(playerid)) {
            if (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI) {
                new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

                if(modelid != 438 && modelid != 420)
                    return SendErrorMessage(playerid, "You must be inside a taxi.");

                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
                    return SendErrorMessage(playerid, "You must be in driver to taxi duty.");

                foreach (new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
                    LeaveTaxi(i, playerid);
                }

                SendCustomMessage(playerid, "TAXI","You're now duty as taxi driver.");
                SetPlayerColor(playerid, 0xFFFF0000);

                Taxi_GUI(playerid, true);
                PlayerData[playerid][pSalary] = 0;
                PlayerData[playerid][pJobDuty] = 1;
                stop PlayerData[playerid][pJobDutyTime];
                PlayerData[playerid][pJobDutyTime] = repeat JobDutyTime(playerid);
            } else if (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC) {
                new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

                if (modelid != 525)
                    return SendErrorMessage(playerid, "You must be inside a Tow Truck.");
                
                SendCustomMessage(playerid, "MECHANIC","You're now duty as mechanic.");
                SetPlayerColor(playerid, 0xADFF2F00);
                PlayerData[playerid][pSalary] = 0;
                PlayerData[playerid][pJobDuty] = 1;
                stop PlayerData[playerid][pJobDutyTime];
                PlayerData[playerid][pJobDutyTime] = repeat JobDutyTime(playerid);
            }
        } else return SendErrorMessage(playerid, "You're not in mechanic city or inside taxi!");
    }
    return 1;
}

CMD:usebandage(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(PlayerData[playerid][pFirstAid])
        return SendErrorMessage(playerid, "You are already using a bandage.");

    if(!Inventory_HasItem(playerid, "Bandage"))
        return SendErrorMessage(playerid, "You don't have any bandage on you.");

    if(ReturnHealth(playerid) > PlayerData[playerid][pMaxHealth]-1.0)
        return SendErrorMessage(playerid, "You don't need to use a bandage right now.");

    if(!IsPlayerInAnyVehicle(playerid))
        ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

    static
        Float:health;

    GetPlayerHealth(playerid, health);

    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508) {
        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
    }

    SetPlayerHealth(playerid, (ReturnHealth2(playerid)+20.0));
    if (health >= PlayerData[playerid][pMaxHealth]) SetPlayerHealth(playerid, PlayerData[playerid][pMaxHealth]);

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s opens a bandage and uses it.", ReturnName(playerid, 0, 1));
    Inventory_Remove(playerid, "Bandage");

    ShowPlayerFooter(playerid, "You have used a ~g~Bandage!");
    return 1;
}

CMD:phone(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use this command now.");

    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, PlayerData[playerid][pPhone] ? (sprintf("Phone (#%d)", PlayerData[playerid][pPhone])) : (""RED"Insert sim first.."), "Dial Number\nMy Contacts\nSend Text Message\nTurn %s Phone\n \nMiss call list\nShare location", "Select", "Cancel", (PlayerData[playerid][pPhoneOff]) ? ("On") : ("Off"));
    return 1;
}

CMD:text(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "Your phone must be powered on.");

    static
        targetid,
        number,
        text[128];

    if(sscanf(params, "ds[128]", number, text))
        return SendSyntaxMessage(playerid, "/text [phone number] [message]");

    if(!number)
        return SendErrorMessage(playerid, "The specified phone number is not in service.");

    if((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
    {
        if(targetid == playerid)
            return SendErrorMessage(playerid, "You can't text yourself!");

        if(PlayerData[targetid][pPhoneOff])
            return SendErrorMessage(playerid, "The recipient has their cellphone powered off.");

        if (Inventory_Count(playerid, "PhoneCredits") < 1)
            return SendErrorMessage(playerid, "You don't have any phone credits");

        Inventory_Remove(playerid, "PhoneCredits", 1);

        SendClientMessageEx(targetid, X11_RED, "Message from: "CYAN"%s (%d)", GetContactNameByNumber(targetid, PlayerData[playerid][pPhone]), PlayerData[playerid][pPhone]);
        SendClientMessageEx(targetid, X11_RED, "Message: "YELLOW"%s", text);

        SendClientMessageEx(playerid, X11_RED, "Message to: "CYAN"%s (%d)", GetContactNameByNumber(playerid, PlayerData[targetid][pPhone]), PlayerData[targetid][pPhone]);
        SendClientMessageEx(playerid, X11_RED, "Message: "YELLOW"%s", text);

        PlayerData[playerid][pSMS] = targetid;
        PlayerData[targetid][pSMS] = playerid;
        PlayerPlaySoundEx(targetid, 21001);
        cmd_ame(playerid, "takes out their phone and sends a text");
    }
    else
    {
        SendErrorMessage(playerid, "The specified phone number is not in service.");
    }
    return 1;
}
CMD:sms(playerid, params[])
    return cmd_text(playerid, params);

CMD:reply(playerid, params[]) {
    if(!Inventory_HasItem(playerid, "Cellphone"))
        return SendErrorMessage(playerid, "You don't have a cellphone on you.");

    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "Your phone must be powered on.");

    if (PlayerData[playerid][pSMS] != INVALID_PLAYER_ID) {
        new targetid = PlayerData[playerid][pSMS];

        if(targetid == playerid)
            return SendErrorMessage(playerid, "You can't text yourself!");

        if(PlayerData[targetid][pPhoneOff])
            return SendErrorMessage(playerid, "The recipient has their cellphone powered off.");

        SetPVarInt(playerid, "replyTextTo", targetid);
        Dialog_Show(playerid, ReplyMessage, DIALOG_STYLE_INPUT, "Reply Message", "Replying message to: "CYAN"%s (%d)", "Send", "Cancel", GetContactNameByNumber(playerid, PlayerData[targetid][pPhone]), PlayerData[targetid][pPhone]);
    }
    return 1;
}

CMD:answer(playerid, params[])
{
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid)  || PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You can't use this command now.");

    if(!PlayerData[playerid][pIncomingCall])
        return SendErrorMessage(playerid, "There are no incoming calls to accept.");

    if(PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "Your phone must be powered on.");

    new targetid = PlayerData[playerid][pCallLine];

    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

    PlayerData[playerid][pIncomingCall] = 0;
    PlayerData[targetid][pIncomingCall] = 0;

    SendCustomMessage(playerid, "PHONE", "You have answered the call.");
    SendCustomMessage(targetid, "PHONE", "The other line has accepted the call.");
    return 1;
}

CMD:hangup(playerid)
{
    new targetid = PlayerData[playerid][pCallLine];

    if(PlayerData[playerid][pEmergency])
    {
        PlayerData[playerid][pEmergency] = 0;
        cmd_ame(playerid, "hang up their cellphone");
        if (PlayerData[playerid][pUsedPayphone] != -1) {
            PayphoneData[PlayerData[playerid][pUsedPayphone]][phoneUsed] = 0;
            PlayerData[playerid][pUsedPayphone] = -1;
            stop PlayerData[playerid][pPayphoneTimer];
        }
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }
    if(PlayerData[playerid][pNonEmergency])
    {
        PlayerData[playerid][pNonEmergency] = 0;
        cmd_ame(playerid, "hang up their cellphone");
        if (PlayerData[playerid][pUsedPayphone] != -1) {
            PayphoneData[PlayerData[playerid][pUsedPayphone]][phoneUsed] = 0;
            PlayerData[playerid][pUsedPayphone] = -1;
            stop PlayerData[playerid][pPayphoneTimer];
        }
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }
    if(targetid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "There are no calls to hangup.");

    if(PlayerData[playerid][pIncomingCall])
    {
        SendCustomMessage(playerid, "PHONE", "You have declined the incoming call.");
        SendCustomMessage(targetid, "PHONE", "The other line has declined the call.");

        cmd_ame(playerid, "declined their call");
    }
    else
    {
        SendCustomMessage(playerid, "PHONE", "You have hung up the call.");
        SendCustomMessage(targetid, "PHONE", "The other line has hung up the call.");

        cmd_ame(playerid, "hang up their cellphone");
        cmd_ame(targetid, "hang up their cellphone");
    }
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
    SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

    PlayerData[playerid][pIncomingCall] = 0;
    PlayerData[targetid][pIncomingCall] = 0;

    PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

    if (PlayerData[playerid][pUsedPayphone] != -1) {
        PayphoneData[PlayerData[playerid][pUsedPayphone]][phoneUsed] = 0;
        PlayerData[playerid][pUsedPayphone] = -1;
        stop PlayerData[playerid][pPayphoneTimer];
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
    }

    return 1;
}
CMD:h(playerid)
    return cmd_hangup(playerid);

CMD:id(playerid, params[])
{
    if (isnull(params))
        return SendSyntaxMessage(playerid, "/id [playerid/name]");

    new userid, count;
    if (sscanf(params, "d", userid)) {
        if (strlen(params) < 3)
            return SendErrorMessage(playerid, "You must enter at least 3 letters to search by name.");

        static
            online[24], client[24];
        
        foreach (new pid : Player) if (strfind(ReturnName(pid), params, true) != -1 && IsPlayerConnected(pid)) {
            GetPlayerVersion(pid, client, sizeof(client));
            FormatTimeleft((GetConnectedTime(pid)/1000), online);

            SendClientMessageEx(playerid, X11_LIGHTBLUE, "[ID:%d] "WHITE"%s (level %d), Ping: %d, Online time: %s, Version: %s, Packetloss: %.1f", pid, ReturnName(pid), PlayerData[pid][pScore], GetPlayerPing(pid), online, client, NetStats_PacketLossPercent(pid));
            count++;
        }

        if (!count)
            return SendErrorMessage(playerid, "No users matched the search criteria: \"%s\".", params);
    } else {
        static
            online[24], client[24];

        GetPlayerVersion(userid, client, sizeof(client));
        FormatTimeleft((GetConnectedTime(userid)/1000), online);
        if (IsPlayerConnected(userid)) {
            SendClientMessageEx(playerid, X11_LIGHTBLUE, "[ID:%d] "WHITE"%s (level %d), Ping: %d, Online time: %s, Version: %s, Packetloss: %.1f", userid, ReturnName(userid), PlayerData[userid][pScore], GetPlayerPing(userid), online, client, NetStats_PacketLossPercent(userid));
            count++;
        }
        
        if(!count)
            return SendErrorMessage(playerid, "No users matched the search criteria: \"%s\".", params);
    }

    return 1;
}

CMD:loadcrate(playerid, params[])
{
    new vehid = GetPlayerVehicleID(playerid);

    if (PlayerData[playerid][pUnloaderDelay] > 0)
        return SendErrorMessage(playerid, "You can work again in %d minutes.", GetUnloaderDelay(playerid) / 60);

    if(GetVehicleModel(vehid) != 530)
        return SendErrorMessage(playerid, "You must be inside a forklift.");

    if (ServerData[cargoStock][4] >= MAX_STOCK)
        return SendErrorMessage(playerid, "The cargo GYM stock is full.");

    if(CoreVehicles[vehid][vehLoadType] == 8)
        return SendErrorMessage(playerid, "This forklift has a crate loaded already.");

    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 0.01, -222.03, 5.42))
        return SendErrorMessage(playerid, "You must be closer to the crates.");

    if(PlayerData[playerid][pLoading])
        return SendErrorMessage(playerid, "You are already loading a crate at the moment.");

    PlayerData[playerid][pLoading] = 1;

    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Loading crate...", 3200, 3);
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s moves the forklift towards the crate.", ReturnName(playerid, 0, 1));

    TogglePlayerControllable(playerid, 0);
    SetTimerEx("ForkliftUpdate", 3000, false, "dd", playerid, vehid);
    return 1;
}

CMD:mine(playerid, params[])
{
    if (GetMinerDelay(playerid) > 0)
        return SendErrorMessage(playerid, "You can work again in %d minutes.", GetMinerDelay(playerid) / 60);

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You can't use this in vehicle");

    if(IsPlayerNearMine(playerid) == -1)
        return SendErrorMessage(playerid, "You must be near the mine.");

    if (ServerData[cargoStock][0] >= MAX_STOCK)
        return SendErrorMessage(playerid, "The cargo Fuel stock is full.");

    if(PlayerData[playerid][pMining])
    {
        PlayerData[playerid][pMining] = false;
        PlayerData[playerid][pMineCount] = 0;
        SetMinerDelay(playerid, 1500);

        new bonus = RandomEx(25,75);
        AddPlayerSalary(playerid, (PlayerData[playerid][pMiner]*30)+bonus, "Miner Sidejob + Bonus");
        PlayerData[playerid][pMiner] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SendCustomMessage(playerid, "MINER", "You have finished your mining job.");
    }
    else
    {
        PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

        SendCustomMessage(playerid, "MINER", "You are now mining! Use the fire key to begin digging.");
        SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
    }
    return 1;
}

CMD:checkfood(playerid, params[])
{
    if(GetPlayerJob(playerid, 0) != JOB_FOOD_VENDOR && GetPlayerJob(playerid, 1) != JOB_FOOD_VENDOR)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 588)
        return SendErrorMessage(playerid, "You are not inside a food truck.");

    if(CoreVehicles[GetPlayerVehicleID(playerid)][vehFood])
        SendServerMessage(playerid,"This vehicle loaded "YELLOW"%d food.", CoreVehicles[GetPlayerVehicleID(playerid)][vehFood]);
    else
        SendErrorMessage(playerid,"This vehicle isn't loaded any food.");

    return 1;
}

CMD:buyfood(playerid, params[])
{
    new id = -1,food;
    if((id = Job_NearestPoint(playerid)) != -1)
    {
        if(GetPlayerJob(playerid, 0) != JOB_FOOD_VENDOR && GetPlayerJob(playerid, 1) != JOB_FOOD_VENDOR)
            return SendErrorMessage(playerid, "You don't have the appropriate job.");

        if(JobData[id][jobType] == JOB_FOOD_VENDOR)
        {
            if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 588)
                return SendErrorMessage(playerid, "You are not inside a food truck.");

            if(sscanf(params, "d", food))
                return SendSyntaxMessage(playerid, "/buyfood [amount]");

            if(food < 1 || food > 100)
                return SendErrorMessage(playerid, "Amount must between 1 - 100");

            if(GetMoney(playerid) < (food*2))
                return SendErrorMessage(playerid, "You don't have enough money to buy more food.");

            if((CoreVehicles[GetPlayerVehicleID(playerid)][vehFood] + food) > 100)
                return SendErrorMessage(playerid, "This vehicle reached limit for food (max 100).");

            GiveMoney(playerid, -(food*2));
            CoreVehicles[GetPlayerVehicleID(playerid)][vehFood] += food;
            SendServerMessage(playerid,"You have buy %d food, and put into the vehicle, now you have %d on your car.", food, CoreVehicles[GetPlayerVehicleID(playerid)][vehFood]);
        }
    }
    else
        SendErrorMessage(playerid, "You're not in nearest job point.");

    return 1;
}

CMD:sellfood(playerid, params[])
{
    if(GetPlayerJob(playerid, 0) != JOB_FOOD_VENDOR && GetPlayerJob(playerid, 1) != JOB_FOOD_VENDOR)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 588)
        return SendErrorMessage(playerid, "You are not inside a food truck.");

    if(!CoreVehicles[GetPlayerVehicleID(playerid)][vehFood])
        return SendErrorMessage(playerid, "This vehicle isn't loaded food.");

    static
        userid,
        food[24],
        price;

    if(sscanf(params, "us[24]d", userid, food, price))
    {
        SendSyntaxMessage(playerid, "/sellfood [playerid/PartOfName] [food name] [price]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" burger, pizza, chicken");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 7.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(price < 1 || price > 30)
        return SendErrorMessage(playerid, "The price can't be below $1 or above $30.");

    if(!strcmp(food, "burger", true))
    {
        if(CoreVehicles[GetPlayerVehicleID(playerid)][vehFood] < 4)
            return SendErrorMessage(playerid, "This vehicle need 4 food to sell.");

        PlayerData[userid][pFoodSeller] = playerid;
        PlayerData[userid][pFoodType] = 3;
        PlayerData[userid][pFoodPrice] = price;

        SendServerMessage(userid, "%s has offered you a burger for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
        SendServerMessage(playerid, "You have offered a burger to %s for $%d.", ReturnName(userid, 0), price);
    }
    else if(!strcmp(food, "pizza", true))
    {
        if(CoreVehicles[GetPlayerVehicleID(playerid)][vehFood] < 5)
            return SendErrorMessage(playerid, "This vehicle need 5 food to sell.");

        PlayerData[userid][pFoodSeller] = playerid;
        PlayerData[userid][pFoodType] = 4;
        PlayerData[userid][pFoodPrice] = price;

        SendServerMessage(userid, "%s has offered you a slice of pizza for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
        SendServerMessage(playerid, "You have offered a slice of pizza to %s for $%d.", ReturnName(userid, 0), price);
    }
    else if(!strcmp(food, "chicken", true))
    {
        if(CoreVehicles[GetPlayerVehicleID(playerid)][vehFood] < 6)
            return SendErrorMessage(playerid, "This vehicle need 6 food to sell.");

        PlayerData[userid][pFoodSeller] = playerid;
        PlayerData[userid][pFoodType] = 5;
        PlayerData[userid][pFoodPrice] = price;

        SendServerMessage(userid, "%s has offered you some chicken for $%d (type \"/approve food\" to accept).", ReturnName(playerid, 0), price);
        SendServerMessage(playerid, "You have offered some chicken to %s for $%d.", ReturnName(userid, 0), price);
    }
    return 1;
}

// CMD:createcrate(playerid, params[])
// {
//     static
//         id = -1,
//         type,
//         Float:x, Float:y, Float:z, Float:a;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "d", type))
//     {
//         SendSyntaxMessage(playerid, "/createcrate [type]");
//         SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Melee | 2: Pistol Parts | 3: SMG Parts | 4: Shotgun Parts | 5: Rifle Parts | 6: Drugs");
//         return 1;
//     }
//     if(type < 1 || type > 6)
//         return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 6.");

//     GetPlayerPos(playerid, x, y, z);
//     GetPlayerFacingAngle(playerid, a);

//     id = Crate_Create(playerid,type, x, y, z, a);

//     if(id == -1)
//         return SendErrorMessage(playerid, "The server has reached the limit for crates.");

//     SendServerMessage(playerid, "You have successfully created crate ID: %d.", id);
//     return 1;
// }

// CMD:destroycrate(playerid, params[])
// {
//     static
//         id = 0;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "d", id))
//         return SendSyntaxMessage(playerid, "/destroycrate [crate id]");

//     if((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
//         return SendErrorMessage(playerid, "You have specified an invalid crate ID.");

//     Crate_Delete(id);
//     SendServerMessage(playerid, "You have successfully destroyed crate ID: %d.", id);
//     return 1;
// }

// CMD:crates(playerid, params[])
// {
//     static
//         string[512];

//     string[0] = '\0';

//     for (new i = 1, l = GetVehiclePoolSize(); i <= l; i ++) if(IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
//     {
//         if(GetVehicleCrates(i) < 1)
//             return SendErrorMessage(playerid, "There are no crates in this vehicle.");

//         for (new  j = 0; j != MAX_CRATES; j ++) if(CrateData[j][crateExists] && CrateData[j][crateVehicle] == i) {
//             format(string, sizeof(string), "%sCrate #%d: %s Parts\n", string, j, Crate_GetType(CrateData[j][crateType]));
//         }
//         PlayerData[playerid][pCrateVehicle] = i;
//         return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Vehicle Crates", string, "Take", "Cancel");
//     }
//     SendErrorMessage(playerid, "You are not in range of any loadable vehicle.");
//     return 1;
// }

/*CMD:craftparts(playerid, params[])
{
    new id = -1;

    if(PlayerData[playerid][pJob] != JOB_WEAPON_SMUGGLER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_WEAPON_SMUGGLER)
        return SendErrorMessage(playerid, "You are not in range of the craft factory.");

    if(PlayerData[playerid][pCarryCrate] == -1)
        return SendErrorMessage(playerid, "You are not carrying any crate.");

    if(PlayerData[playerid][pCrafting])
        return SendErrorMessage(playerid, "You are already crafting weapon parts.");

    if(CrateData[PlayerData[playerid][pCarryCrate]][crateType] < 1 || CrateData[PlayerData[playerid][pCarryCrate]][crateType] > 5)
        return SendErrorMessage(playerid, "There are no weapon parts in this crate.");

    PlayerData[playerid][pCrafting] = 1;

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s begins crafting their %s Parts.", ReturnName(playerid, 0), Crate_GetType(CrateData[PlayerData[playerid][pCarryCrate]][crateType]));
    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Crafting parts...", 11000, 3);

    TogglePlayerControllable(playerid, 0);
    SetTimerEx("CraftParts", 8000, false, "dd", playerid, PlayerData[playerid][pCarryCrate]);
    return 1;
}*/

CMD:unloadplant(playerid, params[]) {
    if (GetPlayerJob(playerid, 0) != JOB_FARMER && GetPlayerJob(playerid, 1) != JOB_FARMER)
        return SendErrorMessage(playerid, "You are not a Farmer");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must in any vehicle to use this command");

    new carid = -1;
    if (IsPlayerInRangeOfPoint(playerid, 4.0, -372.83, -1427.15, 25.72)) {
        if (GetFarmerDelay(playerid) > 0)
            return SendErrorMessage(playerid, "You must waiting for %d minute(s) to selling plant again", GetFarmerDelay(playerid)/60);

        if ((carid = Vehicle_GetID(GetPlayerVehicleID(playerid)))) {
            if(GetVehicleModel(VehicleData[carid][cVehicle]) != 543 && GetVehicleModel(VehicleData[carid][cVehicle]) != 554 && GetVehicleModel(VehicleData[carid][cVehicle]) != 422)
                return SendErrorMessage(playerid, "Ini bukan kendaraan pickup, seperti Bobcat, Sadler, atau Yosemite.");
            
            if (!Vehicle_IsOwner(playerid, carid))
                return SendErrorMessage(playerid, "This is not your vehicle.");

            if (!GetVehiclePlantStorage(carid))
                return SendErrorMessage(playerid, "There are no plant in this vehicle!");

            if (ServerData[cargoStock][3] >= MAX_STOCK)
                return SendErrorMessage(playerid, "The cargo Food stock is full.");

            new plantPrice = GetServerPlantPrice(GetPlantName(carid)), count = GetVehiclePlantStorage(carid), total = count*plantPrice;
            AddPlayerSalary(playerid, total, sprintf("Sell %s %d gram(s)", GetPlantName(carid), count));
            SendCustomMessage(playerid, "FARMER", "You've been sold your "YELLOW"%d gram(s) %s "WHITE"for "GREEN"%s", count, GetPlantName(carid), FormatNumber(total));
            Cargo_PlusStock(3, (count >= 1500) ? (10) : (5));
            SetFarmerDelay(playerid, 1500);
            
            VehicleData[carid][cPlant] = 0;
            VehicleData[carid][cPlantType] = 0;
            VehicleData[carid][cPlantObjectUsed] = 0;

            if (IsValidDynamicObject(VehicleData[carid][cPlantObject]))
                DestroyDynamicObject(VehicleData[carid][cPlantObject]);

            VehicleData[carid][cPlantObject] = INVALID_STREAMER_ID;

            Storage_GUI(playerid, false);
        }
    } else SendErrorMessage(playerid, "You are not near in selling plant point");
    return 1;
}

CMD:sellforage(playerid,params[]) {
    if (!IsPlayerInRangeOfPoint(playerid, 4.0, -372.83, -1427.15, 25.72))
        return SendErrorMessage(playerid, "You are not near in selling plant point");

    new type[24],extendstr[24];
    if (sscanf(params,"s[24]S()[24]",type,extendstr))
        return SendSyntaxMessage(playerid,"/sellforage [orange/tomato]");
    
    if(PlayerData[playerid][pDelayForager])
        return SendErrorMessage(playerid, "You must wait for %d minute(s)", (PlayerData[playerid][pDelayForager]/60));
    
    new amount;
    if (!strcmp(type,"orange",true)) {
        if (sscanf(extendstr,"d",amount))
            return SendSyntaxMessage(playerid,"/sellforage orange [amount]");
        
        if (Inventory_Count(playerid,"Orange") < amount)
            return SendErrorMessage(playerid, "You don't have orange that much");

        new price = (amount*6);
        GiveMoney(playerid, price);
        Inventory_Remove(playerid,"Orange",amount);
        PlayerData[playerid][pDelayForager] += 1800;
        SendCustomMessage(playerid,"FORAGE","You have sold "YELLOW"%d orange(s) "WHITE"for "GREEN"%s",amount,FormatNumber(price));
    } else if (!strcmp(type,"tomato",true)) {
        if (sscanf(extendstr,"d",amount))
            return SendSyntaxMessage(playerid,"/sellforage tomato [amount]");
        
        if (Inventory_Count(playerid,"Tomato") < amount)
            return SendErrorMessage(playerid, "You don't have tomato that much");

        new price = (amount*5);
        GiveMoney(playerid, price);
        Inventory_Remove(playerid,"Tomato",amount);
        PlayerData[playerid][pDelayForager] += 1800;
        SendCustomMessage(playerid,"FORAGE","You have sold "YELLOW"%d tomato(es) "WHITE"for "GREEN"%s",amount,FormatNumber(price));
    } else SendSyntaxMessage(playerid,"/sellforage [orange/tomato]");
    return 1;
}

CMD:sellplant(playerid, params[]) {
    if (GetPlayerJob(playerid, 0) != JOB_FARMER && GetPlayerJob(playerid, 1) != JOB_FARMER)
        return SendErrorMessage(playerid, "You are not a Farmer");

    if (IsPlayerInRangeOfPoint(playerid, 4.0, -372.83, -1427.15, 25.72)) {
        new type[24];
        if (sscanf(params, "s[24]", type))
            return SendSyntaxMessage(playerid, "/sellplant [pumpkin/mushroom/cucumber/eggplant]");

        if (GetFarmerDelay(playerid) > 0)
            return SendErrorMessage(playerid, "You must waiting for %d minute(s) to selling plant again", GetFarmerDelay(playerid)/60);

        if (ServerData[cargoStock][3] >= MAX_STOCK)
            return SendErrorMessage(playerid, "The cargo Food stock is full.");

        if (!strcmp(type, "pumpkin", true)) {
            if (Inventory_Count(playerid, "Pumpkin") < 1)
                return SendErrorMessage(playerid, "You don't have any Pumpkin");

            new count = Inventory_Count(playerid, "Pumpkin"), total = count*ServerData[pumpkinPrice];
            AddPlayerSalary(playerid, total, sprintf("Sell Pumpkin %d gram(s)", count));
            Inventory_Remove(playerid, "Pumpkin", count);
            SendCustomMessage(playerid, "FARMER", "You've been sold your "YELLOW"%d gram(s) Pumpkin "WHITE"for "GREEN"%s", count, FormatNumber(total));
            Cargo_PlusStock(3, (count >= 1500) ? (10) : (5));
            SetFarmerDelay(playerid, 1500);
        } else if (!strcmp(type, "mushroom", true)) {
            if (Inventory_Count(playerid, "Mushroom") < 1)
                return SendErrorMessage(playerid, "You don't have any Mushroom");

            new count = Inventory_Count(playerid, "Mushroom"), total = count*ServerData[mushroomPrice];
            AddPlayerSalary(playerid, total, sprintf("Sell Mushroom %d gram(s)", count));
            Inventory_Remove(playerid, "Mushroom", count);
            SendCustomMessage(playerid, "FARMER", "You've been sold your "YELLOW"%d gram(s) Mushroom "WHITE"for "GREEN"%s", count, FormatNumber(total));
            Cargo_PlusStock(3, (count >= 1500) ? (10) : (5));
            SetFarmerDelay(playerid, 1500);
        } else if (!strcmp(type, "cucumber", true)) {
            if (Inventory_Count(playerid, "Cucumber") < 1)
                return SendErrorMessage(playerid, "You don't have any Cucumber");

            new count = Inventory_Count(playerid, "Cucumber"), total = count*ServerData[cucumberPrice];
            AddPlayerSalary(playerid, total, sprintf("Sell Cucumber %d gram(s)", count));
            Inventory_Remove(playerid, "Cucumber", count);
            SendCustomMessage(playerid, "FARMER", "You've been sold your "YELLOW"%d gram(s) Cucumber "WHITE"for "GREEN"%s", count, FormatNumber(total));
            Cargo_PlusStock(3, (count >= 1500) ? (10) : (5));
            SetFarmerDelay(playerid, 1500);
        } else if (!strcmp(type, "eggplant", true)) {
            if (Inventory_Count(playerid, "Egg Plant") < 1)
                return SendErrorMessage(playerid, "You don't have any Egg Plant");

            new count = Inventory_Count(playerid, "Egg Plant"), total = count*ServerData[eggplantPrice];
            AddPlayerSalary(playerid, total, sprintf("Sell Egg Plant %d gram(s)", count));
            Inventory_Remove(playerid, "Egg Plant", count);
            SendCustomMessage(playerid, "FARMER", "You've been sold your "YELLOW"%d gram(s) Egg Plant "WHITE"for "GREEN"%s", count, FormatNumber(total));
            Cargo_PlusStock(3, (count >= 1500) ? (10) : (5));
            SetFarmerDelay(playerid, 1500);
        } else SendSyntaxMessage(playerid, "/sellplant [pumpkin/mushroom/cucumber/eggplant]");
    } else SendErrorMessage(playerid, "You are not near in selling plant point");
    return 1;
}

CMD:plant(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/plant [pumpkin/mushroom/cucumber/eggplant/weed/cocaine/heroin]");
    
    new farmid = -1;
    if ((farmid = Farm_GetID(playerid)) != -1 && IsPlayerInDynamicArea(playerid, pvFarmZone[farmid])) {
        if (GetPlayerJob(playerid, 0) != JOB_FARMER && GetPlayerJob(playerid, 1) != JOB_FARMER)
            return SendErrorMessage(playerid, "You are not a Farmer");

        if (FarmData[farmid][farmSeal])
            return SendErrorMessage(playerid, "This farm is sealed by authority.");

        if(Plant_Nearest(playerid) != -1)
            return SendErrorMessage(playerid, "You can't plant seeds near other plants.");

        if (!Inventory_HasItem(playerid, "Farm Hoe"))
            return SendErrorMessage(playerid, "You don't have any farm hoe, you can buying farm hoe on Retail Store!");

        if(!strcmp(params, "pumpkin", true))
        {
            if(Inventory_Count(playerid, "Pumpkin Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 pumpkin seeds.");

            Inventory_Remove(playerid, "Pumpkin Seeds", 50);

            Plant_Create(playerid, 4, farmid);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some pumpkin seeds into the ground.", ReturnName(playerid, 0, 1));
        } else if(!strcmp(params, "mushroom", true)) {
            if(Inventory_Count(playerid, "Mushroom Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 mushroom seeds.");

            Inventory_Remove(playerid, "Mushroom Seeds", 50);

            Plant_Create(playerid, 5, farmid);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some mushroom seeds into the ground.", ReturnName(playerid, 0, 1));
        } else if(!strcmp(params, "cucumber", true)) {
            if(Inventory_Count(playerid, "Cucumber Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 cucumber seeds.");

            Inventory_Remove(playerid, "Cucumber Seeds", 50);

            Plant_Create(playerid, 6, farmid);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some cucumber seeds into the ground.", ReturnName(playerid, 0, 1));
        } else if(!strcmp(params, "eggplant", true)) {
            if(Inventory_Count(playerid, "Egg Plant Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 Egg Plant seeds.");

            Inventory_Remove(playerid, "Egg Plant Seeds", 50);

            Plant_Create(playerid, 7, farmid);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some Egg Plant seeds into the ground.", ReturnName(playerid, 0, 1));
        } else SendSyntaxMessage(playerid, "/plant [pumpkin/mushroom/cucumber/eggplant]");
    } else if (IsPlayerInDynamicArea(playerid, publicfarm[0]) || IsPlayerInDynamicArea(playerid, publicfarm[1])) {
        if (GetPlayerJob(playerid, 0) != JOB_FARMER && GetPlayerJob(playerid, 1) != JOB_FARMER)
            return SendErrorMessage(playerid, "You are not a Farmer");

        if(Plant_Nearest(playerid) != -1)
            return SendErrorMessage(playerid, "You can't plant seeds near other plants.");

        if (!Inventory_HasItem(playerid, "Farm Hoe"))
            return SendErrorMessage(playerid, "You don't have any farm hoe, you can buying farm hoe on Retail Store!");

        if(!strcmp(params, "pumpkin", true))
        {
            if(Inventory_Count(playerid, "Pumpkin Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 pumpkin seeds.");

            Inventory_Remove(playerid, "Pumpkin Seeds", 50);

            Plant_Create(playerid, 4);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some pumpkin seeds into the ground.", ReturnName(playerid, 0, 1));
        } else if(!strcmp(params, "mushroom", true)) {
            if(Inventory_Count(playerid, "Mushroom Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 mushroom seeds.");

            Inventory_Remove(playerid, "Mushroom Seeds", 50);

            Plant_Create(playerid, 5);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some mushroom seeds into the ground.", ReturnName(playerid, 0, 1));
        } else if(!strcmp(params, "cucumber", true)) {
            if(Inventory_Count(playerid, "Cucumber Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 cucumber seeds.");

            Inventory_Remove(playerid, "Cucumber Seeds", 50);

            Plant_Create(playerid, 6);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some cucumber seeds into the ground.", ReturnName(playerid, 0, 1));
        } else if(!strcmp(params, "eggplant", true)) {
            if(Inventory_Count(playerid, "Egg Plant Seeds") < 50)
                return SendErrorMessage(playerid, "You need at least 50 Egg Plant seeds.");

            Inventory_Remove(playerid, "Egg Plant Seeds", 50);

            Plant_Create(playerid, 7);
            Inventory_Remove(playerid, "Farm Hoe", 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some Egg Plant seeds into the ground.", ReturnName(playerid, 0, 1));
        } else SendSyntaxMessage(playerid, "/plant [pumpkin/mushroom/cucumber/eggplant]");
    } else if (IsPlayerInDynamicArea(playerid, tempatganja[0])) {
        if (!PlayerData[playerid][pStory])
            return SendErrorMessage(playerid, "You must have accepted character story.");

        if(Plant_Nearest(playerid) != -1)
            return SendErrorMessage(playerid, "You can't plant seeds near other plants.");

        if(!strcmp(params, "weed", true))
        {
            if(Inventory_Count(playerid, "Marijuana Seeds") < 10)
                return SendErrorMessage(playerid, "You need at least 10 marijuana seeds.");

            Inventory_Remove(playerid, "Marijuana Seeds", 10);

            Plant_Create(playerid, 1);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some marijuana seeds into the ground.", ReturnName(playerid, 0, 1));
        }
        else if(!strcmp(params, "cocaine", true))
        {
            if(Inventory_Count(playerid, "Cocaine Seeds") < 10)
                return SendErrorMessage(playerid, "You need at least 10 cocaine seeds.");

            Inventory_Remove(playerid, "Cocaine Seeds", 10);

            Plant_Create(playerid, 2);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some cocaine seeds into the ground.", ReturnName(playerid, 0, 1));
        }
        else if(!strcmp(params, "heroin", true))
        {
            if(Inventory_Count(playerid, "Heroin Opium Seeds") < 10)
                return SendErrorMessage(playerid, "You need at least 10 heroin opium seeds.");

            Inventory_Remove(playerid, "Heroin Opium Seeds", 10);

            Plant_Create(playerid, 3);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s plants some heroin opium seeds into the ground.", ReturnName(playerid, 0, 1));
        }
    } else return SendErrorMessage(playerid, "You're not in any Public Farm, Cannabis Field or your Private Farm!");
    return 1;
}

CMD:harvest(playerid, params[])
{
    new id = Plant_Nearest(playerid);

    if(id == -1)
        return SendErrorMessage(playerid, "You must be near a plant.");

    new farmid = PlantData[id][plantFarm];

    if (farmid != -1 && (!Farm_IsOwner(playerid, farmid) && !Farm_IsEmployee(playerid, farmid)))
        return SendErrorMessage(playerid, "You don't have permission to harvesting this plant!");

    if(PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
        return SendErrorMessage(playerid, "This plant is not fully grown yet.");

    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
        return SendErrorMessage(playerid, "You must be crouched to harvest a plant.");

    if(PlayerData[playerid][pHarvesting])
        return SendErrorMessage(playerid, "You are already harvesting a plant.");

    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Harvesting plant...", 3100, 3);
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s begins to harvest the plant.", ReturnName(playerid, 0, 1));

    PlayerData[playerid][pHarvesting] = 1;
    SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
    return 1;
}

CMD:storeplant(playerid, params[]) {
    if (GetPlayerJob(playerid, 0) != JOB_FARMER && GetPlayerJob(playerid, 1) != JOB_FARMER)
        return SendErrorMessage(playerid, "You are not a Farmer");

    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), carid = -1;

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You're not near any vehicle!");

    if ((carid = Vehicle_GetID(vehicleid)) != -1 && Vehicle_IsOwner(playerid, carid)) {
        new plant[24];
        if (sscanf(params, "s[24]", plant))
            return SendSyntaxMessage(playerid, "/storeplant [pumpkin/mushroom/cucumber/eggplant]");

        if(GetVehicleModel(VehicleData[carid][cVehicle]) != 543 && GetVehicleModel(VehicleData[carid][cVehicle]) != 554 && GetVehicleModel(VehicleData[carid][cVehicle]) != 422)
            return SendErrorMessage(playerid, "Ini bukan kendaraan pickup, seperti Bobcat, Sadler, atau Yosemite.");

        if (!strcmp(plant, "pumpkin", true)) {
            if (Inventory_Count(playerid, "Pumpkin") < 50)
                return SendErrorMessage(playerid, "You must have at least 50 grams of Pumpkin");

            if (GetVehiclePlantStorage(carid) >= 2000)
                return SendErrorMessage(playerid, "This vehicle has reached the maximum of plant storage, the maximum plant storage 2000 grams");

            StorePlantIntoVehicle(playerid, carid, "Pumpkin");
        } else if (!strcmp(plant, "mushroom", true)) {
            if (Inventory_Count(playerid, "Mushroom") < 50)
                return SendErrorMessage(playerid, "You must have at least 50 grams of Mushroom");
            
            if (GetVehiclePlantStorage(carid) >= 2000)
                return SendErrorMessage(playerid, "This vehicle has reached the maximum of plant storage, the maximum plant storage 2000 grams");

            StorePlantIntoVehicle(playerid, carid, "Mushroom");
        } else if (!strcmp(plant, "cucumber", true)) {
            if (Inventory_Count(playerid, "Cucumber") < 50)
                return SendErrorMessage(playerid, "You must have at least 50 grams of Cucumber");
            
            if (GetVehiclePlantStorage(carid) >= 2000)
                return SendErrorMessage(playerid, "This vehicle has reached the maximum of plant storage, the maximum plant storage 2000 grams");
            
            StorePlantIntoVehicle(playerid, carid, "Cucumber");
        } else if (!strcmp(plant, "eggplant", true)) {
            if (Inventory_Count(playerid, "Egg Plant") < 50)
                return SendErrorMessage(playerid, "You must have at least 50 grams of Egg Plant");

            if (GetVehiclePlantStorage(carid) >= 2000)
                return SendErrorMessage(playerid, "This vehicle has reached the maximum of plant storage, the maximum plant storage 2000 grams");

            StorePlantIntoVehicle(playerid, carid, "Egg Plant");
        } else return SendSyntaxMessage(playerid, "/storeplant [pumpkin/mushroom/cucumber/eggplant]");
    } else SendErrorMessage(playerid, "This is not your vehicle");
    return 1;
}

CMD:createfaction(playerid, params[])
{
    static
        id = -1,
        type,
        name[32];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[32]", type, name))
    {
        SendSyntaxMessage(playerid, "/createfaction [type] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang");
        return 1;
    }
    if(type < 1 || type > 5)
        return SendErrorMessage(playerid, "Invalid type specified. Types range from 1 to 5.");

    id = Faction_Create(name, type);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for factions.");

    SendServerMessage(playerid, "You have successfully created faction ID: %d.", id);
    return 1;
}

CMD:destroyfaction(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyfaction [faction id]");

    if((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    Faction_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed faction ID: %d.", id);
    return 1;
}

CMD:editfaction(playerid, params[])
{
    static
        id,
        type[24],
        string[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editfaction [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" name, color, type, models, locker, ranks, maxranks, motd, vehspawnpoint");
        return 1;
    }
    if((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if(!strcmp(type, "name", true))
    {
        new name[32];

        if(sscanf(string, "s[32]", name))
            return SendSyntaxMessage(playerid, "/editfaction [id] [name] [new name]");

        format(FactionData[id][factionName], 32, name);

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "motd", true))
    {
        new name[225];

        if(sscanf(string, "s[225]", name))
            return SendSyntaxMessage(playerid, "/editfaction [id] [motd] [faction motd]");

        format(FactionData[id][factionMotd], 225, ColouredText(name));

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the motd of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
    }
    else if(!strcmp(type, "maxranks", true))
    {
        new ranks;

        if(sscanf(string, "d", ranks))
            return SendSyntaxMessage(playerid, "/editfaction [id] [maxranks] [maximum ranks]");

        if(ranks < 1 || ranks > 15)
            return SendErrorMessage(playerid, "The specified ranks can't be below 1 or above 15.");

        FactionData[id][factionRanks] = ranks;

        Faction_Save(id);
        //SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the maximum ranks of faction ID: %d to %d.", ReturnName(playerid, 0), id, ranks);
    }
    // else if (!strcmp(type, "vehspawnpoint", true)) {
    //     new Float:pos[3];
    //     GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

    //     FactionData[id][vehSpawnX] = pos[0];
    //     FactionData[id][vehSpawnY] = pos[1];
    //     FactionData[id][vehSpawnZ] = pos[2];
    //     FactionData[id][vehSpawnVW] = GetPlayerVirtualWorld(playerid);
    //     FactionData[id][vehSpawnInterior] = GetPlayerInterior(playerid);
    //     Faction_Refresh(id);

    //     Faction_Save(id);
    //     SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the vehicle spawn point of faction ID: %d.", ReturnName(playerid, 0), id);
    // }
    /*else if(!strcmp(type, "ranks", true))
    {
        Faction_ShowRanks(playerid, id);             2 cmd ranks & divname dipindah menjadi /frankname dan /fdivname
    }
    else if(!strcmp(type, "divname", true))
    {
        Faction_ShowDivision(playerid, id);
    } */
    else if(!strcmp(type, "color", true))
    {
        new color;

        if(sscanf(string, "h", color))
            return SendSyntaxMessage(playerid, "/editfaction [id] [color] [hex color]");

        FactionData[id][factionColor] = color;
        Faction_Update(id);

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the {%06x}color{FF6347} of faction ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
    }
    else if(!strcmp(type, "type", true))
    {
        new typeint;

        if(sscanf(string, "d", typeint)) return SendSyntaxMessage(playerid, "/editfaction [id] [type] [id (1. Police | 2. News | 3. Medic | 4. Gov | 5. Gang])");

        FactionData[id][factionType] = typeint;
        if(typeint == FACTION_GANG)
            FactionData[id][factionColor] = X11_LIGHTBLUE;

        Faction_Save(id);
        SendFactionAlert(X11_TOMATO_1, "AdmCmd: %s has adjusted the type of faction ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
    }
    else if(!strcmp(type, "models", true))
    {
        static
            skins[10];

        for (new i = 0; i < sizeof(skins); i ++)
            skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

        PlayerData[playerid][pFactionEdit] = id;
        ShowModelSelectionMenu(playerid, "Faction Skins", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
    }
    else if(!strcmp(type, "bank", true))
    {
        static
            bank;

        if(sscanf(string, "d", bank)) 
            return SendSyntaxMessage(playerid, "/editfaction id bank [money value] (current bank %s)", FactionData[id][factionMoney]);

        if(bank < 0)
            return SendErrorMessage(playerid, "Faction bank can't unser $0.");

        FactionData[id][factionMoney] = bank;
        SendFactionAlert(X11_TOMATO_1,"AdmCmd: %s has adjusted the faction bank ID: %d to %s", ReturnName2(playerid), id, FormatNumber(bank));
    }
    else if(!strcmp(type, "locker", true))
    {
        PlayerData[playerid][pFactionEdit] = id;
        Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Faction Locker", "Locker Weapons", "Select", "Cancel");
    }
    return 1;
}

CMD:colorrgb(playerid, params[])
{
    new r, g, b;

    if(sscanf(params, "ddd", r, g, b))
        return SendSyntaxMessage(playerid, "/colorrgb [r] [g] [b]");

    SendClientMessage(playerid, RGBAToInt(r, g, b, 255), "Color");
    return 1;
}

CMD:color(playerid, params[])
{
    static
        color;

    if(sscanf(params, "h", color)) {
        SendSyntaxMessage(playerid, "/color [hex color]");
        SendClientMessage(playerid, X11_YELLOW_2, "[EXAMPLE]:"WHITE" 0xFFFFFFFF is white, 0xFF0000FF is red, etc.");
    }
    else {
        SendClientMessageEx(playerid, color, "This is a test message, testing color 0x%06xFF.", color >>> 8);
    }
    return 1;
}

CMD:database(playerid, params[])
{
    new
        userid,
        Cache:charges,
        str[400];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This faction can't access a database.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(!IsNearFactionLocker(playerid)) return SendErrorMessage(playerid, "Must be in near faction locker.");
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/database [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");

    charges = mysql_query(g_iHandle, sprintf("SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", ReturnName(userid)));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24];
        cache_get_value(i, "Suspect", suspect);
        cache_get_value(i, "Description", reason);
        cache_get_value(i, "Date", date);

        strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, suspect, date));
    }
    cache_delete(charges);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Database", ""WHITE"You have a valid database from:\n\n"YELLOW"Name: "WHITE"%s\n"YELLOW"Birdthdate: "WHITE"%s\n"YELLOW"Phone Number: "WHITE"%d\n"YELLOW"Origin: "WHITE"%s\n\n"YELLOW"Criminal Record: \n"WHITE"%s", "Close", "", ReturnName(userid, 0), PlayerData[userid][pBirthdate], PlayerData[userid][pPhone] ? (sprintf("%d",PlayerData[userid][pPhone])) : ("None"), PlayerData[userid][pOrigin], str);
    return 1;
}

CMD:odatabase(playerid, params[])
{
    static
        username[24];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This faction can't accese a database.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(!IsNearFactionLocker(playerid)) return SendErrorMessage(playerid, "Must be in near faction locker.");
    if(sscanf(params, "s[24", username)) return SendSyntaxMessage(playerid, "/odatabase [username]");

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s'", username), "OfflineDatabase", "ds", playerid, username);
    return 1;
}

Function:OfflineDatabase(playerid, username[])
{
    if(!cache_num_rows()) return SendErrorMessage(playerid, "You've entered invalid player name.");

    new 
        birthdate[24],
        origin[24],
        phone,
        str[400],
        Cache:charges;

    cache_get_value_int(0, "Phone", phone);
    cache_get_value(0, "Birthdate", birthdate);
    cache_get_value(0, "Origin", origin);

    charges = mysql_query(g_iHandle, sprintf("SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", username));

    if(!cache_num_rows())
        strcat(str, "None\n");

    for(new i=0; i<cache_num_rows(); i++) {
        new reason[128],date[64], suspect[24];
        cache_get_value(i, "Suspect", suspect);
        cache_get_value(i, "Description", reason);
        cache_get_value(i, "Date", date);

        strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, suspect, date));
    }
    cache_delete(charges);

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Offline Database", ""WHITE"You have a valid database from:\n\n"YELLOW"Name: "WHITE"%s\n"YELLOW"Birdthdate: "WHITE"%s\n"YELLOW"Phone Number: "WHITE"%d\n"YELLOW"Origin: "WHITE"%s\n\n"YELLOW"Criminal Record: \n"WHITE"%s", "Close", "", username, birthdate, phone, origin, str);
    return 1;
}

CMD:getvehid(playerid, params[]) {
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    new id;
    if (sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/getvehid [dynamic vehicle id]");

    if (id < 0 || id > MAX_DYNAMIC_VEHICLES)
        return SendErrorMessage(playerid, "Invalid dynamic vehicle id");

    if (Iter_Contains(DynamicVehicles, id)) {
        SendClientMessageEx(playerid, -1, "Vehicle id of %d is %d", id, VehicleData[id][cVehicle]);
    }
    return 1;
}

CMD:spawn(playerid) {
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || GetFactionType(playerid) == FACTION_GANG)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if (IsPlayerNearVehSpawnPoint(playerid) == -1)
        return SendErrorMessage(playerid, "You are not in range of your faction's vehicle spawn point.");

    new count, string[64 * 70], spawnid = IsPlayerNearVehSpawnPoint(playerid);
    strcat(string, "ID\tUnit\tStatus\n");
    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cFaction] == FactionData[factionid][factionID] && VehicleData[i][cStatic] == VehSpawnPoint[spawnid][sID]) {
        strcat(string, sprintf("%d\t%s\t%s\n", i, VehicleData[i][cPlate], (IsValidVehicle(VehicleData[i][cVehicle]) ? (RED"Spawned") : (GREEN"Available"))));
        ListedFacVehicle[playerid][count++] = i;
    }
    if (count) Dialog_Show(playerid, SpawnVehicle, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Spawn Point", string, "Spawn", "Cancel");
    else SendErrorMessage(playerid, "There are no vehicles on here.");
    return 1;
}

Dialog:SpawnVehicle(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = ListedFacVehicle[playerid][listitem];

        if (IsValidVehicle(VehicleData[id][cVehicle]))
            return SendErrorMessage(playerid, "This vehicle is already spawned.");
        
        VehicleData[id][cVehicle] = CreateVehicle(VehicleData[id][cModel], VehicleData[id][cPos][0], VehicleData[id][cPos][1], VehicleData[id][cPos][2], VehicleData[id][cPos][3], VehicleData[id][cColor1], VehicleData[id][cColor2], 1800, VehicleData[id][cSirine]);

        if(IsValidVehicle(VehicleData[id][cVehicle]))
        {
            SetVehicleNumberPlate(VehicleData[id][cVehicle], VehicleData[id][cPlate]);
            LinkVehicleToInterior(VehicleData[id][cVehicle], VehicleData[id][cInt]);
            SetVehicleVirtualWorld(VehicleData[id][cVehicle], VehicleData[id][cVw]);
            
            RepairVehicle(VehicleData[id][cVehicle]);
            SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cMaxHealth]);
            CoreVehicles[VehicleData[id][cVehicle]][vehFuel] = 100.0;

            if(VehicleData[id][cPaintjob] != -1) {
                ChangeVehiclePaintjob(VehicleData[id][cVehicle], VehicleData[id][cPaintjob]);
            }
            for (new l = 0; l < 14; l ++)
            {
                if(VehicleData[id][cMods][l] > 0) AddComponent(VehicleData[id][cVehicle], VehicleData[id][cMods][l]);
            }
            for (new i = 0; i < MAX_VEHICLE_OBJECT+5; i++) if(VehicleObjects[id][i][object_exists]) 
            {
                Vehicle_ObjectUpdate(id, i);
            }
            ResetVehicle(VehicleData[id][cVehicle]);
            SetPlayerWaypoint(playerid, sprintf("%s position", VehicleData[id][cPlate]), VehicleData[id][cPos][0], VehicleData[id][cPos][1], VehicleData[id][cPos][2]);
        }
        SendCustomMessage(playerid, "VEHICLESPAWN", "You've been spawned "CYAN"%s", VehicleData[id][cPlate]);
    }
    return 1;
}

CMD:despawn(playerid) {
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || GetFactionType(playerid) == FACTION_GANG)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if (IsPlayerNearVehSpawnPoint(playerid) == -1)
        return SendErrorMessage(playerid, "You are not in range of your faction's vehicle spawn point.");

    if (!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You're not in any vehicle.");

    new id = -1;
    if ((id = Vehicle_GetID(GetPlayerVehicleID(playerid))) != -1) {
        if (VehicleData[id][cFaction]) {
            new faction = GetFactionByID(VehicleData[id][cFaction]);

            if (FactionData[faction][factionType] != FACTION_GANG) {
                if (IsValidVehicle(VehicleData[id][cVehicle]))
                    DestroyVehicle(VehicleData[id][cVehicle]);

                VehicleData[id][cVehicle] = INVALID_VEHICLE_ID;
                SendCustomMessage(playerid, "VEHICLESPAWN", "You've been successfull despawned your current vehicle.");
            }
        }
    }
    return 1;
}

CMD:flocker(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(AccountData[playerid][pAdminDuty] > 0)
        return SendErrorMessage(playerid, "You're on admin duty.");

    if(factionid == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(!IsNearFactionLocker(playerid))
        return SendErrorMessage(playerid, "You are not in range of your faction's locker.");

    if(FactionData[factionid][factionType] != FACTION_GANG && FactionData[factionid][factionType] == FACTION_POLICE) Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Toggle Duty\nArmored Vest\nLocker Skins\nLocker Weapons\nFaction Bank\nRespawn Faction Vehicles", "Select", "Cancel");
    else if (FactionData[factionid][factionType] != FACTION_GANG && FactionData[factionid][factionType] != FACTION_POLICE) Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Toggle Duty\nLocker Skins\nLocker Weapons\nFaction Bank\nRespawn Faction Vehicles", "Select", "Cancel");
    else Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Locker Weapons\nFamily Bank\nRespawn Faction Vehicles", "Select", "Cancel");
    return 1;
}

CMD:setleader(playerid, params[])
{
    static
        userid,
        id;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, id))
        return SendSyntaxMessage(playerid, "/setleader [playerid/PartOfName] [faction id] (Use -1 to unset)");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if(id == -1)
    {
        ResetFaction(userid);

        SendServerMessage(playerid, "You have removed %s's faction leadership.", ReturnName(userid, 0));
        SendServerMessage(userid, "%s has removed your faction leadership.", ReturnName(playerid, 0));
    }
    else
    {
        SetFaction(userid, id);
        PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];

        SendServerMessage(playerid, "You have made %s the leader of \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
        SendServerMessage(userid, "%s has made you the leader of \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
    }
    return 1;
}

CMD:asetfaction(playerid, params[])
{
    static
        userid,
        id;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, id))
        return SendSyntaxMessage(playerid, "/asetfaction [playerid/PartOfName] [faction id] (Use -1 to unset)");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
        return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if(id == -1)
    {
        ResetFaction(userid);

        SendServerMessage(playerid, "You have removed %s from their faction.", ReturnName(userid, 0));
        SendServerMessage(userid, "%s has removed you from your faction.", ReturnName(playerid, 0));
    }
    else
    {
        SetFaction(userid, id);

        if(!PlayerData[userid][pFactionRank])
            PlayerData[userid][pFactionRank] = 1,

        SendServerMessage(playerid, "You have set %s's faction to \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
        SendServerMessage(userid, "%s has set your faction to \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
    }
    return 1;
}

CMD:asetrank(playerid, params[])
{
    static
        userid,
        rank,
        factionid;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "ud", userid, rank))
        return SendSyntaxMessage(playerid, "/asetrank [playerid/PartOfName] [rank id]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if((factionid = PlayerData[userid][pFaction]) == -1)
        return SendErrorMessage(playerid, "That player is not a member of any faction.");

    if(rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Invalid rank. Ranks for this faction range from 1 to %d.", FactionData[factionid][factionRanks]);

    PlayerData[userid][pFactionRank] = rank;

    SendServerMessage(playerid, "You have set %s's faction rank to %d.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s has set your faction rank to %d.", ReturnName(playerid, 0), rank);

    return 1;
}

CMD:customooc(playerid, params[])
{
    new alias[MAX_PLAYER_NAME];

    if (PlayerData[playerid][pVipTime] == 0)
        return SendErrorMessage(playerid, "Only donator can use this command!");

    if(sscanf(params, "s[24]", alias))
        return SendSyntaxMessage(playerid, "/customooc [ooc name \"(null)\" to disable]");

    format(PlayerData[playerid][pAlias], 24, "%s", ColouredText(alias));
    SendClientMessageEx(playerid, X11_LIGHTBLUE,"ALIAS: "WHITE"OOC name changed to %s", PlayerData[playerid][pAlias]);
    return 1;
}

CMD:offlineremove(playerid, params[])
{
    new 
        str[128];

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

    format(str, sizeof(str), "SELECT * FROM `characters` WHERE `Faction`='%d'", PlayerData[playerid][pFactionID]);
    mysql_tquery(g_iHandle, str, "OfflineRemove", "d", playerid);
    return 1;
}
// CMD:adminremove(playerid, params[])
// {
//     if (CheckAdmin(playerid, 6))
//         return PermissionError(playerid);


//     mysql_tquery(g_iHandle, "SELECT * FROM `accounts` WHERE `Admin` > 0", "adminRemove", "d", playerid);
//     return 1;
// }

// Function:adminRemove(playerid)
// {
//     new
//         name[MAX_PLAYER_NAME],
//         pAdmRankx,
//         str[64 * 30];

//     for(new id; id != cache_num_rows(); id++) 
//     {
//         cache_get_value(id, "Username", name);
//         cache_get_value_int(id, "Admin", pAdmRankx);

//         format(str, sizeof(str), "%s(%s) - %s", str, pAdmRankx, name);
//     }
//     if(strlen(str)) Dialog_Show(playerid, RemoveAdmin, DIALOG_STYLE_LIST, "Remove Offline Admin", str, "Remove", "Close");
//     else SendErrorMessage(playerid, "There are no one administrator.");
//     return 1;
// }

Function:OfflineRemove(playerid)
{
    new
        name[MAX_PLAYER_NAME],
        str[64 * 30];

    for(new id; id != cache_num_rows(); id++) 
    {
        cache_get_value(id, "Character", name);

        format(str, sizeof(str), "%s%s\n", str, name);
    }
    if(strlen(str)) Dialog_Show(playerid, RemoveMember, DIALOG_STYLE_LIST, "Remove Offline Member", str, "Remove", "Close");
    else SendErrorMessage(playerid, "There are no one member for this faction/family.");
    return 1;
}

CMD:f(playerid, params[]) {
    new factionid = PlayerData[playerid][pFaction];

    if (factionid == -1 || GetFactionType(playerid) != FACTION_GANG)
        return SendErrorMessage(playerid, "You are not a family member!");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/f [family chat]");

    if(PlayerData[playerid][pDisableFaction])
        return SendErrorMessage(playerid, "Faction chat disabled!");

    SendFactionMessage(factionid, X11_LIGHTBLUE, "* %s %s: "CYAN"%s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    return 1;
}

CMD:selldrugs(playerid, params[]) {
    new factionid = PlayerData[playerid][pFaction];

    if (factionid == -1 || GetFactionType(playerid) != FACTION_GANG)
        return SendErrorMessage(playerid, "You are not a family member!");
    
    if (!IsPlayerInRangeOfPoint(playerid,2.5,-2116.97, -2413.55, 31.23))
        return SendErrorMessage(playerid, "You're not in Sell Drugs point.");
    
    new type[24], amount, id;
    if (sscanf(params,"s[24]d",type,amount))
        return SendSyntaxMessage(playerid, "/selldrugs [type] [amount]"), SendClientMessage(playerid,X11_YELLOW_2,"[TYPES]: "WHITE"cocaine, marijuana, heroin, steroids");
    
    if (amount < 2)
        return SendErrorMessage(playerid,"Minimum sell is at least 2 grams of drugs");
    
    if (!strcmp(type,"cocaine",true)) {
        if (Inventory_Count(playerid,"Cocaine") < amount)
            return SendErrorMessage(playerid, "You don't have cocaine that much.");
        
        Inventory_Remove(playerid,"Cocaine",amount);
        id = Inventory_Add(playerid,"Dirty Money",1212,(amount*2));

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any inventory slots left.");
        
        SendCustomMessage(playerid,"DRUGFACTORY","You've been sold your %d gram(s) Cocaine for %d dirty money.",amount,(amount*2));
    } else if (!strcmp(type,"marijuana",true)) {
        if (Inventory_Count(playerid,"Marijuana") < amount)
            return SendErrorMessage(playerid, "You don't have marijuana that much.");
        
        Inventory_Remove(playerid,"Marijuana",amount);
        id = Inventory_Add(playerid,"Dirty Money",1212,(amount*2));

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any inventory slots left.");
        
        SendCustomMessage(playerid,"DRUGFACTORY","You've been sold your %d gram(s) Marijuana for %d dirty money.",amount,(amount*2));
    } else if (!strcmp(type,"heroin",true)) {
        if (Inventory_Count(playerid,"Heroin") < amount)
            return SendErrorMessage(playerid, "You don't have heroin that much.");
        
        Inventory_Remove(playerid,"Heroin",amount);
        id = Inventory_Add(playerid,"Dirty Money",1212,(amount*2));

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any inventory slots left.");
        
        SendCustomMessage(playerid,"DRUGFACTORY","You've been sold your %d gram(s) Heroin for %d dirty money.",amount,(amount*2));
    } else if (!strcmp(type,"steroids",true)) {
        if (Inventory_Count(playerid,"Steroids") < amount)
            return SendErrorMessage(playerid, "You don't have steroids that much.");
        
        Inventory_Remove(playerid,"Steroids",amount);
        id = Inventory_Add(playerid,"Dirty Money",1212,(amount*2));

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any inventory slots left.");
        
        SendCustomMessage(playerid,"DRUGFACTORY","You've been sold your %d gram(s) Steroids for %d dirty money.",amount,(amount*2));
    }
    return 1;
}

CMD:moneylaundry(playerid,params[]) {
    new factionid = PlayerData[playerid][pFaction];

    if (factionid == -1 || GetFactionType(playerid) != FACTION_GANG)
        return SendErrorMessage(playerid, "You are not a family member!");
    
    if (!IsPlayerInRangeOfPoint(playerid,2.5,-1956.0898,790.6878,55.7245))
        return SendErrorMessage(playerid, "You're not in Money Laundry point.");
    
    new amount;
    if (sscanf(params,"d",amount))
        return SendSyntaxMessage(playerid,"/moneylaundry [amount]");
    
    if (amount < 2)
        return SendErrorMessage(playerid,"Minimum to wash dirty money is at least 2 dirty money.");
    
    if (Inventory_Count(playerid,"Dirty Money") < amount)
        return SendErrorMessage(playerid, "You don't have dirty money that much.");
    
    if (GetPVarInt(playerid,"WashingMoney") > 0)
        return SendErrorMessage(playerid,"You're being washing your dirty money.");

    SetPVarInt(playerid,"WashingMoney",0);
    PlayerData[playerid][pWashMoney] = repeat washingMoney(playerid,amount);
    SendCustomMessage(playerid,"DRUGFACTORY","Please wait, you're being washing dirty money");
    SendCustomMessage(playerid,"DRUGFACTORY","Don't move from your position or you will failed to washing money.");
    return 1;
}

CMD:speedcammsg(playerid, params[]) {
    new factionid = PlayerData[playerid][pFaction];

    if (factionid == -1 || GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You are not a Police Officer!");

    PlayerData[playerid][pDisableSpeedCam] = PlayerData[playerid][pDisableSpeedCam] ? (0) : (1);
    SendCustomMessage(playerid, "SPEEDCAM", "You've %s speed camera message.", PlayerData[playerid][pDisableSpeedCam] ? ("disabled") : ("enabled"));
    return 1;
}

CMD:online(playerid, params[])
{
    new dialog[1024],
        factionid = PlayerData[playerid][pFaction];

    if(factionid == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    new rank[32];
    if (GetFactionType(playerid) != FACTION_GANG) {
        format(dialog, sizeof(dialog), "ID\tName\tRank\tUnit\tDuty Time minute(s)\n");
        foreach (new i : Player) if(PlayerData[i][pFaction] == factionid) {
            format(rank,sizeof(rank),"%s (%d)", Faction_GetRank(i), PlayerData[i][pFactionRank]);
            format(dialog, sizeof(dialog), "%s%d\t%s\t%s\t%s\t%d\n", dialog, i, NormalName(i), rank, GetPlayerCallsign(i), PlayerData[i][pDutyTime]);
        }
    } else {
        format(dialog, sizeof(dialog), "ID\tName\tRank\n");
        foreach (new i : Player) if(PlayerData[i][pFaction] == factionid) {
            format(rank,sizeof(rank),"%s (%d)", Faction_GetRank(i), PlayerData[i][pFactionRank]);
            format(dialog, sizeof(dialog), "%s%d\t%s\t%s\n", dialog, i, NormalName(i), rank);
        }
    }

    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS,"Online Members", dialog,"Close","");
    return 1;
}

CMD:setbadge(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must be a faction member.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This faction can't set a badge.");

    static
        userid,
        badge;

    if(sscanf(params, "ud", userid, badge)) return SendSyntaxMessage(playerid, "/setbadge [playerid] [badge number]");
    if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "This player is'nt in your faction.");

    new str[24];
    switch (GetFactionType(playerid)) {
        case FACTION_POLICE: format(str,sizeof(str),"Police %d",badge);
        case FACTION_MEDIC: format(str,sizeof(str),"Fire %d",badge);
        case FACTION_GOV: format(str,sizeof(str),"Gov %d",badge);
    }

    format(PlayerData[userid][pBadge], 24, "%s", str);
    SendCustomMessage(userid, "BADGE", "%s have set your badge to %s", ReturnName(playerid), PlayerData[userid][pBadge]);
    SendCustomMessage(playerid, "BADGE", "You have set badge for %s to %s", ReturnName(userid), PlayerData[userid][pBadge]);
    return 1;
}

CMD:setunit(playerid, params[]) {
    if (PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must be a faction member.");
    if (!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first");

    new unit[24];
    if (sscanf(params, "s[24]", unit)) return SendSyntaxMessage(playerid, "/setunit [callsign]");
    if (strlen(unit) > 24) return SendErrorMessage(playerid, "Callsign too long");
    
    format(PlayerData[playerid][pUnit], 24, "%s", unit);
    SendCustomMessage(playerid, "RADIO", "Callsign has been set to: "YELLOW"%s", unit);
    return 1;
}

CMD:showbadge(playerid, params[])
{
    static 
        userid;

    if(sscanf(params, "d", userid)) return SendSyntaxMessage(playerid, "/showbadge [playerid]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    SendClientMessageEx(userid, X11_WHITE,"Official badge of {%06x}%s", FactionData[PlayerData[playerid][pFaction]][factionColor] >>> 8, FactionData[PlayerData[playerid][pFaction]][factionName]);
    SendClientMessageEx(userid, COLOR_CLIENT, "Full Name: "GREEN"%s.", ReturnName(playerid, 0));
    SendClientMessageEx(userid, COLOR_CLIENT, "Badge Number: "GREEN"%s", PlayerData[playerid][pBadge]);
    SendClientMessageEx(userid, COLOR_CLIENT, "Rank: "GREEN"%s.", Faction_GetRank(playerid));
    cmd_me(playerid, sprintf("showing his badge to %s", ReturnName(userid, 0, 1)));
    return 1;
}

CMD:oocradio(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || GetFactionType(playerid) == FACTION_GANG)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(o)oc r(adio[message]");

    if(PlayerData[playerid][pDisableFaction])
        return SendErrorMessage(playerid, "Faction chat disabled!");

    SendFactionMessage(factionid, X11_LIGHTBLUE, "(( %s: %s ))", ReturnName(playerid, 0), params);
    Log_Write("logs/faction_chat.txt", "[%s] %s: %s", ReturnDate(), ReturnName(playerid, 0), params);
    return 1;
}

CMD:finvite(playerid, params[])
{
    new
        userid;

    if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must be a faction member.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/finvite [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");
    if (!PlayerData[userid][pStory]) return SendErrorMessage(playerid, "That player must have accepted character story to join your faction.");
    if(PlayerData[userid][pFaction] == PlayerData[playerid][pFaction]) return SendErrorMessage(playerid, "That player is already part of your faction.");
    if(PlayerData[userid][pFaction] != -1) return SendErrorMessage(playerid, "That player is already part of another faction.");
    if(PlayerData[userid][pScore] < 2) return SendErrorMessage(playerid, "That player isn't level 2.");

    PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendServerMessage(playerid, "You have requested %s to join \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s has offered you to join \"%s\" (type \"/approve faction\").", ReturnName(playerid, 0), Faction_GetName(playerid));

    return 1;
}

CMD:fmotd(playerid, params[])
{
    new
        motd[128];

    if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You must be a faction member.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
    if(sscanf(params, "s[128]", motd)) return SendSyntaxMessage(playerid, "/fmotd [faction motd]");

    format(FactionData[PlayerData[playerid][pFaction]][factionMotd], 128, ColouredText(motd));

    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "Faction Motd: "YELLOW"%s "WHITE"update motd this faction to %s.", ReturnName(playerid, 0), ColouredText(motd));
    return 1;
}

CMD:fremove(playerid, params[])
{
    new
        userid;

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/fremove [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
        return SendErrorMessage(playerid, "That player is not part of your faction.");

    SendServerMessage(playerid, "You have removed %s from \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s has removed you from the \"%s\" faction.", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

    return 1;
}

// CMD:fdivname(playerid, params[])
// {
//     if(PlayerData[playerid][pFaction] == -1)
//         return SendErrorMessage(playerid, "You must be a faction member.");

//     if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
//         return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

//     Faction_ShowDivision(playerid, PlayerData[playerid][pFaction]);
//     return 1;
// }

CMD:frankname(playerid, params[])
{
    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    new userid, rankname[24];
    if (sscanf(params, "us[24]", userid, rankname))
        return SendSyntaxMessage(playerid, "/frankname [playerid/name] [rank name]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
        return SendErrorMessage(playerid, "Invalid playerid or name");

    if (strlen(rankname) < 1 || strlen(rankname) > 24)
        return SendErrorMessage(playerid, "Rank name cannot go below 1 or above 24 characters.");

    format(PlayerData[userid][pFactionRankName], 24, "%s", rankname);
    SendCustomMessage(playerid, "FACTION", "You've been set "YELLOW"%s "WHITE"faction rank name to: "YELLOW"%s", ReturnName(userid), rankname);
    SendCustomMessage(userid, "FACTION", YELLOW"%s "WHITE"has been set your faction rank name to: "YELLOW"%s", ReturnName(playerid), rankname);
    return 1;
}

CMD:frank(playerid, params[])
{
    new
        userid,
        rankid;

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

    if(sscanf(params, "ud", userid, rankid))
        return SendSyntaxMessage(playerid, "/frank [playerid/PartOfName] [rank (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
        return SendErrorMessage(playerid, "That player is not part of your faction.");

    if(rankid < 1 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
        return SendErrorMessage(playerid, "Invalid rank specified. Ranks range from 1 to %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

    PlayerData[userid][pFactionRank] = rankid;

    SendServerMessage(playerid, "You have promoted %s to %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
    SendServerMessage(userid, "%s has promoted you to %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

    return 1;
}

/*CMD:spawnpoint(playerid, params[])
{
    new point;
    if(sscanf(params, "i", point)) return SendErrorMessage(playerid, "/spawnpoint [0-2] (0 = Airport, 1 = Faction, 2 = Last logged)");
    if(point == 0)
    {
        SendClientMessage(playerid, X11_WHITE, "You've changed your spawn point to airport.");
        PlayerData[playerid][pSpawnPoint] = 0;
        return 1;
    }
    if(point == 1)
    {
        if(PlayerData[playerid][pFactionID] == -1) return SendErrorMessage(playerid, "You're not apart of a faction.");

        SendClientMessage(playerid, X11_WHITE, "You've changed your spawn to faction.");
        PlayerData[playerid][pSpawnPoint] = 1;
        return 1;
    }
    if(point == 2)
    {
        SendClientMessage(playerid, X11_WHITE, "You've changed your spawn to your last logged off.");
        PlayerData[playerid][pSpawnPoint] = 2;
        return 1;
    }
    return 1;
}

CMD:fspawn(playerid, params[])
{
    new faction = PlayerData[playerid][pFactionID];

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction leader.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    FactionData[faction][SpawnX] = X;
    FactionData[faction][SpawnY] = Y;
    FactionData[faction][SpawnZ] = Z;
    FactionData[faction][SpawnInterior] = GetPlayerInterior(playerid);
    FactionData[faction][SpawnVW] = GetPlayerVirtualWorld(playerid);
    Faction_Save(faction);
    return 1;
}*/

CMD:rdutytime(playerid,params[]) {
    new
        userid;

    if(PlayerData[playerid][pFaction] == -1)
        return SendErrorMessage(playerid, "You must be a faction member.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/rdutytime [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");
    
    PlayerData[userid][pDutyTime] = 0;
    SendCustomMessage(playerid,"DUTYTIME","You've been reset "YELLOW"%s "WHITE"duty time",ReturnName(userid));
    SendCustomMessage(userid,"DUTYTIME",YELLOW"%s "WHITE"has reset your duty time",ReturnName(playerid));
    return 1;
}

CMD:mydutytime(playerid, params[]) {
    if(PlayerData[playerid][pFaction] == -1 || GetFactionType(playerid) == FACTION_GANG)
        return SendErrorMessage(playerid, "You must be a faction member.");

    SendCustomMessage(playerid, "DUTYIME", "Your duty time is: "YELLOW"%d minute(s)", PlayerData[playerid][pDutyTime]);
    return 1;
}

CMD:tazer(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid)) 
        return SendErrorMessage(playerid, "You can't use this command right now.");

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");
    
    if(!IsPlayerDuty(playerid))
        return SendErrorMessage(playerid, "You must on duty to use tazer.");

    if(!PlayerData[playerid][pTazer])
    {
        PlayerData[playerid][pTazer] = 1;

        ResetPlayerWeapons(playerid);
        GivePlayerWeapon(playerid, 23, 20000);
        SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a tazer from their holster.", ReturnName(playerid, 0, 1));
    }
    else
    {
        RefreshFactionWeapon(playerid);
        PlayerData[playerid][pTazer] = 0;
        SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 999);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s puts their tazer into their holster.", ReturnName(playerid, 0, 1));
    }
    return 1;
}

CMD:undercover(playerid) {
    if(GetFactionType(playerid) != FACTION_POLICE) 
        return SendErrorMessage(playerid, "You must be a police officer.");
    
    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");
    
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 11)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 11);
    
    PlayerData[playerid][pUndercover] = (PlayerData[playerid][pUndercover])?(0):(1);

    SetFactionColor(playerid);

    SendCustomMessage(playerid, "DUTY","You're %s undercover",(PlayerData[playerid][pUndercover])?("now"):("now no longer"));
    return 1;
}

CMD:cuff(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE) 
        return SendErrorMessage(playerid, "You must be a police officer.");

    new
        userid;

    if(sscanf(params, "u", userid)) 
        return SendSyntaxMessage(playerid, "/cuff [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID) 
        return SendErrorMessage(playerid, "That player is disconnected.");

    /*if(userid == playerid) 
        return SendErrorMessage(playerid, "You cannot handcuff yourself.");*///lagi test server, didisable

    if(!IsPlayerNearPlayer(playerid, userid, 5.0)) 
        return SendErrorMessage(playerid, "You must be near this player.");

    if(PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid)) 
        return SendErrorMessage(playerid, "The player must be idle or stunned.");
    
    if(GetPlayerState(userid) != PLAYER_STATE_ONFOOT) 
        return SendErrorMessage(playerid, "The player must be onfoot before you can cuff them.");
    
    if(PlayerData[userid][pCuffed]) 
        return SendErrorMessage(playerid, "The player is already cuffed.");

    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

    SendServerMessage(userid, "You've been "RED"cuffed "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s tightens a pair of handcuffs on %s's wrists.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:uncuff(playerid, params[])
{
    new
        userid;

    if(GetFactionType(playerid) != FACTION_POLICE && AccountData[playerid][pAdminDuty] != 1)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/uncuff [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot uncuff yourself.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is not cuffed at the moment.");

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

    SendServerMessage(userid, "You've been "GREEN"cuffed "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s loosens the pair of handcuffs on %s's wrists.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:destroypacket(playerid) {
    if(GetFactionType(playerid) != FACTION_POLICE) 
        return SendErrorMessage(playerid, "You must be a police officer.");
    
    if (IsValidDynamicObject(packetObject[selectedLocation])) {
        new Float:position[3];
        GetDynamicObjectPos(packetObject[selectedLocation], position[0], position[1], position[2]);

        if (!IsPlayerInRangeOfPoint(playerid, 3.0, position[0], position[1], position[2]))
            return SendErrorMessage(playerid, "You're not near any packet.");
        
        packetActive = 0;
        packetPlayerid[selectedLocation] = INVALID_PLAYER_ID;
        packetStatus[selectedLocation] = 0;
        foreach (new i : Player) if (GetPlayerJob(i, 0) == JOB_SMUGGLER || GetPlayerJob(i, 1) == JOB_SMUGGLER) {
            PlayerData[i][pSmugglerPick] = 0;
            PlayerData[i][pSmugglerFind] = 0;
            DeletePVar(i, "sedangSmuggler");
            DeletePVar(i, "sedangNganter");
        }
        SendCustomMessage(playerid,"PACKET","You've been destroyed this packet");
    } else SendErrorMessage(playerid, "There are no packet active");
    return 1;
}

CMD:undrag(playerid, params[])
{
    new
        userid = PlayerData[playerid][pOnDrag];

    if(userid != INVALID_PLAYER_ID)
    {
        StopDragging(userid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s releases %s from their grip.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        return 1;
    }
    SendErrorMessage(playerid, "You are not dragging any one else!");
    return 1;
}

CMD:drag(playerid, params[])
{
    new userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/drag [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is disconnected.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot drag yourself.");

    if(!IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "You must be near this player.");

    if(!PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned] && !PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "The player is not cuffed or stunned.");

    PlayerData[playerid][pOnDrag] = userid;

    PlayerData[userid][pDragged] = 1;
    PlayerData[userid][pDraggedBy] = playerid;
    PlayerData[userid][pDragTimer] = repeat DragUpdate(playerid, userid);
    
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s grabs %s and starts dragging them.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:detain(playerid, params[])
{
    new
        userid,
        vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "You must be a faction member to use this command.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/detain [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected.");
    if(userid == playerid) return SendErrorMessage(playerid, "You cannot detained yourself.");
    if(!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "You must be near this player.");
    if(!PlayerData[userid][pCuffed]) return SendErrorMessage(playerid, "The player is not cuffed at the moment.");
    if(vehicleid == INVALID_VEHICLE_ID) return SendErrorMessage(playerid, "You are not near any vehicle.");
    if(GetVehicleMaxSeats(vehicleid) < 2) return SendErrorMessage(playerid, "You can't detain that player in this vehicle.");

    if(IsPlayerInVehicle(userid, vehicleid))
    {
        TogglePlayerControllable(userid, 1);
        ClearAnimations(userid, 1);

        RemoveFromVehicle(userid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s opens the door and pulls %s out the vehicle.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    }
    else
    {
        new seatid = GetAvailableSeat(vehicleid, 2);

        if(seatid == -1)
            return SendErrorMessage(playerid, "There are no more seats remaining.");

        ClearAnimations(userid, 1);
        SendServerMessage(userid, "You've been "RED"detained "WHITE"by "YELLOW"%s.", ReturnName(playerid, 0, 1));

        StopDragging(userid);
        PutPlayerInVehicleEx(userid, vehicleid, seatid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s opens the door and places %s into the vehicle.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));

        TogglePlayerControllable(userid, 0);
        SetPlayerHealth(userid, PlayerData[userid][pMaxHealth]);
    }
    return 1;
}

CMD:createarrest(playerid, params[])
{
    static
        id = -1,
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for arrest points.");

    SendServerMessage(playerid, "You have successfully created arrest point ID: %d.", id);
    return 1;
}

CMD:destroyarrest(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyarrest [point id]");

    if((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
        return SendErrorMessage(playerid, "You have specified an invalid arrest point ID.");

    Arrest_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed arrest point ID: %d.", id);
    return 1;
}

CMD:trace(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    if(IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "You must be inside this vehicle.");

    Dialog_Show(playerid, Trace, DIALOG_STYLE_LIST, "Trace", "Vehicle number plate\nPhone Number", "Select", "Cancel");
    return 1;
}
CMD:charge(playerid, params[])
{
    SendErrorMessage(playerid, "Sedang dibetulin cmdnya sabar.");
    /*static
    userid,
    reason[128];

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(sscanf(params, "us[128]", userid, reason))
    return SendSyntaxMessage(playerid, "/charge [playerid/PartOfName] [reason]");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

    AddWarrant(PlayerData[playerid][pMDCPlayer], userid, reason);
    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has placed a charge on %s for \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), reason);
    //Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Please enter the ID of the player:", "Submit", "Back");
    
    -------------------------------HARUSNYA GA PAKE INI, KEBAWAH NYA GA PAKE!!!!!----------------------------------------------

    new targetid;
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
    if(sscanf(params, "u", targetid)) return SendSyntaxMessage(playerid, "/charge [playerid/PartOfName]");

    if(response)
    {
        if(sscanf(inputtext, "u", targetid))
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Please enter a valid user.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if(targetid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if(PlayerData[targetid][pWarrants] > 14)
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: The user already has 15 active warrants.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        PlayerData[playerid][pMDCPlayer] = targetid;
        Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
    }
    else cmd_mdc(playerid, "\1");*/
    return 1;
}
CMD:mdc(playerid, params[])
{
    new 
    vehicleid = GetPlayerVehicleID(playerid),
    id = -1;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    if (IsPlayerInAnyVehicle(playerid)) {
        if((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cFaction] != GetFactionSQLID(playerid))
            return SendErrorMessage(playerid, "You must be in the faction vehicle or inside SAPD HQ to use this command!");
        
        if(IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)))
            return SendErrorMessage(playerid, "You must be inside this vehicle.");

        Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Active Warrants\nPlace Charges\nView Charges\nPersonal Identification\nOffline Personal Identification", "Select", "Cancel");
    } else {
        if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1400.07, -11.81, 1000.99))
            return SendErrorMessage(playerid, "You must be in the faction vehicle or inside SAPD HQ to use this command!");
        
        Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Active Warrants\nPlace Charges\nView Charges\nPersonal Identification\nOffline Personal Identification", "Select", "Cancel");
    }
    return 1;
}

CMD:seizeplant(playerid, params[])
{
    static
        plantid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if((plantid = Plant_Nearest(playerid)) == -1) return SendErrorMessage(playerid, "You are not standing near any drug plant.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has seized a %s plant weighing %d grams.", ReturnName(playerid, 0, 1), Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs]);
    Plant_Delete(plantid);
    return 1;
}

GetAllBodyPartStatus(playerid) {
    new status[128];
    for (new i = 3; i < 10; i ++) {
        format(status,sizeof(status),"%s%s",status,GetPlayerBodypartStatus(playerid, i));
    }
    return status;
}

CMD:giveup(playerid, params[])
{
    if(!PlayerData[playerid][pInjured]) return SendErrorMessage(playerid, "You are not injured at the moment.");
    if((gettime()-GetPVarInt(playerid, "GiveUptime")) < 180) return SendErrorMessage(playerid, "You must waiting 3 minutes for spawn to hospital");

    new status[128];
    for (new i = 3; i < 10; i ++) {
        format(status,sizeof(status),"%s%s",status,GetPlayerBodypartStatus(playerid, i));
    }

    if ((strfind(status,"Normal",true) != -1 || strfind(status,"Bruise",true) != -1 || strfind(status,"Graze",true) != -1 || strfind(status,"Broken Bone",true) != -1) && (strfind(status,"Vital wound",true) == -1 && strfind(status,"Flesh wound",true) == -1 && strfind(status,"Bleeding",true) == -1)) {
        if(IsPlayerDuty(playerid)) RefreshFactionWeapon(playerid);
        else RefreshWeapon(playerid);

        ClearAnimations(playerid, 1);

        PlayerData[playerid][pInjured] = 0;
        SetPVarInt(playerid, "GiveUptime", 0);
        SetPlayerHealth(playerid, 10.0);

        SetPlayerArmedWeapon(playerid, 0);
        TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
        SendServerMessage(playerid, "You have given up from your death.");
    }
    else SetPlayerHealth(playerid, 0.0), SendServerMessage(playerid, "You have given up and accepted your death.");
    return 1;
}

// static CheckCondition(playerid, userid)
// {
//     new string[750];
//     if(PlayerData[userid][pCough] >= 5)
//     {
//         new rate[7];

//         switch((PlayerData[userid][pCough]/5))
//         {
//             case 1: rate="LOW";
//             case 2: rate="MEDIUM";
//             case 3: rate="HIGH";
//         }

//         strcat(string, ""COL_LIGHTBLUE"============== "GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
//         strcat(string, ""WHITE"Condition: "YELLOW"SICK (Cough)\n");
//         strcat(string, ""WHITE"How to cure: "YELLOW"eat Neladryl Acetate\n");
//         strcat(string, sprintf(""WHITE"Sickness rate: "YELLOW"%s\n\n", rate));
//     }
//     if(PlayerData[userid][pMigrainRate])
//     {
//         new rate[7];

//         switch((PlayerData[userid][pMigrainRate]))
//         {
//             case 1: rate="LOW";
//             case 2: rate="MEDIUM";
//             case 3: rate="HIGH";
//         }

//         strcat(string, ""COL_LIGHTBLUE"============== "GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
//         strcat(string, ""WHITE"Condition: "YELLOW"SICK (Migrain)\n");
//         strcat(string, ""WHITE"How to cure: "YELLOW"eat Kratotamax Plus 1.0\n");
//         strcat(string, sprintf(""WHITE"Sickness rate: "YELLOW"%s\n\n", rate));
//     }
//     if(PlayerData[userid][pFever])
//     {
//         new rate[7];

//         switch((PlayerData[userid][pFever]))
//         {
//             case 1: rate="LOW";
//             case 2: rate="MEDIUM";
//             case 3: rate="HIGH";
//         }

//         strcat(string, ""COL_LIGHTBLUE"============== "GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
//         strcat(string, ""WHITE"Condition: "YELLOW"SICK (High fever)\n");
//         strcat(string, ""WHITE"How to cure: "YELLOW"eat Lazattavitus Extra\n");
//         strcat(string, sprintf(""WHITE"Sickness rate: "YELLOW"%s\n", rate));
//     }
//     if(PlayerData[userid][pInjured] == 1)
//     {

//         strcat(string, ""COL_LIGHTBLUE"============== "GREEN"HEALTH STATUS "COL_LIGHTBLUE"==============\n");
//         strcat(string, ""WHITE"Condition: "YELLOW"Injured\n");
//         strcat(string, ""WHITE"How to cure: "YELLOW"Emergency Medical Services Staff\n");
//     }

//     if(isnull(string)) return SendServerMessage(playerid, "That player healthy!");

//     SendServerMessage(userid, ""YELLOW"%s "WHITE"showing your condition.", ReturnName(playerid, 0));
//     SendServerMessage(playerid, "You're now showing "YELLOW"%s "WHITE"condition.", ReturnName(userid, 0));
//     Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, sprintf("%s condition", ReturnName(userid, 0)), string, "Close", "");
//     return 1;
// }
//=========================================> Sick system <==========================================
CMD:inspect(playerid, params[])
{
    new
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You're not medic.");
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/inspect [playerid/PartOfName]");

    PlayerData[userid][pAcceptInspect] = playerid;
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 4.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    // CheckCondition(playerid, userid);
    Health_Show(playerid, userid);
    return 1;
}

CMD:myhealth(playerid) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You're not logged in!");

    Health_Show(playerid, playerid);
    return 1;
}

CMD:ainspect(playerid, params[]) {
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new userid;
    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/ainspect [playerid/name]");
    
    if (userid == INVALID_PLAYER_ID || !IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "Invalid playerid or name!");
    
    Health_Show(playerid, userid);
    return 1;
}

CMD:examine(playerid, params[])
{
    new
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/examine [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 4.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    PlayerData[userid][pAcceptInspect] = playerid;
    SendServerMessage(userid, ""YELLOW"%s "WHITE"want to examine your condition, "GREEN"/approve examine "WHITE"to approve it.", ReturnName(playerid, 0));
    SendServerMessage(playerid, "You're trying to check "YELLOW"%s "WHITE"condition.", ReturnName(userid, 0));
    return 1;
}

CMD:givepills(playerid, params[])
{
    static
        userid,
        id,
        amount;

    if(sscanf(params, "uii", userid, id, amount)) 
    {
        SendSyntaxMessage(playerid, "/givepills [playerid/PartOfName] [id] [amount]");
        SendCustomMessage(playerid, "ID", "1, Neladryl Acetate. | 2, Kratotamax Plus 1.0. | 3. Lazattavitus Extra.");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 4.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "That player is you!.");
    if(amount < 1 || amount > 10) return SendErrorMessage(playerid, "You can give only between 1-10");

    if(id == 1)
    {
        if(PlayerData[playerid][pCoughPills] < amount) return SendErrorMessage(playerid, "You don't have enough pills.");

        PlayerData[playerid][pCoughPills] -= amount;
        PlayerData[userid][pCoughPills] += amount;
        cmd_me(playerid, sprintf("take's out %d Neladryl Acetate and give it to %s", amount, ReturnName(userid, 0)));
    }
    else if(id == 2)
    {
        if(PlayerData[playerid][pMigrainPills] < amount) return SendErrorMessage(playerid, "You don't have enough pills.");   
        PlayerData[playerid][pMigrainPills] -= amount;
        PlayerData[userid][pMigrainPills] += amount;
        cmd_me(playerid, sprintf("take's out %d Kratotamax Plus 1.0 and give it to %s", amount, ReturnName(userid, 0)));
    }
    else if(id == 3)
    {
        if(PlayerData[playerid][pFiverPills] < amount) return SendErrorMessage(playerid, "You don't have enough pills.");
        PlayerData[playerid][pFiverPills] -= amount;
        PlayerData[userid][pFiverPills] += amount;
        cmd_me(playerid, sprintf("take's out %d Lazattavitus Extra and give it to %s", amount, ReturnName(userid, 0)));
    }
    else SendCustomMessage(playerid, "ID", "1, Neladryl Acetate. | 2, Kratotamax Plus 1.0. | 3. Lazattavitus Extra.");
    return 1;
}

CMD:usepills(playerid, params[])
{
    if(PlayerData[playerid][pUsePills]) return SendErrorMessage(playerid, "Tidak dapat mengkonsumsi pill sekarang, tunggu hingga %d detik lagi.", PlayerData[playerid][pUsePills]);

    Dialog_Show(playerid, UsePills, DIALOG_STYLE_TABLIST_HEADERS, "Medicine", "Obat\tJumlah\nNeladryl Acetate\t%d\nKratotamax Plus 1.0\t%d\nLazattavitus Extra\t%d", "Take", "Close", PlayerData[playerid][pCoughPills], PlayerData[playerid][pMigrainPills], PlayerData[playerid][pFiverPills]);
    return 1;
}

CMD:takepills(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_MEDIC) 
        return SendErrorMessage(playerid, "You can't take pills from this locker.");

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1265.45, -418.82, 14.17))
        return SendErrorMessage(playerid, "Go to pharmacy to get the pills.");

    Dialog_Show(playerid, TakePills, DIALOG_STYLE_TABLIST_HEADERS, "Medicine", "Obat\tPenyakit\nNeladryl Acetate\tCough\nKratotamax Plus 1.0\tMigrain\nLazattavitus Extra\tHigh Fever", "Take", "Close");
    //\nAmphytum Nanolacetate\tAddiction
    return 1;
}

CMD:cure(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/cure [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot cure yourself.");

    if(!PlayerData[userid][pInjured]) {
        SetPlayerHealth(userid, PlayerData[userid][pMaxHealth]);
    } else {
        PlayerData[userid][pInjured] = 0;
        SetPlayerHealth(userid, PlayerData[userid][pMaxHealth]);
        ClearAnimations(userid, 1);
        TextDrawHideForPlayer(userid, gServerTextdraws[0]);
    }

    SendCustomMessage(playerid, "CURE", "You have healed %s's character.", ReturnName(userid, 0));
    SendCustomMessage(userid, "CURE", "%s has healed your character.", ReturnName(playerid, 0));

    Log_Write("logs/cure_log.txt", "[%s] %s (%s) revive by using (/cure) %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:loadinjured(playerid, params[])
{
    static
        userid,
        seatid,
        vehicleid;

    vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/loadinjured [playerid/PartOfName]");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You're not nearest any vehicle.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't load yourself into an ambulance.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "That player is not injured.");

    if(vehicleid != INVALID_VEHICLE_ID && GetVehicleModel(vehicleid) == 416)
    {
        seatid = GetAvailableSeat(vehicleid, 2);

        if(seatid == -1)
            return SendErrorMessage(playerid, "There is no room for the patient.");

        ClearAnimations(userid, 1);
        PlayerData[userid][pInjured] = 2;

        PutPlayerInVehicleEx(userid, vehicleid, seatid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s opens up the ambulance and loads %s on the stretcher.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));

        TogglePlayerControllable(userid, 0);
        SetPlayerHealth(userid, PlayerData[userid][pMaxHealth]);
        TextDrawSetString(gServerTextdraws[0], "You're injured ~r~now you're on ambulance.");
        return 1;
    }
    SendErrorMessage(playerid, "You must be near an ambulance.");
    return 1;
}

CMD:dropinjured(playerid, params[])
{
    new
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/dropinjured [playerid/PartOfName]");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You're are not on duty.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "That player is disconnected or you are not inside of the ambulance vehicle!");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't deliver yourself to the hospital.");

    if(!PlayerData[userid][pInjured])
        return SendErrorMessage(playerid, "That player is not injured.");

    for (new i = 0; i < sizeof(arrHospitalDeliver); i ++) if(IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
    {
        SetHospitalSpawn(userid);
        TextDrawHideForPlayer(userid, gServerTextdraws[0]);
        SendServerMessage(playerid, "You have delivered %s to the hospital.", ReturnName(userid, 0));
        SendServerMessage(userid, "Kamu telah dimasukkan dalam masa penyembuhan.");
        return 1;
    }
    SendErrorMessage(playerid, "You must be near a hospital deliver location.");
    return 1;
}

CMD:dropgun(playerid, params[]) {
    if (PlayerData[playerid][pScore] < 3 && !PlayerData[playerid][pStory])
        return SendErrorMessage(playerid, "You're not allowed to use this command!");

    if(PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "Tidak bisa menggunakan perintah ini ketika injured.");

    new
        weaponid = 0
    ;

    if((weaponid = GetWeapon(playerid)) == 0) 
        return SendErrorMessage(playerid, "You aren't holding any weapon.");
    
    if(PlayerHasTazer(playerid)) 
        return SendErrorMessage(playerid, "You can't drop a tazer.");
        
    new ammo = ReturnWeaponAmmo(playerid, weaponid), durability = ReturnWeaponDurability(playerid, weaponid);

    DropPlayerWeapon(playerid, weaponid, ammo, durability);
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s dropped a %s to the ground.", ReturnName(playerid, 0, 1), ReturnWeaponName(weaponid));
    return 1;
}

CMD:m(playerid, params[])
{
    static
        inisial[5];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You can't use the megaphone.");
    
    if(PlayerData[playerid][pOnDuty] != 1)
        return SendErrorMessage(playerid, "You are not on duty!");

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You can't make this action if not in any vehicle.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/(m)egaphone [message]");

    switch(FactionData[PlayerData[playerid][pFaction]][factionType])
    {
        case FACTION_POLICE: inisial="PD";
        case FACTION_MEDIC: inisial="MD";
        case FACTION_GOV: inisial="GOV";
    }

    if(strlen(params) > 64) {
        SendNearbyMessage(playerid, 25.0, X11_YELLOW_2, "(%s Megaphone) %s says: %.64s", inisial, ReturnName(playerid, 0, 1), params);
        SendNearbyMessage(playerid, 25.0, X11_YELLOW_2, "...%s", params[64]);
    }
    else {
        SendNearbyMessage(playerid, 25.0, X11_YELLOW_2, "(%s Megaphone) %s says: %s", inisial, ReturnName(playerid, 0, 1), params);
    }
    return 1;
}


CMD:bandage(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
        return SendErrorMessage(playerid, "You must be part of a medical faction.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/bandage [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't use this command for yourself.");

    if(PlayerData[userid][pFirstAid])
        return SendErrorMessage(playerid, "That player is already being bandaged.");

    if(ReturnHealth(userid) > PlayerData[playerid][pMaxHealth]-1.0)
        return SendErrorMessage(playerid, "That player doesn't need to be bandaged.");

    PlayerData[userid][pFirstAid] = true;
    PlayerData[userid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", userid);

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s opens a first aid kit and uses a bandage on %s.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:broadcast(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    // if(!IsNewsVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 5, 1569.23, 49.71, 1001.07))
    //     return SendErrorMessage(playerid, "You must be inside a news van or chopper or in sanews studio.");

    if(!PlayerData[playerid][pBroadcast])
    {
        PlayerData[playerid][pBroadcast] = true;

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has started a news broadcast.", ReturnName(playerid, 0, 1));
        SendServerMessage(playerid, "You have started a news broadcast (use \"/bc [broadcast text]\" to broadcast).");
    }
    else
    {
        PlayerData[playerid][pBroadcast] = false;

        foreach (new i : Player) if(PlayerData[i][pNewsGuest] == playerid) {
            PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
        }
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has stopped a news broadcast.", ReturnName(playerid, 0, 1));
        SendServerMessage(playerid, "You have stopped the news broadcast.");
    }
    return 1;
}

CMD:ad(playerid, params[])
{
    static
        text[128];

    if (PlayerData[playerid][pVipTime] == 0 && PlayerData[playerid][pVip] != 4) {
        if(PlayerData[playerid][pScore] < 2)
            return SendErrorMessage(playerid, "You must level 2 to create advertise.");
            
        if(!IsPlayerInRangeOfPoint(playerid, 3, 1576.69, 78.28, 1001.07))
            return SendErrorMessage(playerid, "You must in range of Advertisement Place.");
            
        if(!Inventory_HasItem(playerid, "Cellphone"))
            return SendErrorMessage(playerid, "You don't have Cellphone.");

        if(PlayerData[playerid][pPhone] == 0)
            return SendErrorMessage(playerid, "Your phone number is 0.");

        if(PlayerData[playerid][pPlaceAd])
            return SendErrorMessage(playerid, "You must wait for %d minute(s)", (PlayerData[playerid][pPlaceAd]/60));

        if(GetMoney(playerid) < 25)
            return SendErrorMessage(playerid, "Sorry, you have insufficient funds to advertise right now ($25).");
        
        if(sscanf(params,"s[128]",text)) {
            SendSyntaxMessage(playerid, "/ad [advertisement]");
            return 1;
        }

        if (strlen(text) > 128)
            return SendErrorMessage(playerid, "Max characters length is 128 chars");

        strpack(PlayerData[playerid][pAdvertise], text, 128 char);
        SendCustomMessage(playerid, "TYPES", "1 = Automotive, 2 = Property, 3 = Event, 4 = Service, 5 = Job Search");
        
        Dialog_Show(playerid, AdsType, DIALOG_STYLE_INPUT, "Advertisement Type", "Please input the type of your advertisement: "GREEN"(input below)", "Input", "Close");
    } else {
        if(PlayerData[playerid][pScore] < 2)
            return SendErrorMessage(playerid, "You must level 2 to create advertise.");
            
        if(!Inventory_HasItem(playerid, "Cellphone"))
            return SendErrorMessage(playerid, "You don't have Cellphone.");

        if(PlayerData[playerid][pPhone] == 0)
            return SendErrorMessage(playerid, "Your phone number is 0.");

        if(PlayerData[playerid][pPlaceAd])
            return SendErrorMessage(playerid, "You must wait for %d minute(s)", (PlayerData[playerid][pPlaceAd]/60));

        if(GetMoney(playerid) < 25)
            return SendErrorMessage(playerid, "Sorry, you have insufficient funds to advertise right now ($25).");
        
        if(sscanf(params,"s[128]",text)) {
            SendSyntaxMessage(playerid, "/ad [advertisement]");
            return 1;
        }

        if (strlen(text) > 128)
            return SendErrorMessage(playerid, "Max characters length is 128 chars");
        
        strpack(PlayerData[playerid][pAdvertise], text, 128 char);
        SendCustomMessage(playerid, "TYPES", "1 = Automotive, 2 = Property, 3 = Event, 4 = Service, 5 = Job Search");
        
        Dialog_Show(playerid, AdsType, DIALOG_STYLE_INPUT, "Advertisement Type", "Please input the type of your advertisement: "GREEN"(input below)", "Input", "Close");
    }
    return 1;
}

Dialog:Dialog_Advertisements(playerid, response, listitem, inputtext[]) {
    if (response) {
        new ads[150 * 10], count = 0;
        strcat(ads, "Contact Number\tAdvertisement\n");
        for (new i = 0; i < MAX_ADVERTISEMENTS; i ++) if (AdsQueue[i][adsExists] && AdsQueue[i][adsType] == (listitem + 1)) {
            if (strlen(AdsQueue[i][adsContent]) > 64) {
                strcat(ads, sprintf("%d\t%.64s...\n", AdsQueue[i][adsContact], AdsQueue[i][adsContent]));
            } else strcat(ads, sprintf("%d\t%s\n", AdsQueue[i][adsContact], AdsQueue[i][adsContent]));
            ListedAds[playerid][count++] = i;
        }
        if (!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, inputtext, "There are no advertisement on this type", "Contact", "Back");
        else Dialog_Show(playerid, SelectAds, DIALOG_STYLE_TABLIST_HEADERS, inputtext, ads, "Contact", "Back");
    }
    return 1;
}

Dialog:SelectAds(playerid, response, listitem, inputtext[]) {
    if (!response) ShowAdvertisements(playerid);
    else {
        new index = ListedAds[playerid][listitem],
            targetid = GetNumberOwner(AdsQueue[index][adsContact]);

        if (targetid == INVALID_PLAYER_ID)
            return SendErrorMessage(playerid, "The specified phone number is not in service.");

        if(targetid == playerid)
            return SendErrorMessage(playerid, "You can't text yourself!");

        if(PlayerData[targetid][pPhoneOff])
            return SendErrorMessage(playerid, "The recipient has their cellphone powered off.");

        SetPVarInt(playerid, "replyTextTo", targetid);
        Dialog_Show(playerid, ReplyMessage, DIALOG_STYLE_INPUT, "Send Message", ""YELLOW"Ad: {00AA00}%s\n"YELLOW"Contact Number: [ {00AA00}%d "YELLOW"] Type: [ {00AA00}%s "YELLOW"]", "Send", "Cancel", AdsQueue[index][adsContent], AdsQueue[index][adsContact], GetAdvertiseType(AdsQueue[index][adsType]));
    }
    return 1;
}

ShowAdvertisements(playerid) {
    Dialog_Show(playerid, Dialog_Advertisements, DIALOG_STYLE_LIST, "Advertisements", "Automotive\nProperty\nEvent\nServices\nJob Search", "Select", "Cancel");
    return 1;
}

Advertisement_Remove(playerid) {
    for (new i = 0; i < MAX_ADVERTISEMENTS; i ++) if (AdsQueue[i][adsExists] && AdsQueue[i][adsUsed] == 1 && AdsQueue[i][adsContact] == PlayerData[playerid][pPhone]) {
        AdsQueue[i][adsExists] = false;
        AdsQueue[i][adsContact] = 0;
        AdsQueue[i][adsContent] = EOS;
        AdsQueue[i][adsType] = 0;
        AdsQueue[i][adsUsed] = 0;
    }
    return 1;
}

Advertisement_Create(playerid, number, type, content[]) {
    new index = Advertisement_GetFreeID();

    if (index == -1)
        return SendErrorMessage(playerid, "Advertisement is full!");

    AdsQueue[index][adsExists] = true;
    AdsQueue[index][adsContact] = number;
    AdsQueue[index][adsType] = type;
    strunpack(AdsQueue[index][adsContent], content);
    AdsQueue[index][adsUsed] = 0;

    PlayerData[playerid][pPlaceAd] = 600;
    GiveMoney(playerid, -25);
    for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_NEWS) {
        FactionData[i][factionMoney] += 25;
    }
    SendClientMessage(playerid, X11_LIGHTBLUE, "ADVERTISEMENT:"WHITE" Your advertisement will be published shortly.");
    return 1;
}

Advertisement_GetFreeID() {
    for (new i = 0; i < MAX_ADVERTISEMENTS; i ++) if (!AdsQueue[i][adsExists]) {
        return i;
    }
    return -1;
}

CMD:ads(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You are not logged in");

    ShowAdvertisements(playerid);
    return 1;
}

CMD:bc(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/bc [broadcast text]");

    // if(!IsNewsVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 5, 1569.23, 49.71, 1001.07))
    //     return SendErrorMessage(playerid, "You must be inside a news van or chopper or in sanews studio.");

    if(!PlayerData[playerid][pBroadcast])
        return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

    if(strlen(params) > 64) {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC]) {
            SendClientMessageEx(i, COLOR_ORANGE, "[NEWS] %s: %.64s", ReturnName(playerid, 0), params);
            SendClientMessageEx(i, COLOR_ORANGE, "...%s", params[64]);
        }
    }
    else {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC]) {
            SendClientMessageEx(i, COLOR_ORANGE, "[NEWS] %s: %s", ReturnName(playerid, 0), params);
        }
    }
    return 1;
}

CMD:live(playerid, params[])
{
    static
        livechat[128];
        
    if(sscanf(params, "s[128]", livechat))
        return SendSyntaxMessage(playerid, "/live [live chat]");

    if(PlayerData[playerid][pNewsGuest] == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You're now invite by sanews member to live!");

    // if(!IsNewsVehicle(GetPlayerVehicleID(playerid)) && !IsPlayerInRangeOfPoint(playerid, 5, 1569.23, 49.71, 1001.07))
    //     return SendErrorMessage(playerid, "You must be inside a news van or chopper or in sanews studio.");

    if(GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS)
    {
        foreach (new i : Player) if(!PlayerData[i][pDisableBC]) {
            SendClientMessageEx(i, COLOR_ORANGE, "[NEWS] %s: %s", ReturnName(playerid, 0), livechat);
        }
    }
    return 1;
}

CMD:inviteguest(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/inviteguest [playerid/PartOfName]");

    if(!PlayerData[playerid][pBroadcast])
        return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't add yourself as a guest.");

    if(PlayerData[userid][pNewsGuest] == playerid)
        return SendErrorMessage(playerid, "That player is already a guest of your broadcast.");

    if(PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "That player is already a guest of another broadcast.");

    PlayerData[userid][pNewsGuest] = playerid;

    SendServerMessage(playerid, "You have added %s as a broadcast guest.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s has added you as a broadcast guest ((/live to start broadcast)).", ReturnName(userid, 0));
    return 1;
}

CMD:removeguest(playerid, params[])
{
    static
        userid;

    if(GetFactionType(playerid) != FACTION_NEWS)
        return SendErrorMessage(playerid, "You must be part of a news faction.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/removeguest [playerid/PartOfName]");

    if(!PlayerData[playerid][pBroadcast])
        return SendErrorMessage(playerid, "You must be broadcasting to use this command.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't remove yourself as a guest.");

    if(PlayerData[userid][pNewsGuest] != playerid)
        return SendErrorMessage(playerid, "That player is not a guest of your broadcast.");

    PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

    SendServerMessage(playerid, "You have removed %s from your broadcast.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s has removed you from their broadcast.", ReturnName(userid, 0));
    return 1;
}

CMD:pay(playerid, params[])
{
    static
        userid,
        amount,
        targetid;

    if(PlayerData[playerid][pHour] < 2) return SendErrorMessage(playerid, "You must play 2 hours to use /pay");
    if(sscanf(params, "dd", userid, amount)) return SendSyntaxMessage(playerid, "/pay [playerid/mask] [amount]");

    if((targetid = GetMaskOwner(userid)) != INVALID_PLAYER_ID) {
        if(targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
        if(PlayerData[targetid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
        if(targetid == playerid) return SendErrorMessage(playerid, "You can't give yourself money.");
        if(amount < 1) return SendErrorMessage(playerid, "Please specify an amount above 1 dollar.");
        if(amount > GetMoney(playerid)) return SendErrorMessage(playerid, "You don't have that much money.");

        static
            string[72];

        GiveMoney(playerid, -amount);
        GiveMoney(targetid, amount);

        format(string, sizeof(string), "You have received ~g~%s~w~ from %s.", FormatNumber(amount), ReturnName(playerid, 0, 1));
        ShowPlayerFooter(targetid, string);
        format(string, sizeof(string), "You have given ~r~%s~w~ to %s.", FormatNumber(amount), ReturnName(targetid, 0, 1));
        ShowPlayerFooter(playerid, string);
        
        SendServerMessage(targetid, "Anda menerima "GREEN"%s "WHITE"dari "YELLOW"%s.", FormatNumber(amount), ReturnName(playerid,0,1));
        SendServerMessage(playerid, "Anda memberikan uang "GREEN"%s "WHITE"ke "YELLOW"%s.", FormatNumber(amount), ReturnName(targetid,0,1));

        ApplyAnimation(targetid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);

        Log_Write("logs/pay_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(targetid, 0), AccountData[targetid][pIP]);
        return 1;
    }

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't give yourself money.");
    if(amount < 1) return SendErrorMessage(playerid, "Please specify an amount above 1 dollar.");
    if(amount > GetMoney(playerid)) return SendErrorMessage(playerid, "You don't have that much money.");

    static
        string[72];

    GiveMoney(playerid, -amount);
    GiveMoney(userid, amount);

    format(string, sizeof(string), "You have received ~g~%s~w~ from %s.", FormatNumber(amount), ReturnName(playerid, 0, 1));
    ShowPlayerFooter(userid, string);
    format(string, sizeof(string), "You have given ~r~%s~w~ to %s.", FormatNumber(amount), ReturnName(userid, 0, 1));
    ShowPlayerFooter(playerid, string);
    
    SendServerMessage(userid, "Anda menerima "GREEN"%s "WHITE"dari "YELLOW"%s.", FormatNumber(amount), ReturnName(playerid,0,1));
    SendServerMessage(playerid, "Anda memberikan uang "GREEN"%s "WHITE"ke "YELLOW"%s.", FormatNumber(amount), ReturnName(userid,0,1));

    ApplyAnimation(userid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
    ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
    Log_Write("logs/pay_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:factions(playerid, params[])
{
    new string[1040], type[32];
    strcat(string, "ID\tName\tType\tOnline/Duty\n");
    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionExists]) {
        switch(FactionData[i][factionType])
        {
            case FACTION_POLICE: type="POLICE";
            case FACTION_MEDIC: type="FIRE";
            case FACTION_NEWS: type="NEWS";
            case FACTION_GOV: type="GOVERMENT";
            case FACTION_GANG: type="FAMILY";
        }
        format(string, sizeof(string), "%s"WHITE"%d\t{%06x}%s\t"WHITE"%s\t%d/%d\n", string, i, FactionData[i][factionColor] >>> 8, FactionData[i][factionName], type,FactionMember_GetCount(i),FactionMember_GetCount(i, 1));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Factions List", string, "Close", "");
    return 1;
}
CMD:dept(playerid, params[])
{
    static
        inisial[24];

    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You must be a civil service worker.");

    if (!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/dept [department radio]");

    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV) {
        switch(FactionData[PlayerData[playerid][pFaction]][factionType])
        {
            case FACTION_POLICE: inisial="PD";
            case FACTION_MEDIC: inisial="FD";
            case FACTION_GOV: inisial="GOV";
        }
        foreach (new j : Player) if (PlayerData[j][pOnDuty] && PlayerData[j][pFaction] == i && !PlayerData[j][pDisableFaction]) {
            SendClientMessageEx(j, FactionData[PlayerData[playerid][pFaction]][factionColor], "[%s] %s %s{FFD700}: %s", inisial, Faction_GetRank(playerid), ReturnName(playerid, 0), FormatRadio(playerid, params));
        }
    }
    Log_Write("logs/faction_chat.txt", "[%s] [/dept] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    return 1;
}

CMD:odept(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You must be a civil service worker.");

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/odept [ooc department radio]");

    for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV) {
        SendFactionMessage(i, FactionData[PlayerData[playerid][pFaction]][factionColor], "(( {FFD700}%s: %s {%06x}))", ReturnName(playerid, 0), params, FactionData[PlayerData[playerid][pFaction]][factionColor] >>> 8);
    }
    Log_Write("logs/factionooc_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    return 1;
}

CMD:map(playerid, params[])
{
    if(PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0 || PlayerData[playerid][pMissions] > 0 || GetPVarInt(playerid, "DeliveryWood") > 0)
        return SendErrorMessage(playerid, "You can't use this command at the moment.");

    Dialog_Show(playerid, MainMAP, DIALOG_STYLE_LIST, "TEMPORARY MAP (Different with GPS)", "Find Business\nFind Job\nFind Sidejob\nFind Dealership\nFind Cargo\nLainnya", "Select", "Cancel");
    return 1;
}

CMD:gps(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "GPS System"))
        return SendErrorMessage(playerid, "You must have a GPS system to use this.");

    if(PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0 || PlayerData[playerid][pMissions] > 0 || GetPVarInt(playerid, "DeliveryWood") > 0)
        return SendErrorMessage(playerid, "You can't use this command at the moment.");

    Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS System", "Custom Locations\nFind Business\nFind Cargo\nFind Dealership\nFind Farm\nFind Flat\nFind Tree\nFind Garage\nFind House\nFind Job\nFind Sidejob\nFind Vehicles\nFind Workshop\nLainnya", "Select", "Cancel");
    return 1;
}

CMD:fill(playerid, params[])
{
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);

    if(IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not standing near any vehicle.");

    if(!Inventory_HasItem(playerid, "Fuel Can"))
        return SendErrorMessage(playerid, "You don't have any fuel cans on you.");

    if(GetEngineStatus(vehicleid))
        return SendErrorMessage(playerid, "You must shut off the engine first.");

    if(CoreVehicles[vehicleid][vehFuel] > 95)
        return SendErrorMessage(playerid, "This vehicle doesn't need any fuel.");

    if(PlayerData[playerid][pFuelCan])
        return SendErrorMessage(playerid, "You are already using a can of fuel.");

    PlayerData[playerid][pFuelCan] = 1;

    Inventory_Remove(playerid, "Fuel Can");
    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Filling vehicle...", 5200, 3);

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s opens a can of fuel and fills the vehicle.", ReturnName(playerid, 0));
    SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);

    return 1;
}

CMD:setmotd(playerid, params[])
{
    static
        motd[225],
        string[255],
        options[32],
        str[225];

    if (CheckAdmin(playerid, 7))
        return NotAllowed(playerid);

    if(sscanf(params,"s[32]S()[225]", options, str))
        return SendSyntaxMessage(playerid, "/setmotd [amotd/gmotd/hmotd]");

    if(!strcmp(options, "gmotd", true))
    {
        if(sscanf(str,"s[225]", motd))
            return SendSyntaxMessage(playerid, "/setmotd gmotd [motd] 'NULL' for nothing");

        format(ServerData[g_Motd], 225, ColouredText(motd));
        format(string,sizeof(string),"UPDATE `server` SET `g_Motd` = '%s' WHERE `ID`='1'", SQL_ReturnEscaped(ServerData[g_Motd]));
    }
    else if(!strcmp(options, "amotd", true))
    {
        if(sscanf(str,"s[225]", motd))
            return SendSyntaxMessage(playerid, "/setmotd amotd [motd] 'NULL' for nothing");

        format(ServerData[a_Motd], 225, ColouredText(motd));
        format(string,sizeof(string),"UPDATE `server` SET `a_Motd` = '%s' WHERE `ID`='1'", SQL_ReturnEscaped(ServerData[a_Motd]));
    }
    else if(!strcmp(options, "hmotd", true))
    {
        if(sscanf(str,"s[225]", motd))
            return SendSyntaxMessage(playerid, "/setmotd hmotd [motd] 'NULL' for nothing");

        format(ServerData[h_Motd], 225, ColouredText(motd));
        format(string,sizeof(string),"UPDATE `server` SET `h_Motd` = '%s' WHERE `ID`='1'", SQL_ReturnEscaped(ServerData[h_Motd]));
    }
    mysql_tquery(g_iHandle, string);
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s set new %s (%s{FF6347})", ReturnName(playerid), options, ColouredText(motd));
    return 1;
}

CMD:ask(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ask [questions]");

    if(PlayerData[playerid][pAsk] || Ask_GetCount(playerid) > 0)
        return SendErrorMessage(playerid, "Waiting answered from admin to repeat your questions again..");

    new askid = -1;
    if((askid = Ask_Add(playerid, params)) != -1)
    {
        SendQuestionMessage(X11_LIGHTBLUE, "[ASK:#%d] "YELLOW"%s (%d): "WHITE"%s", askid, ReturnName2(playerid, 0), playerid, params);
        PlayerData[playerid][pAsk] = true;
        format(PlayerData[playerid][pAskQ], 128, params);

        PlayerData[playerid][pAskTime] = defer Canusingask[120000](playerid);

        SendServerMessage(playerid, "You have sent a questions to helper/admin online.");
    }
    else SendErrorMessage(playerid, "The ask list is full. Please wait for a while.");
    return 1;
}

CMD:ans(playerid, params[])
{
    static
        userid,
        text[128];

    if (CheckAdmin(playerid, 1) && !AccountData[playerid][pVolunteer])
        return PermissionError(playerid);

    if(sscanf(params, "us[128]", userid, text)) return SendSyntaxMessage(playerid, "/ans [playerid/PartOfName] [message]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    if(!PlayerData[userid][pAsk]) return SendErrorMessage(playerid, "This player don't ask anything");

    SendClientMessageEx(userid, X11_LIGHTBLUE, "QUESTIONS: "YELLOW"%s", PlayerData[playerid][pAskQ]);
    SendClientMessageEx(userid, X11_LIGHTBLUE, "ANSWER: "YELLOW"%s", text);
    SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s answered %s questions: %s", ReturnAdminName(playerid), ReturnName2(userid,0), text);

    PlayerData[userid][pAsk] = false;
    PlayerData[userid][pAskQ] = EOS;
    stop PlayerData[userid][pAskTime];
    Ask_Clear(userid);
    return 1;
}

CMD:atalk(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/atalk [request]");

    if(GetPVarInt(playerid,"waitingAm") >= gettime())
        return SendErrorMessage(playerid, "You must wait %d seconds before sending another message.", GetPVarInt(playerid,"waitingAm") - gettime());

    foreach(new i : Player) if(SQL_IsCharacterLogged(i) && (AccountData[i][pAdmin] && !PlayerData[i][pDisableAtalk])) {
        SendClientMessageEx(i, COLOR_ORANGE, "[ATALK]: %s (%d): %s", ReturnName2(playerid, 0), playerid, params);
    }

    SetPVarInt(playerid,"waitingAm", (gettime() + 30));
    SendServerMessage(playerid, "You have sent a you request to the admin online.");
    return 1;
}

CMD:pm(playerid, params[])
{
    static
        userid,
            text[128];

    if(sscanf(params, "us[128]", userid, text))
        return SendSyntaxMessage(playerid, "/pm [playerid/PartOfName] [message]");

    if(PlayerData[playerid][pDisablePM])
        return SendErrorMessage(playerid, "You must enable private messaging first.");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't private message yourself.");

    if(PlayerData[userid][pDisablePM])
        return SendErrorMessage(playerid, "That player has disabled private messaging.");

    GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~New message!", 3000, 3);
    PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);

    SendClientMessageEx(userid, X11_YELLOW_2, "(( PM from %s (%d): %s ))", ReturnName2(playerid, 0), playerid, text);
    SendClientMessageEx(playerid, X11_YELLOW_2, "(( PM to %s (%d): %s ))", ReturnName2(userid, 0), userid, text);

    foreach(new i : Player) if(SQL_IsCharacterLogged(i) && (AccountData[i][pAdmin] >= 5) && !PlayerData[i][pDisableAPM])
    {
        SendClientMessageEx(i, X11_GREEN_YELLOW, "PlyrPM: %s (%d) to %s (%d): %s", ReturnName2(playerid), playerid, ReturnName2(userid), userid, text);
    }
    Log_Write("logs/fmlog_chat.txt", "[%s] [/pm] %s (%d) to %s (%d): %s", ReturnDate(), ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, text);
    return 1;
}


CMD:blindfold(playerid, params[]) {
    if(PlayerTemp[playerid][temp_blindfold]) {
        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_blindfold]);
        PlayerTemp[playerid][temp_blindfold] = false;

        SendClientMessage(playerid, -1, "Blindfold: false");
    }
    else {
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_blindfold]);
        PlayerTemp[playerid][temp_blindfold] = true;

        SendClientMessage(playerid, -1, "Blindfold: true");
    }
    return 1;
}

CMD:toggle(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
    {
        Dialog_Show(playerid, ToggleMenu, DIALOG_STYLE_TABLIST_HEADERS, "Toggle List", "Type\tStatus\nOOC Global Chat\t%s\nPrivate Message\t%s\nBroadcast Message\t%s\nFaction Chat\t%s\nLogin Message\t%s\nHud Display\t%s\nVipchat\t%s\nAdmin Command Message\t%s", "Select", "Close", 
            (PlayerData[playerid][pDisableOOC]) ? (""RED"Disabled") : (""GREEN"Enabled"), 
            (PlayerData[playerid][pDisablePM]) ? (""RED"Disabled") : (""GREEN"Enabled"), 
            (PlayerData[playerid][pDisableBC]) ? (""RED"Disabled") : (""GREEN"Enabled"), 
            (PlayerData[playerid][pDisableFaction]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pLoginLog]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pTogHud]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pTogVipchat]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pTogAdmCmd]) ? (""RED"Disabled") : (""GREEN"Enabled")
        );
    }
    else
    {
        Dialog_Show(playerid, ToggleMenu, DIALOG_STYLE_TABLIST_HEADERS, "Toggle List", "Type\tStatus\nOOC Global Chat\t%s\nPrivate Message\t%s\nBroadcast Message\t%s\nFaction Chat\t%s\nLogin Message\t%s\nHud Display\t%s\nVipchat\t%s\nAdmin Command Message\t%s\nAdmin Chat\t%s\nPM Log\t%s\nAtalk Log\t%s\nAdmin Warn\t%s\nReports\t%s\nQuestions\t%s\nWT Log\t%s", "Select", "Close", 
            (PlayerData[playerid][pDisableOOC]) ? (""RED"Disabled") : (""GREEN"Enabled"), 
            (PlayerData[playerid][pDisablePM]) ? (""RED"Disabled") : (""GREEN"Enabled"), 
            (PlayerData[playerid][pDisableBC]) ? (""RED"Disabled") : (""GREEN"Enabled"), 
            (PlayerData[playerid][pDisableFaction]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pLoginLog]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pTogHud]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pTogVipchat]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pTogAdmCmd]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableAdmin]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableAPM]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableAtalk]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableAWarn]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableReport]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableAsk]) ? (""RED"Disabled") : (""GREEN"Enabled"),
            (PlayerData[playerid][pDisableWT]) ? (""RED"Disabled") : (""GREEN"Enabled")
        );
    }
    return 1;
}

CMD:togauto(playerid, params[]) {
    new str[256];

    format(str,sizeof(str),"Type\tStatus\n");
    // format(str,sizeof(str),"%sAuto Paycheck\t%s\n",str,(PlayerData[playerid][pAuto][0]) ? (""GREEN"ON") : (""RED"OFF"));
    format(str,sizeof(str),"%sAuto Using Seatbelt\t%s\n",str,(PlayerData[playerid][pAuto][1]) ? (""GREEN"ON") : (""RED"OFF"));
    format(str,sizeof(str),"%sAuto Using Helmet\t%s\n",str,(PlayerData[playerid][pAuto][2]) ? (""GREEN"ON") : (""RED"OFF"));
    format(str,sizeof(str),"%sAuto Handbrake Vehicle\t%s\n",str,(PlayerData[playerid][pAuto][3]) ? (""GREEN"ON") : (""RED"OFF"));
    format(str,sizeof(str),"%sAuto Uppercase Letter Chat\t%s\n",str,(PlayerData[playerid][pAuto][4]) ? (""GREEN"ON") : (""RED"OFF"));
    format(str,sizeof(str),"%sAuto Enable Mask on Login\t%s",str,(PlayerData[playerid][pAuto][5]) ? (""GREEN"ON") : (""RED"OFF"));
    Dialog_Show(playerid, TogAuto, DIALOG_STYLE_TABLIST_HEADERS, "Toggle Automatic", str, "Toggle", "Close");
    return 1;
}

CMD:maxobject(playerid) {
    new str[155];
    strcat(str, "Setting\tObject Limit\tMultiplier\n");
    strcat(str, GREEN"Potato\t400\t0.6\n");
    strcat(str, CYAN"Low\t500\t0.8\n");
    strcat(str, WHITE"Normal\t700\t1.0\n");
    strcat(str, ORANGE"High\t800\t1.5\n");
    strcat(str, RED"Stonks\t950\t2.0");
    Dialog_Show(playerid, StreamerSettings, DIALOG_STYLE_TABLIST_HEADERS, "Object Streamer Settings", str, "Set", "Cancel");
    return 1;
}

CMD:ticket(playerid, params[])
{
    static
        userid,
        price,
        reason[64];

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(sscanf(params, "uds[64]", userid, price, reason)) return SendSyntaxMessage(playerid, "/ticket [playerid/PartOfName] [price] [reason]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't write a ticket to yourself.");
    if(price < 1 || price > 1000) return SendErrorMessage(playerid, "The price can't be below $1 or above $1,000.");

    new id = Ticket_Add(playerid, userid, price, reason);

    if(id != -1) {
        SendServerMessage(playerid, "You have written "YELLOW"%s "WHITE"a ticket for "GREEN"%s"WHITE", reason: "YELLOW"%s", ReturnName(userid, 0), FormatNumber(price), reason);
        SendServerMessage(userid, ""YELLOW"%s "WHITE"has written you a ticket for "GREEN"%s"WHITE", reason: "YELLOW"%s", ReturnName(playerid, 0), FormatNumber(price), reason);

        //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has written up a ticket for %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
        Log_Write("logs/ticket_log.txt", "[%s] %s has written a %s ticket to %s, reason: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
    }
    else SendErrorMessage(playerid, "That player already has %d outstanding tickets.", MAX_PLAYER_TICKETS);
    return 1;
}

CMD:buyplate(playerid, params[])
{
    if (!IsPlayerInBuyPlatePoint(playerid))
        return SendErrorMessage(playerid, "You must be at SAPD HQ or Flint County Precint to buying new plate.");

    if (GetMoney(playerid) < 250)
        return SendErrorMessage(playerid, "You need $250 to registering your vehicle number plate.");

    new count, info[256];

    strcat(info, "Vehicle\tPlate\n");
    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] == -1 && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cGarageFlat] && !VehicleData[i][cInsideInsurance] && !strcmp(VehicleData[i][cPlate], "NO HAVE", true)) {
        strcat(info, sprintf("%s\t%s\n", GetVehicleNameByModel(VehicleData[i][cModel]), VehicleData[i][cPlate]));
        ListedVehicles[playerid][count++] = i;
    }
    if (count) Dialog_Show(playerid, BuyPlate, DIALOG_STYLE_TABLIST_HEADERS, "Buy Vehicle Plate", info, "Select", "Back");
    else SendErrorMessage(playerid, "You don't have any vehicle or your vehicle is already have valid number plate!");
    return 1;
}

CMD:installcustomplate(playerid, params[])
{
    static 
        id = -1,
        plate[24],
        userid;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You are not member of SAFD");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);

    if(sscanf(params, "us[24]", userid, plate))
        return SendSyntaxMessage(playerid,"/installcustomplate [playerid / PartOfName] [custom plate]");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Can't use this action if you in vehicle.");

    if(!IsPlayerInAnyVehicle(userid))
        return SendErrorMessage(playerid, "This player is'nt in vehicle.");

    if(strval(plate) > 24)
        return SendErrorMessage(playerid, "Plate characters is too long");

    if((id = Vehicle_GetID(GetPlayerVehicleID(userid))) != -1 && Vehicle_IsOwner(userid, id))
    {
        format(PlayerData[userid][pPlate], 24, plate);
        PlayerData[userid][pCustomPlate] = 1;
        PlayerData[userid][pPlateID] = playerid;

        SendServerMessage(userid, "%s give you a custom plate with name: "YELLOW"%s "WHITE". Type (/approve plate) to accept.", ReturnName2(playerid, 0), plate);
        SendServerMessage(playerid, "You give a request to {C0C0C0}%s "WHITE"for custom plate ("YELLOW"%s"WHITE").", ReturnName2(userid, 0), plate);
    }
    else
        SendErrorMessage(playerid, "That player isn't in their vehicle.");
    return 1;
}
CMD:icp(playerid, params[])
    return cmd_installcustomplate(playerid, params);

CMD:warnings(playerid, params[])
{
    new Cache:checkwarns, query[255],string[1500];

    format(query, sizeof(query), "SELECT * FROM `wanrslog` WHERE `ID`='%d'", PlayerData[playerid][pID]);
    checkwarns = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        return SendErrorMessage(playerid, "There are no one warns record on you."), cache_delete(checkwarns);

    format(string, sizeof(string), "Type\tWarn By\tWarn Date\tReason\n");

    for(new i; i != cache_num_rows(); i++)
    {
        new warnby[24],
            warndate[64],
            warnreason[64],
            warntype;

        cache_get_value(i, "warnBy", warnby);
        cache_get_value(i, "warnDate", warndate);
        cache_get_value(i, "warnReason", warnreason);
        cache_get_value_int(i, "warnType", warntype);

        format(string, sizeof(string), "%s%s\t%s\t%s\t%s\n", string, GetWarnType(warntype), warnby, warndate, warnreason);
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Warn Log", string, "Close","");

    cache_delete(checkwarns);
    return 1;
}

CMD:payticket(playerid, params[])
{
    new
        string[MAX_PLAYER_TICKETS * 64],
        count;

    if(!IsPlayerInPayticketPoint(playerid))
        return SendErrorMessage(playerid, "You must be at SAPD HQ or Flint County Precint to pay your ticket.");

    for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[playerid][i][ticketExists]) {
        format(string, sizeof(string), "%s%s ("GREEN"%s"WHITE" - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
        ListedTickets[playerid][count++] = i;
    }

    if(count) Dialog_Show(playerid, PayTicket, DIALOG_STYLE_LIST, "My Tickets", string, "Pay", "Cancel");
    else SendErrorMessage(playerid, "You're don't have pending tickets.");
    return 1;
}

CMD:unlocktire(playerid, params[]) {
    if (!IsPlayerInUnlocktirePoint(playerid))
        return SendErrorMessage(playerid, "You must be at SAPD HQ or Flint County Precint to unlock your vehicle tire.");

    new count = 0, str[256], vehname[32];
    strcat(str, "Vehicle\tPenalty\n");
    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i) && VehicleData[i][cTireLock]) {
        GetVehicleNameByVehicle(VehicleData[i][cVehicle], vehname);
        strcat(str, sprintf("%s\t%s\n", vehname, FormatNumber(VehicleData[i][cImpoundPrice])));
        ListedVehicles[playerid][count++] = i;
    }
    if (count) Dialog_Show(playerid, UnlockTire, DIALOG_STYLE_TABLIST_HEADERS, "Unlock Vehicle Tire", str, "Pay", "Close");
    else SendErrorMessage(playerid, "You don't have any vehicle has locked tire");
    return 1;
}

CMD:locktire(playerid, params[]) {
    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You are not a police officer.");

    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), carid = -1, cost;
    if (vehicleid == INVALID_VEHICLE_ID)
        return SendErrorMessage(playerid, "You are not nearest any vehicle!");

    if ((carid = Vehicle_GetID(vehicleid)) != -1 && VehicleData[carid][cOwner]) {
        if (sscanf(params, "d", cost))
            return SendSyntaxMessage(playerid, "/locktire [penalty cost]");

        if (VehicleData[carid][cTireLock])
            return SendErrorMessage(playerid, "This vehicle is already tire locked!");

        VehicleData[carid][cTireLock] = 1;
        VehicleData[carid][cImpoundPrice] = cost;

        VehicleData[carid][cLocked] = true;
        SetDoorStatus(VehicleData[carid][cVehicle], true);

        new Float:pos[3];
        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

        if (IsValidDynamic3DTextLabel(VehicleData[carid][cText]))
            DestroyDynamic3DTextLabel(VehicleData[carid][cText]);

        VehicleData[carid][cText] = CreateDynamic3DTextLabel("* Tire Locked *", X11_WHITE, pos[0], pos[1], pos[2], 10.0, INVALID_PLAYER_ID, VehicleData[carid][cVehicle], 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

        SendCustomMessage(playerid, "TIRELOCK", "You've been locked this vehicle tire for penalty cost "GREEN"%s", FormatNumber(cost));
    } else SendErrorMessage(playerid, "This is not owned vehicle!");
    return 1;
}

CMD:tickets(playerid, params[])
{
    new userid,
        string[MAX_PLAYER_TICKETS * 64],
        count;

    if(sscanf(params, "u", userid))
    {    
        for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[playerid][i][ticketExists]) {
            format(string, sizeof(string), "%s%s - ("GREEN"%s"WHITE" - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
            ListedTickets[playerid][count++] = i;
        }
    }
    else {
        if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You are not a police officer.");
        if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Invalid player id.");
        if(!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "You're not neat that player.");

        for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[userid][i][ticketExists]) {
            format(string, sizeof(string), "%s%s - ("GREEN"%s"WHITE" - %s)\n", string, TicketData[userid][i][ticketReason], FormatNumber(TicketData[userid][i][ticketFee]), TicketData[userid][i][ticketDate]);
            ListedTickets[playerid][count++] = i;
        }
    }
    if(count) Dialog_Show(playerid, CheckTicket, DIALOG_STYLE_LIST, "Ticket List", string, "Details", "Close");
    else SendErrorMessage(playerid, "Tehre are no one pending ticket.");

    return 1;
}

CMD:twithdraw(playerid, params[])
{
    static
        amount;

    if(GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You are not a government official.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "d", amount))
        return SendSyntaxMessage(playerid, "/twithdraw [amount] (%s available)", FormatNumber(g_TaxVault));

    if(!IsPlayerInCityHall(playerid))
        return SendErrorMessage(playerid, "You must be inside City Hall to do this.");

    if(amount < 1 || amount > g_TaxVault)
        return SendErrorMessage(playerid, "Invalid amount specified.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

    Tax_AddMoney(-amount);

    GiveMoney(playerid, amount);
    SendServerMessage(playerid, "You have withdrawn %s from the treasury (%s available).", FormatNumber(amount), FormatNumber(g_TaxVault));

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has withdrawn %s from the treasury.", ReturnName(playerid, 0), FormatNumber(amount));
    Log_Write("logs/tax_vault.txt", "[%s] %s has withdrawn %s from the treasury.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
    return 1;
}

CMD:tdeposit(playerid, params[])
{
    static
        amount;

    if(GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You are not a government official.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "d", amount))
        return SendSyntaxMessage(playerid, "/tdeposit [amount] (%s available)", FormatNumber(g_TaxVault));

    if(!IsPlayerInCityHall(playerid))
        return SendErrorMessage(playerid, "You must be inside City Hall to do this.");

    if(amount < 1 || amount > GetMoney(playerid))
        return SendErrorMessage(playerid, "Invalid amount specified.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 4)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 4);

    Tax_AddMoney(amount);

    GiveMoney(playerid, -amount);
    SendServerMessage(playerid, "You have deposited %s into the treasury (%s available).", FormatNumber(amount), FormatNumber(g_TaxVault));

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has deposited %s into the treasury.", ReturnName(playerid, 0), FormatNumber(amount));
    Log_Write("logs/tax_vault.txt", "[%s] %s has deposited %s into the treasury.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
    return 1;
}

CMD:spike(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You are not a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < 3) return SendErrorMessage(playerid, "You must be at least rank 3.");

    if(isnull(params))
    {
        SendSyntaxMessage(playerid, "/spike [option]");
        SendClientMessage(playerid, X11_YELLOW_2, "[OPTIONS]:"WHITE" add, destroy, destroyall");
        return 1;
    }
    static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

    if(!strcmp(params, "add", true))
    {
        if(IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You must exit the vehicle first.");

        for (new i = 0; i != MAX_BARRICADES; i ++) if(!BarricadeData[i][cadeExists])
        {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 1;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);
            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has dropped a spikestrip at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
            return 1;
        }
        SendErrorMessage(playerid, "The server has reached the limit for spikestrips.");
    }
    else if(!strcmp(params, "destroy", true))
    {
        for (new i = 0; i != MAX_BARRICADES; i ++) if(BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
        {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            if(IsValidDynamicObject(BarricadeData[i][cadeObject]))
                DestroyDynamicObject(BarricadeData[i][cadeObject]);

            BarricadeData[i][cadeObject] = INVALID_STREAMER_ID;

            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has picked up a spikestrip at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any spikestrip.");
    }
    else if(!strcmp(params, "destroyall", true))
    {
        for (new i = 0; i != MAX_BARRICADES; i ++) if(BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
        {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            if(IsValidDynamicObject(BarricadeData[i][cadeObject]))
                DestroyDynamicObject(BarricadeData[i][cadeObject]);

            BarricadeData[i][cadeObject] = INVALID_STREAMER_ID;
        }
        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has destroyed all of the spikestrips.", ReturnName(playerid, 0));
    }
    return 1;
}

CMD:roadblock(playerid, params[])
{
    static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA,
        fName[225],
        option[15];
        
    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You are not a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < 3) return SendErrorMessage(playerid, "You must be at least rank 3.");

    if(sscanf(params,"s[32]S()[225]",option, fName))
    {
        SendSyntaxMessage(playerid, "/roadblock [option]");
        SendClientMessage(playerid, X11_YELLOW_2, "[OPTIONS]:"WHITE" add, addcustom, destroy, destroyall");
        return 1;
    }

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

    if(!strcmp(option, "add", true))
    {
        new name[225];
        if(sscanf(fName,"s[225]",name))
            return SendSyntaxMessage(playerid, "/roadblock [add] [name]");

        if(IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You must exit the vehicle first.");

        for (new i = 0; i != MAX_BARRICADES; i ++) if(!BarricadeData[i][cadeExists])
        {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;
            BarricadeData[i][cadePos][3] = fA;
            
            FixText(name);
            
            format(BarricadeData[i][cadeName], 225, name);

            BarricadeData[i][cadeObject] = CreateDynamicObject(981, fX, fY, fZ, 0.0, 0.0, fA);
            SetDynamicObjectMaterialText(BarricadeData[i][cadeObject], 2, name, 100, "Arial", 30, 1, -1, 0xFF000000, 1);

            SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);
            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has dropped a roadblock at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
            return 1;
        }
        SendErrorMessage(playerid, "The server has reached the limit for roadblock.");
    }
    else if(!strcmp(option, "addcustom", true))
    {
        if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You must exit the vehicle first.");
        ShowModelSelectionMenu(playerid, "Roadblock", MODEL_SELECTION_ROADBLOCK, roadblock, sizeof(roadblock), 0.0, 0.0, 180.0);
    }
    else if(!strcmp(option, "destroy", true))
    {
        for (new i = 0; i != MAX_BARRICADES; i ++) if(BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 2.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
        {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            if(IsValidDynamicObject(BarricadeData[i][cadeObject]))
                DestroyDynamicObject(BarricadeData[i][cadeObject]);

            BarricadeData[i][cadeObject] = INVALID_STREAMER_ID;
            SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has picked up a roadblock at %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
            return 1;
        }
        SendErrorMessage(playerid, "You are not in range of any roadblock.");
    }
    else if(!strcmp(option, "destroyall", true))
    {
        for (new i = 0; i != MAX_BARRICADES; i ++) if(BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
        {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);
        }
        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has destroyed all of the roadblocks.", ReturnName(playerid, 0));
    }
    return 1;
}

CMD:ds(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/ds (door shout) [text]");

    new id = -1;

    if ((id = House_Nearest(playerid)) != -1) {
        foreach (new i : Player) if(House_Inside(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = Business_Nearest(playerid)) != -1) {
        foreach (new i : Player) if(Business_Inside(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = Entrance_Nearest(playerid)) != -1) {
        foreach (new i : Player) if(Entrance_Inside(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = ApartRoom_Nearest(playerid)) != -1) {
        foreach (new i : Player) if(ApartRoomInt_Nearest(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = House_Inside(playerid)) != -1) {
        foreach (new i : Player) if(House_Nearest(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = Business_Inside(playerid)) != -1) {
        foreach (new i : Player) if(Business_Nearest(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = Entrance_Inside(playerid)) != -1) {
        foreach (new i : Player) if(Entrance_Nearest(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else if ((id = ApartRoomInt_Nearest(playerid)) != -1) {
        foreach (new i : Player) if(ApartRoom_Nearest(i) == id) {
            SendClientMessageEx(i, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
        }
        SendClientMessageEx(playerid, X11_GREY_60, "%s shouts [door]: %s!", ReturnName(playerid, 0, 1), params);
    } else SendErrorMessage(playerid, "Kamu tidak berada di pintu apapun.");
    return 1;
}

CMD:doorbell(playerid, params[])
{
    new id = House_Nearest(playerid);

    if(id == -1)
        return SendErrorMessage(playerid, "You must be standing near a house.");

    foreach (new i : Player) if(House_Inside(i) == id) {
        SendClientMessage(i, X11_PLUM, "** You can hear the doorbell ringing.");
        PlayerPlaySound(i, 20801, 0, 0, 0);
    }
    PlayerPlaySoundEx(playerid, 20801);

    SendServerMessage(playerid, "Kamu telah menekan bell rumah seseorang.");
    return 1;
}

CMD:reward(playerid, params[])
{
    static
        amount;

    if(AccountData[playerid][pID] != 1)
        return SendErrorMessage(playerid, "The command are not registered in the server. (/help)");

    if(sscanf(params, "d", amount))
        return SendSyntaxMessage(playerid, "/reward [amount]");

    foreach(new i : Player) if(SQL_IsCharacterLogged(i)) {
        GiveMoney(i, amount);
    }
    SendClientMessageToAllEx(X11_LIGHTBLUE, "Admin %s memberi hadiah uang %s untukmu.", ReturnAdminName(playerid), FormatNumber(amount));
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s memberi uang ke semua player.", ReturnName2(playerid, 0), FormatNumber(amount));
    Log_Write("logs/reward.txt", "[%s] %s has given a reward for %s", ReturnDate(), ReturnAdminName(playerid), FormatNumber(amount));

    return 1;
}

/*CMD:givecash(playerid, params[])
{
    static
        userid,
        amount;

    if(AccountData[playerid][pAdmin] < 6)
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if(sscanf(params, "ud", userid, amount))
        return SendSyntaxMessage(playerid, "/givecash [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    GiveMoney(userid, amount);

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has given %s to %s.", ReturnName2(playerid, 0), FormatNumber(amount), ReturnName2(userid, 0));
    Log_Write("logs/admin_log.txt", "[%s] %s has given %s to %s.", ReturnDate(), ReturnAdminName(playerid), FormatNumber(amount), ReturnName2(userid, 0));

    return 1;
}*/

CMD:usedrug(playerid, params[])
{
    if(isnull(params))
    {
        SendSyntaxMessage(playerid, "/usedrug [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" marijuana, cocaine, heroin, steroids");
        return 1;
    }
    // if(PlayerData[playerid][pDrugTime] > 0)
    //     return SendErrorMessage(playerid, "Please wait until the effects have subsided first.");

    if((PlayerData[playerid][pScore] < 3 && !PlayerData[playerid][pStory]) || !PlayerData[playerid][pStory])
        return SendErrorMessage(playerid, "You must level 3 or above and active character story to consume drugs.");

    if (ReturnArmour(playerid) >= 90)
        return SendErrorMessage(playerid, "Your armour is full.");

    if(!strcmp(params, "marijuana", true))
    {
        if(PlayerData[playerid][pCough] >= 15) return SendErrorMessage(playerid, "Anda memiliki penyakit berat, tidak dapat mengkonsumsi marijuana berlebihan!.");
        if(Inventory_Count(playerid, "Marijuana") < 2) return SendErrorMessage(playerid, "You need at least 2 grams of marijuana.");

        PlayerData[playerid][pDrugTime] += RandomEx(10,15);
        PlayerData[playerid][pDrugUsed] = 1;

        GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]); 

        SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]+5);

        Inventory_Remove(playerid, "Marijuana", 2);
        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

        PlayerData[playerid][pCough]++;

        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1000);
        SetPlayerWeather(playerid, -67);
        SetPlayerTime(playerid, 12, 12);
    }
    else if(!strcmp(params, "cocaine", true))
    {
        if(Inventory_Count(playerid, "Cocaine") < 2)
            return SendErrorMessage(playerid, "You need at least 2 grams of cocaine.");

        PlayerData[playerid][pDrugTime] += RandomEx(10,15);
        PlayerData[playerid][pDrugUsed] = 2;

        GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]); 

        SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]+10);

        Inventory_Remove(playerid, "Cocaine", 2);

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1000);
        SetPlayerWeather(playerid, -67);
        SetPlayerTime(playerid, 12, 12);
    }
    else if(!strcmp(params, "heroin", true))
    {
        if(Inventory_Count(playerid, "Heroin") < 2)
            return SendErrorMessage(playerid, "You need at least 2 grams of heroin.");

        PlayerData[playerid][pDrugTime] += RandomEx(10,15);
        PlayerData[playerid][pDrugUsed] = 3;

        GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]); 
        SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]+7);
        Inventory_Remove(playerid, "Heroin", 2);
        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1000);
        SetPlayerWeather(playerid, -67);
        SetPlayerTime(playerid, 12, 12);
    }
    else if(!strcmp(params, "steroids", true))
    {
        if(!Inventory_HasItem(playerid, "Steroids"))
            return SendErrorMessage(playerid, "You need at least one steroid pill.");

        if(ReturnHealth(playerid) <= 5)
            return SendErrorMessage(playerid, "Your health is too low to take steroids.");

        PlayerData[playerid][pDrugTime] += RandomEx(10,15);
        PlayerData[playerid][pDrugUsed] = 4;

        GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]); 

        SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]+15);

        SetPlayerHealth(playerid, ReturnHealth(playerid) - 5);
        Inventory_Remove(playerid, "Steroids", 2);

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1000);
    }
    return 1;
}

CMD:fingerprint(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFingerTime] > 0) return SendErrorMessage(playerid, "You are already using the fingerprint scanner.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s runs the fingerprint scanner over the item.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
    }
    SendErrorMessage(playerid, "There is no item nearby.");
    return 1;
}

/*CMD:backpack(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Backpack"))
        return SendErrorMessage(playerid, "You don't have a backpack on you.");

    Backpack_Open(playerid);
    return 1;
}*/

/*CMD:dropbackpack(playerid, params[])
{
    new
        id = GetPlayerBackpack(playerid);

    if(!Inventory_HasItem(playerid, "Backpack") || id == -1)
        return SendErrorMessage(playerid, "You don't have a backpack on you.");

    if(!Backpack_GetItems(id))
        return SendErrorMessage(playerid, "You can't drop an empty backpack.");

    if(IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
        return SendErrorMessage(playerid, "You can't drop your backpack right now.");

    static
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    BackpackData[id][backpackPlayer] = 0;
    BackpackData[id][backpackPos][0] = x;
    BackpackData[id][backpackPos][1] = y;
    BackpackData[id][backpackPos][2] = z;
    BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
    BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

    Backpack_Refresh(id);
    Backpack_Save(id);

    Inventory_Remove(playerid, "Backpack");
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has dropped their backpack.", ReturnName(playerid, 0, 1));

    SetAccessories(playerid);

    return 1;
}*/

CMD:setitem(playerid, params[])
{
    static
        userid,
        item[32],
        amount;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "uds[32]", userid, amount, item))
        return SendSyntaxMessage(playerid, "/setitem [playerid/PartOfName] [amount] [item name]");

    if(IsFurnitureItem(item))
    {
        for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
        {
            Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);
            SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
            Log_Write("logs/setitem.txt", "[%s] %s has set item furniture %s (amount: %d) to %s.", ReturnDate(), ReturnName(playerid, 0), item, amount, NormalName(userid));
            return 1;
        }
    }
    else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
    {
        if(amount > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "Maximmum ammount for this item is %d.", g_aInventoryItems[i][e_InventoryMax]);

        if(!strcmp(item, "Cellphone", true)) {
            PlayerData[userid][pPhone] = random(90000) + 10000;
        }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);
        Log_Write("logs/setitem.txt", "[%s] %s has set item %s (amount: %d) to %s.", ReturnDate(), ReturnName(playerid, 0), item, amount, NormalName(userid));
        return SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
    }
    SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
    return 1;
}

CMD:itemlist(playerid, params[])
{
    new string[500];
    strcat(string, "Name\tMax\n");
    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
        strcat(string, sprintf("%s\t%d\n", g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryMax]));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "List of Items", string, "Select", "Cancel");
    return 1;
}

CMD:createimpound(playerid, params[])
{
    static
        id = -1,
        Float:x,
        Float:y,
        Float:z;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
        return SendErrorMessage(playerid, "You can only create impound lots outside interiors.");

    GetPlayerPos(playerid, x, y, z);

    id = Impound_Create(x, y, z);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for impound lots.");

    SendServerMessage(playerid, "You have successfully created impound lot ID: %d.", id);
    return 1;
}

CMD:destroyimpound(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyimpound [impound id]");

    if((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
        return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

    Impound_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed impound lot ID: %d.", id);
    return 1;
}

CMD:editimpound(playerid, params[])
{
    static
        id,
            type[24],
        string[128];

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "ds[24]S()[128]", id, type, string))
    {
        SendSyntaxMessage(playerid, "/editimpound [id] [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, release");
        return 1;
    }
    if((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
        return SendErrorMessage(playerid, "You have specified an invalid impound lot ID.");

    if(!strcmp(type, "location", true))
    {
        static
            Float:x,
            Float:y,
            Float:z;

        GetPlayerPos(playerid, x, y, z);

        ImpoundData[id][impoundLot][0] = x;
        ImpoundData[id][impoundLot][1] = y;
        ImpoundData[id][impoundLot][2] = z;

        Impound_Refresh(id);
        Impound_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of impound ID: %d.", ReturnName(playerid, 0), id);
    }
    else if(!strcmp(type, "release", true))
    {
        static
            Float:x,
            Float:y,
            Float:z,
            Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        ImpoundData[id][impoundRelease][0] = x;
        ImpoundData[id][impoundRelease][1] = y;
        ImpoundData[id][impoundRelease][2] = z;
        ImpoundData[id][impoundRelease][3] = angle;

        Impound_Refresh(id);
        Impound_Save(id);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the release point of impound ID: %d.", ReturnName(playerid, 0), id);
    }
    return 1;
}

CMD:forcereleasecar(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    new
        string[32 * MAX_OWNABLE_CARS],
        count;

    format(string, sizeof(string), "#\tModel\tImpound pay\n");
    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && count < MAX_PLAYER_VEHICLE+2 && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] != -1)
    {
        format(string, sizeof(string), "%s%d\t%s\t%s\n", string, count + 1, GetVehicleNameByModel(VehicleData[i][cModel]), FormatNumber(VehicleData[i][cImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
    }
    if(!count) SendErrorMessage(playerid, "You don't have any impounded vehicles.");
    else Dialog_Show(playerid, ForceReleaseCar, DIALOG_STYLE_TABLIST_HEADERS, "Release Vehicle", string, "Select", "Cancel");

    return 1;
}

CMD:releasecar(playerid, params[])
{
    if (ImpoundRelease_Nearest(playerid) != -1) {
        new
            string[32 * MAX_OWNABLE_CARS],
            count;

        format(string, sizeof(string), "#\tModel\tImpound pay\n");
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && count < MAX_PLAYER_VEHICLE+2 && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] != -1)
        {
            format(string, sizeof(string), "%s%d\t%s\t%s\n", string, count + 1, GetVehicleNameByModel(VehicleData[i][cModel]), FormatNumber(VehicleData[i][cImpoundPrice]));
            ListedVehicles[playerid][count++] = i;
        }
        if(!count) SendErrorMessage(playerid, "You don't have any impounded vehicles.");
        else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_TABLIST_HEADERS, "Release Vehicle", string, "Select", "Cancel");
    } else return SendErrorMessage(playerid, "You must be at Impound Release Point to release a vehicle.");
    return 1;
}

CMD:backup(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetPlayerFaction(playerid) != FACTION_MEDIC && GetPlayerFaction(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You must be a civil service worker");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    Dialog_Show(playerid, BackupSystem, DIALOG_STYLE_LIST, "Backup", ""GREEN"Green\n"YELLOW"Yellow\n"RED"Red", "Backup", "Close");
    return 1;
}

CMD:impound(playerid, params[])
{
    new
        price,
        id = Impound_Nearest(playerid),
        vehicleid = GetPlayerVehicleID(playerid);

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(sscanf(params, "d", price)) return SendSyntaxMessage(playerid, "/impound [price]");
    if(price < 1 || price > 1000) return SendErrorMessage(playerid, "The price can't be above $1,000 or below $1.");
    if(GetVehicleModel(vehicleid) != 525) return SendErrorMessage(playerid, "You are not driving a tow truck.");
    if(id == -1) return SendErrorMessage(playerid, "You are not in range of any impound lot.");
    if(!GetVehicleTrailer(vehicleid)) return SendErrorMessage(playerid, "There is no vehicle hooked.");

    vehicleid = Vehicle_GetID(GetVehicleTrailer(vehicleid));
    
    if(vehicleid == -1) return SendErrorMessage(playerid, "You can't tow this vehicle.");
    if(VehicleData[vehicleid][cOwner] == 0) return SendErrorMessage(playerid, "This is not owned vehicle.");
    if(VehicleData[vehicleid][cImpounded] != -1) return SendErrorMessage(playerid, "This vehicle is already impounded.");

    VehicleData[vehicleid][cImpounded] = ImpoundData[id][impoundID];
    VehicleData[vehicleid][cImpoundPrice] = price;
    VehicleData[vehicleid][cImpoundDelay] = gettime();

    Tax_AddMoney(price);

    GetVehiclePos(VehicleData[vehicleid][cVehicle], VehicleData[vehicleid][cPos][0], VehicleData[vehicleid][cPos][1], VehicleData[vehicleid][cPos][2]);
    DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

    if (IsValidVehicle(VehicleData[vehicleid][cVehicle]))
        DestroyVehicle(VehicleData[vehicleid][cVehicle]);

    VehicleData[vehicleid][cVehicle] = INVALID_VEHICLE_ID;

    foreach(new i : Player) if(PlayerData[i][pID] == VehicleData[vehicleid][cOwner])
    {
        SendCustomMessage(i, "IMPOUND", "Your "YELLOW"%s "WHITE"has been impounded by {2641FE}%s "WHITE"for "GREEN"%s.", GetVehicleNameByModel(VehicleData[vehicleid][cModel]), FactionData[PlayerData[playerid][pFaction]][factionName], FormatNumber(price));
        SendCustomMessage(i, "IMPOUND", "Your vehicle can be released at "YELLOW"%s", ConvertTimestamp(Time:VehicleData[vehicleid][cImpoundDelay]+Time:(1800)));
    }
    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has impounded a %s for %s.", ReturnName(playerid, 0), GetVehicleNameByModel(VehicleData[vehicleid][cModel]), FormatNumber(price));

    return 1;
}

CMD:channel(playerid, params[])
{
    new channel;

    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    if(sscanf(params, "d", channel))
    {
        SendSyntaxMessage(playerid, "/channel [radio channel] (0 to disable)");
        
        if(PlayerData[playerid][pFaction] != -1)
            SendClientMessage(playerid, X11_GREY_60,"CHANNEL: 911: Police Department | 992: SAMD | 1922: Goverment | 789: SAGS | 123: SaNews.");
        
        if(PlayerData[playerid][pChannel] > 0)
            SendClientMessageEx(playerid, X11_YELLOW_2, "[NOTE]:"WHITE" Your current radio channel is set to %d.", PlayerData[playerid][pChannel]);

        return 1;
    }
    if(channel < 0 || channel > 9999)
        return SendErrorMessage(playerid, "The channel can't be below 0 or above 9999.");

    switch(channel)
    {
        case 911: 
        {
            if(GetFactionType(playerid) != FACTION_POLICE)
                return SendErrorMessage(playerid, "This is police department's freqency only.");
        }
        case 992: 
        {
            if(GetFactionType(playerid) != FACTION_MEDIC)
                return SendErrorMessage(playerid, "This is SAMD freqency only.");
        }
        case 1922: 
        {
            if(GetFactionType(playerid) != FACTION_GOV)
                return SendErrorMessage(playerid, "This is goverment freqency only.");
        }   
        case 789: 
        {
            if(GetFactionType(playerid) != FACTION_SAGS)
                return SendErrorMessage(playerid, "This is SAGS freqency only.");
        }
    }

    PlayerData[playerid][pChannel] = channel;

    if(channel == 0)
            SendServerMessage(playerid, "You have disabled your portable radio.");

    else SendServerMessage(playerid, "You have set your radio's channel to %d (\"/pr [text]\" to chat).", channel);
    return 1;
}

CMD:pr(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/pr [Radio IC]");

    if(!Inventory_HasItem(playerid, "Portable Radio"))
        return SendErrorMessage(playerid, "You must have a portable radio.");

    if(!PlayerData[playerid][pChannel])
        return SendErrorMessage(playerid, "Your portable radio is disabled (/channel).");
    
    if(PlayerData[playerid][pJailTime] > 0)
        return SendErrorMessage(playerid, "You are jailed, you can't use Portable Radio!");

    switch(PlayerData[playerid][pChannel])
    {
        case 911: if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "This is police department's freqency only.");
        case 992: if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "This is SAMD freqency only.");
        case 1922: if(GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "This is goverment freqency only.");
        case 789: if(GetFactionType(playerid) != FACTION_SAGS) return SendErrorMessage(playerid, "This is SAGS freqency only.");
    }
    static
        string[128];

    if(strlen(params) > 64)
    {
        format(string, sizeof(string), "%s: %.64s",ReturnName(playerid, 0), params);
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
        format(string, sizeof(string), "...%s",params[64]);
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
        SetPlayerChatBubble(playerid, string, X11_PLUM, 30.0, 3000);
    }
    else {
        SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, sprintf("%s: %s",ReturnName(playerid, 0), params));
        SetPlayerChatBubble(playerid, sprintf("* [RADIO] *\n%s", params), COLOR_SERVER, 30.0, 3000);
    }
    return 1;
}

CMD:createatm(playerid, params[])
{
    static
        id = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    id = ATM_Create(playerid);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for ATM machines.");

    PlayerData[playerid][pEditAtm] = id;
    PlayerData[playerid][pEditingMode] = ATM;
    EditDynamicObject(playerid, ATMData[id][atmObject]);
    SendServerMessage(playerid, "You have successfully created ATM ID: %d.", id);
    return 1;
}

CMD:destroyatm(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyatm [atm id]");

    if((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
        return SendErrorMessage(playerid, "You have specified an invalid ATM ID.");

    ATM_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed ATM ID: %d.", id);
    return 1;
}

CMD:disablecp(playerid)
{
    if(PlayerData[playerid][pDrivingTest])
        return SendErrorMessage(playerid, "You can't do this during your driving test.");

    new
        vehicleid = GetPlayerVehicleID(playerid);

    PlayerData[playerid][pCP] = 0;

    if(PlayerData[playerid][pSorting] != -1)
    {
        PlayerData[playerid][pSorting] = -1;
        PlayerData[playerid][pSortCrate] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    if(PlayerData[playerid][pMinedRock])
    {
        PlayerData[playerid][pMinedRock] = 0;
        PlayerData[playerid][pMineCount] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    if(PlayerData[playerid][pUnloading] != -1)
    {
        PlayerData[playerid][pUnloading] = -1;
        PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
    }
    if(PlayerData[playerid][pLoading])
    {
        PlayerData[playerid][pLoading] = 0;
        PlayerData[playerid][pLoadType] = 0;
    }
    if(PlayerData[playerid][pLoadCrate])
    {
        PlayerData[playerid][pLoadCrate] = 0;

        RemovePlayerAttachedObject(playerid, JOB_SLOT);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    }
    if(GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 8)
    {
        CoreVehicles[vehicleid][vehLoadType] = 0;
        DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);
        CoreVehicles[vehicleid][vehCrate] = INVALID_STREAMER_ID;
    }
    DisableWaypoint(playerid);
    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "You have disabled any active checkpoints.");
    return 1;
}
CMD:clearcp(playerid)
    return cmd_disablecp(playerid);

CMD:gmx(playerid, params[])
{
    new times;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(g_ServerRestart)
    {
        g_ServerRestart = 0;
        g_RestartTime = 0;
        TextDrawHideForAll(gServerTextdraws[1]);
        return SendClientMessageToAllEx(X11_LIGHTBLUE, "GMX: "RED"%s "WHITE"has postponed the server restart.", ReturnAdminName(playerid));
    }
    if(sscanf(params, "d", times))
        return SendSyntaxMessage(playerid, "/gmx [minute(s)]");

    g_ServerRestart = 1;
    g_RestartTime = gettime() + (times*60);
    TextDrawShowForAll(gServerTextdraws[1]);
    TextDrawSetString(gServerTextdraws[1], sprintf("Server restart schedule: ~y~%s", ConvertTimestamp(Time:g_RestartTime)));
    SendClientMessageToAllEx(X11_LIGHTBLUE, "GMX: "RED"%s "WHITE"has scheduled a server restart on "YELLOW"%s", ReturnAdminName(playerid), ConvertTimestamp(Time:g_RestartTime));
    return 1;
}

CMD:properties(playerid, params[])
{
    new count, string[700], userid;

    if(sscanf(params, "u", userid)) {
        foreach (new i : Houses) if(Iter_Contains(Houses, i) && House_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sHouse ID: %d | Address: %s | Location: %s\n", string, i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
            count++;
        }
        for (new i = 0; i < MAX_BUSINESSES; i ++) if(Business_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sBusiness ID: %d | Name: %s | Location: %s\n", string, i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));
            count++;
        }
        for (new i = 0; i < MAX_WORKSHOP; i ++) if(Workshop_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sWorkshop ID: %d | Name: %s | Location: %s\n", string, i, WorkshopData[i][wName], GetLocation(WorkshopData[i][wPos][0], WorkshopData[i][wPos][1], WorkshopData[i][wPos][2]));
            count++;
        }
        for(new i = 0; i != MAX_GARAGE; i++) if(Garage_IsOwner(playerid, i) && !GarageData[i][garageHouseLink]) {
            format(string,sizeof(string),"%sGarage ID: %d | Location: %s\n", string, i, GetLocation(GarageData[i][garageLoc][0], GarageData[i][garageLoc][1], GarageData[i][garageLoc][2]));
            count++;
        }
        foreach (new i : ApartRooms) if (ApartRoom_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sApartment ID: %d | Apartment Name: %s\n", string, ApartRoom[i][rApartID], ApartData[ApartRoom[i][rApartID]][aName]);
            count++;
        }
        foreach (new i : Farms) if (Farm_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sFarm ID: %d | Name: %s | Location: %s\n",string, i, FarmData[i][farmName], GetLocation(FarmData[i][farmPos][0], FarmData[i][farmPos][1], FarmData[i][farmPos][2]));
            count++;
        }
        foreach (new i : FurnStore) if (FurnStore_IsOwner(playerid, i)) {
            format(string,sizeof(string),"%sFurnstore ID: %d | Name: %s | Location: %s\n",string, i, storeData[i][storeName], GetLocation(storeData[i][storePos][0], storeData[i][storePos][1], storeData[i][storePos][2]));
            count++;
        }
        new FlatType[12], address[24];
        foreach (new i : FlatRooms) if (FlatRoom_IsOwner(playerid, i)) {
            Flat_GetType(i, FlatType);
            FlatRoom_GetAddress(i, address);
            format(string,sizeof(string),"%sFlat ID: %d | Type: %s | Address: %s\n",string,i,FlatType,address);
            count++;
        }
        if(!count) SendErrorMessage(playerid, "You don't own any properties.");
        else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Properties List", string, "Close", "");
        return 1;
    }

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!SQL_IsCharacterLogged(playerid)) return SendErrorMessage(playerid, "Invalid player id.");

    foreach (new i : Houses) if(House_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sHouse ID: %d | Address: %s | Location: %s\n", string, i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
        count++;
    }
    for (new i = 0; i < MAX_BUSINESSES; i ++) if(Business_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sBusiness ID: %d | Name: %s | Location: %s\n", string, i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));
        count++;
    }
    for (new i = 0; i < MAX_WORKSHOP; i ++) if(Workshop_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sWorkshop ID: %d | Name: %s | Location: %s\n", string, i, WorkshopData[i][wName], GetLocation(WorkshopData[i][wPos][0], WorkshopData[i][wPos][1], WorkshopData[i][wPos][2]));
        count++;
    }
    for(new i = 0; i != MAX_GARAGE; i++) if(Garage_IsOwner(userid, i) && !GarageData[i][garageHouseLink]) {
        format(string,sizeof(string),"%sGarage ID: %d | Location: %s\n", string, i, GetLocation(GarageData[i][garageLoc][0], GarageData[i][garageLoc][1], GarageData[i][garageLoc][2]));
        count++;
    }
    for (new i = 0; i != MAX_APARTMENT_ROOM; i++) if (ApartRoom_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sApartment ID: %d | Apartment Name: %s\n", string, ApartRoom[i][rApartID], ApartData[ApartRoom[i][rApartID]][aName]);
        count++;
    }
    foreach (new i : Farms) if (Farm_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sFarm ID: %d | Name: %s | Location: %s\n", string, i, FarmData[i][farmName], GetLocation(FarmData[i][farmPos][0], FarmData[i][farmPos][1], FarmData[i][farmPos][2]));
        count++;
    }
    foreach (new i : FurnStore) if (FurnStore_IsOwner(userid, i)) {
        format(string,sizeof(string),"%sFurnstore ID: %d | Name: %s | Location: %s\n",string, i, storeData[i][storeName], GetLocation(storeData[i][storePos][0], storeData[i][storePos][1], storeData[i][storePos][2]));
        count++;
    }
    new FlatType[12], flatBase;
    foreach (new i : FlatRooms) if (FlatRoom_IsOwner(playerid, i)) {
        flatBase = Flat_ReturnID(i);

        if (flatBase != -1) {
            Flat_GetType(i, FlatType);
            format(string,sizeof(string),"%sFlat ID: %d | Type: %s | Location: %s\n",string,i,FlatType,GetLocation(FlatData[flatBase][flatPos][0],FlatData[flatBase][flatPos][1],FlatData[flatBase][flatPos][2]));
        }
        count++;
    }
    if(!count) SendErrorMessage(playerid, "This player don't own any properties.");
    else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("%s Properties", ReturnName(userid, 0)), string, "Close", "");
    return 1;
}

CMD:sellproperty(playerid, params[]) {
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1395.85, -17.76, 1013.99))
        return SendErrorMessage(playerid, "You must be in City Hall to use this command");

    Dialog_Show(playerid, ListProperties, DIALOG_STYLE_LIST, "List Properties", "House\nBusiness\nGarage\nWorkshop\nFarm\nFurniture Store\nFlat", "Select", "Close");
    return 1;
}

CMD:propose(playerid, params[]) {
    if (PlayerData[playerid][pMarried])
        return SendErrorMessage(playerid, "You are already married");

    new userid;
    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/propose [playerid/name]");

    if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1964.02, -369.68, 1093.80))
        return SendErrorMessage(playerid, "You must in Jefferson Church");

    if (GetMoney(playerid) < 250)
        return SendErrorMessage(playerid, "You must have $250 for marriage");

    PlayerData[userid][pMarriageOffer] = playerid;
    SendCustomMessage(playerid, "MARRIAGE", "You've been proposed "YELLOW"%s", NormalName(userid));
    SendCustomMessage(userid, "MARRIAGE", YELLOW"%s "WHITE"has proposed to you, type \"/approve marriage\" to approved the marriage.", NormalName(playerid));
    return 1;
}

CMD:divorce(playerid, params[]) {
    if (!PlayerData[playerid][pMarried])
        return SendErrorMessage(playerid, "You've never been married");

    new userid;
    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/divorce [playerid/name]");

    if (!strcmp(PlayerData[playerid][pCoupleName], NormalName(userid)) && !strcmp(PlayerData[userid][pCoupleName], NormalName(playerid))) {
        PlayerData[userid][pDivorceOffer] = playerid;
        SendCustomMessage(playerid, "MARRIAGE", "You've been requested for divorce with "YELLOW"%s", NormalName(userid));
        SendCustomMessage(userid, "MARRIAGE", "%s has been requested for divorce to you, type \"/approve divorce\" to accepted the request", NormalName(playerid));
    } else SendErrorMessage(playerid, "You're not married with this player");
    return 1;
}

CMD:adivorce(playerid, params[]) {
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new userid;
    if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/adivorce [playerid/name]");

    foreach (new i : Player) if (!strcmp(PlayerData[i][pCoupleName], NormalName(userid))) {
        PlayerData[i][pMarried] = 0;
        PlayerData[userid][pMarried] = 0;
        format(PlayerData[i][pCoupleName], MAX_PLAYER_NAME, "None");
        format(PlayerData[userid][pCoupleName], MAX_PLAYER_NAME, "None");
    }
    SendCustomMessage(playerid,"MARRIAGE","You've been divorced "YELLOW"%s", NormalName(userid));
    SendCustomMessage(userid, "MARRIAGE", ""RED"%s"WHITE" has been divorced you from "YELLOW"%s", ReturnAdminName(playerid), NormalName(userid));
    return 1;
}

CMD:asellhouse(playerid, params[])
{
    new houseid = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", houseid))
        return SendSyntaxMessage(playerid, "/asellhouse [house ID]");

    if(!Iter_Contains(Houses, houseid))
        return SendErrorMessage(playerid, "You have specified an invalid house ID.");

    if(!HouseData[houseid][houseOwner])
        return SendErrorMessage(playerid, "This house owned by goverment.");

    HouseData[houseid][houseOwner] = 0;
    HouseData[houseid][houseMoney] = 0;
    format(HouseData[houseid][houseOwnerName], 32, "The State");

    new query[1024];
    for(new garage = 0; garage != MAX_GARAGE; garage++) if(GarageData[garage][garageExists] && GarageData[garage][garageHouseLink] == HouseData[houseid][houseID]) {
        GarageData[garage][garageOwnerId] = 0;
        GarageData[garage][garageOwner] = EOS;
        GarageData[garage][garageLock] = 1;
        GarageData[garage][garageInside] = 0;

        for (new j = 0; j < MAX_DYNAMIC_VEHICLES; j ++) if (Iter_Contains(DynamicVehicles, j) && VehicleData[j][cOwner] && VehicleData[j][cGarage] == GarageData[garage][garageID])
        {
            VehicleData[j][cGarage] = 0;
            VehicleData[j][cInt] = 0;
            VehicleData[j][cVw] = 0;
            VehicleData[j][cPos][0] = GarageData[garage][garageLoc][0];
            VehicleData[j][cPos][1] = GarageData[garage][garageLoc][1];
            VehicleData[j][cPos][2] = GarageData[garage][garageLoc][2];
            VehicleData[j][cPos][3] = GarageData[garage][garageLoc][3];

            Vehicle_Spawn(j);
        }

        format(query,sizeof(query),"UPDATE `player_vehicles` SET `Garage`= '0', `Pos1` = '%.01f', `Pos2` = '%.01f', `Pos3` = '%.01f', `Pos4` = '%.01f' WHERE `Garage`='%d'", GarageData[garage][garageLoc][0], GarageData[garage][garageLoc][1], GarageData[garage][garageLoc][2], GarageData[garage][garageLoc][3], GarageData[garage][garageID]);
        mysql_tquery(g_iHandle, query);

        Garage_Sync(garage);
    }

    House_RemoveAllItems(houseid);
    House_RemoveFurniture(houseid);
    HouseStructure_DeleteAll(houseid);
    House_RemoveAllGateAndObject(houseid);
    House_Refresh(houseid);
    House_Save(houseid);

    SendServerMessage(playerid, "You have sold house ID: %d.", houseid);
    Log_Write("logs/asell_log.txt", "[%s] %s menjual kepemilikan rumah id %d.", ReturnDate(), ReturnAdminName(playerid), houseid);
    return 1;
}

CMD:asellbiz(playerid, params[])
{
    new bizid = -1;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", bizid))
        return SendSyntaxMessage(playerid, "/asellbiz [business ID]");

    if((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
        return SendErrorMessage(playerid, "You have specified an invalid business ID.");

    BusinessData[bizid][bizOwner] = 0;

    if (Business_VehGetCount(bizid)) {
        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[bizid][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
            Vehicle_Delete(i);
        }
    }

    BusinessData[bizid][bizVault] = 0;
    BusinessEmployee_RemoveAll(bizid);
    Business_RemoveObjects(bizid);
    Business_Refresh(bizid);
    Business_Save(bizid);

    SendServerMessage(playerid, "You have sold business ID: %d.", bizid);

    Log_Write("logs/asell_log.txt", "[%s] %s menjual kepemilikan bisnis id %d.", ReturnDate(), ReturnAdminName(playerid), bizid);
    return 1;
}

CMD:grantweapon(playerid, params[])
{
    new userid, type;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 8);

    if(sscanf(params, "ud", userid, type)) {
        SendSyntaxMessage(playerid, "/grantweapon [playerid/PartOfName] [type]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]: "WHITE"1 = small gun, 2 = heavy gun, 3 = automatic gun");
        return 1;
    }

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if (type < 1 || type > 3) return SendErrorMessage(playerid, "Invalid type!");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a firearm license.");
    if(PlayerData[userid][pScore] < 2) return SendErrorMessage(playerid, "That player must be level 2.");
    if(PlayerData[userid][pFirearmLicenseExpired]) return SendErrorMessage(playerid, "That player already has a firearm license.");

    PlayerData[userid][pFirearmLicense] = 1;
    PlayerData[userid][pFirearmLicenseType] = type;
    PlayerData[userid][pFirearmLicenseExpired] = (gettime()+((24*3600)*30));
    
    SendServerMessage(playerid, "You have granted a firearm license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a firearm license by %s type %s expired date %s.", ReturnName(playerid, 0), GetFirearmLicType(playerid), ConvertTimestamp(Time:PlayerData[playerid][pFirearmLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has granted %s with a firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Write("logs/license_log.txt", "[%s] %s (%s) has given firearm license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:revokeweapon(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/revokeweapon [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't revoke your own firearm license.");
    if(!PlayerData[userid][pFirearmLicense]) return SendErrorMessage(playerid, "That player doesn't have a firearm license.");
    
    PlayerData[userid][pFirearmLicense] = 0;
    PlayerData[userid][pFirearmLicenseType] = 0;
    PlayerData[userid][pFirearmLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's firearm license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your firearm license was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has revoked %s's firearm license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:grantlumber(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/grantlumber [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a lumber license.");
    if(PlayerData[userid][pLumberLicenseExpired]) return SendErrorMessage(playerid, "That player already has a lumber license.");

    PlayerData[userid][pLumberLicense] = 1;
    PlayerData[userid][pLumberLicenseExpired] = (gettime()+((24*3600)*30));
    
    SendServerMessage(playerid, "You have granted a lumber license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a lumber license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[playerid][pLumberLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has granted %s with a lumber license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Write("logs/license_log.txt", "[%s] %s (%s) has given lumber license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:revokelumber(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be an officer member.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/revokelumber [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't revoke your own lumber license.");

    if(!PlayerData[userid][pLumberLicense])
        return SendErrorMessage(playerid, "That player doesn't have a lumber license.");

    PlayerData[userid][pLumberLicense] = 0;
    PlayerData[userid][pLumberLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's lumber license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your lumber license was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has revoked %s's lumber license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:granttrucker(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/granttrucker [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a trucker license.");
    if(PlayerData[userid][pTruckerLicenseExpired]) return SendErrorMessage(playerid, "That player already has a trucker license.");

    PlayerData[userid][pTruckerLicense] = 1;
    PlayerData[userid][pTruckerLicenseExpired] = (gettime()+((24*3600)*30));
    
    SendServerMessage(playerid, "You have granted a trucker license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a trucker license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[userid][pTruckerLicenseExpired]));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has granted %s with a trucker license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    Log_Write("logs/license_log.txt", "[%s] %s (%s) has given trucker license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:revoketrucker(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be an officer member.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/revoketrucker [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't revoke your own trucker license.");

    if(!PlayerData[userid][pTruckerLicense])
        return SendErrorMessage(playerid, "That player doesn't have a trucker license.");

    PlayerData[userid][pTruckerLicense] = 0;
    PlayerData[userid][pTruckerLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's trucker license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your trucker license was revoked by %s.", ReturnName(playerid, 0));

    //SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has revoked %s's trucker license.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:grantboat(playerid, params[]) {
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/grantboat [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a boat license.");
    if(PlayerData[userid][pBoatLicenseExpired]) return SendErrorMessage(playerid, "That player already has a boat license.");

    PlayerData[userid][pBoatLicense] = 1;
    PlayerData[userid][pBoatLicenseExpired] = (gettime()+((24*3600)*30));
    
    SendServerMessage(playerid, "You have granted a boat license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a boat license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[userid][pBoatLicenseExpired]));

    Log_Write("logs/license_log.txt", "[%s] %s (%s) has given boat license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:revokeboat(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be an officer member.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/revokeboat [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't revoke your own Boat license.");

    if(!PlayerData[userid][pBoatLicense])
        return SendErrorMessage(playerid, "That player doesn't have a Boat license.");

    PlayerData[userid][pBoatLicense] = 0;
    PlayerData[userid][pBoatLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's Boat license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your Boat license was revoked by %s.", ReturnName(playerid, 0));
    return 1;
}

CMD:grantflying(playerid, params[]) {
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be an officer member.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10) return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);
    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/grantflying [playerid/PartOfName]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't grant yourself a flying license.");
    if(PlayerData[userid][pFlyingLicenseExpired]) return SendErrorMessage(playerid, "That player already has a flying license.");

    PlayerData[userid][pFlyingLicense] = 1;
    PlayerData[userid][pFlyingLicenseExpired] = (gettime()+((24*3600)*30));
    
    SendServerMessage(playerid, "You have granted a flying license to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "You've been granted a flying license by %s expired date %s.", ReturnName(playerid, 0), ConvertTimestamp(Time:PlayerData[userid][pFlyingLicenseExpired]));

    Log_Write("logs/license_log.txt", "[%s] %s (%s) has given flying license to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], ReturnName(userid, 0), AccountData[userid][pIP]);
    return 1;
}

CMD:revokeflying(playerid, params[])
{
    new userid;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be an officer member.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10)
        return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 10);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/revokeflying [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't revoke your own Flying license.");

    if(!PlayerData[userid][pFlyingLicense])
        return SendErrorMessage(playerid, "That player doesn't have a Flying license.");

    PlayerData[userid][pFlyingLicense] = 0;
    PlayerData[userid][pFlyingLicenseExpired] = 0;

    SendServerMessage(playerid, "You have revoked %s's Flying license.", ReturnName(userid, 0));
    SendServerMessage(userid, "Your Flying license was revoked by %s.", ReturnName(playerid, 0));
    return 1;
}

CMD:showidcard(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/showidcard [playerid/PartOfName]");
    if (!PlayerData[playerid][pIDCard]) return SendErrorMessage(playerid, "You don't have ID Card, you can create one at City Hall.");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    SendClientMessageEx(userid, X11_LIGHTBLUE, "================ "GREEN"San Andreas Identification Card "LIGHTBLUE"================");
    SendCustomMessage(userid, "Registered number","SA%07d", PlayerData[playerid][pID]);
    SendCustomMessage(userid, "Name","%s", ReturnName(playerid));
    SendCustomMessage(userid, "Birthdate","%s", PlayerData[playerid][pBirthdate]);
    SendCustomMessage(userid, "Gender","%s", (PlayerData[playerid][pGender] == 2) ? ("Female") : ("Male"));
    SendCustomMessage(userid, "Residence","%s", GetPlayerHouseAddress(playerid));
    SendCustomMessage(userid, "Origin","%s", PlayerData[playerid][pOrigin]);
    return 1;
}

CMD:createidcard(playerid, params[]) {
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1396.12, -29.39, 1013.99))
        return SendErrorMessage(playerid, "You must be in City Hall to use this command.");

    if (PlayerData[playerid][pIDCard])
        return SendErrorMessage(playerid, "You already have ID Card.");

    if (GetMoney(playerid) < 250)
        return SendErrorMessage(playerid, "You need $250 to creating ID Card.");

    PlayerData[playerid][pIDCard] = 1;
    GiveMoney(playerid, -250);
    for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_GOV) {
        FactionData[fac][factionMoney] += 250;
        FactionData[fac][factionDepositMoney] = 250;
        format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Create ID Card");
    }
    SendCustomMessage(playerid, "GOV", "Your ID Card has been created, type '/showidcard' to see your ID Card.");
    return 1;
}

CMD:jetpack(playerid, params[])
{
    new userid;

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
    {
        PlayerData[playerid][pJetpack] = 1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    }
    else
    {
        PlayerData[userid][pJetpack] = 1;

        SetPlayerSpecialAction(userid, SPECIAL_ACTION_USEJETPACK);
        SendServerMessage(playerid, "You have spawned a jetpack for %s.", ReturnName(userid, 0));
    }
    return 1;
}

CMD:setfuel(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        id = 0,
        Float:amount;
    if(sscanf(params, "df", id, amount))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            id = GetPlayerVehicleID(playerid);

            if(sscanf(params, "f", amount))
                return SendSyntaxMessage(playerid, "/setfuel [amount]");

            if(amount < 0)
                return SendErrorMessage(playerid, "The amount can't be below 0.");

            CoreVehicles[id][vehFuel] = amount;
            SendServerMessage(playerid, "You have set the fuel of vehicle ID: %d to %.1f percent.", id, amount);
            return 1;
        }
        else return SendSyntaxMessage(playerid, "/setfuel [vehicle id] [amount]");
    }
    if(!IsValidVehicle(id))
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    if(amount < 0)
        return SendErrorMessage(playerid, "The amount can't be below 0.");

    CoreVehicles[id][vehFuel] = amount;
    SendServerMessage(playerid, "You have set the fuel of vehicle ID: %d to %.1f percent.", id, amount);
    return 1;
}

/*CMD:setfuelall(playerid, params[])
{
    static
        Float:amount;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "f", amount))
        return SendSyntaxMessage(playerid, "/setfuelall [amount]");

    if(amount < 0)
        return SendErrorMessage(playerid, "The amount can't be below 0.");

    for (new i, j = GetVehiclePoolSize(); i <= j; i++) if(IsValidVehicle(i)) {
        CoreVehicles[i][vehFuel] = amount;
    }
    SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s refill all vehicle for %.1f.", ReturnAdminName(playerid), amount);
    return 1;
}*/

CMD:setcarhp(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    static
        id = 0,
        Float:amount;

    if(sscanf(params, "df", id, amount))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            id = GetPlayerVehicleID(playerid);

            if(sscanf(params, "f", amount))
                return SendSyntaxMessage(playerid, "/setcarhp [amount]");

            if(amount < 0.0)
                return SendErrorMessage(playerid, "The amount can't be below 0.");

            SetVehicleHealth(id, amount);
            SendServerMessage(playerid, "You have set the health of vehicle ID: %d to %.1f.", id, amount);
            return 1;
        }
        else return SendSyntaxMessage(playerid, "/setcarhp [vehicle id] [amount]");
    }
    if(!IsValidVehicle(id))
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    if(amount < 0.0)
        return SendErrorMessage(playerid, "The amount can't be below 0.");

    SetVehicleHealth(id, amount);
    SendServerMessage(playerid, "You have set the health of vehicle ID: %d to %.1f.", id, amount);
    return 1;
}

CMD:creategarbage(playerid, params[])
{
    static
        id = -1,
        type;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", type))
    {
        SendSyntaxMessage(playerid, "/creategarbage [type]");
        SendClientMessage(playerid, X11_YELLOW_2, "[TYPES]:"WHITE" 1: Dumpster | 2: Trash Can");
        return 1;
    }
    if(type < 1 || type > 2)
        return SendErrorMessage(playerid, "The specified type can't be below 1 or above 2.");

    id = Garbage_Create(playerid, type);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for garbage bins.");

    SendServerMessage(playerid, "You have successfully created garbage bin ID: %d.", id);
    return 1;
}

CMD:destroygarbage(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroygarbage [garbage id]");

    if((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
        return SendErrorMessage(playerid, "You have specified an invalid garbage ID.");

    Garbage_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed garbage bin ID: %d.", id);
    return 1;
}

CMD:takebag(playerid, params[])
{
    new
        id,
        vehicleid = GetPlayerVehicleID(playerid);

    if((id = Garbage_Nearest(playerid)) == -1)
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Anda tidak berada di dekat tong sampah.", 2000, 1);

    if(!IsPlayerInAnyVehicle(playerid))
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Anda tidak berada di dalam kendaraan.", 2000, 1);

    if(!IsVehicleTrashmaster(vehicleid))
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Ini bukan mobil khusus untuk pekerjaan trashman.", 2000, 1);

    if(GarbageData[id][garbageCapacity] < 1)
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Tong sampah ini tidak ada isinya.", 2000, 1);

    if(CoreVehicles[vehicleid][vehTrash] > MAX_SAMPAH)
    {
        SetPlayerWaypoint(playerid, "Dump Garbage", 2228.52, -2175.41, 13.55);
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Kapasitas kendaraan sudah penuh, silahkan di antar ke tempat pengumpulan sampah.", 2000, 1);
    }
     
    if((GarbageData[id][garbageCapacity] + CoreVehicles[vehicleid][vehTrash]) <= 50) 
    {
        CoreVehicles[vehicleid][vehTrash] += GarbageData[id][garbageCapacity];
        ShowPlayerFooter(playerid, sprintf("~g~Trashmaster: ~w~Anda mendapat %d kantong sampah, cari ke lokasi lainnya untuk -~n~mendapatkan lebih banyak lagi.", GarbageData[id][garbageCapacity], CoreVehicles[vehicleid][vehTrash]), 3000, 1);

        GarbageData[id][garbageCapacity] = 0;
    }
    else
    {
        ShowPlayerFooter(playerid, sprintf("~g~Trashmaster: ~w~Kapasitas mobil telah penuh terisi kantong sampah, ikuti checkpoint untuk mendapatkan upah."), 3000, 1);
        SetPlayerWaypoint(playerid, "Dump Garbage", 2228.52, -2175.41, 13.55);

        GarbageData[id][garbageCapacity] -= (MAX_SAMPAH-CoreVehicles[vehicleid][vehTrash]);
        CoreVehicles[vehicleid][vehTrash] = MAX_SAMPAH;
    }
 
    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_trash][1], sprintf("%d/%d", CoreVehicles[vehicleid][vehTrash], MAX_SAMPAH)); 
    SetPlayerProgressBarValue(playerid, PlayerData[playerid][trash], CoreVehicles[vehicleid][vehTrash]);

    Garbage_Save(id);
    return 1;
}

CMD:dumpgarbage(playerid, params[])
{
    new
        vehicleid = GetPlayerVehicleID(playerid);

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) 
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Selain pengemudi tidak dapat menggunakan perintah ini!.", 2000, 1);
    
    if(!IsVehicleTrashmaster(vehicleid)) 
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Anda harus mengendarai mobil Trashmaster.", 2000, 1);
    
    if(!IsPlayerInRangeOfPoint(playerid, 4, 2228.52, -2175.41, 13.55)) 
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Anda tidak berada di lokasi pemungutan sampah.", 2000, 1);
    
    if(CoreVehicles[vehicleid][vehTrash] < 1) 
        return ShowPlayerFooter(playerid, "~g~Trashmaster: ~w~Sampah di mobil ini tidak ada.", 2000, 1);

    for(new i; i < MAX_GARBAGE_BINS; i++) if(GarbageData[i][garbageExists]) {
        RemovePlayerMapIcon(playerid, i);
    }

    HidePlayerProgressBar(playerid, PlayerData[playerid][trash]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_trash][0]);
    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_trash][1]);

    ShowPlayerFooter(playerid, sprintf("~g~Trashmaster: ~w~Anda mendapatkan ~g~%s ~w~dari ~y~%d ~w~sampah yang terkumpul.", FormatNumber((CoreVehicles[vehicleid][vehTrash]*6)), CoreVehicles[vehicleid][vehTrash]), 3000, 1);

    new bonus = RandomEx(25, 100);
    AddPlayerSalary(playerid, (CoreVehicles[vehicleid][vehTrash]*6)+bonus, "Trashmaster Sidejob + Bonus");
    DisablePlayerCheckpoint(playerid);

    CoreVehicles[vehicleid][vehTrash] = 0;
    PlayerData[playerid][pWork] = 1500;
    PlayerData[playerid][pTrashmasterJob] = 0;

    SetVehicleToRespawn(vehicleid);
    RemovePlayerFromVehicle(playerid);
    return 1;
}

CMD:dance(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/dance [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
        case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
        case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
        case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
    }
    return 1;
}

CMD:handsup(playerid)
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
    return 1;
}

CMD:animhelp(playerid)
{
    SendCustomMessage(playerid, "ANIMATION", "/dance, /handsup, /bat, /slap, /bar, /wash, /lay, /workout, /blowjob, /bomb.");
    SendCustomMessage(playerid, "ANIMATION", "/carry, /crack, /sleep, /fall, /jump, /deal, /dancing, /eating, /puke, /gsign, /chat.");
    SendCustomMessage(playerid, "ANIMATION", "/goggles, /spray, /throw, /swipe, /office, /kiss, /knife, /cpr, /scratch, /point.");
    SendCustomMessage(playerid, "ANIMATION", "/cheer, /wave, /strip, /smoke, /reload, /taichi, /wank, /cower, /drunk.");
    SendCustomMessage(playerid, "ANIMATION", "/cry, /tired, /sit, /crossarms, /fucku, /walk, /piss, /anim, /stopanim.");
    return 1;
}
CMD:animlist(playerid)
    return cmd_animhelp(playerid);

CMD:bat(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/bat [1-5]");

    if(type < 1 || type > 5)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "BASEBALL", "Bat_1", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "BASEBALL", "Bat_2", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "BASEBALL", "Bat_3", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "BASEBALL", "Bat_IDLE", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:slap(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "BASEBALL", "Bat_M", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:bar(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/bar [1-8]");

    if(type < 1 || type > 8)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "BAR", "Barserve_glass", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "BAR", "Barserve_in", 4.1, 0, 0, 0, 0, 0, 1);
        case 5: ApplyAnimation(playerid, "BAR", "Barserve_order", 4.1, 0, 0, 0, 0, 0, 1);
        case 6: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0, 1);
        case 7: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0, 1);
        case 8: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:wash(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:lay(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/lay [1-5]");

    if(type < 1 || type > 5)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:workout(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/workout [1-7]");

    if(type < 1 || type > 7)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "benchpress", "gym_bp_down", 4.1, 0, 0, 0, 1, 0, 1);
        case 3: ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 1, 0, 1);
        case 5: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_A", 4.1, 0, 0, 0, 1, 0, 1);
        case 6: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 0, 0, 1, 0, 1);
        case 7: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 0, 0, 0, 1, 0, 1);
    }
    return 1;
}

CMD:blowjob(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/blowjob [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:bomb(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:carry(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/carry [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
        case 5: ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0, 1);
        case 6: ApplyAnimation(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:crack(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/crack [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
        case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0, 1);
        case 4: ApplyAnimationEx(playerid, "CRACK", "crckidle1", 4.1, 0, 0, 0, 1, 0, 1);
        case 5: ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 0, 0, 1, 0, 1);
        case 6: ApplyAnimationEx(playerid, "CRACK", "crckidle3", 4.1, 0, 0, 0, 1, 0, 1);
    }
    return 1;
}

CMD:sleep(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/sleep [1-2]");

    if(type < 1 || type > 2)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0, 1);
        case 2: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 1, 0, 1);
    }
    return 1;
}

CMD:fall(playerid, params[]) {
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/fall [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0, 1);
        case 2: ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.1, 0, 0, 0, 1, 0, 1);
        case 3: ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.1, 0, 0, 0, 1, 0, 1);
        case 4: ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 0, 0, 1, 0, 1);
    }
    return 1;
}

CMD:piss(playerid) {
    if (!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
    return 1;
}

CMD:jump(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:deal(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/deal [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
        case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:dancing(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/dancing [1-10]");

    if(type < 1 || type > 10)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "DANCING", "dance_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0, 1);
        case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0, 1);
        case 7: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0, 1);
        case 8: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0, 1);
        case 9: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0, 1);
        case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:eating(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/eating [1-3]");

    if(type < 1 || type > 3)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:puke(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:gsign(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/gsign [1-15]");

    if(type < 1 || type > 15)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0, 1);
        case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0, 1);
        case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0, 1);
        case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0, 1);
        case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0, 1);
        case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
        case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
        case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0, 1);
        case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.1, 0, 0, 0, 0, 0, 1);
        case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0, 1);
        case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 0, 0, 0, 0, 0, 1);
        case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:chat(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/chat [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 0, 0, 0, 0, 0, 1);
        case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 0, 0, 0, 0, 0, 1);
        case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:goggles(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:spray(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:throw(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:swipe(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:office(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/office [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:kiss(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/kiss [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
        case 5: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
        case 6: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:knife(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/knife [1-8]");

    if(type < 1 || type > 8)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "KNIFE", "knife_1", 4.1, 0, 1, 1, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "KNIFE", "knife_2", 4.1, 0, 1, 1, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "KNIFE", "knife_3", 4.1, 0, 1, 1, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "KNIFE", "knife_4", 4.1, 0, 1, 1, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "KNIFE", "WEAPON_knifeidle", 4.1, 1, 0, 0, 0, 0, 1);
        case 6: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Player", 4.1, 0, 0, 0, 0, 0, 1);
        case 7: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.1, 0, 0, 0, 0, 0, 1);
        case 8: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:cpr(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0, 1);
    return 1;
}

CMD:scratch(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/scratch [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:point(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/point [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0, 1);
        case 2: ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:cheer(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/cheer [1-8]");

    if(type < 1 || type > 8)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
        case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.1, 0, 0, 0, 0, 0, 1);
        case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.1, 0, 0, 0, 0, 0, 1);
        case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:strip(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/strip [1-7]");

    if(type < 1 || type > 7)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "STRIP", "strip_A", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "STRIP", "strip_B", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "STRIP", "strip_C", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "STRIP", "strip_D", 4.1, 1, 0, 0, 0, 0, 1);
        case 5: ApplyAnimationEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
        case 6: ApplyAnimationEx(playerid, "STRIP", "strip_F", 4.1, 1, 0, 0, 0, 0, 1);
        case 7: ApplyAnimationEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:wave(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/wave [1-3]");

    if(type < 1 || type > 3)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:smoke(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/smoke [1-3]");

    if(type < 1 || type > 3)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "SMOKING", "M_smkstnd_loop", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:reload(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/reload [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
        case 4: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:taichi(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:wank(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/wank [1-3]");

    if(type < 1 || type > 3)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimation(playerid, "PAULNMAC", "wank_in", 4.1, 0, 0, 0, 0, 0, 1);
        case 3: ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.1, 0, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:cower(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimationEx(playerid, "PED", "cower", 4.1, 0, 0, 0, 1, 0, 1);
    return 1;
}

CMD:drunk(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimationEx(playerid, "PED", "WALK_drunk", 4.1, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:cry(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:tired(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/tired [1-2]");

    if(type < 1 || type > 2)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
        case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
    }
    return 1;
}

CMD:sit(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/sit [1-6]");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 0);
        case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 1, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
        case 5: ApplyAnimationEx(playerid, "MISC", "Seat_talk_02", 4.1, 1, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
    }
    return 1;
}

CMD:crossarms(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/crossarms [1-4]");

    if(type < 1 || type > 4)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 0, 1);
        case 2: ApplyAnimationEx(playerid, "GRAVEYARD", "prst_loopa", 4.1, 1, 0, 0, 0, 0, 1);
        case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0, 1);
        case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 0, 1);
    }
    return 1;
}

CMD:fucku(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
    return 1;
}

CMD:walk(playerid, params[])
{
    new type;

    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You can't perform animations at the moment.");

    if(sscanf(params, "d", type))
        return SendSyntaxMessage(playerid, "/walk [1-16]");

    if(type < 1 || type > 17)
        return SendErrorMessage(playerid, "Invalid type specified.");

    switch (type) {
        case 1: ApplyAnimationEx(playerid, "FAT", "FatWalk", 4.1, 1, 1, 1, 1, 1, 1);
        case 2: ApplyAnimationEx(playerid, "MUSCULAR", "MuscleWalk", 4.1, 1, 1, 1, 1, 1, 1);
        case 3: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1, 1);
        case 4: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
        case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);
        case 7: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
        case 8: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
        case 9: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
        case 10: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
        case 11: ApplyAnimationEx(playerid, "PED", "WALK_wuzi", 4.1, 1, 1, 1, 1, 1, 1);
        case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1, 1);
        case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
        case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1, 1);
        case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1, 1);
        case 16: ApplyAnimationEx(playerid, "PED", "WOMAN_walkshop", 4.1, 1, 1, 1, 1, 1, 1);
    }
    return 1;
}

CMD:acolorcar(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        color1,
            color2;

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You are not in any vehicle.");

    if(sscanf(params, "dd", color1, color2))
        return SendSyntaxMessage(playerid, "/acolorcar [color 1] [color 2]");

    if(color1 < 0 || color1 > 255)
        return SendErrorMessage(playerid, "The first color can't be below 0 or above 255.");

    if(color2 < 0 || color2 > 255)
        return SendErrorMessage(playerid, "The second color can't be below 0 or above 255.");

    SetVehicleColorEx(GetPlayerVehicleID(playerid), color1, color2);
    SendServerMessage(playerid, "You have changed the colors of this vehicle to %d, %d.", color1, color2);
    return 1;
}

CMD:givemoney(playerid, params[]) {
    if(AccountData[playerid][pAdmin] == 9 && !IsPlayerAdmin(playerid))
        return SendErrorMessage(playerid, "You don't have permission to use this command!");

    new userid, amount;
    if (sscanf(params, "ud", userid, amount))
        return SendSyntaxMessage(playerid, "/givemoney [playerid] [amount]");

    GiveMoney(userid, amount);
    SendServerMessage(userid, "You has received %d money from Admin %s.", amount, ReturnAdminName(playerid));
    SendServerMessage(playerid, "You've given %s %d money.", ReturnName(userid), amount);
    return 1;
}

CMD:panel(playerid, params[])
{
    if(AccountData[playerid][pAdmin] == 9 && !IsPlayerAdmin(playerid))
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if(g_ServerLocked)
        Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Unlock Server\nSet Hostname\nExecute Query\nServer Info", "Select", "Cancel");

    else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Lock Server\nSet Hostname\nExecute Query\nServer Info", "Select", "Cancel");
    return 1;
}

CMD:spawnitem(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(isnull(params))
        return SendSyntaxMessage(playerid, "/spawnitem [item name] (/itemlist for a list)");

    static
        Float:x,
        Float:y,
        Float:z;

    GetPlayerPos(playerid, x, y, z);

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
    {
        new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

        if(id == -1)
        return SendErrorMessage(playerid, "The server has reached a limit for spawned items.");

        Log_Write("logs/spawnitem.txt", "[%s] %s has spawned %s", ReturnDate(), ReturnName(playerid, 0), g_aInventoryItems[i][e_InventoryItem]);
        SendServerMessage(playerid, "You have spawned a \"%s\" (type /setquantity to set the quantity).", g_aInventoryItems[i][e_InventoryItem]);
        return 1;
    }
    SendErrorMessage(playerid, "Invalid item name (use /itemlist for a list).");
    return 1;
}

CMD:setquantity(playerid, params[])
{
    static
        id = -1,
        amount;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if((id = Item_Nearest(playerid)) == -1)
        return SendErrorMessage(playerid, "You are not in range of any spawned items.");

    if(sscanf(params, "d", amount))
        return SendSyntaxMessage(playerid, "/setquantity [amount]");

    if(amount < 1)
        return SendErrorMessage(playerid, "The specified amount can't be below 1");

    Item_SetQuantity(id, amount);
    Log_Write("logs/spawnitem.txt", "[%s] %s has set the quantity of %s to %d.", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem], amount);
    SendServerMessage(playerid, "You have set the quantity of \"%s\" to %d.", DroppedItems[id][droppedItem], amount);
    return 1;
}

CMD:destroyitem(playerid, params[])
{
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    static
        id = -1;

    if((id = Item_Nearest(playerid)) == -1)
        return SendErrorMessage(playerid, "You are not in range of any spawned items.");

    SendServerMessage(playerid, "You have deleted a \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    Log_Write("logs/destroyitem.txt", "[%s] %s has destroyed a %s item.", DroppedItems[id][droppedItem]);
    return 1;
}

CMD:boombox(playerid, params[])
{
    static
        type[24],
        string[128];

    if(!Inventory_HasItem(playerid, "Boombox"))
        return SendErrorMessage(playerid, "You don't have a boombox on you.");

    if(sscanf(params, "s[24]S()[128]", type, string))
    {
        SendSyntaxMessage(playerid, "/boombox [name]");
        SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" place, pickup, url, list");
        return 1;
    }
    if(!strcmp(type, "place", true))
    {
        if(BoomboxData[playerid][boomboxPlaced])
            return SendErrorMessage(playerid, "You have placed a boombox already.");

        if(Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
            return SendErrorMessage(playerid, "You are in range of another boombox already.");

        if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must exit the vehicle first.");

        Boombox_Place(playerid);
        SendServerMessage(playerid, "You have placed your boombox (use \"/boombox\" for options).");
    }
    else if(!strcmp(type, "pickup", true))
    {
        if(!BoomboxData[playerid][boomboxPlaced])
            return SendErrorMessage(playerid, "You don't have a boombox deployed.");

        if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
            return SendErrorMessage(playerid, "You are not in range of your boombox.");

        Boombox_Destroy(playerid);
    }
    else if(!strcmp(type, "url", true))
    {
        if(sscanf(string, "s[128]", string))
            return SendSyntaxMessage(playerid, "/boombox [url] [song url]");

        if(!BoomboxData[playerid][boomboxPlaced])
            return SendErrorMessage(playerid, "You don't have a boombox deployed.");

        if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
            return SendErrorMessage(playerid, "You are not in range of your boombox.");

        Boombox_SetURL(playerid, string);
        SendServerMessage(playerid, "You have been turns the URL of Boombox.");
    }
    else if(!strcmp(type, "list", true))
    {
        if(!BoomboxData[playerid][boomboxPlaced])
            return SendErrorMessage(playerid, "You don't have a boombox deployed.");

        if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
            return SendErrorMessage(playerid, "You are not in range of your boombox.");

        new output[1024];
        for (new i = 0; i < 34; i ++) {
            strcat(output, sprintf("%s\n", RadioStation[i][Name]));
        }
        Dialog_Show(playerid, RadioList, DIALOG_STYLE_LIST, "Radio List", output, "Select", "Close");
    }
    return 1;
}

Dialog:RadioList(playerid, response, listitem, inputtext[]) {
    if (response) {
        new url[128];
        format(url,sizeof(url),"%s",RadioStation[listitem][Link]);

        if(BoomboxData[playerid][boomboxPlaced]) {
            Boombox_SetURL(playerid, url);
            SendCustomMessage(playerid, "RADIO", "You have been turns the URL of Boombox to: "YELLOW"%s", inputtext);
            return 1;
        }

        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehicleRadio(GetPlayerVehicleID(playerid), url);
            SendCustomMessage(playerid,"RADIO","You've been set the radio to: "YELLOW"%s", inputtext);
            return 1;
        }
    }
    return 1;
}

CMD:adestroybox(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    foreach (new i : Player) if(BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
        Boombox_Destroy(i);

        SendServerMessage(playerid, "You have destroyed %s's boombox.", ReturnName(i, 0));
        return SendServerMessage(i, "%s has destroyed your boombox.", ReturnName(playerid, 0));
    }
    SendErrorMessage(playerid, "You are not in range of any boombox.");
    return 1;
}

CMD:search(playerid, params[])
{
    new userid;

    if(sscanf(params, "u", userid))
    {
        SendSyntaxMessage(playerid, "/search [playerid/PartOfName]");
        return 1;
    }
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(Inventory_HasItem(userid, "Marijuana Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana Seeds (%d)", Inventory_Count(userid, "Marijuana Seeds"));

    if(Inventory_HasItem(userid, "Cocaine Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine Seeds (%d)", Inventory_Count(userid, "Cocaine Seeds"));

    if(Inventory_HasItem(userid, "Heroin Opium Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin Opium Seeds (%d)", Inventory_Count(userid, "Heroin Opium Seeds"));

    if(Inventory_HasItem(userid, "Steroids"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Steroids (%d)", Inventory_Count(userid, "Steroids"));

    if(Inventory_HasItem(userid, "Marijuana"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana (%d)", Inventory_Count(userid, "Marijuana"));

    if(Inventory_HasItem(userid, "Cocaine"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine (%d)", Inventory_Count(userid, "Cocaine"));

    if(Inventory_HasItem(userid, "Heroin"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin (%d)", Inventory_Count(userid, "Heroin"));

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s starts to search %s for illegal items.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

/*CMD:searchbp(playerid, params[])
{
    new userid, backpack;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/searchbp [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(!Inventory_HasItem(userid, "Backpack") || (backpack = GetPlayerBackpack(userid)) == -1)
        return SendErrorMessage(playerid, "That player doesn't have a backpack.");

    if(Backpack_HasItem(backpack, "Marijuana Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana Seeds (%d)", Backpack_Count(backpack, "Marijuana Seeds"));

    if(Backpack_HasItem(backpack, "Cocaine Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine Seeds (%d)", Backpack_Count(backpack, "Cocaine Seeds"));

    if(Backpack_HasItem(backpack, "Heroin Opium Seeds"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin Opium Seeds (%d)", Backpack_Count(backpack, "Heroin Opium Seeds"));

    if(Backpack_HasItem(backpack, "Steroids"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Steroids (%d)", Backpack_Count(backpack, "Steroids"));

    if(Backpack_HasItem(backpack, "Marijuana"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Marijuana (%d)", Backpack_Count(backpack, "Marijuana"));

    if(Backpack_HasItem(backpack, "Cocaine"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Cocaine (%d)", Backpack_Count(backpack, "Cocaine"));

    if(Backpack_HasItem(backpack, "Heroin"))
        SendClientMessageEx(playerid, X11_TOMATO_1, "** Heroin (%d)", Backpack_Count(backpack, "Heroin"));

    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has searched %s's backpack for illegal items.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}*/

CMD:take(playerid, params[])
{
    new
        userid,
        string[128];

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/take [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(ReturnWeaponCount(userid) > 0)
        strcat(string, "Take Weapons\n");

    if(Inventory_HasItem(userid, "Marijuana Seeds") || Inventory_HasItem(userid, "Cocaine Seeds") || Inventory_HasItem(userid, "Heroin Opium Seeds"))
        strcat(string, "Take Seeds\n");

    if(Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "Cocaine") || Inventory_HasItem(userid, "Heroin") || Inventory_HasItem(userid, "Steroids"))
        strcat(string, "Take Drugs\n");

    if(Inventory_HasItem(userid, "Portable Radio"))
        strcat(string, "Take Radio\n");

    if(Inventory_HasItem(userid, "Materials"))
        strcat(string, "Take Materials\n");

    if(PlayerData[userid][pDrivingLicense])
        strcat(string, "Take Driving License\n");

    if(PlayerData[userid][pFirearmLicense])
        strcat(string, "Take Firearm License\n");

    if(PlayerData[userid][pBusinessLicense])
        strcat(string, "Take Business License\n");

    if(PlayerData[userid][pLumberLicense])
        strcat(string, "Take Lumber License\n");

    if(PlayerData[userid][pTruckerLicense])
        strcat(string, "Take Trucker License\n");

    if(PlayerData[userid][pWorkshopLicense])
        strcat(string, "Take Workshop License\n");

    if(PlayerData[userid][pFarmLicense])
        strcat(string, "Take Farm License\n");

    if(PlayerData[userid][pBoatLicense])
        strcat(string, "Take Boat License\n");

    if(PlayerData[userid][pFlyingLicense])
        strcat(string, "Take Flying License\n");

    if(!strlen(string))
        return SendErrorMessage(playerid, "This player has no illegal items to take.");
 
    PlayerData[playerid][pTakeItems] = userid;
    Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Take Items", string, "Take", "Cancel");
    return 1;
}

CMD:kickdoor(playerid, params[])
{
    static
        id = -1;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    if((id = House_Nearest(playerid)) != -1)
    {
        if(!HouseData[id][houseLocked])
        return SendErrorMessage(playerid, "This house is already unlocked.");

        ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

        SendServerMessage(playerid, "You are trying to kick the house door!");
        SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
    }
    else if((id = Business_Nearest(playerid)) != -1)
    {
        if(!BusinessData[id][bizLocked])
                return SendErrorMessage(playerid, "This business is already unlocked.");

        ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attempts to kick the business door down.", ReturnName(playerid, 0, 1));
        SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
    }
    else {
        SendErrorMessage(playerid, "You must be in range of a house or business.");
    }
    return 1;
}

CMD:checktrunk(playerid, params[]) {
    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    new
        id = -1;

    if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1) {
        if(PlayerData[playerid][pInjured]) 
            return SendErrorMessage(playerid, "You're injured.");
        
        if(IsPlayerInAnyVehicle(playerid)) 
            return SendErrorMessage(playerid, "You must exit the vehicle first.");
        
        if(!IsDoorVehicle(VehicleData[id][cVehicle])) 
            return SendErrorMessage(playerid, "This vehicle doesn't have a trunk.");
        
        if(!GetTrunkStatus(VehicleData[id][cVehicle])) 
            return SendErrorMessage(playerid, "You must open trunk the vehicle first.");

        Car_ShowTrunk(playerid);
    } else SendErrorMessage(playerid, "You are not in range of any vehicle.");
    return 1;
}

CMD:friskhouse(playerid, params[]) {
    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    static
        houseid = -1;

    if((houseid = House_Inside(playerid)) != -1) {
        House_OpenStorage(playerid, houseid);
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of any house interior.");
    return 1;
}

CMD:friskapart(playerid, params[]) {
    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You must be a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You must duty first.");

    static
        roomid = -1;

    if((roomid = ApartRoomInt_Nearest(playerid)) != -1) {
        Room_OpenStorage(playerid, roomid);
        return 1;
    }
    SendErrorMessage(playerid, "You are not in range of any Apartment Room interior.");
    return 1;
}

/*CMD:buyrack(playerid, params[])
{
    new houseid = House_Inside(playerid);

    if(houseid == -1 || !House_IsOwner(playerid, houseid))
        return SendErrorMessage(playerid, "You are not in range of your house interior.");

    if(isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
        return SendSyntaxMessage(playerid, "/buyrack [confirm] ($1,000 fee)");

    if(Rack_Count(playerid) >= 4)
        return SendErrorMessage(playerid, "Your house can only have up to 4 weapon racks.");

    if(Rack_Nearest(playerid) != -1)
        return SendErrorMessage(playerid, "You can't use this command near another rack.");

    if(GetMoney(playerid) < 1000)
        return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

    new id = Rack_Create(playerid, houseid);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for weapon racks.");

//    ResetEditing(playerid);

    PlayerData[playerid][pEditRack] = id;
    PlayerData[playerid][pEditingMode] = RACK;
    EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GiveMoney(playerid, -1000);
    SendServerMessage(playerid, "You have purchased a weapon rack for $1,000.");
    return 1;
}

CMD:gunrack(playerid, params[])
{
    new id = Rack_Nearest(playerid);

    if(id == -1) return SendErrorMessage(playerid, "You are not in range of any weapon rack.");
    if(PlayerData[playerid][pScore] < 2) return SendErrorMessage(playerid, "You can use this command if you're level 2.");

    if(RackData[id][rackHouse] && House_IsOwner(playerid, GetHouseByID(RackData[id][rackHouse])))
    {
        Rack_ShowGuns(playerid, id);
    }
    else SendErrorMessage(playerid, "This is not your gunrack.");

    if(!RackData[id][rackHouse])
        Rack_ShowGuns(playerid, id);

    return 1;
}

CMD:deleterack(playerid, params[])
{
    new
        id = -1,
        houseid = House_Inside(playerid);

    if(houseid == -1 || !House_IsOwner(playerid, houseid))
        return SendErrorMessage(playerid, "You are not in range of your house interior.");

    if((id = Rack_Nearest(playerid)) == -1)
        return SendErrorMessage(playerid, "You are not in range of any weapon rack.");

    Rack_Delete(id);
    SendServerMessage(playerid, "You have deleted the weapon rack from your house.");
    return 1;
}*/

// CMD:createrack(playerid, params[])
// {
//     static
//         id = -1;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     id = Rack_Create(playerid, (House_Inside(playerid) == -1) ? (-1) : (House_Inside(playerid)));

//     if(id == -1)
//         return SendErrorMessage(playerid, "The server has reached the limit for weapon racks.");

// //    ResetEditing(playerid);

//     PlayerData[playerid][pEditRack] = id;
//     PlayerData[playerid][pEditingMode] = RACK;
//     EditDynamicObject(playerid, RackData[id][rackObjects][4]);
    
//     SendServerMessage(playerid, "You have successfully created rack ID: %d.", id);
//     return 1;
// }

// CMD:editrack(playerid, params[])
// {
//     static
//         id = 0;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "d", id))
//         return SendSyntaxMessage(playerid, "/editrack [rack id]");

//     if((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
//         return SendErrorMessage(playerid, "You have specified an invalid rack ID.");

// //    ResetEditing(playerid);

//     PlayerData[playerid][pEditRack] = id;
//     PlayerData[playerid][pEditingMode] = RACK;
//     EditDynamicObject(playerid, RackData[id][rackObjects][4]);

//     SendServerMessage(playerid, "You are now editing weapon rack ID: %d.", id);
//     return 1;
// }

// CMD:destroyrack(playerid, params[])
// {
//     static
//         id = 0;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "d", id))
//         return SendSyntaxMessage(playerid, "/destroyrack [rack id]");

//     if((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
//         return SendErrorMessage(playerid, "You have specified an invalid rack ID.");

//     Rack_Delete(id);
//     SendServerMessage(playerid, "You have successfully destroyed weapon rack ID: %d.", id);
//     return 1;
// }

CMD:tracenumber(playerid, params[])
{
    new number;

    if(GetFactionType(playerid) != FACTION_POLICE)
        return SendErrorMessage(playerid, "You are not a police officer.");

    if(!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "You are not faction duty.");

    if(sscanf(params, "d", number))
        return SendSyntaxMessage(playerid, "/tracenumber [phone number]");

    if(number == 0)
        return SendErrorMessage(playerid, "You have specified an invalid number.");

    if(GetNumberOwner(number) != INVALID_PLAYER_ID)
        return SendServerMessage(playerid, "The phone number %d is owned by %s.", number, ReturnName(GetNumberOwner(number), 0));

    SendErrorMessage(playerid, "There is no player online with that phone number.");
    return 1;
}

CMD:flip(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid > 0 && isnull(params))
    {
        FlipVehicle(vehicleid);
        SendServerMessage(playerid, "You have flipped your current vehicle.");
    }
    else
    {
        if(sscanf(params, "d", vehicleid))
            return SendSyntaxMessage(playerid, "/flipcar [vehicle ID]");

        else if(!IsValidVehicle(vehicleid))
            return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

        FlipVehicle(vehicleid);
        SendServerMessage(playerid, "You have flipped vehicle ID: %d.", vehicleid);
    }
    return 1;
}

CMD:createspeed(playerid, params[])
{
    static
        Float:limit,
        Float:range;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "ff", limit, range))
        return SendSyntaxMessage(playerid, "/createspeed [speed limit] [range] (default range: 30)");

    if(limit < 5.0 || limit > 150.0)
        return SendErrorMessage(playerid, "The speed limit can't be below 5 or above 150.");

    if(range < 5.0 || range > 50.0)
        return SendErrorMessage(playerid, "The range can't be below 5 or above 50.");

    if(Speed_Nearest(playerid) != -1)
        return SendErrorMessage(playerid, "You can't do this in range another speed camera.");

    new id = Speed_Create(playerid, limit, range);

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for speed cameras.");

    SendServerMessage(playerid, "You have created speed camera ID: %d.", id);
    return 1;
}

CMD:editspeed(playerid, params[]) {
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    new option[24], optionalParams[32];
    if (sscanf(params, "s[24]S()[32]", option, optionalParams))
        return SendSyntaxMessage(playerid, "/editspeed [pos/speedlimit/range]");

    if (!strcmp(option, "pos", true)) {
        new speedId;
        if (sscanf(optionalParams, "d", speedId))
            return SendSyntaxMessage(playerid, "/editspeed pos [speed id]");

        if((speedId < 0 || speedId >= MAX_SPEED_CAMERAS) || !SpeedData[speedId][speedExists])
            return SendErrorMessage(playerid, "You have specified an invalid speed camera ID.");

        PlayerData[playerid][pEditSpeed] = speedId;
        PlayerData[playerid][pEditingMode] = SPEED;
        EditDynamicObject(playerid, SpeedData[speedId][speedObject]);
        SendCustomMessage(playerid, "SPEEDCAM", "You're now editing Speed Camera id: "YELLOW"%d", speedId);
    } else if (!strcmp(option, "speedlimit", true)) {
        new speedId, Float:limit;
        if (sscanf(optionalParams, "df", speedId, limit))
            return SendSyntaxMessage(playerid, "/editspeed speedlimit [speed id] [speed limit (mph)]");

        if((speedId < 0 || speedId >= MAX_SPEED_CAMERAS) || !SpeedData[speedId][speedExists])
            return SendErrorMessage(playerid, "You have specified an invalid speed camera ID.");

        SpeedData[speedId][speedLimit] = limit;
        Speed_Refresh(speedId);
        Speed_Save(speedId);
        SendCustomMessage(playerid, "SPEEDCAM", "You've been changed speed limit of Speed Camera id: "YELLOW"%d", speedId);
    } else if (!strcmp(option, "range", true)) {
        new speedId, Float:range;
        if (sscanf(optionalParams, "df", speedId, range))
            return SendSyntaxMessage(playerid, "/editspeed speedlimit [speed id] [speed range]");

        if((speedId < 0 || speedId >= MAX_SPEED_CAMERAS) || !SpeedData[speedId][speedExists])
            return SendErrorMessage(playerid, "You have specified an invalid speed camera ID.");

        SpeedData[speedId][speedRange] = range;
        Speed_Refresh(speedId);
        Speed_Save(speedId);
        SendCustomMessage(playerid, "SPEEDCAM", "You've been changed range of Speed Camera id: "YELLOW"%d", speedId);
    } else SendSyntaxMessage(playerid, "/editspeed [pos/speedlimit/range]");
    return 1;
}

CMD:destroyspeed(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyspeed [speed id]");

    if((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
        return SendErrorMessage(playerid, "You have specified an invalid speed camera ID.");

    Speed_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed speed camera ID: %d.", id);
    return 1;
}

CMD:admins(playerid, params[])
{
    new count = 0;

    SendClientMessage(playerid, X11_WHITE,"Admin/Helper/Volunteer Online:");

    foreach (new i : Player) if (IsPlayerConnected(i)) {
        if((AccountData[i][pAdmin] || AccountData[i][pVolunteer]) && AccountData[i][pAdminHide] != 1)
        {
            if (AccountData[i][pAdmin] > 5 && !AccountData[i][pAdminDuty]) continue;

            else if (AccountData[i][pVolunteer]) SendClientMessageEx(playerid, X11_YELLOW, "[ID: %d] Volunteer %s (%s)", i, ReturnAdminName(i), NormalName(i));

            else SendClientMessageEx(playerid, X11_YELLOW, "[ID: %d] %s %s (%s)", i, gAdminAlias[AccountData[i][pAdmin]], ReturnAdminName(i), NormalName(i));

            count++;
        }
    }
    if(!count) 
            return SendClientMessage(playerid, X11_WHITE, "* No Admin/Helper/Volunteer online.");

    return 1;
}

// CMD:influencers(playerid, params[])
// {
//     new count = 0;

//     SendClientMessage(playerid, X11_GREY_60, "List of UG:Influencers");

//     foreach (new i: Player) if ((AccountData[i][pVolunteer] > 0))
//     {
//         if(AccountData[i][pVolunteer])
//             SendClientMessageEx(playerid, X11_WHITE, "[Influencer] %s", ReturnName(i));
//         count++;
//     }
//     if(!count)
//             return SendClientMessage(playerid, X11_WHITE, "*No influencers online.");

//     return 1;
// }

CMD:licenses(playerid, params[])
{
    SendClientMessage(playerid, X11_GREY_60, "----------------------------------------------------------------");
    if(PlayerData[playerid][pDrivingLicense]) 
    {
        if(PlayerData[playerid][pDrivingLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Driving License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pDrivingLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Driving License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Driving License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFirearmLicense]) 
    {
        if(PlayerData[playerid][pFirearmLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Firearm License: ["GREEN"Valid until %s"WHITE"] Type: ["ORANGE"%s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pFirearmLicenseExpired]), GetFirearmLicType(playerid));
        else SendClientMessageEx(playerid, X11_WHITE, "* Firearm License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Firearm License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pBusinessLicense]) 
    {
        if(PlayerData[playerid][pBusinessLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Business License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pBusinessLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Business License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Business License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pWorkshopLicense]) 
    {
        if(PlayerData[playerid][pWorkshopLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Workshop License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pWorkshopLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Workshop License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Workshop License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFarmLicense]) 
    {
        if(PlayerData[playerid][pFarmLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Farm License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pFarmLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Farm License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Farm License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pBoatLicense]) 
    {
        if(PlayerData[playerid][pBoatLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Boat License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pBoatLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Boat License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Boat License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFlyingLicense]) 
    {
        if(PlayerData[playerid][pFlyingLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Flying License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pFlyingLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Flying License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Flying License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pLumberLicense]) 
    {
        if(PlayerData[playerid][pLumberLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Lumber License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pLumberLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Lumber License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Lumber License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pTruckerLicense]) 
    {
        if(PlayerData[playerid][pTruckerLicenseExpired] != 0) SendClientMessageEx(playerid, X11_WHITE, "* Trucker License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pTruckerLicenseExpired]));
        else SendClientMessageEx(playerid, X11_WHITE, "* Trucker License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(playerid, X11_WHITE, "* Trucker License: ["RED"Not Passed"WHITE"]");

    SendClientMessage(playerid, X11_GREY_60, "----------------------------------------------------------------");
    return 1;
}

CMD:showlicenses(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/showlicenses [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
        return SendErrorMessage(playerid, "That player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't show your licenses to yourself.");

    SendClientMessage(userid, X11_GREY_60, "-----------------------------------------------------------");

    if(PlayerData[playerid][pDrivingLicense]) 
    {
        if(PlayerData[playerid][pDrivingLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Driving License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pDrivingLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Driving License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Driving License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFirearmLicense]) 
    {
        if(PlayerData[playerid][pFirearmLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Firearm License: ["GREEN"Valid until %s"WHITE"] Type: ["ORANGE"%s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pFirearmLicenseExpired]), GetFirearmLicType(playerid));
        else SendClientMessageEx(userid, X11_WHITE, "* Firearm License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Firearm License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pBusinessLicense]) 
    {
        if(PlayerData[playerid][pBusinessLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Business License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pBusinessLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Business License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Business License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pWorkshopLicense]) 
    {
        if(PlayerData[playerid][pWorkshopLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Workshop License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pWorkshopLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Workshop License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Workshop License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFarmLicense]) 
    {
        if(PlayerData[playerid][pFarmLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Farm License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pFarmLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Farm License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Farm License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pBoatLicense]) 
    {
        if(PlayerData[playerid][pBoatLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Boat License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pBoatLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Boat License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Boat License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pFlyingLicense]) 
    {
        if(PlayerData[playerid][pFlyingLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Flying License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pFlyingLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Flying License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Flying License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pLumberLicense]) 
    {
        if(PlayerData[playerid][pLumberLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Lumber License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pLumberLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Lumber License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Lumber License: ["RED"Not Passed"WHITE"]");

    if(PlayerData[playerid][pTruckerLicense]) 
    {
        if(PlayerData[playerid][pTruckerLicenseExpired] != 0) SendClientMessageEx(userid, X11_WHITE, "* Trucker License: ["GREEN"Valid until %s"WHITE"]", ConvertTimestamp(Time:PlayerData[playerid][pTruckerLicenseExpired]));
        else SendClientMessageEx(userid, X11_WHITE, "* Trucker License: ["RED"Expired"WHITE"]");
    }
    else 
        SendClientMessageEx(userid, X11_WHITE, "* Trucker License: ["RED"Not Passed"WHITE"]");

    SendClientMessage(userid, X11_GREY_60, "-----------------------------------------------------------");
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out their licenses and shows them to %s.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    return 1;
}

CMD:deletechar(playerid, params[])
{
    static
        query[128];

    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    if(isnull(params) || strlen(params) > 24)
        return SendSyntaxMessage(playerid, "/deletechar [character name]");

    if(!IsValidPlayerName(params))
        return SendErrorMessage(playerid, "You have specified an invalid name format.");

    format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
    mysql_tquery(g_iHandle, query, "OnDeleteCharacter", "ds", playerid, params);

    return 1;
}

/*CMD:stoploading(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
        return SendErrorMessage(playerid, "You are not loading any crates right now.");

    PlayerData[playerid][pLoading] = 0;
    PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

    RemovePlayerAttachedObject(playerid, JOB_SLOT);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "You are no longer loading crates.");

    return 1;
}*/

/*CMD:startdelivery(playerid, params[])
{
    new id = Job_NearestPoint(playerid);

    if(PlayerData[playerid][pJob] != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(id == -1 || JobData[id][jobType] != JOB_COURIER)
        return SendErrorMessage(playerid, "You are not in range of any loading point.");

    if(PlayerData[playerid][pShipment] == -1)
        return SendErrorMessage(playerid, "You are't accepted a shipment (/shipment).");

    if(PlayerData[playerid][pDelayTruck])
        return SendErrorMessage(playerid, "Tunggu %d menit untuk bekerja kembali.",PlayerData[playerid][pDelayTruck]);

    if(PlayerData[playerid][pLoadType] > 0)
        return SendErrorMessage(playerid, "You have already started a delivery.");

    if(IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must exit the vehicle first.");

    if(IsLoadableVehicle(GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "You must be in truck to use this action.");

    Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Select Type", "Retail Supplies\nAmmunition\nClothing\nFood Supplies\nGasoline\nFurniture\nElectronic", "Select", "Cancel");
    return 1;
}*/

CMD:bshipment(playerid, params[])
{
    new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));

    if(id == -1 || (!Business_IsOwner(playerid, id) && !Business_IsEmployee(playerid, id)))
        return SendErrorMessage(playerid, "You are not in range of your business or your are not employee of this business.");

    if(BusinessData[id][bizType] == 5)
        return SendErrorMessage(playerid, "You can't request shipment for this business type.");

    if(BusinessData[id][bizSeal] == 1)
        return SendErrorMessage(playerid, "You can't request shipment for this business.");

    if(BusinessData[id][bizVault] < BusinessData[id][bizCargo])
        return SendErrorMessage(playerid, "Your vault isn't enough to restock!");

    if(BusinessData[id][bizShipment])
    {
        foreach (new i : Player) if(PlayerData[i][pShipment] == id)
        {
            CancelShipment(i);
            SendServerMessage(i, "The shipment request has been cancelled.");
        }
        BusinessData[id][bizShipment] = 0;
        Business_Save(id);

        SendServerMessage(playerid, "Your business is no longer requesting a shipment.");
        SendJobMessage(1, X11_YELLOW_2, "* %s is no longer requesting a shipment for %s"YELLOW". **", ReturnName(playerid, 0), BusinessData[id][bizName]);
    }
    else
    {
        if(BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
            return SendErrorMessage(playerid, "The delivery point for your business is not set.");

        BusinessData[id][bizShipment] = 1;
        Business_Save(id);

        SendServerMessage(playerid, "Your have requested a shipment for your business.");
        SendJobMessage(JOB_COURIER, X11_YELLOW_2, "* %s is requesting a shipment for %s "YELLOW"(/shipments to accept). **", ReturnName(playerid, 0), BusinessData[id][bizName]);
    }
    return 1;
}

CMD:cancelshipment(playerid, params[])
{
    if(GetPlayerJob(playerid, 0) != JOB_COURIER && GetPlayerJob(playerid, 1) != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(PlayerData[playerid][pShipment] == -1)
        return SendErrorMessage(playerid, "You haven't accepted any shipments yet.");

    CancelShipment(playerid);
    SendServerMessage(playerid, "You have cancelled the accepted shipment.");
    return 1;
}

CMD:shipments(playerid, params[])
{
    if(GetPlayerJob(playerid, 0) != JOB_COURIER && GetPlayerJob(playerid, 1) != JOB_COURIER)
        return SendErrorMessage(playerid, "You don't have the appropriate job.");

    if(PlayerData[playerid][pShipment] != -1)
        return SendErrorMessage(playerid, "You have already accepted a shipment (type /cancelshipment to cancel it).");

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must be in vehicle to take this action.");

    ShowShipments(playerid);
    return 1;
}

/*CMD:usemag(playerid, params[])
{
    new weaponid = PlayerData[playerid][pHoldWeapon];

    if(!weaponid)
        return SendErrorMessage(playerid, "You are not holding any empty weapon.");

    if(!Inventory_HasItem(playerid, "Magazine"))
        return SendErrorMessage(playerid, "You don't have any weapon magazines.");

    if(PlayerData[playerid][pUsedMagazine])
        return SendErrorMessage(playerid, "You have already used a magazine on this weapon.");

    switch (weaponid)
    {
        case 22:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 24:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 25:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s inserts some shells into the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 27:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s inserts some shells into the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 28:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 29:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 32:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 30:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 33:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        case 34:
        {
            PlayerPlaySoundEx(playerid, 1131);
            PlayerData[playerid][pUsedMagazine] = 1;

            Inventory_Remove(playerid, "Magazine");
            PlayReloadAnimation(playerid, 24);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a magazine to the weapon.", ReturnName(playerid, 0));
            ShowPlayerFooter(playerid, "Press ~y~'H'~w~ to load the weapon.");
        }
        default:
            return SendErrorMessage(playerid, "You can't attach a magazine to this weapon.");
    }
    return 1;
}*/

CMD:clearinventory(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/clearinventory [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    Inventory_Clear(userid);

    SendAdminAction(playerid, "You have cleared %s's inventory from all items.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s has cleared your inventory from all items.", ReturnName(playerid, 0));

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has cleared %s's inventory.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:listwarns(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    new Cache:checkwarns, query[255],string[1024],userid;
    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/listwarns [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    format(query, sizeof(query), "SELECT * FROM `wanrslog` WHERE `ID`='%d' LIMIT 20", PlayerData[userid][pID]);
    checkwarns = mysql_query(g_iHandle, query);

    if(!cache_num_rows())
        return SendErrorMessage(playerid, "There player doen't have warn log."), cache_delete(checkwarns);

    format(string, sizeof(string), "Type\tWarn By\tWarn Date\tReason\n");

    for(new i; i != cache_num_rows(); i++)
    {
        new warnby[24],
            warndate[64],
            warnreason[64],
            warntype;

        cache_get_value(i, "warnBy", warnby);
        cache_get_value(i, "warnDate", warndate);
        cache_get_value(i, "warnReason", warnreason);
        cache_get_value_int(i, "warnType", warntype);

        format(string, sizeof(string), "%s%s\t%s\t%s\t%s\n", string, GetWarnType(warntype), warnby, warndate, warnreason);
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Warn Log", string, "Close","");

    cache_delete(checkwarns);
    return 1;
}

CMD:owarn(playerid, params[])
{
    static 
        name[MAX_PLAYER_NAME],
        reason[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "s[24]s[128]", name, reason)) return SendSyntaxMessage(playerid, "/owarn [character name] [reason]");
    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s'", name), "OfflineWarn", "dss", playerid, name, reason);    
    return 1;
}

Function:OfflineWarn(playerid, name[], reason[])
{
    if(!cache_num_rows()) 
        return SendErrorMessage(playerid, "Character isn't exists.");

    new warn,
        id;
    
    cache_get_value_int(0, "Warnings", warn);
    cache_get_value_int(0, "ID", id);

    new query[255];
    format(query, sizeof(query), "INSERT INTO `wanrslog` (`ID`, `warnBy`, `warnReason`, `warnDate`, `warnType`) VALUES ('%d','%s','%s','%s','1')", id, ReturnAdminName(playerid), SQL_ReturnEscaped(reason), SQL_ReturnEscaped(ReturnDate()));
    mysql_tquery(g_iHandle, query);
    mysql_tquery(g_iHandle, sprintf("UPDATE `characters` SET `Warnings`='%d' WHERE `Character`='%s'", (warn+1), name));

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was offline warned by admin/helper %s.", name, ReturnAdminName(playerid));
        SendClientMessageEx(i, X11_TOMATO_1, "Reason: %s", reason);
    }

    if(warn >= 20)
    {
        SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s was banned for 20 warnings by %s", name, ReturnName(playerid, 0));
        SendTesterMessage(X11_TOMATO_1, "Reason: %s", reason);
        Blacklist_Add(0, "0.0.0.0", "", NormalName(playerid), "BOT", "Maximum warning 20/20.");
    }
    return 1;
}

CMD:unwarn(playerid, params[])
{
    static
        userid,
        reason[32];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "uS(No Reason Given)[32]", userid, reason)) return SendErrorMessage(playerid, "/unwarn [userid] [reason]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    if(strval(reason) > 32) return SendErrorMessage(playerid, "Reason too long.");
    if(PlayerData[userid][pWarnings] < 1) return SendErrorMessage(playerid, "That player not have warning record.");

    PlayerData[userid][pWarnings] --;

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s was unwarned by admin/helper %s reason: %s", ReturnName2(userid), ReturnAdminName(playerid), reason);
    }
    SendAdminAction(userid, "%s has removed one warning for you, reason: \"%s\" (%d/20).", ReturnAdminName(playerid), reason, PlayerData[userid][pWarnings]);

    Log_Write("logs/unwarn_log.txt", "[%s] %s has unwarned %s for %s.", ReturnDate(), ReturnAdminName(playerid), ReturnName(userid, 0), reason);
    return 1;
}

CMD:warn(playerid, params[])
{
    static
        userid,
        reason[32];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(sscanf(params, "us[32]", userid, reason)) return SendSyntaxMessage(playerid, "/warn [playerid/PartOfName] [reason]");
    if(userid == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You have specified an invalid player.");
    if(strval(reason) > 32) return SendErrorMessage(playerid, "Reason too long.");

    static query[255];

    format(query, sizeof(query), "INSERT INTO `wanrslog` (`ID`, `warnBy`, `warnReason`, `warnDate`, `warnType`) VALUES ('%d','%s','%s','%s','1')", PlayerData[userid][pID], ReturnAdminName(playerid), SQL_ReturnEscaped(reason), SQL_ReturnEscaped(ReturnDate()));
    mysql_tquery(g_iHandle, query);

    PlayerData[userid][pWarnings] ++;

    foreach (new i : Player) if (!PlayerData[i][pTogAdmCmd]) {
        SendClientMessageEx(i, X11_TOMATO_1, "AdmCmd: %s has been warned by admin/helper %s.", ReturnName2(userid), ReturnAdminName(playerid));
        SendClientMessageEx(i, X11_TOMATO_1, "Reason: %s (Total Warn: %d/20)", reason, PlayerData[userid][pWarnings]);
    }
    //SendAdminAction(userid, "%s has warned you for \"%s\" (%d/20).", ReturnAdminName(playerid), reason, PlayerData[userid][pWarnings]);

    if(PlayerData[userid][pWarnings] >= 20)
    {
        ResetWarnings(userid);

        SendAdminAction(userid, "You've been banned for exceeding your warnings (\"%s\").", reason);
        SendTesterMessage(X11_TOMATO_1, "AdmCmd: %s was banned for 20 warnings by %s, reason: %s", ReturnName(userid, 0), ReturnName(playerid, 0), reason);
        Blacklist_Add(0, "0.0.0.0", NormalName(userid), ReturnAdminName(playerid), "Maximum warning 20/20.", " ");
        KickEx(userid);
    }

    Log_Write("logs/warn_log.txt", "[%s] %s has warned %s for %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);
    return 1;
}

CMD:clearwarns(playerid, params[])
{
    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/clearwarns [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "You have specified an invalid player.");

    ResetWarnings(userid);

    SendAdminAction(playerid, "You have cleared %s's warnings.", ReturnName(userid, 0));
    SendAdminAction(userid, "%s has cleared your warnings.", ReturnName(playerid, 0));

    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has cleared %s's warnings.", ReturnName(playerid, 0), ReturnName(userid, 0));
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `wanrslog` WHERE ID='%d'", PlayerData[userid][pID]));
    return 1;
}

CMD:sorting(playerid, params[])
{
    if (GetSorterDelay(playerid) > 0)
        return SendErrorMessage(playerid, "You can work again in %d minutes.", GetSorterDelay(playerid) / 60);

    if(!IsPlayerInRangeOfPoint(playerid, 3.0, -262.44, -2183.41, 28.95))
        return SendErrorMessage(playerid, "You are not in range of the sorting facility.");

    if (ServerData[cargoStock][2] >= MAX_STOCK && ServerData[cargoStock][5] >= MAX_STOCK)
        return SendErrorMessage(playerid, "The cargo Clothes and cargo Electronic stock is full.");

    switch (PlayerData[playerid][pSorting])
    {
        case -1:
        {
            PlayerData[playerid][pSorting] = 1;
            PlayerData[playerid][pSortCrate] = 1;

            SendServerMessage(playerid, "You have started sorting. Please make your way to the marker.");
            PlayerData[playerid][pSorter] = 0;

            SetPlayerAttachedObject(playerid, JOB_SLOT, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

            ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
            SetPlayerCheckpoint(playerid, -256.60, -2191.21, 28.99, 1.0);
        }
        default:
        {
            PlayerData[playerid][pSorting] = -1;

            if(PlayerData[playerid][pSortCrate] != 0)
            {
                PlayerData[playerid][pSortCrate] = 0;

                RemovePlayerAttachedObject(playerid, JOB_SLOT);
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            }
            DisablePlayerCheckpoint(playerid);
            SetSorterDelay(playerid, 900);
            new bonus = RandomEx(25,100);
            AddPlayerSalary(playerid, (PlayerData[playerid][pSorter]*10)+bonus, "Package Sorter Sidejob + Bonus");
            PlayerData[playerid][pSorter] = 0;
            SendServerMessage(playerid, "You have finished sorting packages.");
        }
    }
    return 1;
}

CMD:vw(playerid, params[]) {
    SendClientMessageEx(playerid, COLOR_CLIENT, "Current Virtual World: %d", GetPlayerVirtualWorld(playerid));
    return 1;
}

CMD:time(playerid, params[])
{
    static
        string[128],
        date[6];

    getdate(date[2], date[1], date[0]);
    gettime(date[3], date[4], date[5]);

    if(PlayerData[playerid][pMinutes] >= 3600) SendServerMessage(playerid, "Paycheck sudah dapat anda ambil di Bank atau ATM (/paycheck).");
    else SendClientMessageEx(playerid, X11_LIGHTBLUE, "PAYCHECK: "YELLOW"Tunggu %d menit untuk mengambil paycheck.", (60-(PlayerData[playerid][pMinutes]/60)));

    format(string, sizeof(string), "~g~%s %02d %d~n~~b~%02d:%02d:%02d", GetMonth(date[1]), date[0], date[2], date[3], date[4], date[5]);
    GameTextForPlayer(playerid, string, 6000, 1);

    return 1;
}

static SaveAll()
{
    for(new i = 0; i != MAX_CARGO; i++) if(CargoData[i][cargoExists])  {
        Cargo_Save(i);
    }

    for (new i; i < MAX_BUSINESSES; i++) if(BusinessData[i][bizExists]) {
        Business_Save(i);
    }

    // for (new i; i < MAX_WORKSHOP; i++) if(WorkshopData[i][wExists]) {
    //     Workshop_Save(i); //kalo mau liat ini, ada di workshop.pwn
    // }

    foreach (new i : Houses) if(Iter_Contains(Houses, i)) {
        House_Save(i);

        foreach (new id : HouseFurnitures[i]) {
            Furniture_Save(id, i);
        }

        foreach (new id : HouseStruct[i]) {
            HouseStructure_Save(id, i);
        }
    }

    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cOwner]) {
        Vehicle_Save(i);
    }

    foreach (new i : GYMObjects) {
        GYMObject_Save(i);
    }

    for (new i = 0; i != MAX_GARAGE; i ++) if (GarageData[i][garageExists] && GarageData[i][garageOwnerId] != 0) {
        Garage_Save(i);
    }

    new query[255];
    format(query,sizeof(query),"UPDATE `server` SET `fish_Price` = '%d', `pumpkinPrice`='%d', `mushroomPrice`='%d', `cucumberPrice`='%d', `eggplantPrice`='%d', `cargoStock`='%d|%d|%d|%d|%d|%d' WHERE `ID`='1'", ServerData[fish_Price], ServerData[pumpkinPrice], ServerData[mushroomPrice], ServerData[cucumberPrice], ServerData[eggplantPrice], ServerData[cargoStock][0], ServerData[cargoStock][1], ServerData[cargoStock][2], ServerData[cargoStock][3], ServerData[cargoStock][4], ServerData[cargoStock][5]);
    mysql_tquery(g_iHandle, query);
    return 1;
}

CMD:saveall(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    SaveAll();
    SendServerMessage(playerid, "You have saved all "RED"server data");
    return 1;
}

CMD:saveaccounts(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    foreach(new i : Player) if(IsPlayerConnected(i) && SQL_IsCharacterLogged(i)) {
        SQL_SaveAccounts(i);
        //SQL_SaveWeapon(i);
    }
    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has saved all server data.", ReturnName(playerid, 0));
    return 1;
}

CMD:whisper(playerid, params[])
{
    new userid, text[128];
    if(sscanf(params, "us[128]", userid, text)) return SendSyntaxMessage(playerid, "/(w)hisper [playerid/PartOfName] [text]");
    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You can't whisper yourself.");

    if(strlen(text) > 64) {
        SendClientMessageEx(userid, X11_YELLOW_2, "** Whisper from %s (%d): %.64s", ReturnName(playerid, 0, 1), playerid, text);
        SendClientMessageEx(userid, X11_YELLOW_2, "...%s **", text[64]);

        SendClientMessageEx(playerid, X11_YELLOW_2, "** Whisper to %s (%d): %.64s", ReturnName(userid, 0, 1), userid, text);
        SendClientMessageEx(playerid, X11_YELLOW_2, "...%s **", text[64]);
    }
    else {
        SendClientMessageEx(userid, X11_YELLOW_2, "** Whisper from %s (%d): %s **", ReturnName(playerid, 0, 1), playerid, text);
        SendClientMessageEx(playerid, X11_YELLOW_2, "** Whisper to %s (%d): %s **", ReturnName(userid, 0, 1), userid, text);
    }
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s mutters something in %s's ear.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
    //SendAdminMessage(X11_GREEN_YELLOW, "WhisperLog: %s to %s for: %s", ReturnName(playerid, 0), ReturnName(userid, 0), text);
    return 1;
}

Update_PlayerMask(playerid) {
    if (PlayerData[playerid][pMaskOn]) {
        if (IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag])) {
            UpdateDynamic3DTextLabelText(PlayerData[playerid][pNameTag], -1, sprintf("Mask_#%d\nHP: ["RED"%.1f"WHITE"] AP: ["LIGHTGREY"%.1f"WHITE"]", PlayerData[playerid][pMaskID], ReturnHealth2(playerid), ReturnArmour2(playerid)));
        }
    }
    return 1;
}

CMD:mask(playerid, params[])
{
    if(AccountData[playerid][pAdminDuty]) return SendErrorMessage(playerid, "You are on an admin duty!");
    if(PlayerData[playerid][pScore] < 3) return SendErrorMessage(playerid, "You must level 3 to use mask.");
    if(!Inventory_HasItem(playerid, "Mask")) return SendErrorMessage(playerid, "You don't have any mask.");
    if(PlayerData[playerid][pJobDuty]) return SendErrorMessage(playerid, "You're on job duty.");

    switch (PlayerData[playerid][pMaskOn])
    {
        case 0:
        {
            new str[128];

            foreach (new i : Player) {
                ShowPlayerNameTagForPlayer(i, playerid, 0);
            }
            format(str, sizeof(str), "Mask_#%d\nHP: ["RED"%.1f"WHITE"] AP: ["LIGHTGREY"%.1f"WHITE"]", PlayerData[playerid][pMaskID], ReturnHealth2(playerid), ReturnArmour2(playerid));
            PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, -1, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a mask and puts it on.", ReturnName(playerid, 0, 1));
            PlayerData[playerid][pMaskOn] = 1;
        }
        case 1:
        {
            foreach (new i : Player) {
                ShowPlayerNameTagForPlayer(i, playerid, 1);
            }
            ResetNameTag(playerid);

            PlayerData[playerid][pMaskOn] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes their mask off and puts it away.", ReturnName(playerid, 0, 1));
        }
    }
    return 1;
}

CMD:masked(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    static
        name[24];

    SendClientMessage(playerid, X11_GREY_60, "-----------------------------------------------------------");

    foreach (new i : Player) if(PlayerData[i][pMaskOn]) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, X11_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskID]);
    }
    SendClientMessage(playerid, X11_GREY_60, "-----------------------------------------------------------");
    return 1;
}
//PlayerData[playerid][pPhone]

CMD:numbers(playerid, params[])
{
    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    static
        name[24];

    SendClientMessage(playerid, X11_WHITE, "Phone number list:");

    foreach (new i : Player) if(PlayerData[i][pPhone]) {
            GetPlayerName(i, name, sizeof(name));
            SendClientMessageEx(playerid, X11_WHITE, "* %s (%d)", name,PlayerData[i][pPhone]);
    }
    return 1;
}

CMD:myjail(playerid, params[])
{
    if(!PlayerData[playerid][pJailTime])
        return SendErrorMessage(playerid, "You are not jailed!");

    new
        times[3],
        myjail[264] = "Jail Reason\tTimes\tJailed By\n";

    GetElapsedTime(PlayerData[playerid][pJailTime], times[0], times[1], times[2]);
    //format(myjail, sizeof(myjail), "%s\t%02d hours %02d min %02d sec\t%s\n", myjail, PlayerData[playerid][pJailReason], times[0], times[1], times[2], PlayerData[playerid][pJailedBy]);
    //format(string, sizeof(string), "%s%s\t%02d:%02d:%02d\n", string,NormalName(i), hours, minutes, seconds);
    if(PlayerData[playerid][pJailTime] >= 60)
    {
        strcat(myjail, sprintf("%s\t%02d hours %02d min %02d sec\t%s\n", PlayerData[playerid][pJailReason], times[0], times[1], times[2], PlayerData[playerid][pJailedBy]));
    }
    else
    {
         strcat(myjail, sprintf("%s\t %02d min %02d sec\t%s\n", PlayerData[playerid][pJailReason], times[1], times[2], PlayerData[playerid][pJailedBy]));
    }
    Dialog_Show(playerid, DisplayOnly, DIALOG_STYLE_TABLIST_HEADERS, "My Jail", myjail, "Close", "");
    return 1;
}

CMD:jailed(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        name[24],
        times[3];

    SendClientMessage(playerid, X11_WHITE, "Jailed list:");

    foreach (new i : Player) if(PlayerData[i][pJailTime]) {
        GetPlayerName(i, name, sizeof(name));
        GetElapsedTime(PlayerData[i][pJailTime], times[0], times[1], times[2]);
        SendClientMessageEx(playerid, X11_WHITE, "* "COL_LIGHTBLUE"%s "WHITE"(time left %02d hours %02d min %02d sec) | Reason: "YELLOW"%s"WHITE"(%s)", name, times[0], times[1], times[2],PlayerData[i][pJailReason], PlayerData[i][pJailedBy]);
    }
    return 1;
}

CMD:listguns(playerid, params[])
{
    new userid;

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/listguns [playerid/PartOfName]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "The specified player is disconnected.");

    new
        weaponid,
        ammo;

    SendClientMessage(playerid, X11_GREY_60, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, X11_TOMATO_1, "%s's Weapons:", ReturnName(userid, 0));

    for (new i = 0; i < 13; i ++)
    {
        GetPlayerWeaponData(userid, i, weaponid, ammo);

        if(weaponid > 0)
            SendClientMessageEx(playerid, X11_WHITE, "* %s (%d ammo)", ReturnWeaponName(weaponid), ammo);
    }
    SendClientMessage(playerid, X11_GREY_60, "-----------------------------------------------------------");
    return 1;
}

CMD:siren(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
        return SendErrorMessage(playerid, "You don't have permission to use this command.");

    if(!PlayerData[playerid][pOnDuty]) 
        return SendErrorMessage(playerid, "You must duty first.");

    new 
        vehicleid = GetPlayerVehicleID(playerid),
        id = -1;

    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must be inside a vehicle.");

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "You must be in driver.");

    if((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cFaction] != GetFactionSQLID(playerid))
        return SendErrorMessage(playerid, "You must be in the faction vehicle!");

    switch (CoreVehicles[vehicleid][vehSirenOn])
    {
        case 0:
        {
            static
            Float:fSize[3],
                Float:fSeat[3];

            GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
            GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
            CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

            AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attaches a portable siren to the vehicle.", ReturnName(playerid, 0, 1));
        }
        case 1:
        {
            CoreVehicles[vehicleid][vehSirenOn] = 0;

            if(IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
                DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
    
            CoreVehicles[vehicleid][vehSirenObject] = INVALID_STREAMER_ID;

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s detaches a portable siren from the vehicle.", ReturnName(playerid, 0, 1));
        }
    }
    return 1;
}

CMD:setmaxinventory(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    static
        userid,
        capacity;

    if(sscanf(params, "ud", userid, capacity))
        return SendSyntaxMessage(playerid, "/setmaxinventory [playerid/PartOfName] [amount]");

    if(userid == INVALID_PLAYER_ID)
        return SendErrorMessage(playerid, "The specified player is disconnected.");

    if(capacity < 1 || capacity > 36)
        return SendErrorMessage(playerid, "The specified capacity can't exceed 36 items.");

    PlayerData[userid][pCapacity] = capacity;

    SendServerMessage(playerid, "You have set %s's inventory capacity to %d items.", ReturnName(userid, 0), capacity);
    SendServerMessage(userid, "%s has set your inventory capacity to %d items.", ReturnName(playerid, 0), capacity);
    return 1;
}

CMD:breakcuffs(playerid, params[])
{
    static
        userid;

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/breakcuffs [playerid/PartOfName]");

    if(!Inventory_HasItem(playerid, "Crowbar"))
        return SendErrorMessage(playerid, "You don't have a crowbar.");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if(!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The specified player is not cuffed.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You can't pick your own handcuffs.");

    SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s attempts to pick the cuffs with a crowbar.", ReturnName(playerid, 0, 1));
    return 1;
}

CMD:dice(playerid, params[])
{
    static
        dice;

    if(sscanf(params, "d", dice))
        return SendSyntaxMessage(playerid, "/dice [1,2,3,4]");

    if(dice < 1 || dice > 4)
        return SendErrorMessage(playerid, "Invalid dice value.");

    switch(dice)
    {
        case 1: SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s rolls a dice landing on the number "RED"%d.", ReturnName(playerid, 0, 1), (random(6) + 1));
        case 2: SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s rolls a dice landing on the number "RED"%d-%d.", ReturnName(playerid, 0, 1), (random(6) + 1), (random(6) + 1));
        case 3: SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s rolls a dice landing on the number "RED"%d-%d-%d.", ReturnName(playerid, 0, 1), (random(6) + 1), (random(6) + 1), (random(6) + 1));
        case 4: SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s rolls a dice landing on the number "RED"%d-%d-%d-%d.", ReturnName(playerid, 0, 1), (random(6) + 1), (random(6) + 1), (random(6) + 1), (random(6) + 1));
    }
    return 1;
}

CMD:shakehand(playerid, params[])
{
    static
        userid,
            type;

    if(sscanf(params, "ud", userid, type))
        return SendSyntaxMessage(playerid, "/shakehand [playerid/PartOfName] [type]");

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
        return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if(userid == playerid)
        return SendErrorMessage(playerid, "You cannot shake your own hand.");

    if(type < 1 || type > 6)
        return SendErrorMessage(playerid, "You must specify a type from 1 to 6.");

    PlayerData[userid][pShakeOffer] = playerid;
    PlayerData[userid][pShakeType] = type;

    SendServerMessage(userid, "%s has offered to shake your hand (type \"/approve greet\").", ReturnName(playerid, 0));
    SendServerMessage(playerid, "You have offered to shake %s's hand.", ReturnName(userid, 0));
    return 1;
}

CMD:frisk(playerid, params[])
{
    static
        userid,
        targetid;

    if(sscanf(params, "d", userid)) return SendSyntaxMessage(playerid, "/frisk [playerid/mask]");

    if ((targetid = GetMaskOwner(userid)) != INVALID_PLAYER_ID) {
        if(!IsPlayerNearPlayer(playerid, targetid, 6.0)) return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");
        if(PlayerData[targetid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
        if(targetid == playerid) return SendErrorMessage(playerid, "You cannot frisk yourself.");

        PlayerData[targetid][pFriskOffer] = playerid;
        SendServerMessage(targetid, "%s has offered to frisk you (type \"/approve frisk\").", ReturnName(playerid, 0, 1));
        SendServerMessage(playerid, "You have offered to frisk %s.", ReturnName(targetid, 0, 1));
        return 1;
    }

    if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0)) return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");
    if(PlayerData[userid][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(userid == playerid) return SendErrorMessage(playerid, "You cannot frisk yourself.");

    PlayerData[userid][pFriskOffer] = playerid;
    SendServerMessage(userid, "%s has offered to frisk you (type \"/approve frisk\").", ReturnName(playerid, 0, 1));
    SendServerMessage(playerid, "You have offered to frisk %s.", ReturnName(userid, 0, 1));
    return 1;
}

CMD:ahide(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    switch (AccountData[playerid][pAdminHide])
    {
        case 0:
        {
            AccountData[playerid][pAdminHide] = 1;
            SendServerMessage(playerid, "You are now hidden from the admin list.");
        }
        case 1:
        {
            AccountData[playerid][pAdminHide] = 0;
            SendServerMessage(playerid, "You are now visible in the admin list.");
        }
    }
    return 1;
}

// CMD:createdetector(playerid, params[])
// {
//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     static
//         query[255];

//     for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if(!MetalDetectors[i][detectorExists])
//     {
//         MetalDetectors[i][detectorExists] = 1;
//         MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
//         MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

//         GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
//         GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

//         format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
//         mysql_tquery(g_iHandle, query, "OnDetectorCreated", "d", i);

//         Detector_Refresh(i);
//         SendServerMessage(playerid, "You have created metal detector ID: %d.", i);
//         return 1;
//     }
//     SendErrorMessage(playerid, "The server has reached a limit for metal detectors.");
//     return 1;
// }

// CMD:destroydetector(playerid, params[])
// {
//     static
//         id = 0;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "d", id))
//         return SendSyntaxMessage(playerid, "/destroydetector [detector id]");

//     if((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
//         return SendErrorMessage(playerid, "You have specified an invalid detector ID.");

//     Detector_Delete(id);
//     SendServerMessage(playerid, "You have successfully destroyed detector ID: %d.", id);
//     return 1;
// }

//Tiba sini
CMD:picklock(playerid, params[])
{
    new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), id = -1;

    if(!Inventory_HasItem(playerid, "Crowbar"))
        return SendErrorMessage(playerid, "You don't have a crowbar.");

    if(vehicleid == -1)
        return SendErrorMessage(playerid, "You are not in range of any vehicle.");

    if ((id = Vehicle_GetID(vehicleid)) != -1) {
        if(!VehicleData[id][cLocked])
            return SendErrorMessage(playerid, "This vehicle is not locked.");

        PlayerData[playerid][pPicking] = 1;
        PlayerData[playerid][pPickCar] = id;

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a crowbar and picks the lock.", ReturnName(playerid, 0));
        SendServerMessage(playerid, "Please wait 60 seconds while the lock is picked.");
        return 1;
    }
    return 1;
}

CMD:gotoplant(playerid, params[])
{
    static id = 0;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/gotoplant [plant id]");

    if((id < 0 || id >= MAX_PLANTS) || !PlantData[id][plantExists])
        return SendErrorMessage(playerid, "You have specified an invalid plant ID.");

    SetPlayerPos(playerid, PlantData[id][plantPos][0], PlantData[id][plantPos][1], PlantData[id][plantPos][2]);
    return 1;
}


CMD:destroyplant(playerid, params[])
{
    static
        id = 0;

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroyplant [plant id]");

    if((id < 0 || id >= MAX_PLANTS) || !PlantData[id][plantExists])
        return SendErrorMessage(playerid, "You have specified an invalid plant ID.");

    Plant_Delete(id);
    SendServerMessage(playerid, "You have successfully destroyed plant ID: %d.", id);
    return 1;
}

CMD:unlockcar(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        vid,
        id = -1;

    if(sscanf(params, "i", vid))
        return SendSyntaxMessage(playerid, "/unlockcar [vehicleid]");

    if(!IsValidVehicle(vid))
        return SendErrorMessage(playerid, "Invalid vehicle id.");

    static engine, lights, alarm, doors,bonnet, boot, objective;
    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);

    SetVehicleLock(vid, (doors ? 0 : 1));

    if((id = Vehicle_GetID(vid)) != -1)
    {
        VehicleData[id][cLocked] = (doors ? 0 : 1);
    }
    SendServerMessage(playerid, "You've %s vehicle id %d.", (doors ? ("Unlock") : ("Lock")), vid);
    return 1;
}

CMD:editcar(playerid, params[])
{
    new 
        id,
        vehicleid,
        opsi[10],
        extendstr[64],
        vehname[32];

    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    if(sscanf(params, "ds[10]S()[64]", vehicleid, opsi, extendstr))
        return SendSyntaxMessage(playerid, "/editcar [vehicleid] [location/faction/job/workshop/color/rentprice/unrent/sirine/int/vw/carhp/insurance/upgrade/static]");

    if(!IsValidVehicle(vehicleid) || Vehicle_GetID(vehicleid) == -1)
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    id = Vehicle_GetID(vehicleid);

    if(!strcmp(opsi, "location", true))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            GetVehiclePos(GetPlayerVehicleID(playerid), VehicleData[id][cPos][0], VehicleData[id][cPos][1], VehicleData[id][cPos][2]);
            GetVehicleZAngle(GetPlayerVehicleID(playerid), VehicleData[id][cPos][3]);
        }
        else
        {
            GetPlayerPos(playerid, VehicleData[id][cPos][0], VehicleData[id][cPos][1], VehicleData[id][cPos][2]);
            GetPlayerFacingAngle(playerid, VehicleData[id][cPos][3]);
        }
        Vehicle_Spawn(id);
        Vehicle_Save(id);

        SetPlayerPosEx(playerid, VehicleData[id][cPos][0], VehicleData[id][cPos][1], VehicleData[id][cPos][2] + 2.0, 1000);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of vehicle ID: %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle]);
    }
    else if(!strcmp(opsi, "faction", true))
    {
        new factiontype;

        if(VehicleData[id][cOwner] != 0)
            return SendErrorMessage(playerid, "This vehicle is owned by another player.");

        if(sscanf(extendstr, "d", factiontype)) return SendSyntaxMessage(playerid, "/editcar vehicleid faction [faction id (/factions)]");
        if(!FactionData[factiontype][factionExists])  return SendSyntaxMessage(playerid, "This faction does'nt exists.");

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has switch the vehicle faction vehicleid: %d from to faction id %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], factiontype);
        VehicleData[id][cFaction] = FactionData[factiontype][factionID];
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "job", true))
    {
        new factiontype;

        if(VehicleData[id][cOwner] != 0)
            return SendErrorMessage(playerid, "This vehicle is owned by another player.");

        if(sscanf(extendstr, "d", factiontype)) return SendSyntaxMessage(playerid, "/editcar vehicleid job [(/jobtype)]");

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has switch the vehicle job vehicleid: %d from to job id %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], factiontype);
        VehicleData[id][cJob] = factiontype;
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "workshop", true))
    {
        new factiontype;

        if(VehicleData[id][cOwner] != 0)
            return SendErrorMessage(playerid, "This vehicle is owned by another player.");

        if(sscanf(extendstr, "d", factiontype)) return SendSyntaxMessage(playerid, "/editcar vehicleid workshop [workshop id]");

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has switch the vehicle workshop vehicleid: %d from to workshop id %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], factiontype);
        VehicleData[id][cWorkshop] = WorkshopData[factiontype][wID];
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "biz", true))
    {
        new factiontype;

        if(VehicleData[id][cOwner] != 0)
            return SendErrorMessage(playerid, "This vehicle is owned by another player.");

        if(sscanf(extendstr, "d", factiontype)) return SendSyntaxMessage(playerid, "/editcar vehicleid biz [biz id]");

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has switch the vehicle biz vehicleid: %d from to biz id %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], factiontype);
        VehicleData[id][cBiz] = BusinessData[factiontype][bizID];
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "color", true))
    {
        new color1, color2;

        if(sscanf(extendstr, "dd", color1, color2))
            return SendSyntaxMessage(playerid, "/editcar vehicleid color [color1] [color2]");

        if((color1 < 0 || color1 > 255) && (color2 < 0 || color2 > 255))
            return SendErrorMessage(playerid, "Invalid color id (color mus be only 1-255).");

        VehicleData[id][cColor1] = color1;
        VehicleData[id][cColor2] = color2;
        ChangeVehicleColor(VehicleData[id][cVehicle], VehicleData[id][cColor1], VehicleData[id][cColor2]);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the color1, and color2 of vehicle ID: %d to %d-%d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], color1, color2);
        Vehicle_Save(id);
    }
    else if (!strcmp(opsi, "static", true)) {
        if(!VehicleData[id][cFaction]) return SendErrorMessage(playerid, "This is not faction vehicle.");

        new vehpoint;
        if(sscanf(extendstr, "d", vehpoint)) return SendSyntaxMessage(playerid, "/editcar [vehicleid] static [veh spawn point id]");

        if (!Iter_Contains(SpawnPoints, vehpoint))
            return SendErrorMessage(playerid, "Invalid vehicle spawn point ID!");

        VehicleData[id][cStatic] = VehSpawnPoint[vehpoint][sID];
        Vehicle_Save(id);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted static of vehicle ID: %d, for spawn point ID: %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], vehpoint);

        if (VehicleData[id][cStatic]) {
            if (IsValidVehicle(VehicleData[id][cVehicle]))
                DestroyVehicle(VehicleData[id][cVehicle]), VehicleData[id][cVehicle] = INVALID_VEHICLE_ID;
        } else Vehicle_Spawn(id);
    }
    /* else if(!strcmp(opsi, "neon", true))
    {
        SetPVarInt(playerid, "neonVehicle", id);

        Dialog_Show(playerid, InstallNeon, DIALOG_STYLE_LIST, "Install Neon", "Red Neon\nBlue Neon\nGreen Neon\nYellow Neon\nPink Neon\nWhite Neon", "Install", "Close");
    } */
    else if(!strcmp(opsi, "sirine", true))
    {
        if(!VehicleData[id][cFaction]) return SendErrorMessage(playerid, "This is not faction vehicle.");

        switch(VehicleData[id][cSirine]) {
            case 0: VehicleData[id][cSirine] = 1;
            case 1: VehicleData[id][cSirine] = 0;
        }
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has toggle %s vehicle sirine for vehicle ID: %d.", ReturnName(playerid, 0), VehicleData[id][cSirine] ? ("on") : ("off"), VehicleData[id][cVehicle]);

        Vehicle_Spawn(id);
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "rentprice", true))
    {
        new price;

        if(sscanf(extendstr, "d", price))
            return SendSyntaxMessage(playerid, "/editcar vehicleid rentprice [price]");

        if(price < 1)
            return SendErrorMessage(playerid, "Invalid price, can't under 0.");

        VehicleData[id][cRentPrice] = price;
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of vehicle ID: %d to %s.", ReturnName(playerid, 0), VehicleData[id][cVehicle], FormatNumber(price));
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "carhp", true))
    {
        new Float:health;

        if(sscanf(extendstr, "f", health))
            return SendSyntaxMessage(playerid, "/editcar vehicleid carhp [health]");

        if(health < 1000 || health > 4000)
            return SendErrorMessage(playerid, "Invalid health, health must be between 1000 - 4000.");

        VehicleData[id][cMaxHealth] = health;
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the health of vehicle ID: %d to %.1f.", ReturnName(playerid, 0), VehicleData[id][cVehicle], health);
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "insurance", true))
    {
        new insurance;

        if(sscanf(extendstr, "d", insurance))
            return SendSyntaxMessage(playerid, "/editcar vehicleid insurance [insurance]");

        if(insurance < 0 || insurance > 5)
            return SendErrorMessage(playerid, "Insurance must between 0 - 5.");

        GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
        VehicleData[id][cInsurance] = insurance;
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted insurance of vehicle ID: %d to %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], insurance);
        Log_Write("logs/dynamicvehicle_log.txt", "[%s] %s has adjusted insurance of vehicle %s to %d.", ReturnDate(), ReturnAdminName(playerid), vehname, insurance);
        Vehicle_Save(id);
    }
    else if(!strcmp(opsi, "int", true))
    {
        new interior;

        if (sscanf(extendstr, "d", interior))
            return SendSyntaxMessage(playerid, "/editcar vehicleid int [interior id]");

        VehicleData[id][cInt] = interior;
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the int of vehicle ID: %d to %s.", ReturnName(playerid, 0), VehicleData[id][cVehicle], interior);
        Vehicle_Save(id);
        Vehicle_Spawn(id);
    }
    else if(!strcmp(opsi, "vw", true))
    {
        new vw;

        if (sscanf(extendstr, "d", vw))
            return SendSyntaxMessage(playerid, "/editcar vehicleid vw [virtual world]");

        VehicleData[id][cVw] = vw;
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the virtual world of vehicle ID: %d to %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle], vw);
        Vehicle_Save(id);
        Vehicle_Spawn(id);
    }
    else if(!strcmp(opsi, "unrent", true))
    {
        if (!VehicleData[id][cRent])
            return SendErrorMessage(playerid, "This vehicle isn't a rental");
            
        VehicleData[id][cRent] = 0;
        VehicleData[id][cRentTime] = 0;
        VehicleData[id][cRentOwned] = 0;
        VehicleData[id][cLocked] = 0;
        VehicleData[id][cLumber] = 0;

        VehicleData[id][cHealth] = 1000;

        VehicleData[id][cDamage][0] = VehicleData[id][cDamage][1] = VehicleData[id][cDamage][2] = VehicleData[id][cDamage][3] = 0;
        SetVehicleLock(VehicleData[id][cVehicle], 0);

        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unrent of vehicle ID: %d.", ReturnName(playerid, 0), VehicleData[id][cVehicle]);

        Vehicle_Delete(id);
    } else if (!strcmp(opsi, "upgrade", true)) {
        new
            type,
            panels,
            doors,
            lights,
            tires;

        if (sscanf(extendstr, "d", type)) {
            SendSyntaxMessage(playerid, "/editcar vehicleid upgrade [type]");
            SendClientMessageEx(playerid, X11_YELLOW_2, "[TYPES]: "WHITE"1 = engine, 2 = body");
            return 1;
        }

        switch (type) {
            case 1: {
                VehicleData[id][cEngineUpgrade] = 1;
                if (!IsABike(vehicleid)) VehicleData[id][cMaxHealth] = 2000.0;
                else VehicleData[id][cMaxHealth] = 1500.0;
                SetVehicleHealth(VehicleData[id][cVehicle], VehicleData[id][cMaxHealth]);
                Vehicle_Save(id);
                SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted upgrade %s of vehicle ID: %d.", ReturnName(playerid, 0), (type == 1) ? ("engine") : ("body"), VehicleData[id][cVehicle]);
            }
            case 2: {
                VehicleData[id][cBodyUpgrade] = 1;
                GetVehicleDamageStatus(VehicleData[id][cVehicle], panels, doors, lights, tires);
                UpdateVehicleDamageStatus(VehicleData[id][cVehicle], 0, 0, 0, tires);
                Vehicle_Save(id);
                SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted upgrade %s of vehicle ID: %d.", ReturnName(playerid, 0), (type == 1) ? ("engine") : ("body"), VehicleData[id][cVehicle]);
            }
            default: {
                SendSyntaxMessage(playerid, "/editcar vehicleid upgrade [type]");
                SendClientMessageEx(playerid, X11_YELLOW_2, "[TYPES]: "WHITE"1 = engine, 2 = body");
            }
        }

        GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
        Log_Write("logs/dynamicvehicle_log.txt", "[%s] %s has adjusted upgrade %s of vehicle %s to %d.", ReturnDate(), ReturnAdminName(playerid), (type == 1) ? ("engine") : ("body"), vehname, type);
    }
    return 1;
}

CMD:unrentveh(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "You must in car to unrent vehicle rental.");

    if (GetNearestRentalPoint(playerid) == -1)
        return SendErrorMessage(playerid, "Anda tidak dekat dengan Rental Point apapun.");

    new id = Vehicle_GetID(GetPlayerVehicleID(playerid));

    if(id == -1)
        return SendErrorMessage(playerid, "This is not rental vehicle.");

    if(VehicleData[id][cRentOwned] != PlayerData[playerid][pID]) 
        return SendErrorMessage(playerid, "You're not rent this vehicle.");

    if((GetPlayerJob(playerid, 0) == JOB_TAXI && PlayerData[playerid][pJobDuty] == 1 || GetPlayerJob(playerid, 0) == JOB_MECHANIC && PlayerData[playerid][pJobDuty] == 1) || (GetPlayerJob(playerid, 1) == JOB_MECHANIC && PlayerData[playerid][pJobDuty] == 1 || GetPlayerJob(playerid, 1) == JOB_TAXI && PlayerData[playerid][pJobDuty] == 1))
        return SendErrorMessage(playerid, "You must off duty to unrent this vehicle.");

    RemovePlayerFromVehicle(playerid);
    SendServerMessage(playerid, "Now you can rental vehicle again.");

    VehicleData[id][cRentOwned] = 0;
    VehicleData[id][cRentTime] = 0;
    VehicleData[id][cRent] = 0;

    VehicleData[id][cLumber] = 0;
    VehicleData[id][cLocked] = 0;

    VehicleData[id][cHealth] = 1000;

    VehicleData[id][cDamage][0] = VehicleData[id][cDamage][1] = VehicleData[id][cDamage][2] = VehicleData[id][cDamage][3] = 0;

    SetVehicleLock(VehicleData[id][cVehicle], 0);

    CoreVehicles[VehicleData[id][cVehicle]][vehFuel] = 100;

    Vehicle_Delete(id);
    return 1;
}

/*
CMD:createrentcar(playerid, params[])
{
    static
        color1,
        color2,
        price,
        model[32];

    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]ddd", model, price, color1, color2))
        return SendSyntaxMessage(playerid, "/createrentcar [modelid/name] [price] [color1] [color2]");

    if((model[0] = GetVehicleModelByName(model)) == 0)
        return SendErrorMessage(playerid, "Invalid model ID.");

    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        id = -1;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    id = Vehicle_Create(0, model[0], x, y, z, angle, color1, color2, 0, "{000000}RENTAL");

    VehicleData[id][cRent] = 1;
    VehicleData[id][cRentTime] = 0;
    VehicleData[id][cRentPrice] = price;
    VehicleData[id][cRentOwned] = 0;

    if(id == -1)
        return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

    SendServerMessage(playerid, "You have created rental vehicle ID: %d with price %s.", VehicleData[id][cVehicle], FormatNumber(VehicleData[id][cRentPrice]));
    return 1;
}
*/

CMD:createfactioncar(playerid, params[])
{
    static
        faction,
        color1,
        color2,
        plate[24],
        model[32];

    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]ddds[24]", model, faction, color1, color2, plate)) return SendSyntaxMessage(playerid, "/createfactioncar [modelid/name] [faction id (/factions)] [color1] [color2] [plate number]");
    if((model[0] = GetVehicleModelByName(model)) == 0) return SendErrorMessage(playerid, "Invalid model ID.");
    if(strlen(plate) > 24) return SendErrorMessage(playerid, "Plate number too long.");
    if(!FactionData[faction][factionExists]) return SendErrorMessage(playerid, "Faction does not exists.");

    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        id = -1,
        vehname[32];

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    id = Vehicle_Create(0, model[0], x, y, z, angle, color1, color2, FactionData[faction][factionID], plate);

    if(id == cellmin)
        return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

    GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
    SendServerMessage(playerid, "You have created vehicle ID: %d.", VehicleData[id][cVehicle], ReturnName(playerid, 0));
    Log_Write("logs/dynamicvehicle_log.txt", "[%s] %s has created vehicle faction %s with model %s.", ReturnDate(), ReturnAdminName(playerid), FactionData[faction][factionName], vehname);
    return 1;
}

CMD:createjobcar(playerid, params[])
{
    static
        job,
        color1,
        color2,
        plate[24],
        model[32];

    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    if(sscanf(params, "s[32]ddds[24]", model, job, color1, color2, plate)) return SendSyntaxMessage(playerid, "/createjobcar [modelid/name] [job type(/jobtypes)] [color1] [color2] [plate number]");
    if((model[0] = GetVehicleModelByName(model)) == 0) return SendErrorMessage(playerid, "Invalid model ID.");
    if(strlen(plate) > 24) return SendErrorMessage(playerid, "Plate number too long.");
    if(!JobData[job][jobExists]) return SendErrorMessage(playerid, "Job does not exists.");
    
    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        id = -1,
        vehname[32];

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);
    
    id = Vehicle_Create(0, model[0], x, y, z, angle, color1, color2, 0, plate, job);
    if(id == cellmin)
        return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

    GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
    SendServerMessage(playerid, "You have created vehicle ID: %d.", VehicleData[id][cVehicle], ReturnName(playerid, 0));
    Log_Write("logs/dynamicvehicle_log.txt", "[%s] %s has created vehicle job %s with model %s.", ReturnDate(), ReturnAdminName(playerid), Job_GetName(JobData[job][jobType]), vehname);
    return 1;
}

CMD:jobtypes(playerid, params[])
{
    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);
    SendClientMessageEx(playerid, X11_YELLOW_2,"JOBID: "WHITE"1: Trucker | 2: Mechanic | 3: Taxi Driver | 4: Cargo Unloader");
    SendClientMessageEx(playerid, X11_YELLOW_2,"JOBID: "WHITE"5: Miner | 6: Food Vendor | 7: Package sorter | 8: Arms Dealer | 9: Lumberjack | 10: Smuggler | 11. Farmer");   
    return 1;
}
CMD:cpv(playerid, params[])
    return cmd_createplayervehicle(playerid, params);

CMD:createplayervehicle(playerid, params[])
{
    if (CheckAdmin(playerid, 7))
        return PermissionError(playerid);

    static
        userid,
        color1,
        color2,
        model;

    if(sscanf(params, "uddd", userid, model, color1, color2))
        return SendSyntaxMessage(playerid, "/createplayervehicle [playerid/PartOfName] [modelid (use /vmodels)] [color1] [color2]");

    if (PlayerData[userid][pVipTime] > 0 && PlayerData[userid][pVip] == 3) {
        if(Vehicle_GetCount(userid) >= MAX_PLAYER_VEHICLE+1)
            return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");
    } else if (PlayerData[userid][pVipTime] > 0 && PlayerData[userid][pVip] == 4) {
        if(Vehicle_GetCount(userid) >= MAX_PLAYER_VEHICLE+2)
            return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");
    } else {
        if(Vehicle_GetCount(userid) >= MAX_PLAYER_VEHICLE)
            return SendErrorMessage(playerid, "This player already owns the maximum amount of cars.");
    }

    if(model < 400 || model > 611)
        return SendErrorMessage(playerid, "Invalid model ID.");

    // if((model = GetVehicleModelByName(model)) == 0)
    //     return SendErrorMessage(playerid, "Invalid model ID."); digunakan saat model masih pake string [32], dicabut modelname karena bikin error

    static
        Float:x,
        Float:y,
        Float:z,
        Float:angle,
        id = -1,
        vehname[32];

    GetPlayerPos(userid, x, y, z);
    GetPlayerFacingAngle(userid, angle);

    id = Vehicle_Create(PlayerData[userid][pID], model, x, y + 2, z + 1, angle, color1, color2, 0, "NO HAVE");

    if(id == cellmin)
        return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

    GetVehicleNameByVehicle(VehicleData[id][cVehicle], vehname);
    SendServerMessage(playerid, "You have created vehicle ID: %d for %s.", VehicleData[id][cVehicle], ReturnName(userid, 0));
    Log_Write("logs/dynamicvehicle_log.txt", "[%s] %s has created vehicle %s for %s.", ReturnDate(), NormalName(playerid), vehname, NormalName(userid));
    return 1;
}

CMD:destroycar(playerid, params[])
{
    if (CheckAdmin(playerid, 3))
        return PermissionError(playerid);

    static
        id = 0;

    if(sscanf(params, "d", id))
        return SendSyntaxMessage(playerid, "/destroycar [vehicle id]");

    if(!IsValidVehicle(id) || Vehicle_GetID(id) == -1)
        return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

    new vehname[32];

    GetVehicleNameByVehicle(VehicleData[Vehicle_GetID(id)][cVehicle], vehname);
    foreach(new i : Player)
    {
        if(VehicleData[Vehicle_GetID(id)][cOwner] == PlayerData[i][pID]) {
            SendServerMessage(i, "Kendaraan anda, "RED"%s "WHITE"telah di hapus oleh admin "YELLOW"%s.", vehname, ReturnAdminName(playerid));
        }
    }
    for(new i = 0; i != MAX_GARAGE; i++) if(VehicleData[Vehicle_GetID(id)][cGarage] == GarageData[i][garageID])
    {
        GarageData[i][garageInside] --;
        Garage_Sync(i);
    }
    Log_Write("logs/dynamicvehicle_log.txt", "[%s] %s has destroy vehicle %s index %d.", ReturnDate(), NormalName(playerid), GetVehicleNameByModel(VehicleData[id][cVehicle]), id);
    Vehicle_Delete(Vehicle_GetID(id));
    SendServerMessage(playerid, "You have successfully destroyed vehicle ID: %d.", id);
    return 1;
}

CMD:stopanim(playerid, params[])
{
    if(!AnimationCheck(playerid))
        return SendErrorMessage(playerid, "You don't need to use this command right now.");

    ClearAnimations(playerid, 1);
    HidePlayerFooter(playerid);

    PlayerData[playerid][pLoopAnim] = 0;
    SendServerMessage(playerid, "You have stopped any animations.");
    return 1;
}

// CMD:editbillboard(playerid, params[])
// {
//     static
//         id,
//         type[24],
//         string[128];

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "ds[24]S()[128]", id, type, string))
//     {
//         SendSyntaxMessage(playerid, "/editbillboard [id] [name]");
//         SendClientMessage(playerid, X11_YELLOW_2, "[NAMES]:"WHITE" location, name, price, message, owner, range");
//         return 1;
//     }
//     if((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
//         return SendErrorMessage(playerid, "You have specified an invalid business ID.");

//     if(!strcmp(type, "location", true))
//     {
//         GetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the location of billboard ID: %d.", ReturnName(playerid, 0), id);
//     }
//     else if(!strcmp(type, "price", true))
//     {
//         new price;

//         if(sscanf(string, "d", price))
//                 return SendSyntaxMessage(playerid, "/editbillboard [id] [price] [new price]");

//         BillBoardData[id][bbPrice] = price;

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the price of billboard ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
//     }
//     else if(!strcmp(type, "name", true))
//     {
//         new name[32];

//         if(sscanf(string, "s[32]", name))
//                 return SendSyntaxMessage(playerid, "/editbillboard [id] [name] [new name]");

//         format(BillBoardData[id][bbName], 32, name);

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the name of billboard ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
//     }
//     else if(!strcmp(type, "message", true))
//     {
//         new name[32];

//         if(sscanf(string, "s[230]", name))
//                 return SendSyntaxMessage(playerid, "/editbillboard [id] [message] [new message] (Max Chars: 230)");

//         format(BillBoardData[id][bbMessage], 32, name);

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the message of billboard ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
//     }
//     else if(!strcmp(type, "owner", true))
//     {
//         new giveplayerid;

//         if(sscanf(string, "d", giveplayerid))
//         return SendSyntaxMessage(playerid, "/editbillboard [id] [(remove)owner] [playerid]");

//         if(giveplayerid == INVALID_PLAYER_ID)
//         return SendErrorMessage(playerid, "That player is disconnected.");

//         BillBoardData[id][bbOwner] = GetPlayerSQLID(giveplayerid);

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the owner of billboard ID: %d", ReturnName(playerid, 0), id);
//     }
//     else if(!strcmp(type, "removeowner", true))
//     {
//         if(sscanf(string, "d"))
//         return SendSyntaxMessage(playerid, "/editbillboard [id] [removeowner]");

//         BillBoardData[id][bbOwner] = 0;

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has removed the owner of billboard ID: %d", ReturnName(playerid, 0), id);
//     }
//     else if(!strcmp(type, "range", true))
//     {
//         new range;

//         if(sscanf(string, "d", range))
//         return SendSyntaxMessage(playerid, "/editbillboard [id] [range] [new range]");

//         if(range < 10)
//         {
//             SendErrorMessage(playerid, "Range can only be 10-200");
//             return 1;
//         }

//         if(range > 200)
//         {
//             SendErrorMessage(playerid, "Range can only be 10-200");
//             return 1;
//         }

//         BillBoardData[id][bbRange] = range;

//         Billboard_Refresh(id);
//         Billboard_Save(id);

//         SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has adjusted the range of billboard ID: %d to %d.", ReturnName(playerid, 0), id, range);
//     }
//     return 1;
// }

// CMD:destroybillboard(playerid, params[])
// {
//     static
//         id = 0;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     if(sscanf(params, "d", id))
//         return SendSyntaxMessage(playerid, "/destroybillboard [bb id]");

//     if((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
//         return SendErrorMessage(playerid, "You have specified an invalid billboard ID.");

//     Billboard_Delete(id);
//     SendServerMessage(playerid, "You have successfully destroyed billboard ID: %d.", id);
//     return 1;
// }

// AFK SYSTEM
CMD:afk(playerid, params[]) {
    if (!IsPlayerConnected(playerid))
        return SendErrorMessage(playerid, "You are not logged in!");

    if (!PlayerData[playerid][pAFK])
        return SendErrorMessage(playerid, "You're not in AFK Mode");

    if (PlayerData[playerid][pAFK]) {
        TogglePlayerControllable(playerid, 1);
        if (IsPlayerDuty(playerid)) SetFactionColor(playerid);
        else SetPlayerColor(playerid, DEFAULT_COLOR);
        PlayerData[playerid][pAFK] = 0;
        SendCustomMessage(playerid, "AFK", "You are now no longer in AFK Mode.");
    }
    return 1;
}

CMD:listafk(playerid, params[])
{
    new string[500], afkTime[24];
    format(string, sizeof(string), "Name\tType\tTime\n");
    foreach(new i : Player) if(SQL_IsCharacterLogged(i))
    {
        if (PlayerData[i][pPaused]) {
            FormatTimeleft((GetPlayerPausedTime(i)/1000), afkTime);
            format(string, sizeof(string), "%s%s\tPaused\t%s\n", string, NormalName(i), afkTime);
        }
    }
    Dialog_Show(playerid, DisplayOnly, DIALOG_STYLE_TABLIST_HEADERS, "Afk List", string, "Close", "");
    return 1;
}

CMD:call(playerid, params[])
{
    if(!Inventory_HasItem(playerid, "Cellphone")) return SendErrorMessage(playerid, "You don't have a cellphone on you.");
    if(!PlayerData[playerid][pPhone]) return SendErrorMessage(playerid, "This phone doesn't have SIM Card.");
    if(AccountData[playerid][pAdminDuty]) return SendErrorMessage(playerid, "Your must off duty admin to use this command.");
    if(PlayerData[playerid][pPhoneOff]) return SendErrorMessage(playerid, "Your phone must be powered on.");
    if (Inventory_Count(playerid, "PhoneCredits") < 1) return SendErrorMessage(playerid, "You don't have any phone credits");
    if(PlayerData[playerid][pIncomingCall]) return SendErrorMessage(playerid, "Waiting someone to answer your call.");
    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "You already to call on your phone.");
    
    if(PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || !IsPlayerSpawned(playerid) || PlayerData[playerid][pJailTime] || PlayerData[playerid][pInjured])
        return SendErrorMessage(playerid, "You can't use this command now.");

    static
        targetid,
        number;

    if(sscanf(params, "d", number))
         return SendSyntaxMessage(playerid, "/call [phone number] (1222 for taxi, 911 for emergency, 666 for non emergency, 555 for mechanic, 711 for goverment, 144 for sanews)");

    if(!number) return SendErrorMessage(playerid, "The specified phone number is not in service.");

    if(number == 911)
    {
        if(PlayerData[playerid][pEmergency])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pEmergency] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

        cmd_ame(playerid, "takes out their cellphone and places a call");
        SendClientMessage(playerid, X11_LIGHTBLUE, "[OPERATOR]:"WHITE" Which service do you require: \"police\" or \"medics\"?");
    }
    else if(number == 555)
    {
        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pMechanicCalled] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendClientMessage(playerid, X11_YELLOW_2, "[OPERATOR]:"WHITE" The mechanic has been notified of your call.");

        SendClientMessage(playerid, COLOR_SERVER, "You hung up your phone.");
        SendJobMessage(JOB_MECHANIC, X11_GREEN_YELLOW, "|______________ MECHANIC CALL ______________|", ReturnName(playerid, 0), PlayerData[playerid][pPhone], GetPlayerLocation(playerid));
        SendJobMessage(JOB_MECHANIC, X11_WHITE, "Caller: (ID: %d) %s (Ph: %d)", playerid, ReturnName2(playerid, 0), PlayerData[playerid][pPhone]);
        SendJobMessage(JOB_MECHANIC, X11_WHITE, "Current Location: %s (Type /acceptcall to accept mechanic call.).", GetPlayerLocation(playerid));
    }
    else if(number == 711)
    {
        if(PlayerData[playerid][pEmergency])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pEmergency] = 4;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

        cmd_ame(playerid, "takes out their cellphone and places a call");
        SendClientMessage(playerid, X11_LIGHTBLUE, "[OPERATOR]:"WHITE" What can we help you? don't send junk message for this service?.");
    }
    else if(number == 1222)
    {
        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pTaxiCalled] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

        SendClientMessage(playerid, X11_YELLOW_2, "[OPERATOR]:"WHITE" The taxi department has been notified of your call.");

        SendClientMessage(playerid, COLOR_SERVER, "You hung up your phone.");
        SendJobMessage(JOB_TAXI, X11_YELLOW_2, "* %s (PHONE NUMBER: %d) is requesting a taxi at %s (use /acceptcall to accept).", ReturnName(playerid, 0), PlayerData[playerid][pPhone], GetPlayerLocation(playerid));
    }
    else if(number == 144)
    {
        if(PlayerData[playerid][pInjured])
            return SendErrorMessage(playerid, "You can't use this command now.");

        PlayerData[playerid][pEmergency] = 5;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

        cmd_ame(playerid, "takes out their cellphone and places a call");
        SendClientMessage(playerid, X11_LIGHTBLUE, "[OPERATOR]:"WHITE" What can we help you? don't send junk message for this service?.");
    }
    else if (number == 666) {
        if(PlayerData[playerid][pNonEmergency])
            return SendErrorMessage(playerid, "You can't use this command now.");
        
        PlayerData[playerid][pNonEmergency] = 1;
        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

        cmd_ame(playerid, "takes out their cellphone and places a call");
        SendClientMessage(playerid, X11_LIGHTBLUE, "[NON-EMERGENCY]:"WHITE" Which service do you require: \"police\" or \"medics\"?");
    }
    else if((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
    {
        if(PlayerData[playerid][pInjured]) return SendErrorMessage(playerid, "You can't use this command now.");
        if(targetid == playerid) return SendErrorMessage(playerid, "You can't call yourself!");
        if(PlayerData[targetid][pPhoneOff]) 
        {
            AddMissCall(targetid, PlayerData[playerid][pPhone]);
            SendErrorMessage(playerid, "The recipient has their cellphone powered off.");
            return 1;
        }
        if(PlayerData[targetid][pCallLine] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "The recipient has calling someone, try again later.");
        if(PlayerData[targetid][pIncomingCall]) return SendErrorMessage(playerid, "Hangup first (/h) to call someone.");

        PlayerData[targetid][pIncomingCall] = 1;
        PlayerData[playerid][pIncomingCall] = 1;

        PlayerData[targetid][pCallLine] = playerid;
        PlayerData[playerid][pCallLine] = targetid;

        SendCustomMessage(playerid, "PHONE", "Attempting to dial "CYAN"%s (%d), "WHITE"please wait for an answer...", GetContactNameByNumber(playerid, number), number);
        SendCustomMessage(targetid, "PHONE", "Incoming call from "CYAN"%s (%d) "WHITE"(type \""YELLOW"/answer"WHITE"\" to answer the phone)", GetContactNameByNumber(targetid, PlayerData[playerid][pPhone]), PlayerData[playerid][pPhone]);

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);
        cmd_ame(playerid, "takes out their cellphone and places a call");
    }
    else SendErrorMessage(playerid, "The specified phone number is not in service.");

    return 1;
}


/*CMD:setrankname(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    static
        name[25],
        userid;

    if(sscanf(params,"us[25]",userid, name))
        return SendSyntaxMessage(playerid, "/setrankname [userid] [name]");

    format(AccountData[userid][pAdminRankName], 25, name);

    //SendClientMessageEx(userid, X11_LIGHTBLUE,"RANKNAME: "YELLOW"%s has changed your rank name to %s.",ReturnName(playerid,1),name);
    //SendAdminMessage(X11_TOMATO_1,"AdmCmd: %s has set %s to division %s.", ReturnName2(playerid), ReturnName(userid), name);
    return 1;
}*/


CMD:clearallreports(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);
        
    new
        count;

    for (new i = 0; i != MAX_REPORTS; i ++)
    {
        if(ReportData[i][rExists]) {
            Report_Remove(i);
            count++;
        }
    }
    if(!count)
        return SendErrorMessage(playerid, "There are no active reports to display.");
            
    SendAdminMessage(X11_TOMATO_1, "CLEAR: "WHITE"%s has removed all reports on the server.",ReturnName(playerid,1));
    return 1;
}

CMD:clearallasks(playerid) {
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);
        
    new
        count;

    for (new i = 0; i != MAX_ASK; i ++)
    {
        if(AskData[i][askExists]) {
            Ask_Remove(i);
            count++;
        }
    }
    if(!count)
        return SendErrorMessage(playerid, "There are no active asks to display.");
            
    SendAdminMessage(X11_TOMATO_1, "CLEAR: "WHITE"%s has removed all asks on the server.",ReturnName(playerid,1));
    return 1;
}

// CMD:createbillboard(playerid, params[])
// {
//     static
//         id = -1;

//     if (CheckAdmin(playerid, 7))
//         return PermissionError(playerid);

//     id = Billboard_Create(playerid, -1);

//     if(id == -1)
//         return SendErrorMessage(playerid, "The server has reached the limit for billboards.");

//     SendServerMessage(playerid, "You have successfully created billboard ID: %d.", id);
//     return 1;
// }

// CMD:billboards(playerid, params[])
// {
//     if (CheckAdmin(playerid, 1))
//     {
//             NotAllowed(playerid);
//             return 1;
//     }
//     ViewBillboards(playerid);
//     return 1;
// }

// CMD:mybillboard(playerid, params[])
// {
//     if(PlayerData[playerid][pOwnsBillboard] == -1)
//     {
//         SendErrorMessage(playerid, "You do not own a billboard");
//         return 1;
//     }
//     Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Message\nUnrent Billboard", "Proceed", "Cancel");
//     return 1;
// }

CMD:helmet(playerid,params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid) && Helmet[playerid] == 0 && IsABike(vehicleid))
    {
        Helmet[playerid] = 1;
        SetPlayerAttachedObject(playerid,JOB_SLOT , 18645, 2, 0.07, 0.017, 0, 88, 75, 0);
        SendClientMessage(playerid, COLOR_GREEN, "You have put on a bike helmet. This will supress the impact of a crash.");
        cmd_ame(playerid, "reaches for their helmet, and takes it off");
    }
    else if(IsPlayerInAnyVehicle(playerid) && Helmet[playerid] == 1 && IsABike(vehicleid))
    {
        Helmet[playerid] = 0;
        SendClientMessage(playerid, COLOR_GREEN, "You have taken off your helmet. You will no longer be protected from crashes.");
        cmd_ame(playerid, "reaches for their helmet, and unbuckles it");
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    return 1;
}

CMD:seatbelt(playerid,params[])
{
    if(IsPlayerInAnyVehicle(playerid) && Seatbelt{playerid} == 0 && !IsABike(GetPlayerVehicleID(playerid)))
    {
        Seatbelt{playerid} = 1;
        SetPlayerAttachedObject(playerid, JOB_SLOT, 18634, 7,0.000000, 0.100000, 0.350000, -35.224993, 45.215000, 1.500000, 5.000000, 1.500000, 1.500000);
        SendClientMessage(playerid, COLOR_GREEN, "You have put on your seatbelt. This will supress the impact of a crash.");
        cmd_ame(playerid, "reaches for their seatbelt, and takes it off");
    }
    else if(IsPlayerInAnyVehicle(playerid) && Seatbelt{playerid} == 1 && !IsABike(GetPlayerVehicleID(playerid)))
    {
        Seatbelt{playerid} = 0;
        SendClientMessage(playerid, COLOR_GREEN, "You have taken off your seatbelt. You will no longer be protected from crashes.");
        cmd_ame(playerid, "reaches for their seatbelt, and unbuckles it");
        if(IsPlayerAttachedObjectSlotUsed(playerid, JOB_SLOT)) RemovePlayerAttachedObject(playerid, JOB_SLOT);
    }
    return 1;
}

CMD:checkseatbelt(playerid, params[])
{
    new userID,string[128];
    if(sscanf(params, "u", userID)) return SendSyntaxMessage(playerid, "/checkseatbelt [playerid]");
    if(GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "You must be a police officer.");
    if(!PlayerData[playerid][pOnDuty]) return SendErrorMessage(playerid, "You must duty first.");
    if(IsPlayerConnected(userID) && userID != INVALID_PLAYER_ID)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(userID, x, y, z);
        if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt{userID} == 1)
        {
            format(string, sizeof(string), "%s is wearing their seatbelt", ReturnName(playerid));
            SendClientMessage(playerid, COLOR_GREEN, string);
            return 1;
        }
        else if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt{userID} == 0)
        {
            format(string, sizeof(string), "%s is not wearing their seatbelt", ReturnName(playerid));
            SendClientMessage(playerid, COLOR_GREEN, string);
            return 1;
        }
        else
        {
            SendClientMessage(playerid, X11_RED_2, "You are not near that player");
            return 1;
        }
    }
    else SendClientMessage(playerid, X11_RED_2, "The ID you have entered does not exist");
    return 1;
}

Function:PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new Float:tempposx, Float:tempposy, Float:tempposz;
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    tempposx = (oldposx -x);
    tempposy = (oldposy -y);
    tempposz = (oldposz -z);
    if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
    {
        return 1;
    }
    return 0;
}

stock SetPlayerSkinEx(playerid, skin, choice = 0, update = 0) 
{
    if(!update) {
        if(!choice) PlayerData[playerid][pSkin] = skin;
        else PlayerData[playerid][pSkinFaction] = skin;
    }

    if(!PlayerData[playerid][pTogHud]) {
        if (PlayerData[playerid][pHUD] == 1) {
            PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], skin);
            PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
            PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
        }
    }
    SetPlayerSkin(playerid,skin);
    return 1;
}

SetPlayerStreamerSettings(playerid) {
    switch (PlayerData[playerid][pStreamer]) {
        case 0: {
            Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 400, playerid);
            Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 0.6, playerid);
        }
        case 1: {
            Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 500, playerid);
            Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 0.8, playerid);
        }
        case 2: {
            Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 700, playerid);
            Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 1.0, playerid);
        }
        case 3: {
            Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 800, playerid);
            Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 1.5, playerid);
        }
        case 4: {
            Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 950, playerid);
            Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 2.0, playerid);
        }
        default: {
            Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 700, playerid);
            Streamer_SetRadiusMultiplier(STREAMER_TYPE_OBJECT, 1.0, playerid);
        }
    }
}

ToggleSpeedometer(playerid, bool:toggle)
{
    if(toggle)
    {
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                for (new i =0; i < 16; i ++) {
                    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][i]);
                }
            }
            case 2: {
                for (new i = 16; i < 25; i ++) {
                    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_speedometer][i]);
                }
            }
        }
    }
    else {
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                for (new i = 0; i < 16; i ++) {
                    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_speedometer][i]);
                }
            }
            case 2: {
                for (new i = 16; i < 25; i ++) {
                    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_speedometer][i]);
                }
            }
        }
    }
    return 1;
}

TogglePlayerGUI(playerid, bool:toggle)
{
    if(toggle)
    {
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][0]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6]);

                if(PlayerData[playerid][pOnDuty]) {
                    PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], PlayerData[playerid][pSkinFaction]);
                    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
                    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
                } else {
                    PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1], PlayerData[playerid][pSkin]);
                    PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
                    PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
                }
            }
            case 2: {
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11]);
            }
        }
    }
    else {
        switch (PlayerData[playerid][pHUD]) {
            case 1: {
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][0]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][1]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][2]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][3]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][4]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][5]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][6]);
            }
            case 2: {
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][7]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][8]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][9]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][10]);
                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_playerGUI][11]);
            }
        }
    }
    return 1;
}

GetAdvertiseType(types) {
    new type[24];

    switch (types) {
        case 1: format(type,sizeof(type),"Automotive");
        case 2: format(type,sizeof(type),"Property");
        case 3: format(type,sizeof(type),"Event");
        case 4: format(type,sizeof(type),"Service");
        case 5: format(type,sizeof(type),"Job Search");
        default: format(type,sizeof(type),"Unknown Type");
    }

    return type;
}

static Business_Type(bizid) {
    new pickup[24];
    switch (BusinessData[bizid][bizType]) {
        case 1: pickup = "Retail";
        case 2: pickup = "Weapons";
        case 3: pickup = "Clothes";
        case 4: pickup = "Fast Food";
        case 5: pickup = "Dealership";
        case 6: pickup = "Gas Station";
        case 7: pickup = "Furniture";
        case 8: pickup = "Electronic Store";
        case 9: pickup = "GYM";
    }
    return pickup;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if (!SQL_IsCharacterLogged(playerid) || !SQL_IsLogged(playerid))
        return 0;

    if (!success)
        return SendErrorMessage(playerid, "Unknown command, see '/help'");
    
    return 1;
}

Auction_Reset()
{
    foreach(new id : Player) if(GetPVarInt(id, "IkutLelang") == 1)
    {
        SetPVarInt(id, "IkutLelang", 0);
    }

    SetGVarInt("AuctionType", 0, GLOBAL_VARTYPE_INT);
    SetGVarInt("AuctionCount", 0, GLOBAL_VARTYPE_INT);
    SetGVarInt("AuctionStart", 0, GLOBAL_VARTYPE_INT);
    SetGVarInt("AuctionDiff", 0, GLOBAL_VARTYPE_INT);
    SetGVarString("AuctionLelang", "none", GLOBAL_VARTYPE_STRING);
    SetGVarString("AuctionHighest", "none", GLOBAL_VARTYPE_STRING);
    KillTimer(Auction);
    return 1;
}

Function:AuctionTime()
{
    new text[255], property[128],name[MAX_PLAYER_NAME];
    GetGVarString("AuctionLelang", property, sizeof(property), GLOBAL_VARTYPE_STRING);
    GetGVarString("AuctionHighest", name, sizeof(name), GLOBAL_VARTYPE_STRING);

    switch(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT))
    {
        case 1: 
        {
            SetGVarInt("AuctionTime", GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT)-1, GLOBAL_VARTYPE_INT);
            format(text,sizeof(text),"{00FFFF}%s\n"GREEN"Start: "WHITE"%s\n"GREEN"Diff: "WHITE"%s\n"GREEN"Participants: "WHITE"%d\nStart in: %d", property, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)), FormatNumber(GetGVarInt("AuctionDiff", GLOBAL_VARTYPE_INT)), GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT), GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT));

            if(GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT) == 0)
            {
                if(!GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT))
                {
                    SetDynamicObjectMaterialText(newbieschool, 0, "No one join this auction.", 130, "Ariel", 27, 1, -1, -16777216, 1);
                    Auction_Reset();
                }
                else
                {
                    SetGVarInt("AuctionType", 2, GLOBAL_VARTYPE_INT);
                    SetGVarInt("AuctionTime", 10, GLOBAL_VARTYPE_INT);
                }
            }
        }
        case 2: 
        {
            SetGVarInt("AuctionTime", GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT)-1, GLOBAL_VARTYPE_INT);
            format(text,sizeof(text),"{00FFFF}%s\n"GREEN"Highest bidder: "WHITE"%s\n"GREEN"Offer: "WHITE"%s\nCountdown: %d", property, name, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)), GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT));

            if(GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT) == 0)
            {
                format(text,sizeof(text),"{00FFFF}%s\n"WHITE"%s - "GREEN"%s", property, name, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)));

                foreach(new id : Player) if(IsPlayerInNewbieSchool(id))
                {
                    SetPVarInt(id, "IkutLelang", 0);
                    SendClientMessageEx(id, X11_LIGHTBLUE, "AUCTION: "WHITE"%s: %s - "GREEN"%s.", property, name, FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)));

                    if(!strcmp(name,ReturnName(id), true))
                    {
                        SendClientMessageEx(id, X11_LIGHTBLUE, "AUCTION: "WHITE"Anda telah memenangkan %s - "GREEN"%s", property,FormatNumber(GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)));
                        GiveMoney(id, -GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT));
                    }
                }
                Auction_Reset();
            }
        }
    }
    SetDynamicObjectMaterialText(newbieschool, 0, text, 130, "Ariel", 27, 1, -1, -16777216, 1);
    return 1;
}

Function:VoteTime()
{
    new pertanyaan[128], unknown, count = Iter_Count(Player);
    unknown = count-(GetGVarInt("Yes")+GetGVarInt("No"));

    GetGVarString("VoteQuest", pertanyaan, 128);

    SendClientMessageToAllEx(X11_LIGHTBLUE, "VOTE: "YELLOW"%s", pertanyaan);
    SendClientMessageToAllEx(X11_LIGHTBLUE, "VOTE: "WHITE"%d "GREEN"yes, "WHITE"%d"RED" no, "WHITE"%d {C0C0C0}unknown", GetGVarInt("Yes"), GetGVarInt("No"), (unknown < 0) ? (unknown*-1) : unknown);

    foreach(new i : Player) {
        SetPVarInt(i, "Vote", 0);
    }
    SetGVarInt("Yes", 0);
    SetGVarInt("No", 0);
    SetGVarInt("Vote", 0);
    return 1;
}

CMD:vote(playerid, params[])
{
    new vote[10], string[64];

    if (CheckAdmin(playerid, 2))
        return PermissionError(playerid);

    if(sscanf(params, "s[10]S()[64]", vote, string))
        return SendSyntaxMessage(playerid, "/vote [create/end]");

    if(!strcmp(vote, "create", true))
    {
        new pertanyaan[128];
    
        if(sscanf(string,"s[128]", pertanyaan))
            return SendSyntaxMessage(playerid, "/vote create [vote]");

        SendClientMessageToAllEx(X11_LIGHTBLUE, "VOTE: "YELLOW"%s", pertanyaan);
        SendClientMessageToAllEx(X11_LIGHTBLUE, "VOTE: "GREEN"/yes "WHITE"to accept, "RED"/no"WHITE" to deny");
        SetGVarString("VoteQuest", pertanyaan);
        SetGVarInt("Yes", 0);
        SetGVarInt("No", 0);
        SetGVarInt("Vote", 1);
    
        TimerVote = SetTimer("VoteTime", 45000, false);

        foreach(new i : Player) {
            SetPVarInt(i, "Vote", 0);
        }
    }
    if(!strcmp(vote, "end", true))
    {
        if(!GetGVarInt("Vote"))
        return SendErrorMessage(playerid, "Tidak ada vote yang sedang berlangsung.");

        SendClientMessageToAllEx(X11_TOMATO_1, "AdmCmd: %s ended this voting.",ReturnName2(playerid, 0));
        SetGVarString("VoteQuest", "(null)");

        SetGVarInt("Vote", 0);
        SetGVarInt("Yes", 0);
        SetGVarInt("No", 0);

        foreach(new i : Player) {
            SetPVarInt(i, "Vote", 0);
        }

        KillTimer(TimerVote);
    }
    return 1;
}

CMD:no(playerid, params[])
{
    if(!GetGVarInt("Vote"))
        return SendErrorMessage(playerid, "Tidak ada vote yang sedang berlangsung.");

    if(GetPVarInt(playerid, "Vote"))
        return SendErrorMessage(playerid, "Anda sudah memvoting sebelumnya.");

    SetGVarInt("No", GetGVarInt("No")+1);
    SetPVarInt(playerid, "Vote", 1);
    SendServerMessage(playerid, "You're vote "RED"No");
    return 1;
}

CMD:yes(playerid, params[])
{
    if(!GetGVarInt("Vote"))
        return SendErrorMessage(playerid, "Tidak ada vote yang sedang berlangsung.");

    if(GetPVarInt(playerid, "Vote"))
        return SendErrorMessage(playerid, "Anda sudah memvoting sebelumnya.");

    SetGVarInt("Yes", GetGVarInt("Yes")+1);
    SetPVarInt(playerid, "Vote", 1);
    SendServerMessage(playerid, "You're vote "GREEN"Yes");
    return 1;
}

CMD:quiz(playerid, params[])
{
    new choice[10], subparam[128];
    if(sscanf(params, "s[10]S()[128]", choice, subparam)) 
        return SendSyntaxMessage(playerid, "/quiz [create/answer/end]");

    if(!strcmp(choice, "create"))
    {
        if (CheckAdmin(playerid, 1))
            return PermissionError(playerid);

        new quest[128], answer[128];
        if(GetGVarInt("QuizReady", GLOBAL_VARTYPE_INT))
            return SendErrorMessage(playerid, "You can't create more than 1 quiz.");

        if(sscanf(subparam, "p<:>s[128]s[128]", quest,answer))
            return SendSyntaxMessage(playerid, "/quiz create [questions] : [answer]");
                 
        SetGVarInt("QuizReady", 1, GLOBAL_VARTYPE_INT);
        SetGVarString("QuizQuest", quest, GLOBAL_VARTYPE_STRING);
        SetGVarString("QuizAnswer", answer, GLOBAL_VARTYPE_STRING);

        SendClientMessageToAllEx(X11_LIGHTBLUE, "QUIZ: "WHITE"%s", quest);
        SendClientMessageToAll(X11_LIGHTBLUE, "QUIZ: "WHITE"Use '"YELLOW"/quiz answer"WHITE"' to answer the quiz.");
        SendAdminMessage(X11_TOMATO_1, "Quiz added by %s", ReturnAdminName(playerid));
    }
    else if(!strcmp(choice, "answer"))
    {
        new answer[128],answered[128];

        GetGVarString("QuizAnswer", answer, sizeof(answer), GLOBAL_VARTYPE_STRING);

        if(sscanf(subparam,"s[128]", answered))
        return SendSyntaxMessage(playerid, "/quiz answer [answer]");

        if(!GetGVarInt("QuizReady", GLOBAL_VARTYPE_INT))
        return SendErrorMessage(playerid, "There is no available quiz.");

        if(!strcmp(answered, answer, true))
        {
            SendClientMessageToAllEx(X11_LIGHTBLUE, "QUIZ: "YELLOW"%s "WHITE"won the quiz.",ReturnName(playerid));
            SendClientMessageToAllEx(X11_LIGHTBLUE, "QUIZ: "WHITE"The correct answer was '"YELLOW"%s"WHITE"'",answer);

            SetGVarInt("QuizReady", 0, GLOBAL_VARTYPE_INT);
            SetGVarString("QuizQuest", "(null)", GLOBAL_VARTYPE_STRING);
            SetGVarString("QuizAnswer", "(null)", GLOBAL_VARTYPE_STRING);
        }
        else
            SendErrorMessage(playerid, "Wrong answer.");
    }
    else if(!strcmp(choice, "end"))
    {
        new quest[128],answer[128];

        GetGVarString("QuizQuest", quest, sizeof(quest), GLOBAL_VARTYPE_STRING);
        GetGVarString("QuizAnswer", answer, sizeof(answer), GLOBAL_VARTYPE_STRING);

        if (CheckAdmin(playerid, 1))
            return PermissionError(playerid);
            
        if(!GetGVarInt("QuizReady", GLOBAL_VARTYPE_INT))
        return SendErrorMessage(playerid, "There is no available quiz.");

        SendClientMessageToAllEx(X11_LIGHTBLUE, "QUIZINFO"WHITE": Admin "YELLOW"%s"WHITE" ended the quiz. The correct answer was '"YELLOW"%s"WHITE"", ReturnName(playerid), answer);
        SetGVarInt("QuizReady", 0, GLOBAL_VARTYPE_INT);
        SetGVarString("QuizQuest", "(null)", GLOBAL_VARTYPE_STRING);
        SetGVarString("QuizAnswer", "(null)", GLOBAL_VARTYPE_STRING);
    }
    else return SendClientMessage(playerid, 0xAFAFAFAA, "USAGE: /quiz [create/answer/end]");
    return 1;
}

CMD:auction(playerid, params[])
{
    new option[32], string[128], property[128];

    if(!IsPlayerInNewbieSchool(playerid))
        return SendErrorMessage(playerid, "You're not in newbie school.");

    if(sscanf(params, "s[32]S()[128]", option, string))
        return SendSyntaxMessage(playerid, "/auction [create/join/bid/cancel/queue]");

    if(!strcmp(option,"create", true))
    {
        new lelang[128], start, bid;

        if (CheckAdmin(playerid, 5))
            return PermissionError(playerid);

        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) != 0)
            return SendErrorMessage(playerid, "Auction sedang berjalan, /auction cancel tuntuk menunda.");

        if(sscanf(string, "dds[128]", start, bid, lelang))
            return SendSyntaxMessage(playerid, "/auction create [start money] [diff] [property name]");

        if(start < 0)
            return SendErrorMessage(playerid, "Jangan memasukkan uang awal di bawah 0.");

        if(bid < 0)
        return SendErrorMessage(playerid, "Jangan memasukkan jumlah diff di bawah 0.");

        SetGVarInt("AuctionType", 1, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionTime", 15, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionCount", 0, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionStart", start, GLOBAL_VARTYPE_INT);
        SetGVarInt("AuctionDiff", bid, GLOBAL_VARTYPE_INT);
        SetGVarString("AuctionLelang", lelang, GLOBAL_VARTYPE_STRING);
        SetGVarString("AuctionHighest", "none", GLOBAL_VARTYPE_STRING);

        foreach(new id : Player) if(IsPlayerInNewbieSchool(id))
        {
            SendClientMessageEx(id, X11_LIGHTBLUE, "AUCTION: "YELLOW"Item: "WHITE"%s | "YELLOW"Start price: "GREEN"%s | "YELLOW"Diff: "GREEN"%s", lelang, FormatNumber(start), FormatNumber(bid));
            SendClientMessageEx(id, X11_LIGHTBLUE, "AUCTION: "WHITE"Use command "YELLOW"'/auction join' "WHITE"to join auction.");
        }
        Auction = SetTimer("AuctionTime", 1000, true);
        new text[255];
        format(text,sizeof(text),"{00FFFF}%s\n"GREEN"Start: "WHITE"%s\n"GREEN"Diff: "WHITE"%s\n"GREEN"Participants: "WHITE"%d\nSeart in: %d", lelang, FormatNumber(start), FormatNumber(bid), GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT), GetGVarInt("AuctionTime", GLOBAL_VARTYPE_INT));
        SetDynamicObjectMaterialText(newbieschool, 0, text, 130, "Ariel", 27, 1, -1, -16777216, 1);

        SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s start the auction, start: [%s] diff: [%s]", ReturnName(playerid, 0), FormatNumber(start), FormatNumber(bid));
    }
    else if(!strcmp(option, "join", true))
    {
        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) != 1) return SendErrorMessage(playerid, "Auction belum di mulai.");
        if(GetPVarInt(playerid, "IkutLelang")) return SendErrorMessage(playerid, "Anda sedang mengikuti auction ini.!");
        if(GetMoney(playerid) < 100) return SendErrorMessage(playerid, "Anda tidak memiliki modal uang $100 untuk mengikuti auction ini.");

        GetGVarString("AuctionLelang", property, sizeof(property), GLOBAL_VARTYPE_STRING);

        GiveMoney(playerid, -100);
        SendClientMessageEx(playerid, X11_LIGHTBLUE, "AUCTION: "WHITE"Gunakan perintah "YELLOW"'/auction bid' "WHITE"untuk memenangkan auction.");

        for(new i = 0; i != MAX_FACTIONS; i++) if(FactionData[i][factionExists] && FactionData[i][factionType] == FACTION_GOV) {
            FactionData[i][factionMoney] += 5;
        }
        SetPVarInt(playerid, "IkutLelang", 1);
        SetGVarInt("AuctionCount", GetGVarInt("AuctionCount", GLOBAL_VARTYPE_INT)+1, GLOBAL_VARTYPE_INT);

    }
    else if(!strcmp(option, "bid", true))
    {
        new money = (GetGVarInt("AuctionStart", GLOBAL_VARTYPE_INT)+GetGVarInt("AuctionDiff", GLOBAL_VARTYPE_INT)),
            name[MAX_PLAYER_NAME];

        GetGVarString("AuctionHighest", name, sizeof(name), GLOBAL_VARTYPE_STRING);

        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) == 1)
        return SendErrorMessage(playerid, "Auction belum di mulai.");

        if(!strcmp(name, ReturnName(playerid), true))
        return SendErrorMessage(playerid, "Anda masih berada di peringkat teratas auction ini!.");

        if(!GetPVarInt(playerid, "IkutLelang"))
        return SendErrorMessage(playerid, "Anda tidak mengikuti auction ini.");

        if(GetMoney(playerid) < money)
        return SendErrorMessage(playerid, "Anda tidak memiliki uang sebesar %s untuk mengikuti auction ini.", FormatNumber(money));

        SetGVarInt("AuctionStart", money, GLOBAL_VARTYPE_INT);
        SetGVarString("AuctionHighest", ReturnName(playerid), GLOBAL_VARTYPE_STRING);
        SetGVarInt("AuctionTime", 10, GLOBAL_VARTYPE_INT);
    }
    else if(!strcmp(option, "cancel", true))
    {
        if (CheckAdmin(playerid, 6))
            return PermissionError(playerid);
        if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) == 0)
        return SendErrorMessage(playerid, "Auction sedang tidak berlangsung!.");

        foreach(new id : Player) if(IsPlayerInNewbieSchool(id))
        {
            SendClientMessageEx(id, X11_LIGHTBLUE, "AUCTION: "YELLOW"%s "WHITE"menunda auction.", ReturnName(playerid));
        }
        Auction_Reset();
        SetDynamicObjectMaterialText(newbieschool, 0, "Auction di tunda.", 130, "Ariel", 27, 1, -1, -16777216, 1);
    } else if (!strcmp(option, "queue", true)) {
        new Cache:check, str[650];
        
        aucQueue[playerid] = 0;

        check = mysql_query(g_iHandle, sprintf("SELECT * FROM `auction_queue` LIMIT %d, 10", aucQueue[playerid] * 10));

        new rows = cache_num_rows(), location[32], id, type, misc;

        if (rows) {
            format(str,sizeof(str),"ID\tName\tLocation\n");
            for (new i = 0; i < rows; i ++) {
                cache_get_value(i, "Location", location);
                cache_get_value_int(i, "ID", id);
                cache_get_value_int(i, "Property", type);
                cache_get_value_int(i, "Type", misc);

                format(str,sizeof(str),"%s%d\t%s\t%s\n",str,id,Auction_GetType(id, type, misc),location);
            }
            Dialog_Show(playerid, AuctionQueue, DIALOG_STYLE_TABLIST_HEADERS, "Auction Queue", str, "Next", "Close");
        } else SendErrorMessage(playerid, "There is no auction on the queue!");

        cache_delete(check);
    }
    else 
        SendSyntaxMessage(playerid, "/auction [create/join/bid/cancel]");

    return 1;
}

Auction_GetType(id, type, misc) {
    new output[128], typeName[24];

    switch (type) {
        case 1: format(output,sizeof(output),"%s",Business_Type(id));
        case 2: {
            if (misc) format(output,sizeof(output),"House with %d garage",misc);
            else format(output,sizeof(output),"House with no garage");
        }
        case 3: format(output,sizeof(output),"%s Garage", Garage_GetType(id));
        case 4: format(output,sizeof(output),"Workshop");
        case 5: format(output,sizeof(output),"Private Farm");
        case 6: {
            Flat_GetType2(misc, typeName);
            format(output,sizeof(output),"Flat %s", typeName);
        }
    }

    return output;
}

CMD:changeboard(playerid, params[])
{
    new text[128],string[128];

    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    if(!IsPlayerInNewbieSchool(playerid))
        return SendErrorMessage(playerid, "You're not in newbie school.");

    if(GetGVarInt("AuctionType", GLOBAL_VARTYPE_INT) != 0)
        return SendErrorMessage(playerid, "Auction telah berlangsung, jangan di ubah dahulu sebelum selesai.");

    if(sscanf(params, "s[128]", text))
        return SendSyntaxMessage(playerid, "/changeboard [text]");

    if(strlen(text) > 128)
        return SendErrorMessage(playerid, "Text terlalu panjang.");

    FixText(text);
    format(string,sizeof(string),"%s",ColouredText(text));
    SetDynamicObjectMaterialText(newbieschool, 0, string, 130, "Ariel", 27, 1, -1, -16777216, 1);
    return 1;
}

Function:DamageCreated(playerid, damageid)
{
    DamageData[playerid][damageid][damageID] = cache_insert_id();
    Damage_Save(playerid, damageid);
    return 1;
}

Damage_Remove(playerid, damage)
{
    mysql_tquery(g_iHandle, sprintf("DELETE FROM `damages` WHERE `ID`='%d' && `IDs`='%d'", DamageData[playerid][damage][damageID], PlayerData[playerid][pID]));

    DamageData[playerid][damage][damageExists] = false;
    DamageData[playerid][damage][damageWeapon] = 0;

    DamageData[playerid][damage][damageBodypart] = 0;
    DamageData[playerid][damage][damageTime] = 0;
    DamageData[playerid][damage][damageAmount] = 0;
    DamageData[playerid][damage][damageID] = 0;
    return 1;
}

Damage_Reset(playerid, type = 0)
{
    if(!type)
        mysql_tquery(g_iHandle, sprintf("DELETE FROM `damages` WHERE `IDs`='%d'", PlayerData[playerid][pID]));

    for(new id; id != MAX_DAMAGE; id++) if(DamageData[playerid][id][damageExists])
    {
        DamageData[playerid][id][damageExists] = false;
        DamageData[playerid][id][damageWeapon] = DamageData[playerid][id][damageBodypart] = 0;
        DamageData[playerid][id][damageTime] = DamageData[playerid][id][damageID] = 0;
        DamageData[playerid][id][damageAmount] = 0;
    }
    return 1;
}

Damage_Save(playerid, damage)
{
    new query[128];

    format(query, sizeof(query), "UPDATE `damages` SET `weapon`='%d', `bodypart`='%d', `amount`='%d', `time`='%d' WHERE `ID`='%d' && `IDs`='%d'", 
        DamageData[playerid][damage][damageWeapon],
        DamageData[playerid][damage][damageBodypart],
        DamageData[playerid][damage][damageAmount],
        DamageData[playerid][damage][damageTime],
        DamageData[playerid][damage][damageID],
        PlayerData[playerid][pID]
    );
    return mysql_tquery(g_iHandle, query);
}

AddDamage(playerid, bodypart, weapon)
{
    for (new id = 0; id != MAX_DAMAGE; id++) 
    {
        if(DamageData[playerid][id][damageExists] && DamageData[playerid][id][damageWeapon] == weapon && DamageData[playerid][id][damageBodypart] == bodypart)
        {
            DamageData[playerid][id][damageAmount] ++;
            DamageData[playerid][id][damageTime] = gettime();
            return 1;
        }
        else if(!DamageData[playerid][id][damageExists])
        {
            DamageData[playerid][id][damageExists] = true;
            DamageData[playerid][id][damageWeapon] = weapon;
            DamageData[playerid][id][damageBodypart] = bodypart;
            DamageData[playerid][id][damageAmount] = 1;
            DamageData[playerid][id][damageTime] = gettime();
            mysql_tquery(g_iHandle, sprintf("INSERT INTO `damages` SET `weapon`='%d', `bodypart`='%d', `IDs`='%d'", DamageData[playerid][id][damageWeapon], DamageData[playerid][id][damageBodypart], PlayerData[playerid][pID]), "DamageCreated", "dd", playerid, id);
            return 1;
        }
    }
    return 1;
}

Damage_Count(playerid)
{
    new count = 0;
    for(new i; i != MAX_DAMAGE; i++) if(DamageData[playerid][i][damageExists]) {
        count ++;
    }
    return count;
}

Damage_CountByBodypart(playerid, bodypart) {
    new count = 0;
    for (new i; i != MAX_DAMAGE; i++) if(DamageData[playerid][i][damageExists] && (DamageData[playerid][i][damageBodypart] + 3) == bodypart) {
        count ++;
    }
    return count;
}

CMD:damages(playerid, params[])
{
    new player;


    if(sscanf(params, "u", player))
    {
        if (!Damage_Count(playerid)) return SendCustomMessage(playerid, "DAMAGES", "You're "GREEN"healthy");
        else return Damage_Show(playerid, playerid);
    }

    if(player == playerid) return SendErrorMessage(playerid, "Use command /damages to check your damages.");
    if(player == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, player, 3.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(PlayerData[player][pSpectator] != INVALID_PLAYER_ID) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if (!Damage_Count(player)) return SendCustomMessage(playerid, "DAMAGES", "This player "GREEN"healthy");

    SendServerMessage(player, "%s melihat kondisi karakter anda.", ReturnName(playerid, 0));
    SendServerMessage(playerid, "Anda melihat kondisi karakter %s.", ReturnName(player, 0));
    Damage_Show(playerid, player);
    return 1;
}

Health_Show(playerid, player) {
    new title[64];
    format(title, sizeof(title), "%s's Health", ReturnName2(player));
    new gText[1500];
    format(gText, sizeof(gText), "{C2A2DA}===[Body part status]===\n");
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Torso"WHITE" | Fitness Rating:"GREEN" %.2f\n", gText, PlayerData[player][pFitnessRating][0]);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s\n", gText, GetPlayerBodypartStatus(player, BODY_PART_TORSO));
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Groin"WHITE" | Fitness Rating:"GREEN" %.2f\n", gText, PlayerData[player][pFitnessRating][1]);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s\n", gText, GetPlayerBodypartStatus(player, BODY_PART_GROIN));
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Right Arm"WHITE" | Fitness Rating:"GREEN" %.2f\n", gText, PlayerData[player][pFitnessRating][2]);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s\n", gText, GetPlayerBodypartStatus(player, BODY_PART_RIGHT_ARM));
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Left Arm"WHITE" | Fitness Rating:"GREEN" %.2f\n", gText, PlayerData[player][pFitnessRating][3]);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s\n", gText, GetPlayerBodypartStatus(player, BODY_PART_LEFT_ARM));
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Right Leg"WHITE" | Fitness Rating:"GREEN" %.2f\n", gText, PlayerData[player][pFitnessRating][4]);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s\n", gText, GetPlayerBodypartStatus(player, BODY_PART_RIGHT_LEG));
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Left Leg"WHITE" | Fitness Rating:"GREEN" %.2f\n", gText, PlayerData[player][pFitnessRating][5]);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s\n", gText, GetPlayerBodypartStatus(player, BODY_PART_LEFT_LEG));
    format(gText, sizeof(gText), "%s"WHITE"Part: "YELLOW"Head\n", gText);
    format(gText, sizeof(gText), "%s"WHITE"Condition: %s", gText, GetPlayerBodypartStatus(player, BODY_PART_HEAD));

    if (GetFactionType(playerid) == FACTION_MEDIC) {
        format(gText, sizeof(gText), "%s\n{C2A2DA}===[Body Health]===\n", gText);
        if(PlayerData[player][pCough] >= 5)
        {
            new rate[7];

            switch((PlayerData[player][pCough]/5))
            {
                case 1: rate="LOW";
                case 2: rate="MEDIUM";
                case 3: rate="HIGH";
            }
            
            format(gText, sizeof(gText), "%s"WHITE"Disease: "YELLOW"SICK (Cough)\n", gText);
            format(gText, sizeof(gText), "%s"WHITE"Cure: "YELLOW"eat Neladryl Acetate\n", gText);
            format(gText, sizeof(gText), "%s"WHITE"Sickness rate: "YELLOW"%s\n\n", gText, rate);
        }
        if(PlayerData[player][pMigrainRate])
        {
            new rate[7];

            switch((PlayerData[player][pMigrainRate]))
            {
                case 1: rate="LOW";
                case 2: rate="MEDIUM";
                case 3: rate="HIGH";
            }
            
            format(gText, sizeof(gText), "%s"WHITE"Disease: "YELLOW"SICK (Migrain)\n", gText);
            format(gText, sizeof(gText), "%s"WHITE"Cure: "YELLOW"eat Kratotamax Plus 1.0\n", gText);
            format(gText, sizeof(gText), "%s"WHITE"Sickness rate: "YELLOW"%s\n\n", gText, rate);
        }
        if(PlayerData[player][pFever])
        {
            new rate[7];

            switch((PlayerData[player][pFever]))
            {
                case 1: rate="LOW";
                case 2: rate="MEDIUM";
                case 3: rate="HIGH";
            }

            format(gText, sizeof(gText), "%s"WHITE"Disease: "YELLOW"SICK (High fever)\n", gText);
            format(gText, sizeof(gText), "%s"WHITE"Cure: "YELLOW"eat Lazattavitus Extra\n", gText);
            format(gText, sizeof(gText), "%s"WHITE"Sickness rate: "YELLOW"%s\n", gText, rate);
        }
        if(PlayerData[player][pInjured] == 1)
        {
            format(gText, sizeof(gText), ""WHITE"Disease: "YELLOW"Injured\n");
            format(gText, sizeof(gText), ""WHITE"Cure: "YELLOW"Emergency Medical Services Staff\n");
        }
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, title, gText, "Close", "");
    return 1;
}

Damage_Show(playerid, player)
{
    new title[64];
    format(title, sizeof(title), "%s's weapon damages", ReturnName2(player));
    new gText[1000], fstr[128];
    strcat(gText, "Bullets\tWeapon\tBody\tTime\n");
    for(new i = 0; i < MAX_DAMAGE; i++) if(DamageData[player][i][damageExists])
    {
        switch(DamageData[player][i][damageWeapon])
        {
            case 0 .. 15: format(fstr, sizeof(fstr), "%d\t%s\t%s\t%s\n", DamageData[player][i][damageAmount], ReturnWeaponName(DamageData[player][i][damageWeapon]), GetBodyPartName(DamageData[player][i][damageBodypart] + 3),GetDuration(gettime() - DamageData[player][i][damageTime]));
            default: format(fstr, sizeof(fstr), "%d\t%s\t%s\t%s\n", DamageData[player][i][damageAmount], ReturnWeaponName(DamageData[player][i][damageWeapon]), GetBodyPartName(DamageData[player][i][damageBodypart] + 3),GetDuration(gettime() - DamageData[player][i][damageTime]));
        }
        strcat(gText, fstr);
    }
    Dialog_Show(playerid, DisplayDamage, DIALOG_STYLE_TABLIST_HEADERS, title, gText,"Close","");
    return 1;
}

GetPlayerBodypartStatus(player, bodypart) {
    new result[128];
    if (!Damage_CountByBodypart(player, bodypart)) {
        format(result, sizeof(result), SEAGREEN"Normal");
        return result;
    }

    for(new i = 0; i < MAX_DAMAGE; i++) if(DamageData[player][i][damageExists]) {
        if (bodypart == (DamageData[player][i][damageBodypart] + 3)) {
            switch (DamageData[player][i][damageWeapon]) {
                case 4: {
                    if (DamageData[player][i][damageAmount] == 2) format(result, sizeof(result), YELLOW"Graze");
                    else if (DamageData[player][i][damageAmount] >= 4) format(result, sizeof(result), "%s"ORANGE" Cut", result);
                    else format(result, sizeof(result), "%s"RED" Bleeding", result);
                }
                case 22..38: {
                    if (DamageData[player][i][damageAmount] >= 2 && DamageData[player][i][damageAmount] <= 4) format(result, sizeof(result), RED"Flesh wound (%d bullets)", DamageData[player][i][damageAmount]);
                    else if (DamageData[player][i][damageAmount] >= 5) format(result, sizeof(result), "%s"RED3" Vital wound (%d bullets)", result, DamageData[player][i][damageAmount]-2);
                    else format(result, sizeof(result), "%s"YELLOW" Graze", result);
                }
                case 0..3, 5..15: {
                    format(result, sizeof(result), GREEN"Bruise");
                }
                default: {
                    if (DamageData[player][i][damageAmount] >= 5) format(result,sizeof(result),WHITE"Broken Bone");
                    else format(result,sizeof(result),SEAGREEN"Normal");
                }
            }
        }
    }
    return result;
}

CMD:resetdamage(playerid, params[])
{
    new player;

    if (CheckAdmin(playerid, 4))
        return PermissionError(playerid);

    if(sscanf(params, "u", player))
        return SendSyntaxMessage(playerid, "/resetdamage [playerid/part of name]");

    if(!IsPlayerConnected(player))
        return SendErrorMessage(playerid, "That player isn't logged in.");

    Damage_Reset(player);
    SendServerMessage(player, "Admin %s telah mereset damage anda.", ReturnAdminName(playerid));
    SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s reset %s damages.", ReturnName2(playerid),ReturnName2(player));
    return 1;
}

CMD:surgery(playerid, params[])
{
    new player;

    if(GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "You're not medic.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 992.78, 2426.69, 10.90) && GetPlayerInterior(playerid) == 5) return SendErrorMessage(playerid, "You're not in surgery area.");
    if(sscanf(params, "u", player)) return SendSyntaxMessage(playerid, "/surgery [playerid/part of name]");
    if(player == playerid) return SendErrorMessage(playerid, "You can't surgery yourself.");
    if(player == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, player, 3.0)) return SendErrorMessage(playerid, "That player is disconnected or not near you.");
    if(PlayerData[player][pStartSurgey]) return SendErrorMessage(playerid, "That player is already to surgery.");
    if(!Damage_Count(player)) return SendClientMessageEx(playerid, X11_LIGHTBLUE, "SURGERY: "WHITE"This player is "GREEN"healthy");

    new gText[1000], fstr[45];
    strcat(gText, "Bullets\tWeapon\tBody\tTime\n");
    for(new i = 0; i < MAX_DAMAGE; i++) if(DamageData[player][i][damageExists])
    {
        switch(DamageData[player][i][damageWeapon])
        {
            case 0 .. 15: format(fstr, sizeof(fstr), "%d\t%s\t%s\t%s\n", DamageData[player][i][damageAmount], ReturnWeaponName(DamageData[player][i][damageWeapon]), GetBodyPartName(DamageData[player][i][damageBodypart] + 3),GetDuration(gettime() - DamageData[player][i][damageTime]));
            default: format(fstr, sizeof(fstr), "%d\t%s\t%s\t%s\n", DamageData[player][i][damageAmount], ReturnWeaponName(DamageData[player][i][damageWeapon]), GetBodyPartName(DamageData[player][i][damageBodypart] + 3),GetDuration(gettime() - DamageData[player][i][damageTime]));
        }
        strcat(gText, fstr);
    }
    Dialog_Show(playerid, TestSurgey, DIALOG_STYLE_TABLIST_HEADERS, sprintf("%s's weapon damages", ReturnName(player, 1)), gText,"Surgery","Close");
    PlayerData[playerid][pSurgeyID] = player;
    SetPVarInt(player, "SurgeryID", playerid);
    return 1;
}

Function:Treatment(playerid)
{
    Damage_Reset(playerid);
    PlayerData[playerid][pStartSurgey] = 0;
    SendServerMessage(GetPVarInt(playerid, "SurgeryID"), "%s menyelesaikan operasinya.", ReturnName(playerid, 0));
    DeletePVar(playerid, "SurgeryID");
    SendClientMessageEx(playerid, X11_LIGHTBLUE, "SURGERY: "WHITE"Operasi sukses, efek damage yang di berikan telah hilang.");
    return 1;
}

CMD:gunauthority(playerid, params[])
{
    static 
        userid;

    if (CheckAdmin(playerid, 5))
        return PermissionError(playerid);

    if(sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/gunauthority [playerid]");

    if(!SQL_IsCharacterLogged(userid))
        return SendErrorMessage(playerid, "Player tersebut tidak login.");

    if(PlayerData[userid][pGunAuthority])
        return SendErrorMessage(playerid, "This player already have a authority.");

    PlayerData[userid][pGunAuthority] = 1;

    SendServerMessage(playerid, "You've give authority verified gun maker to %s.", ReturnName(userid, 0));
    SendServerMessage(userid, "%s give you authority to make special wapon on blackmarket.", ReturnAdminName(playerid));

    Log_Write("logs/gunauth_log.txt", "[%s] %s give authority to make hard gun to %s.", ReturnDate(), ReturnAdminName(playerid), ReturnName(userid, 0));
    return 1;
}

CMD:nearplayer(playerid, params[])
{
    if (CheckAdmin(playerid, 1))
        return PermissionError(playerid);

    static
        userid,
        range;

    if(sscanf(params, "ud", userid, range))
        return SendSyntaxMessage(playerid, "/nearplayer [playerid] [range]");

    new Float:x,
        Float:y,
        Float:z,
        nearhim[255];

    GetPlayerPos(userid, x, y, z);

    foreach(new i : Player) if(SQL_IsCharacterLogged(i) && i != userid && IsPlayerInRangeOfPoint(i, range, x, y, z)) {
        strcat(nearhim, sprintf("%s\n", ReturnName2(i, 0)));
    }
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, sprintf("Nearest %s", ReturnName2(userid, 0)), nearhim, "Close", "");
    return 1;
}

Dialog:Stuck(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        switch(listitem)
        {
            case 0: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.19s )  current vw: [ %d ] | location: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetLocation(x, y, z), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes")), SetPVarInt(playerid, "stuckHelp", 1);
            case 1: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.14s )  current interior: [ %d ] | location: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerInterior(playerid), GetLocation(x, y, z), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes")), SetPVarInt(playerid, "stuckHelp", 2);
            case 2: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %s )  current vw/int: [ %d/%d ] | location: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetLocation(x,y,z), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes")), SetPVarInt(playerid, "stuckHelp", 3);
            case 3: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %s )  curr vw/int: [ %d/%d ] | loc / curr position: [%s, %.1f|%.1f|%.1f] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetLocation(x, y, z), x, y, z, (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes")), SetPVarInt(playerid, "stuckHelp", 4);
            case 4: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.5s )  curr vw/int: [ %d/%d ] | location: [%s] | injured: [%s] | last shooter: [PID #%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), GetLocation(x, y, z), (!PlayerData[playerid][pInjured]) ? ("No") : ("Yes"), ReturnName2(PlayerData[playerid][pLastShot]), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes")), SetPVarInt(playerid, "stuckHelp", 5);
            case 5: SendTesterMessage(X11_OLIVE_DRAB_1, "STUCK: [%d] %s ( %.6s )  curr vw/int: [ %d/%d ] | freeze: [%s] | jailed: [%s].", playerid, ReturnName2(playerid), inputtext, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), (!PlayerData[playerid][pFreeze]) ? ("No") : ("Yes"), (!PlayerData[playerid][pJailTime]) ? ("No") : ("Yes")), SetPVarInt(playerid, "stuckHelp", 6);
        }
        PlayerData[playerid][pStuck] = gettime();
    }
    return 1;
}

Dialog:AdsType(playerid, response, listitem, inputtext[]) {
    if (response) {
        new type;
        if (sscanf(inputtext, "d", type))
            return Dialog_Show(playerid, AdsType, DIALOG_STYLE_INPUT, "Advertisement Type", "Please input the type of your advertisement: "GREEN"(input below)", "Input", "Close");

        if (type > 5 || type < 1) {
            SendErrorMessage(playerid, "Invalid type!");
            Dialog_Show(playerid, AdsType, DIALOG_STYLE_INPUT, "Advertisement Type", "Please input the type of your advertisement: "GREEN"(input below)", "Input", "Close");
            return 1;
        }

        Advertisement_Create(playerid, PlayerData[playerid][pPhone], type, PlayerData[playerid][pAdvertise]);
    } else {
        SendErrorMessage(playerid, "Invalid input!");
        PlayerData[playerid][pAdvertise] = '\0';
        PlayerData[playerid][pAdvertiseType] = 0;
    }
    return 1;
}

Dialog:ReleaseFish(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new list = GetPVarInt(playerid, "ReleaseFish");
        SendServerMessage(playerid, "You have release %s (%.3f lbs) fish from you.", FishName[playerid][list], FishWeight[playerid][list]);
        FishWeight[playerid][list] = 0.0;
        FishName[playerid][list] = "\0";
    }
    return 1;
}

Dialog:ShowFish(playerid, response, listitem, inputtext[])
{
    if(response) {
	if (listitem != -1) {
            if(FishWeight[playerid][listitem]) {
                Dialog_Show(playerid, ReleaseFish, DIALOG_STYLE_MSGBOX, "Release Fish", ""WHITE"Do you want to release this fish?\n\nFish Name: "YELLOW"%s\n"WHITE"Fish Weight: "YELLOW"%.3f\n\n"WHITE"Select \"release\" to release this fish.", "Release", "Cancel", FishName[playerid][listitem], FishWeight[playerid][listitem]);
                SetPVarInt(playerid, "ReleaseFish", listitem);
            }
            else ShowPlayerFooter(playerid, "~n~~r~( ! ) ~w~Ikan tidak tersedia"), cmd_myfish(playerid, "\0");
	}
    }
    return 1;
}

Dialog:SellFish(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new reward = GetPVarInt(playerid, "TotalPrice");

        SendCustomMessage(playerid, "SELLFISH", "Sukses menjual semua ikan dan anda mendapat "YELLOW"%s "WHITE"dari hasil penjualan.", FormatNumber(reward));
        
        Cargo_PlusStock(1, RandomEx(1,8));
        GiveMoney(playerid, reward);

        for(new i = 0; i < MAX_FISH; i++) {
            FishWeight[playerid][i] = 0.0;
            FishName[playerid][i][0] = EOS;
        }

        PlayerData[playerid][pDelayFishing] = 1200;
    }
    return 1;
}

Dialog:BuyBait(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new value = strval(inputtext);
        
        if(value < 1) 
            return Dialog_Show(playerid, BuyBait, DIALOG_STYLE_INPUT, "Buy Bait", WHITE"Berapa banyak umpan yang akan anda beli?\nAnda akan mendapatkan "YELLOW"dua umpan/"GREEN"$1.\n"WHITE"Masukkan jumlah uang untuk membeli:", "Buy", "Close");

        if(value > GetMoney(playerid)) 
            return ShowPlayerFooter(playerid, "~r~ ERROR: ~w~Uang anda tidak mencukupi.");
        
        if(Inventory_Count(playerid, "Bait")+(value*2) > Inventory_MaxCount("Bait")) 
            return Dialog_Show(playerid, BuyBait, DIALOG_STYLE_INPUT, "Buy Bait", WHITE"Berapa banyak umpan yang akan anda beli?\nAnda akan mendapatkan "YELLOW"dua umpan/"GREEN"$1.\n"WHITE"Masukkan jumlah uang untuk membeli:\n\nHINT: Anda hanya dapat membeli dengan uang "GREEN"%s.", "Buy", "Close", FormatNumber(floatround((Inventory_MaxCount("Bait")-Inventory_Count(playerid, "Bait"))/2)));

        GiveMoney(playerid, -value);
        Inventory_Add(playerid, "Bait", 19630, (value*2));

        SendServerMessage(playerid, "Anda telah membeli "YELLOW"%d umpan "WHITE"dengan harga "GREEN"%s "WHITE"(total umpamu: "YELLOW"%d"WHITE").", (value*2), FormatNumber(value), Inventory_Count(playerid, "Bait"));
    }
    return 1;
}

Dialog:StartTrashmaster(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new string[10];
        
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][trash], CoreVehicles[GetPlayerVehicleID(playerid)][vehTrash]);
        ShowPlayerProgressBar(playerid, PlayerData[playerid][trash]);            
                
        format(string, sizeof(string), "%02d/%d", CoreVehicles[GetPlayerVehicleID(playerid)][vehTrash], MAX_SAMPAH);
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_trash][1], string);
        
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_trash][0]);
        PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_trash][1]);

        SendCustomMessage(playerid, "HINT", "Ikuti tanda di radar Map, itu merupakan lokasi untuk menemukan tong sampah.");
        SendCustomMessage(playerid, "HINT", "Perintah '"YELLOW"/takebag"WHITE"' untuk mengambil sampah dan '"YELLOW"/dumpgarbage"WHITE"' untuk ...");
        SendClientMessage(playerid, X11_WHITE, ".. mendapatkan upah setelah sampah terkumpul. Kembali ke tempat awal untuk menjual garbage.");
        
        CoreVehicles[GetPlayerVehicleID(playerid)][vehFuel] = 100.0;
        SetEngineStatus(GetPlayerVehicleID(playerid), true);

        for(new i; i < MAX_GARBAGE_BINS; i++) if(GarbageData[i][garbageExists]) {
            SetPlayerMapIcon(playerid, i, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2], 56, 0, MAPICON_GLOBAL);
        }
        PlayerData[playerid][pTrashmasterJob] = 1;
    }
    else RemovePlayerFromVehicle(playerid);

    return 1;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
    playerid = INVALID_PLAYER_ID;
    response = 0;
    listitem = 0;
    inputtext[0] = '\0';
}

Dialog:DrivingTest(playerid, response, listitem, inputtext[])
{
    if(!response) return SetCameraBehindPlayer(playerid), ClearAnimations(playerid, 1);

    ShowDMVQuestions(playerid);
    return 1;
}

Dialog:MissCallList(playerid, response, listitem, inputtext[]) {
    if(response) {
        Dialog_Show(playerid, ApproveClearMC, DIALOG_STYLE_MSGBOX, "Clear Miss Call", "Are you sure want to clear miss call list?.", "Yes", "No");
    }
    return 1;
}

Dialog:ApproveClearMC(playerid, response, listitem, inputtext[]) {
    if(response) {
        for(new i = 0; i != 10; i++) if(strcmp(misscallList[playerid][i], "null")) {
            format(misscallList[playerid][i], 128, "null");
        }
        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Miss Call List", "There is nothing miss call on your phone now.", "Close", "");
    }
    return 1;
}

// Dialog:Billboards(playerid, response, listitem, inputtext[]) {
//     if(response)
//     {
//         new string[500], szString[100];
//         if(BillBoardData[listitem][bbExists] >= 1)
//         {
//             if(!BillBoardData[listitem][bbOwner])
//             {
//                 BillboardCheckout[playerid] = listitem;
//                 format(szString, sizeof(szString), ""WHITE"Rent Billboard - {FF8000}%i"WHITE" - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
//                 format(string, sizeof(string), ""WHITE"Billboard Name: {FF8000}%s"WHITE" ({FF8000}%i"WHITE")\nBillboard Price: {FF8000}$%d"WHITE"\n\n\n((Rent Fees are collected each payday from your bank account!))", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
//                 Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Rent", "Cancel");
//                 return 1;
//             }
//             if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
//             {
//                 Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Message\nUnrent Billboard", "Proceed", "Cancel");
//                 return 1;
//             }
//             else
//             {
//                 SendErrorMessage(playerid, "Sorry, this billboard is already being rented!");
//             }
//         }
//     }
//     return 1;
// }

// Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
//     if(response)
//     {
//         if(listitem == 0)
//         {
//             Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");
//         }
//         if(listitem == 1)
//         {
//             Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Unrent Billboard", "Are you sure you wish to unrent your billboard?\n\nYou'll get half the rent fee back", "Confirm", "Cancel");
//         }
//     }
//     return 1;
// }

// Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
//     if(response)
//     {
//         if(isnull(inputtext))
//             return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Enter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");

//         if(strlen(inputtext) > 230)
//             return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Billboard Message", "Too many characters (Max is 230)\n\nEnter in a new billboard message!\n\n(Max Chars: 230)", "Proceed", "Cancel");

//         format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

//         Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
//         Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
//     }
//     return 1;
// }

// Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
//     if(response)
//     {
//         new bbid = PlayerData[playerid][pOwnsBillboard];

//         GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2);
//         BillBoardData[bbid][bbOwner] = 0;
//         format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Not Owned");
//         Billboard_Save(bbid);
//         Billboard_Refresh(bbid);
//         PlayerData[playerid][pOwnsBillboard] = -1;
//         SendClientMessageEx(playerid, X11_OLIVE_DRAB_1, "You have unrented your billboard");
//     }
//     return 1;
// }

// Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
//     if(response)
//     {
//         new bbid = BillboardCheckout[playerid];
//         if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
//         {
//             SendErrorMessage(playerid, "You do not have enough cash in your bank account for the billboard rental fee");
//             return 1;
//         }
//         else
//         {
//             PlayerData[playerid][pBankMoney] -= BillBoardData[playerid][bbPrice];
//             PlayerData[playerid][pOwnsBillboard] = bbid;
//             BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
//             Tax_AddMoney(BillBoardData[bbid][bbPrice]);
//             Billboard_Save(bbid);
//             Billboard_Refresh(bbid);
//             SendClientMessageEx(playerid, X11_OLIVE_DRAB_1, "You have purchased a billboard, use /mybillboard to edit the message");
//         }
//     }
//     return 1;
// }

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
    static
        string[64];

    if(response)
    {
        new id = NearestItems[playerid][listitem];

        if(id != -1 && DroppedItems[id][droppedModel])
        {
            if(DroppedItems[id][droppedWeaponId] != 0)
            {
                // SendServerMessage(playerid, "Can't get this weapon for some reason, only scripter can pickup this.");

                if(PlayerData[playerid][pScore] < 2)
                    return SendErrorMessage(playerid, "You must level 2 to pickup this weapon.");

                if(PlayerHasWeaponInSlot(playerid, DroppedItems[id][droppedWeaponId]))
                    return SendErrorMessage(playerid, "You have weapon on that slot!.");

                GivePlayerWeaponEx(playerid, DroppedItems[id][droppedWeaponId], DroppedItems[id][droppedAmmo], DroppedItems[id][droppedDurability]);

                SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has picked up a %s.", ReturnName(playerid, 0, 1), ReturnWeaponName(DroppedItems[id][droppedWeaponId]));
                Item_Delete(id);
                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
            }
            else
            {
                for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], DroppedItems[id][droppedItem], true)) {
                    if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+DroppedItems[id][droppedQuantity]) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], g_aInventoryItems[i][e_InventoryItem]);
                }

                if(PickupItem(playerid, id))
                {
                    format(string, sizeof(string), "~g~%s~w~ added to inventory!", DroppedItems[id][droppedItem]);
                    ShowPlayerFooter(playerid, string);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has picked up a \"%s\".", ReturnName(playerid, 0, 1), DroppedItems[id][droppedItem]);
                    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
                }
                else SendErrorMessage(playerid, "You don't have any room in your inventory.");
            }
        }
        else SendErrorMessage(playerid, "This item was already picked up.");
    }
    return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = Job_NearestPoint(playerid);

        if(id == -1)
            return 0;

        PlayerData[playerid][pLoadType] = listitem + 1;
        PlayerData[playerid][pLoadCrate] = 1;
        PlayerData[playerid][pLoading] = 1;

        SendServerMessage(playerid, "You have selected \"%s\". Load the crates into a truck to begin.", inputtext);
        SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

        ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
        SetPlayerAttachedObject(playerid, JOB_SLOT, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

        ShowPlayerFooter(playerid, "Tekan ~y~'N'~w~ untuk memasukkan box ke mobil.");
    }
    return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
            return 0;

        PlayerData[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
    }
    return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Error: The rank can't exceed 32 characters.\n\nRank: %s (%d)\n\nPlease enter a new name for this rank below:", "Submit", "Back", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

        format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
        Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

        Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
        SendServerMessage(playerid, "You have set the name of rank %d to \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
    }
    else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
    return 1;
}


Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new targetid = strval(inputtext);

        if(!IsPlayerConnected(targetid))
            return SendErrorMessage(playerid, "The specified player has disconnected.");

        if(!PlayerData[targetid][pTaxiCalled])
            return SendErrorMessage(playerid, "That player's call was accepted by another taxi driver.");

        PlayerData[targetid][pTaxiCalled] = 0;

        new Float:pos[3];
        GetPlayerPos(targetid, pos[0], pos[1], pos[2]);
        SetPlayerWaypoint(playerid, sprintf("%s Position", ReturnName(targetid, 0)), pos[0], pos[1], pos[2]);

        SendCustomMessage(playerid, "TAXI", "You have accepted %s's taxi call, number phone: "YELLOW"%d, "WHITE"please follow the waypoint.", ReturnName(targetid, 0), PlayerData[targetid][pPhone]);
        SendCustomMessage(targetid, "TAXI", "%s has accepted your taxi call and is on their way, number phone: "YELLOW"%d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
    }
    return 1;
}

Dialog:AcceptMechanic(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new targetid = strval(inputtext);

        if(!IsPlayerConnected(targetid))
            return SendErrorMessage(playerid, "The specified player has disconnected.");

        if(!PlayerData[targetid][pMechanicCalled])
            return SendErrorMessage(playerid, "That player's call was accepted by another mechanic.");

        PlayerData[targetid][pMechanicCalled] = 0;

        new Float:pos[3];
        GetPlayerPos(targetid, pos[0], pos[1], pos[2]);
        SetPlayerWaypoint(playerid, sprintf("%s Position", ReturnName(targetid, 0)), pos[0], pos[1], pos[2]);

        SendCustomMessage(playerid, "MECHANIC", "You have accepted %s's mechanic call, number phone: "YELLOW"%d, "WHITE"please follow the waypoint.", ReturnName(targetid, 0), PlayerData[targetid][pPhone]);
        SendCustomMessage(targetid, "MECHANIC", "%s has accepted your mechanic call and is on their way, number phone: "YELLOW"%d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
    }
    return 1;
}

Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = strval(inputtext);

        if(!BusinessData[bizid][bizExists])
            return SendErrorMessage(playerid, "This is invalid business id, report to admin index this business now!.");

        if(!BusinessData[bizid][bizShipment])
            return SendErrorMessage(playerid, "This business is no longer requesting a shipment.");

        if(IsShipmentAccepted(bizid))
            return SendErrorMessage(playerid, "This shipment was already accepted.");

        foreach (new i : Player) if(Business_IsOwner(i, bizid)) {
            SendServerMessage(i, "%s has accepted your shipment request.", ReturnName(playerid, 0));
        }
        PlayerData[playerid][pShipment] = bizid;
        SetPlayerWaypoint(playerid, "Business Shipments", BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
        SendServerMessage(playerid, "You have accepted the shipment.");
        SendServerMessage(playerid, "Now, please go to "YELLOW"CARGO DOCK"WHITE" to buy this business cargo! (/gps) and go back to this delivery point!");
    }
    return 1;
}

// Dialog:RackWeapons(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         new id = Rack_Nearest(playerid);

//         if(id == -1)
//             return 0;

//         if(!RackData[id][rackWeapons][listitem])
//         {
//             if(!GetWeapon(playerid))
//                 return SendErrorMessage(playerid, "You must be holding a weapon to store it.");

// /*            if(PlayerData[playerid][pGunStatus][g_aWeaponSlots[GetWeapon(playerid)]])
//                 return SendErrorMessage(playerid, "This weapon is from faction locker, can't store to this house.");*/

//             RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
//             RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

//             ResetWeaponID(playerid, GetWeapon(playerid));

//             Rack_RefreshGuns(id);
//             Rack_Save(id);

//             ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
//             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has stored a %s on the weapon rack.", ReturnName(playerid, 0, 1), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
//         }
//         else
//         {
//             GivePlayerWeaponEx(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
//             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has taken a %s from the weapon rack.", ReturnName(playerid, 0, 1), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

//             RackData[id][rackWeapons][listitem] = 0;
//             RackData[id][rackAmmo][listitem] = 0;

//             Rack_RefreshGuns(id);
//             Rack_Save(id);

//             ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
//         }
//     }
//     return 1;
// }

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
        return 0;

    if(response)
    {
        new 
            userid = PlayerData[playerid][pTakeItems]
        ;
        if(!strcmp(inputtext, "Take Weapons")) {
            ResetWeapons(userid);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's weapons.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Seeds")) {
            Inventory_Remove(userid, "Marijuana Seeds", -1);
            Inventory_Remove(userid, "Cocaine Seeds", -1);
            Inventory_Remove(userid, "Heroin Opium Seeds", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's drug seeds.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Drugs")) {
            Inventory_Remove(userid, "Marijuana", -1);
            Inventory_Remove(userid, "Cocaine", -1);
            Inventory_Remove(userid, "Heroin", -1);
            Inventory_Remove(userid, "Steroids", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's drugs.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Radio")) {
            Inventory_Remove(userid, "Portable Radio", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's portable radio.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Driving License")) {
            PlayerData[userid][pDrivingLicense] = PlayerData[userid][pDrivingLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's driving license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Firearm License")) {
            PlayerData[userid][pFirearmLicense] = PlayerData[userid][pFirearmLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's firearm license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Business License")) {
            PlayerData[userid][pBusinessLicense] = PlayerData[userid][pBusinessLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's business license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Workshop License")) {
            PlayerData[userid][pWorkshopLicense] = PlayerData[userid][pWorkshopLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's Workshop license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Lumber License")) {
            PlayerData[userid][pLumberLicense] = PlayerData[userid][pLumberLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's Lumber license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Trucker License")) {
            PlayerData[userid][pTruckerLicense] = PlayerData[userid][pTruckerLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's Trucker license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Farm License")) {
            PlayerData[userid][pFarmLicense] = PlayerData[userid][pFarmLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's Farm license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Boat License")) {
            PlayerData[userid][pBoatLicense] = PlayerData[userid][pBoatLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's Boat license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if(!strcmp(inputtext, "Take Flying License")) {
            PlayerData[userid][pFlyingLicense] = PlayerData[userid][pFlyingLicenseExpired] = 0;
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's Flying license.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
        else if (!strcmp(inputtext, "Take Materials")) {
            Inventory_Remove(userid, "Materials", -1);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has confiscated %s's materials.", ReturnName(playerid, 0, 1), ReturnName(userid, 0, 1));
        }
    }
    return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                if(g_ServerLocked)
                {
                    g_ServerLocked = false;

                    SendRconCommand("password 0");
                    SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has unlocked the server.", ReturnName(playerid, 0));
                }
                else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Please enter the specified password below to lock the server with:", "Lock", "Back");
            }
            case 1: Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Submit", "Back");
            case 2: Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");
            case 3: Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Server Information", "Category\tValue\nDynamic Object:\t%d\nVehicle's Count:\t%d", "Close", "", Streamer_CountItems(STREAMER_TYPE_OBJECT), GetVehiclePoolSize());
        }
    }
    return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        if(isnull(inputtext) || !strcmp(inputtext, "0"))
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Please enter the specified password below to lock the server with:", "Lock", "Back");

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Lock Server", "Error: Please type a password shorter than 32 characters.\n\nPlease enter the specified password below to lock the server with:", "Lock", "Back");

        static
            str[48];

        format(str, sizeof(str), "password %s", inputtext);
        g_ServerLocked = true;

        SendRconCommand(str);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has locked the server (password: %s).", ReturnName(playerid, 0), inputtext);
    }
    else cmd_panel(playerid, "\1");
    return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Submit", "Back");

        static
            str[128];

        format(str, sizeof(str), "hostname %s", inputtext);

        SendRconCommand(str);
        SendAdminMessage(X11_TOMATO_1, "AdmCmd: %s has set the hostname to \"%s\".", ReturnName(playerid, 0), inputtext);
    }
    else cmd_panel(playerid, "\1");
    return 1;
}

Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
    if (CheckAdmin(playerid, 9))
        return 0;

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");

        if(strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: You can't execute \"DROP\" or \"DELETE\" queries.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back");

        PlayerData[playerid][pExecute] = 1;
        mysql_tquery(g_iHandle, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
    }
    else cmd_panel(playerid, "\1");
    return 1;
}

Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static 
            id;

        if((id = Entrance_Nearest(playerid)) == -1)
            return SendErrorMessage(playerid, "You are not in range of any entrance.");

        if(strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Invalid password specified.");

        if(EntranceData[id][entranceCustom]) SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2], 5000);
        else SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

        SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);
        SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
        SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);
        
        PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];

        SetPlayerWeather(playerid, 1);
        SetPlayerTime(playerid, 12, 0);
        SetCameraBehindPlayer(playerid);
    }
    return 1;
}

Dialog:ForceReleaseCar(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            carid = ListedVehicles[playerid][listitem],
            id = GetImpoundByID(VehicleData[carid][cImpounded]);


        if(id != -1 && Iter_Contains(DynamicVehicles, carid) && VehicleData[carid][cImpounded] != -1)
        {
            if(GetMoney(playerid) < VehicleData[carid][cImpoundPrice]) return SendErrorMessage(playerid, "You can't afford to release this vehicle.");

            for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_POLICE) {
                FactionData[fac][factionMoney] += VehicleData[carid][cImpoundPrice];
                FactionData[fac][factionDepositMoney] = VehicleData[carid][cImpoundPrice];
                format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Unimpound Car");
            }

            GiveMoney(playerid, -VehicleData[carid][cImpoundPrice]);

            VehicleData[carid][cImpounded] = -1;
            VehicleData[carid][cImpoundDelay] = 0;

            VehicleData[carid][cPos][0] = ImpoundData[id][impoundRelease][0];
            VehicleData[carid][cPos][1] = ImpoundData[id][impoundRelease][1];
            VehicleData[carid][cPos][2] = ImpoundData[id][impoundRelease][2];
            VehicleData[carid][cPos][3] = ImpoundData[id][impoundRelease][3];

/*            SetVehiclePos(VehicleData[carid][cVehicle], VehicleData[carid][cPos][0], VehicleData[carid][cPos][1], VehicleData[carid][cPos][2]);
            SetVehicleZAngle(VehicleData[carid][cVehicle], VehicleData[carid][cPos][3]);
*/
            SendServerMessage(playerid, "You have released your %s for %s.", GetVehicleNameByModel(VehicleData[carid][cModel]), FormatNumber(VehicleData[carid][cImpoundPrice]));

            VehicleData[carid][cImpoundPrice] = 0;

            Vehicle_Spawn(carid);
            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            SetVehiclePos(VehicleData[carid][cVehicle], ImpoundData[id][impoundRelease][0], ImpoundData[id][impoundRelease][1], ImpoundData[id][impoundRelease][2]);
            SetVehicleZAngle(VehicleData[carid][cVehicle], ImpoundData[id][impoundRelease][3]);
            PutPlayerInVehicleEx(playerid, VehicleData[carid][cVehicle], 0);


            Vehicle_Save(carid);
        }
    }
    return 1;
}


Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{ 
    if(response)
    {
        new
            carid = ListedVehicles[playerid][listitem],
            id = GetImpoundByID(VehicleData[carid][cImpounded]);

        if(id != -1 && Iter_Contains(DynamicVehicles, carid) && VehicleData[carid][cImpounded] != -1)
        {
            if((gettime() - VehicleData[carid][cImpoundDelay]) < (1800))
            {
                return SendErrorMessage(playerid, "You can release your car on %s.", ConvertTimestamp(Time:VehicleData[carid][cImpoundDelay]+Time:(1800)));
            }

            if (VehicleData[carid][cImpounded] != ImpoundData[id][impoundID])
                return SendErrorMessage(playerid, "Your vehicle isn't impounded in this release point");

            if(GetMoney(playerid) < VehicleData[carid][cImpoundPrice])
            {
                return SendErrorMessage(playerid, "You can't afford to release this vehicle.");
            }

            for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_POLICE) {
                FactionData[fac][factionMoney] += VehicleData[carid][cImpoundPrice];
                FactionData[fac][factionDepositMoney] = VehicleData[carid][cImpoundPrice];
                format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Unimpound Car");
            }

            GiveMoney(playerid, -VehicleData[carid][cImpoundPrice]);

            VehicleData[carid][cImpounded] = -1;
            VehicleData[carid][cImpoundDelay] = 0;

            VehicleData[carid][cPos][0] = ImpoundData[id][impoundRelease][0];
            VehicleData[carid][cPos][1] = ImpoundData[id][impoundRelease][1];
            VehicleData[carid][cPos][2] = ImpoundData[id][impoundRelease][2];
            VehicleData[carid][cPos][3] = ImpoundData[id][impoundRelease][3];

            SendServerMessage(playerid, "You have released your %s for %s.", GetVehicleNameByModel(VehicleData[carid][cModel]), FormatNumber(VehicleData[carid][cImpoundPrice]));

            VehicleData[carid][cImpoundPrice] = 0;
            Vehicle_Spawn(carid); //kita tambah dulu spawn nya
            SetPlayerInterior(playerid, 0); 
            SetPlayerVirtualWorld(playerid, 0);
            SetVehiclePos(VehicleData[carid][cVehicle], VehicleData[carid][cPos][0], VehicleData[carid][cPos][1], VehicleData[carid][cPos][2]);
            SetVehicleZAngle(VehicleData[carid][cVehicle], VehicleData[carid][cPos][3]);
            PutPlayerInVehicleEx(playerid, VehicleData[carid][cVehicle], 0);

            Vehicle_Save(carid);
        }
    }
    return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            userid = -1,
            itemid = -1,
            string[32];

        if(sscanf(inputtext, "u", userid))
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Please enter the name or the ID of the player:", "Submit", "Cancel");

        if(userid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: Invalid player specified.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

        if(!IsPlayerNearPlayer(playerid, userid, 6.0))
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: You are not near that player.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

        if(userid == playerid)
            return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Error: You can't give items to yourself.\n\nPlease enter the name or the ID of the player:", "Submit", "Cancel");

        itemid = PlayerData[playerid][pInventoryItem];

        if(itemid == -1)
            return 0;

        strunpack(string, InventoryData[playerid][itemid][invItem]);

        //tiba sini
        if(InventoryData[playerid][itemid][invQuantity] == 1)
        {
/*            if(!strcmp(string, "Backpack") && Inventory_HasItem(userid, "Backpack"))
                return SendErrorMessage(playerid, "That player is already carrying a backpack.");

            if(!strcmp(string, "Mask") && Inventory_HasItem(userid, "Mask"))
                return SendErrorMessage(playerid, "That player is already have a mask.");*/

            for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                if((Inventory_Count(userid, g_aInventoryItems[i][e_InventoryItem])+1) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "That player limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], g_aInventoryItems[i][e_InventoryItem]);
            }

            new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

            if(id == -1)
                return SendErrorMessage(playerid, "That player doesn't have anymore inventory slots.");

            /*if(!strcmp(string, "Backpack") && (id = GetPlayerBackpack(playerid)) != -1)
            {
                BackpackData[id][backpackPlayer] = PlayerData[userid][pID];
                Backpack_Save(id);

                SetAccessories(userid);
                Inventory_Remove(playerid, "Backpack");
            }*/
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a \"%s\" and gives it to %s.", ReturnName(playerid, 0, 1), string, ReturnName(userid, 0, 1));
            SendServerMessage(userid, "%s has given you \"%s\" (added to inventory).", ReturnName(playerid, 0), string);

            Inventory_Remove(playerid, string);
            Log_Write("logs/give_log.txt", "[%s] %s (%s) has given a %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], string, ReturnName(userid, 0), AccountData[userid][pIP]);
        }
        else
        {
            Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Item: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
            PlayerData[playerid][pGiveItem] = userid;
        }
    }
    return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
    if(response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
    {
        new
            userid = PlayerData[playerid][pGiveItem],
            itemid = PlayerData[playerid][pInventoryItem],
            string[32];

        strunpack(string, InventoryData[playerid][itemid][invItem]);

        if(isnull(inputtext))
            return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Item: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        if(strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
            return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Give Item", "Error: You don't have that much.\n\nItem: %s (Quantity: %d)\n\nPlease enter the amount of this item you wish to give %s:", "Give", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
            if((Inventory_Count(userid, g_aInventoryItems[i][e_InventoryItem])+strval(inputtext)) > g_aInventoryItems[i][e_InventoryMax]) return SendErrorMessage(playerid, "You can give only %d %s.", (g_aInventoryItems[i][e_InventoryMax]-Inventory_Count(userid, g_aInventoryItems[i][e_InventoryItem])), g_aInventoryItems[i][e_InventoryItem]);
        }

        new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

        if(id == -1)
            return SendErrorMessage(playerid, "That player doesn't have anymore inventory slots.");

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a \"%s\" and gives it to %s.", ReturnName(playerid, 0, 1), string, ReturnName(userid, 0, 1));
        SendServerMessage(userid, "%s has given you \"%s\" (added to inventory).", ReturnName(playerid, 0), string);

        Inventory_Remove(playerid, string, strval(inputtext));
        Log_Write("logs/give_log.txt", "[%s] %s (%s) has given %d %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), AccountData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), AccountData[userid][pIP]);
    }
    return 1;
}

/*Dialog:BackpackLoot(playerid, response, listitem, inputtext[])
{
    static id = -1;

    if(response)
    {
        if(!strcmp(inputtext, "Take Backpack"))
        {
            if(Inventory_HasItem(playerid, "Backpack"))
                return SendErrorMessage(playerid, "You can only have one backpack.");

            id = PlayerData[playerid][pBackpackLoot];

            BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
            BackpackData[id][backpackPos][0] = 0.0;
            BackpackData[id][backpackPos][1] = 0.0;
            BackpackData[id][backpackPos][2] = 0.0;

            DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);
            DestroyDynamicObject(BackpackData[id][backpackObject]);

            Backpack_Save(id);
            Inventory_Add(playerid, "Backpack", 3026);

            SetAccessories(playerid);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has picked up a backpack.", ReturnName(playerid, 0, 1));
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
        }
        else if((id = BackpackListed[playerid][listitem]) != -1)
        {
            new
                string[32];

            strcat(string, BackpackItems[id][bItemName]);

            Inventory_Add(playerid, string, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
            Backpack_Remove(BackpackItems[id][bItemBackpack], string, BackpackItems[id][bItemQuantity]);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s reaches inside the backpack and takes a \"%s\".", ReturnName(playerid, 0), string);
        }
    }
    return 1;
}*/

/*Dialog:BackpackDeposit(playerid, response, listitem, inputtext[])
{
    static
        string[32];

    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

    if(response)
    {
        new amount = strval(inputtext);

        if(amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
            return Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

        Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
        Inventory_Remove(playerid, string, amount);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has stored a \"%s\" into their backpack.", ReturnName(playerid, 0), string);
        Backpack_Open(playerid);
    }
    else Backpack_Open(playerid);
    return 1;
}

Dialog:BackpackTake(playerid, response, listitem, inputtext[])
{
    static
        string[32],
        id = -1;

    if(response)
    {
        new amount = strval(inputtext);

        id = PlayerData[playerid][pStorageItem];

        strunpack(string, BackpackItems[id][bItemName]);

        if(amount < 1 || amount > BackpackItems[id][bItemQuantity])
            return Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Backpack Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, BackpackItems[id][bItemQuantity]);

        Inventory_Add(playerid, string, BackpackItems[id][bItemModel], amount);
        Backpack_Remove(GetPlayerBackpack(playerid), string, amount);

        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has taken a \"%s\" from their backpack.", ReturnName(playerid, 0), string);
        Backpack_Open(playerid);
    }
    else Backpack_Open(playerid);
    return 1;
}

Dialog:BackpackOptions(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pStorageItem], string[32];

        switch (listitem)
        {
            case 0:
            {
                strcat(string, BackpackItems[id][bItemName]);

                if(BackpackItems[id][bItemQuantity] == 1)
                {
                    Inventory_Add(playerid, string, BackpackItems[id][bItemModel]);
                    Backpack_Remove(GetPlayerBackpack(playerid), string);

                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has taken a \"%s\" from their backpack.", ReturnName(playerid, 0), string);
                    Backpack_Open(playerid);
                }
                else
                {
                    Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Backpack Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, BackpackItems[id][bItemQuantity]);
                }
            }
            case 1:
            {
                new itemid = Inventory_GetItemID(playerid, BackpackItems[id][bItemName]);

                if(itemid == -1)
                    return SendErrorMessage(playerid, "You don't have anymore of this item to store!");

                strunpack(string, InventoryData[playerid][itemid][invItem]);

                if(IsFurnitureItem(string))
                    return SendErrorMessage(playerid, "You can't store furniture in your backpack.");

                if(InventoryData[playerid][itemid][invQuantity] == 1)
                {
                    Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][itemid][invModel]);
                    Inventory_Remove(playerid, string);

                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has stored a \"%s\" into their backpack.", ReturnName(playerid, 0), string);
                    Backpack_Open(playerid);
                }
                else
                {
                    PlayerData[playerid][pInventoryItem] = itemid;
                    Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
                }
            }
        }
    }
    else Backpack_Open(playerid);
    return 1;
}

Dialog:Backpack(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = -1, string[48];

        if(!listitem)
        {
            if(Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
                return SendErrorMessage(playerid, "The backpack has reached it's capacity of %d items.", MAX_BACKPACK_CAPACITY);

            OpenInventory(playerid);

            PlayerData[playerid][pStorageSelect] = 3;
        }
        else if((id = BackpackListed[playerid][listitem-1]) != -1) {
            PlayerData[playerid][pStorageItem] = id;

            format(string, sizeof(string), "%s (Quantity: %d)", BackpackItems[id][bItemName], BackpackItems[id][bItemQuantity]);
            Dialog_Show(playerid, BackpackOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item\nDrop Item", "Select", "Back");
        }
    }
    return 1;
}*/

Dialog:ListProperties(playerid, response, listitem, inputtext[]) {
    if (response) {
        switch (listitem) {
            case 0: {
                if (!House_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any houses");

                new str[256], price, count;
                strcat(str, "ID\tAddress\tPrice\n");
                foreach (new i : Houses) if (House_IsOwner(playerid, i)) {
                    price = HouseData[i][housePrice]/2;
                    strcat(str, sprintf("%d\t%s\t"GREEN"%s\n",i,HouseData[i][houseAddress],FormatNumber(price)));
                    ListedHouse[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellHouse, DIALOG_STYLE_TABLIST_HEADERS, "Sell House", str, "Sell", "Back");
            }
            case 1: {
                if (!Business_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any businesses");

                new str[256], price, count;
                strcat(str, "ID\tName\tLocation\tPrice\n");
                for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i)) {
                    price = BusinessData[i][bizPrice]/2;
                    strcat(str, sprintf("%d\t%s\t%s\t"GREEN"%s\n",i,BusinessData[i][bizName],GetLocation(BusinessData[i][bizPos][0],BusinessData[i][bizPos][1],BusinessData[i][bizPos][2]),FormatNumber(price)));
                    ListedBusiness[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellBusiness, DIALOG_STYLE_TABLIST_HEADERS, "Sell Business", str, "Sell", "Back");
            }
            case 2: {
                if (!Garage_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any garages");

                new str[256], price, count;
                strcat(str, "ID\tType\tLocation\tPrice\n");
                for (new i = 0; i < MAX_GARAGE; i ++) if (Garage_IsOwner(playerid, i) && !GarageData[i][garageHouseLink]) {
                    price = GarageData[i][garagePrice]/2;
                    strcat(str, sprintf("%d\t%s\t%s\t"GREEN"%s\n",i,Garage_GetType(i),GetLocation(GarageData[i][garageLoc][0],GarageData[i][garageLoc][1],GarageData[i][garageLoc][2]),FormatNumber(price)));
                    ListedGarage[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellGarage, DIALOG_STYLE_TABLIST_HEADERS, "Sell Garage", str, "Sell", "Back");
            }
            case 3: {
                if (!Workshop_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any workshops");

                new str[256], price, count;
                strcat(str, "ID\tName\tLocation\tPrice\n");
                foreach (new i : Workshop) if (Workshop_IsOwner(playerid, i)) {
                    price = WorkshopData[i][wPrice]/2;
                    strcat(str, sprintf("%d\t%s\t%s\t"GREEN"%s\n",i,WorkshopData[i][wName],GetLocation(WorkshopData[i][wPos][0],WorkshopData[i][wPos][1],WorkshopData[i][wPos][2]),FormatNumber(price)));
                    ListedWorkshop[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellWorkshop, DIALOG_STYLE_TABLIST_HEADERS, "Sell Workshop", str, "Sell", "Back");
            }
            case 4: {
                if (!Farm_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any farm");

                new str[128], price, count;
                strcat(str, "ID\tName\tLocation\tPrice\n");
                foreach (new i : Farms) if (Farm_IsOwner(playerid, i)) {
                    price = FarmData[i][farmPrice]/2;
                    strcat(str,sprintf("%d\t%s\t%s\t%s\n", i, FarmData[i][farmName], GetLocation(FarmData[i][farmPos][0], FarmData[i][farmPos][1], FarmData[i][farmPos][2]), FormatNumber(price)));
                    ListedFarm[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellFarm, DIALOG_STYLE_TABLIST_HEADERS, "Sell Farm", str, "Sell", "Back");
            }
            case 5: {
                if (!FurnStore_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any farm");

                new str[128], price, count;
                strcat(str, "ID\tName\tLocation\tPrice\n");
                foreach (new i : FurnStore) if (FurnStore_IsOwner(playerid, i)) {
                    price = storeData[i][storePrice]/2;
                    strcat(str,sprintf("%d\t%s\t%s\t%s\n", i, storeData[i][storeName], GetLocation(storeData[i][storePos][0], storeData[i][storePos][1], storeData[i][storePos][2]), FormatNumber(price)));
                    ListedFurnstore[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellFurnstore, DIALOG_STYLE_TABLIST_HEADERS, "Sell Furniture Store", str, "Sell", "Back");
            }
            case 6: {
                if (!FlatRoom_GetCount(playerid))
                    return SendErrorMessage(playerid, "You don't have any flat");
                
                new str[128], price, count, FlatType[12], address[24];
                strcat(str, "ID\tType\tAddress\tPrice\n");
                foreach (new i : FlatRooms) if (FlatRoom_IsOwner(playerid, i)) {
                    price = (FlatRoom[i][flatRoomPrice]/2);
                    Flat_GetType(i, FlatType);
                    FlatRoom_GetAddress(i, address);
                    strcat(str,sprintf("%d\t%s\t%s\t%s\n",i,FlatType,address,FormatNumber(price)));
                    ListedFlat[playerid][count++] = i;
                }
                Dialog_Show(playerid, SellFlat, DIALOG_STYLE_TABLIST_HEADERS, "Sell Flat", str, "Sell", "Back");
            }
        }
    }
    return 1;
}

Dialog:SellHouse(playerid, response, listitem, inputtext[]) {
    if (response) {
        new houseid = ListedHouse[playerid][listitem],
            price = HouseData[houseid][housePrice]/2;
        
        if (price < 1)
            return SendErrorMessage(playerid, "You can't sell this house");

        HouseData[houseid][houseOwner] = 0;
        HouseData[houseid][houseMoney] = 0;
        format(HouseData[houseid][houseOwnerName], 32, "The State");

        new query[1024];
        for(new garage = 0; garage != MAX_GARAGE; garage++) if(GarageData[garage][garageExists] && GarageData[garage][garageHouseLink] == HouseData[houseid][houseID]) {
            GarageData[garage][garageOwnerId] = 0;
            GarageData[garage][garageOwner] = EOS;
            GarageData[garage][garageLock] = 1;
            GarageData[garage][garageInside] = 0;

            for (new j = 0; j < MAX_DYNAMIC_VEHICLES; j ++) if (Iter_Contains(DynamicVehicles, j) && VehicleData[j][cOwner] && VehicleData[j][cGarage] == GarageData[garage][garageID])
            {
                VehicleData[j][cGarage] = 0;
                VehicleData[j][cInt] = 0;
                VehicleData[j][cVw] = 0;
                VehicleData[j][cPos][0] = GarageData[garage][garageLoc][0];
                VehicleData[j][cPos][1] = GarageData[garage][garageLoc][1];
                VehicleData[j][cPos][2] = GarageData[garage][garageLoc][2];
                VehicleData[j][cPos][3] = GarageData[garage][garageLoc][3];

                Vehicle_Spawn(j);
            }

            format(query,sizeof(query),"UPDATE `player_vehicles` SET `Garage`= '0', `Pos1` = '%.01f', `Pos2` = '%.01f', `Pos3` = '%.01f', `Pos4` = '%.01f' WHERE `Garage`='%d'", GarageData[garage][garageLoc][0], GarageData[garage][garageLoc][1], GarageData[garage][garageLoc][2], GarageData[garage][garageLoc][3], GarageData[garage][garageID]);
            mysql_tquery(g_iHandle, query);

            Garage_Sync(garage);
        }

        House_RemoveAllItems(houseid);
        House_RemoveFurniture(houseid);
        HouseStructure_DeleteAll(houseid);
        House_RemoveAllGateAndObject(houseid);
        House_Refresh(houseid);
        House_Save(houseid);

        GiveMoney(playerid, price);
        SendCustomMessage(playerid, "PROPERTIES", "You've been sold your house for "GREEN"%s", FormatNumber(price));
    } else cmd_sellproperty(playerid, "\1");
    return 1;
}

Dialog:SellBusiness(playerid, response, listitem, inputtext[]) {
    if (response) {
        new bizid = ListedBusiness[playerid][listitem],
            price = BusinessData[bizid][bizPrice]/2;
        
        if (price < 1)
            return SendErrorMessage(playerid, "You can't sell this business");

        BusinessData[bizid][bizOwner] = 0;

        if (Business_VehGetCount(bizid)) {
            for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[bizid][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                Vehicle_Delete(i);
            }
        }

        BusinessData[bizid][bizVault] = 0;
        BusinessEmployee_RemoveAll(bizid);
        Business_RemoveObjects(bizid);

        Business_Refresh(bizid);
        Business_Save(bizid);

        GiveMoney(playerid, price);
        SendCustomMessage(playerid, "PROPERTIES", "You've been sold your business for "GREEN"%s", FormatNumber(price));
    } else cmd_sellproperty(playerid, "\1");
    return 1;
}

Dialog:SellGarage(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = ListedGarage[playerid][listitem],
            price = GarageData[id][garagePrice]/2;
        
        if (price < 1)
            return SendErrorMessage(playerid, "You can't sell this garage");

        if (GarageData[id][garageInside])
            return SendErrorMessage(playerid, "Please take out all vehicle from this garage");

        GarageData[id][garageOwnerId] = 0;
        GarageData[id][garageInside] = 0;
		Garage_Sync(id);
        Garage_Save(id);

        GiveMoney(playerid, price);
        SendCustomMessage(playerid, "PROPERTIES", "You've been sold your garage for "GREEN"%s", FormatNumber(price));
    } else cmd_sellproperty(playerid, "\1");
    return 1;
}

Dialog:SellWorkshop(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = ListedWorkshop[playerid][listitem],
            price = WorkshopData[id][wPrice]/2;
        
        if (price < 1)
            return SendErrorMessage(playerid, "You can't sell this workshop");

        format(WorkshopData[id][wName], 32, "Workshop");
		format(WorkshopData[id][wText], 128, "This workshop for sale");
		WorkshopData[id][wOwner] = 0;
        format(WorkshopData[id][wOwnerName],MAX_PLAYER_NAME,"None");
		WorkshopData[id][wComponent] = 0;
		WorkshopData[id][wVault] = 0;
		WorkshopData[id][wSeal] = 0;
		WorkshopData[id][wStatus] = 0;

        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cWorkshop] == WorkshopData[id][wID] && IsValidVehicle(VehicleData[i][cVehicle])) {
            Vehicle_Delete(i);
        }

		RemoveWorkshopEmploye(id);
		Workshop_Refresh(id);
        Workshop_Save(id);

        GiveMoney(playerid, price);
        SendCustomMessage(playerid, "PROPERTIES", "You've been sold your workshop for "GREEN"%s", FormatNumber(price));
    } else cmd_sellproperty(playerid, "\1");
    return 1;
}

Dialog:SellFarm(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = ListedFarm[playerid][listitem],
            price = FarmData[id][farmPrice]/2;
        
        if (price < 1)
            return SendErrorMessage(playerid, "You can't sell this farm");

        FarmData[id][farmOwner] = 0;
        format(FarmData[id][farmOwnerName], MAX_PLAYER_NAME, "None");
        format(FarmData[id][farmName], 128, "Private Farm");
        FarmData[id][farmPlant][0] = 0;
        FarmData[id][farmPlant][1] = 0;
        FarmData[id][farmPlant][2] = 0;
        FarmData[id][farmPlant][3] = 0;
        Farm_RemoveAllEmployees(id);
		Farm_Refresh(id);
        Farm_Save(id);

        GiveMoney(playerid, price);
        SendCustomMessage(playerid, "PROPERTIES", "You've been sold your farm for "GREEN"%s", FormatNumber(price));
    } else cmd_sellproperty(playerid, "\1");
    return 1;
}

Dialog:SellFurnstore(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = ListedFurnstore[playerid][listitem],
            price = storeData[id][storePrice]/2;
        
        if (price < 1)
            return SendErrorMessage(playerid, "You can't sell this store");

        storeData[id][storeVault] = storeData[id][storeOwner] = 0;
		storeData[id][storeEmploye][0] = storeData[id][storeEmploye][1] = storeData[id][storeEmploye][2] = 0;
		format(storeData[id][storeOwnerName], MAX_PLAYER_NAME, "None");

        foreach(new i : FurnObject) if(FurnStore[i][furnStoreId] == storeData[id][storeID])
        {
            DestroyDynamic3DTextLabel(FurnStore[i][furnLabel]);
            DestroyDynamicObject(FurnStore[i][furnObject]);
            FurnStore[i][furnObject] = INVALID_STREAMER_ID;

            mysql_tquery(g_iHandle, sprintf("DELETE FROM `furnobject` WHERE id=%d", FurnStore[i][furnID]));

            FurnStore[i][furnID] = 0;
            FurnStore[i][furnStoreId] = 0;

            new current = i;
            Iter_SafeRemove(FurnObject, current, i);
        }

		FurnStore_Refresh(id);
		FurnStore_Save(id);
		
        GiveMoney(playerid, price);
        SendCustomMessage(playerid, "PROPERTIES", "You've been sold your furnstore for "GREEN"%s", FormatNumber(price));
    } else cmd_sellproperty(playerid, "\1");
    return 1;
}

Dialog:SellFlat(playerid, response, listitem, inputtext[]) {
    if (!response)
        return cmd_sellproperty(playerid, "\1");
    
    new flatid = ListedFlat[playerid][listitem],
        price = (FlatRoom[flatid][flatRoomPrice]/2);

    if (price < 1)
        return SendErrorMessage(playerid, "You can't sell this flat");
    
    FlatRoom[flatid][flatRoomOwner] = 0;
    GiveMoney(playerid, price);
    FlatStructure_DeleteAll(flatid, true);
    FlatFurniture_DeleteAll(flatid);
    Flat_RemoveAllItems(flatid);

    FlatRoom_Refresh(flatid);
    FlatRoom_Save(flatid);
    SendCustomMessage(playerid, "PROPERTIES", "You've been sold your flat for "GREEN"%s", FormatNumber(price));
    return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!TicketData[playerid][listitem][ticketExists])
            return SendErrorMessage(playerid, "There is no ticket in the selected slot.");

        if(GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
            return SendErrorMessage(playerid, "You can't afford to pay this ticket.");

        GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

        SendServerMessage(playerid, "You have paid off a %s ticket for \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
        Ticket_Remove(playerid, listitem);
    }
    return 1;
}

Dialog:MainMAP(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0: Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Find Business", "Retail Store\nWeapon Store\nClothing Store\nFast Food\nDealership\nGas Station\nFurniture Store\nElectronic Store\nGYM", "Submit", "Cancel");
            case 1: {
                new str[256];
                strcat(str, "ID\tName\tLocation\n");
                for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists]) {
                    strcat(str, sprintf("%d\t%s\t%s\n",i,Job_GetName(JobData[i][jobType]),GetLocation(JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2])));
                }
                Dialog_Show(playerid, FindJob, DIALOG_STYLE_TABLIST_HEADERS, "Find Job", str, "Select", "Cancel");
            }
            case 2: {
                new
                    str[256];

                strcat(str, "Name\tLocation\n");
                strcat(str, sprintf("Bus Driver\t%s\n", GetLocation(1001.46, -1350.41, 13.33)));
                strcat(str, sprintf("Sweeper\t%s\n", GetLocation(1383.34, -1573.38, 13.55)));
                strcat(str, sprintf("Trashmaster\t%s\n", GetLocation(2233.06, -2185.02, 13.54)));
                strcat(str, sprintf("Fishing (Activity)\t%s\n", GetLocation(2842.27, -1530.27, 11.09)));
                strcat(str, sprintf("Miner\t%s\n", GetLocation(647.06, 895.30, -42.33)));
                strcat(str, sprintf("Package Sorter\t%s\n", GetLocation(-259.03, -2182.35, 29.01)));
                strcat(str, sprintf("Cargo Unloader\t%s", GetLocation(1.58, -245.37, 5.42)));
                Dialog_Show(playerid, FindSidejob, DIALOG_STYLE_TABLIST_HEADERS, "Find Sidejob", str, "Select", "Back");
            }
            case 3:
            {
                new
                    stringsourch[1024],
                    count = 0;

                strcat(stringsourch, "Index\tName\tLocation\n");
                for(new i = 0; i < MAX_DEALER; i++) if(DealershipData[i][dExists]) 
                {
                    strcat(stringsourch, sprintf("%d\t%s\t%s\n", i, DealershipData[i][dName], GetLocation(DealershipData[i][dPos][0],DealershipData[i][dPos][1],DealershipData[i][dPos][2])));
                    count++;
                }

                if(count) Dialog_Show(playerid, ListDealer, DIALOG_STYLE_TABLIST_HEADERS, "Available Dealership", stringsourch, "Select", "Close");
                else SendErrorMessage(playerid, "There is no one dealership spawned!.");
            }
            case 4: Dialog_Show(playerid, FindCargo, DIALOG_STYLE_LIST, "Find Cargo (Trucker Only)", "Gas Station Cargo\nRetail Cargo\nClothes Cargo\nFood Cargo\nGYM Cargo\nElectronics Cargo", "Select", "Close");
            case 5: Dialog_Show(playerid, OtherLocation, DIALOG_STYLE_LIST, "Lokasi Lainnya", "Find Tree\nRodeo Bank\nComponent Warehouse\nJefferson Church\nModshop\nLos Santos Prison\nPublic Location\nUnimpound Center\nValley Docks Import\nMechanic Center\nMechanic Boat\nMechanic Village\nInsurance Center\nDMV\nPlant Factory\nLos Santos Ammunation", "Select", "Back");
        }
    }
    return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                static
                    string[MAX_GPS_LOCATIONS * 32];

                string = "Add Location\n";

                for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if(LocationData[playerid][i][locationExists]) {
                    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
                }
                Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Custom Locations", string, "Select", "Back");
            }
            case 1: Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Find Business", "Retail Store\nWeapon Store\nClothing Store\nFast Food\nDealership\nGas Station\nFurniture Store\nElectronic Store\nGYM", "Submit", "Cancel");
            case 2: {
                Dialog_Show(playerid, FindCargo, DIALOG_STYLE_LIST, "Find Cargo (Trucker Only)", "Gas Station Cargo\nRetail Cargo\nClothes Cargo\nFood Cargo\nGYM Cargo\nElectronics Cargo", "Select", "Close");
            }
            case 3: {
                new
                    stringsourch[1024],
                    count = 0;

                strcat(stringsourch, "ID\tName\tLocation\n");
                for(new i = 0; i < MAX_DEALER; i++) if(DealershipData[i][dExists]) 
                {
                    strcat(stringsourch, sprintf("%d\t%s\t%s\n", i, DealershipData[i][dName], GetLocation(DealershipData[i][dPos][0],DealershipData[i][dPos][1],DealershipData[i][dPos][2])));
                    count++;
                }

                if(count) Dialog_Show(playerid, ListDealer, DIALOG_STYLE_TABLIST_HEADERS, "Available Dealership", stringsourch, "Select", "Close");
                else SendErrorMessage(playerid, "There is no one dealership spawned!.");
            }
            case 4: {
                new str[800];
                strcat(str, "ID\tName\tLocation\n");
                foreach (new i : Farms) {
                    strcat(str, sprintf("%d\t%s\t%s\n",i,FarmData[i][farmName],GetLocation(FarmData[i][farmPos][0], FarmData[i][farmPos][1], FarmData[i][farmPos][2])));
                }
                Dialog_Show(playerid, FindFarm, DIALOG_STYLE_TABLIST_HEADERS, "Find Farm", str, "Select", "Close");
            }
            case 5: {
                new info[800];
                strcat(info, "ID\tName\tLocation\n");
                foreach (new i : Flat) {
                    strcat(info, sprintf("%d\t%s\t%s\n",i,FlatData[i][flatName],GetLocation(FlatData[i][flatPos][0],FlatData[i][flatPos][1],FlatData[i][flatPos][2])));
                }
                Dialog_Show(playerid, FindFlat, DIALOG_STYLE_TABLIST_HEADERS, "Find Flat", info, "Select", "Close");
            }
            case 6: Show_Lumber(playerid);
            case 7:
            {
                new string[255], count = 0;
                format(string, sizeof(string), "#\tLocation\n");
                for(new i = 0; i != MAX_GARAGE; i++) if(GarageData[i][garageExists] && Garage_IsOwner(playerid, i) && !GarageData[i][garageHouseLink]) {
                    format(string, sizeof(string), "%s%d\t%s\n", string, i, GetLocation(GarageData[i][garageLoc][0], GarageData[i][garageLoc][1], GarageData[i][garageLoc][2]));
                    count++;
                }
                if(count) Dialog_Show(playerid, ListGarage, DIALOG_STYLE_TABLIST_HEADERS, "GPS Garage", string, "Select", "Close");
                else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "ERROR", "You don't have a garage.", "Close", "");
            }
            case 8:
            {
                new string[128], count;
                strcat(string,"House ID\tAddress\tLocation\n");
                foreach (new i : Houses) if(House_IsOwner(playerid, i)) 
                {
                    strcat(string, sprintf("%d\t%s\t%s\n", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2])));
                    ListedHouse[playerid][count++] = i;
                }
                if(!count) return SendErrorMessage(playerid, "You don't have house.");
                Dialog_Show(playerid, FindHouse, DIALOG_STYLE_TABLIST_HEADERS, "Find House", string, "Find", "Cancel");
            }
            case 9:
            {
                new str[256];
                strcat(str, "ID\tName\tLocation\n");
                for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if(JobData[i][jobExists]) {
                    strcat(str, sprintf("%d\t%s\t%s\n",i,Job_GetName(JobData[i][jobType]),GetLocation(JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2])));
                }
                Dialog_Show(playerid, FindJob, DIALOG_STYLE_TABLIST_HEADERS, "Find Job", str, "Select", "Cancel");
            }
            case 10: {
                new
                    str[512];

                strcat(str, "Name\tLocation\n");
                strcat(str, sprintf("Bus Driver\t%s\n", GetLocation(1001.46, -1350.41, 13.33)));
                strcat(str, sprintf("Sweeper\t%s\n", GetLocation(1383.34, -1573.38, 13.55)));
                strcat(str, sprintf("Trashmaster\t%s\n", GetLocation(2233.06, -2185.02, 13.54)));
                strcat(str, sprintf("Fishing (Activity)\t%s\n", GetLocation(2842.27, -1530.27, 11.09)));
                strcat(str, sprintf("Miner\t%s\n", GetLocation(647.06, 895.30, -42.33)));
                strcat(str, sprintf("Package Sorter\t%s\n", GetLocation(-259.03, -2182.35, 29.01)));
                strcat(str, sprintf("Cargo Unloader\t%s", GetLocation(1.58, -245.37, 5.42)));
                Dialog_Show(playerid, FindSidejob, DIALOG_STYLE_TABLIST_HEADERS, "Find Sidejob", str, "Select", "Back");
            }
            case 11: {
                new
                    Float:fX,
                    Float:fY,
                    Float:fZ,
                    text[512],
                    count = 0;

                if(Vehicle_GetCount(playerid) == 0)
                    return SendErrorMessage(playerid, "You don't own any vehicles.");

                format(text, sizeof(text),"ID\tModel\tLocation\n");
                for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(playerid, i) && VehicleData[i][cImpounded] == -1 && !VehicleData[i][cGarage] && !VehicleData[i][cGarageApart] && !VehicleData[i][cGarageFlat] && !VehicleData[i][cInsideInsurance])
                {
                    GetVehiclePos(VehicleData[i][cVehicle], fX, fY, fZ);

                    format(text,sizeof(text), "%s%s\t%s\t%s\n", text, (!IsValidVehicle(VehicleData[i][cVehicle])) ? ("-") : (sprintf("%d", VehicleData[i][cVehicle])), GetVehicleNameByModel(VehicleData[i][cModel]), GetLocation(fX, fY, fZ));
                    ListedVehicles[playerid][count++] = i;
                }
                if(count) Dialog_Show(playerid, CarList, DIALOG_STYLE_TABLIST_HEADERS, "Track Vehicle", text, "Find..", "Close");
                else SendErrorMessage(playerid, "There is nothing vehicle in track list (\"/v myveh\" to see).");
            }
            case 12: {
                new string[800];
                format(string, sizeof(string), "#\tName\tLocation\n");
                foreach(new id : Workshop) if (Iter_Contains(Workshop, id)) {
                    format(string, sizeof(string), "%s%d\t%s "WHITE"(%s"WHITE")\t%s\n", string, id, WorkshopData[id][wName], (WorkshopData[id][wStatus]) ? (GREEN"opened") : (RED"closed"), GetLocation(WorkshopData[id][wPos][0], WorkshopData[id][wPos][1], WorkshopData[id][wPos][2]));
                }
                Dialog_Show(playerid, ListWorkshop, DIALOG_STYLE_TABLIST_HEADERS, "GPS Workshop", string, "Select", "Close");
            }
            case 13: {
                Dialog_Show(playerid, OtherLocation, DIALOG_STYLE_LIST, "Lokasi Lainnya", "Rodeo Bank\nComponent Warehouse\nJefferson Church\nModshop\nLos Santos Prison\nPublic Location\nUnimpound Center\nValley Docks Import\nMechanic Center\nMechanic Boat\nMechanic Village\nInsurance Center\nDMV\nPlant Factory\nLos Santos Ammunation", "Select", "Back");
            }
        }
    }
    return 1;
}

Dialog:FindCargo(playerid, response, listitem, inputtext[])
{
    if(response) {
        if (GetPlayerJob(playerid, 0) != JOB_COURIER && GetPlayerJob(playerid, 1) != JOB_COURIER)
            return SendErrorMessage(playerid, "You're not trucker.");
        
        SetPlayerWaypoint(playerid, inputtext, arrCargo[listitem][cX], arrCargo[listitem][cY], arrCargo[listitem][cZ]);

        SendServerMessage(playerid, "Waypoint %s marked on your map.", inputtext);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}
Dialog:FindSidejob(playerid, response, listitem, inputtext[]) {
    if (response) {
        switch (listitem) {
            case 0: SetPlayerWaypoint(playerid, inputtext, 1001.46, -1350.41, 13.33); // Bus Driver
            case 1: SetPlayerWaypoint(playerid, inputtext, 1383.34, -1573.38, 13.55); // Sweeper
            case 2: SetPlayerWaypoint(playerid, inputtext, 2233.06, -2185.02, 13.54); // Trashmaster
            case 3: SetPlayerWaypoint(playerid, inputtext, 2842.27, -1530.27, 11.09); // Fishing
            case 4: SetPlayerWaypoint(playerid, inputtext, 647.06, 895.30, -42.33); // Miner
            case 5: SetPlayerWaypoint(playerid, inputtext, -259.03, -2182.35, 29.01); // Package Sorter
            case 6: SetPlayerWaypoint(playerid, inputtext, 1.58, -245.37, 5.42); // Cargo Unloader
        }
        SendCustomMessage(playerid, "GPS", "Waypoint set to %s (marked on radar).", inputtext);
    }
    else {
        if(!Inventory_HasItem(playerid, "GPS System")) cmd_map(playerid, "\1");
        else cmd_gps(playerid, "\1");
    }
    return 1;
}
Dialog:OtherLocation(playerid, response, listitem, inputtext[])
{
    if(response) {
        switch(listitem) {
            case 0: SetPlayerWaypoint(playerid, inputtext, 588.4249,-1239.4244,17.82159), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Rodeo bank
            case 1: {
                for (new jobid = 0; jobid < MAX_DYNAMIC_JOBS; jobid ++) if (JobData[jobid][jobType] == JOB_MECHANIC) {
                    SetPlayerWaypoint(playerid, inputtext, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2]);
                } // Warehouse component
            }
            case 2: SetPlayerWaypoint(playerid, inputtext, 2233.31, -1333.26, 23.98), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Jefferson Church
            case 3: SetPlayerWaypoint(playerid, inputtext, 2455.69, -2108.31, 13.56), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Modshop
            case 4: SetPlayerWaypoint(playerid, inputtext, 1803.81, -1579.46, 13.43), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Los Santos Prison
            case 5: Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Public Locations", "Police HQ\nASGH\nSANA\nCity Hall\nNewbie School", "Select", "Back"); // Public Locations
            case 6: { // Unimpound Center
                new text[256];
                format(text,sizeof(text),"#\tLocation\n");
                for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && (ImpoundData[i][impoundRelease][0] != 0.0 && ImpoundData[i][impoundRelease][1] != 0.0 && ImpoundData[i][impoundRelease][2] != 0.0)) {
                    format(text,sizeof(text),"%s%d\t%s\n",text,i,GetLocation(ImpoundData[i][impoundRelease][0], ImpoundData[i][impoundRelease][1], ImpoundData[i][impoundRelease][2]));
                }
                Dialog_Show(playerid, FindImpound, DIALOG_STYLE_TABLIST_HEADERS, "Unimpound Center", text, "Track", "Close");
            }
            case 7: SetPlayerWaypoint(playerid, inputtext, 2618.99, -2226.67, 13.38), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Valley Docks Import
            case 8: SetPlayerWaypoint(playerid, inputtext, 2427.5293,-2089.8679,13.5469), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); //mechanic center
            case 9: SetPlayerWaypoint(playerid, inputtext, 2582.20, -2136.47, -0.05), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Mechanic Boat
            case 10: SetPlayerWaypoint(playerid, inputtext, 319.03, -58.11, 1.63), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Mechanic Village
            case 11: SetPlayerWaypoint(playerid, inputtext, 1111.6385,-1795.5822,16.5938), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Insurance center
            case 12: SetPlayerWaypoint(playerid, inputtext, 1081.1970,-1696.7852,13.5469), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // DMV
            case 13: SetPlayerWaypoint(playerid, inputtext, -372.83, -1427.15, 25.72), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Plant Factory
            case 14: SetPlayerWaypoint(playerid, inputtext,  1368.53, -1279.85, 13.54), SendCustomMessage(playerid, "GPS", "Waypoint %s marked on your map.", inputtext); // Los Santos Ammunation
        }
    }
    else {
        if(!Inventory_HasItem(playerid, "GPS System")) cmd_map(playerid, "\1");
        else cmd_gps(playerid, "\1");
    }
    return 1;
}

Dialog:ListGarage(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = strval(inputtext);
        SetPlayerWaypoint(playerid, "Go to garage", GarageData[id][garageLoc][0], GarageData[id][garageLoc][1], GarageData[id][garageLoc][2]);
        SendServerMessage(playerid, "Waypoint set to garage id \"%d\" (marked on radar).", id);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindImpound(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = strval(inputtext);
        SetPlayerWaypoint(playerid, sprintf("Unimpound Center: %d", id), ImpoundData[id][impoundRelease][0], ImpoundData[id][impoundRelease][1], ImpoundData[id][impoundRelease][2]);
        SendCustomMessage(playerid, "GPS", "Waypoint set to Unimpound Center ID: %d (marked on radar).", id);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindRental(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = strval(inputtext), str[24];
        format(str,sizeof(str),"Rental #%d", id);
        SetPlayerWaypoint(playerid, str, RentPoint[id][rentPosX], RentPoint[id][rentPosY], RentPoint[id][rentPosZ]);
        SendCustomMessage(playerid, "GPS", "Waypoint set to Rental ID: %d (marked on radar).", id);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindFarm(playerid, response, listitem, inputtext[]) {
    if (response) {
        new i = strval(inputtext);
        SetPlayerWaypoint(playerid, sprintf("Farm #%d", i), FarmData[i][farmPos][0], FarmData[i][farmPos][1], FarmData[i][farmPos][2]);
        SendCustomMessage(playerid, "GPS", "Waypoint set to Farm ID: %d (marked on radar).", i);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindFlat(playerid, response, listitem, inputtext[]) {
    if (!response)
        return cmd_gps(playerid, "\1");
    
    new i = strval(inputtext);
    SetPlayerWaypoint(playerid, sprintf("%s", FlatData[i][flatName]), FlatData[i][flatPos][0], FlatData[i][flatPos][1], FlatData[i][flatPos][2]);
    SendCustomMessage(playerid, "GPS", "Waypoint set to Flat ID: %d (marked on radar)", i);
    return 1;
}

Dialog:ListWorkshop(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = strval(inputtext);
        SetPlayerWaypoint(playerid, "Go to workshop", WorkshopData[id][wPos][0], WorkshopData[id][wPos][1], WorkshopData[id][wPos][2]);
        SendServerMessage(playerid, "Waypoint set to workshop id \"%d\" (marked on radar).", id);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:ListDealer(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = strval(inputtext);
        
        SetPlayerWaypoint(playerid, "Go to dealership", DealershipData[id][dPos][0], DealershipData[id][dPos][1], DealershipData[id][dPos][2]);
        SendServerMessage(playerid, "Waypoint set to dealership id \"%d\" (marked on radar).", id);
    }
    else {
        if(!Inventory_HasItem(playerid, "GPS System")) cmd_map(playerid, "\1");
        else cmd_gps(playerid, "\1");
    }
    return 1;
}

Dialog:TakeVeh(playerid, response, listitem, inputtext[]) {
    if (response) {
        if (ApartGarage_Nearest(playerid) != -1) {
            TakeVehicleFromGarage(playerid, listitem);
            return 1;
        }

        if (Garage_Nearest(playerid) != -1) {
            TakeVehicleFromGarage(playerid, listitem);
            GarageData[Garage_Nearest(playerid)][garageInside]--;
            Garage_Sync(Garage_Nearest(playerid));
            return 1;
        }

        if (Flat_NearestGarage(playerid) != -1) {
            TakeVehicleFromGarage(playerid, listitem);
            return 1;
        }
    }
    return 1;
}

Dialog:SwitchVeh(playerid, response, listitem, inputtext[]) {
    if (response) {
        if (!IsPlayerInAnyVehicle(playerid))
            return SendErrorMessage(playerid, "You need to be in any vehicle to use this command!");

        new newvehicle = Vehicle_GetID(GetPlayerVehicleID(playerid));

        if (newvehicle != -1) {
            if (ApartGarage_Nearest(playerid) != -1) {
                SwitchVehicleInGarage(playerid, listitem, newvehicle);
                return 1;
            }

            if (Garage_Nearest(playerid) != -1) {
                SwitchVehicleInGarage(playerid, listitem, newvehicle);
                Garage_Sync(Garage_Nearest(playerid));
                return 1;
            }

            if (Flat_NearestGarage(playerid) != -1) {
                SwitchVehicleInGarage(playerid, listitem, newvehicle);
                return 1;
            }
        }
    }
    return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new i = ListedHouse[playerid][listitem];
        SetPlayerWaypoint(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
        SendServerMessage(playerid, "Waypoint set to \"%s\" (marked on radar).", HouseData[i][houseAddress]);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new header[24],
            string[1024],
            count = 0;

        format(header, sizeof(header), "Business type %s", inputtext);

        strcat(string, "#\tBusiness Name\tLocation\n");
        
        if (listitem == 6) {
            foreach (new i : FurnStore) {
                strcat(string, sprintf("%d\t%s "WHITE"(%s"WHITE")\t\%s\n", i, storeData[i][storeName], (storeData[i][storeLocked])?(RED"Closed"):(GREEN"Opened"), GetLocation(storeData[i][storePos][0], storeData[i][storePos][1], storeData[i][storePos][2])));
                count++;
            }
            SetPVarInt(playerid, "findFurnitureStore", 1);
        }

        for(new i = 0; i != MAX_BUSINESSES; i++) if(BusinessData[i][bizExists] && BusinessData[i][bizType] == (listitem+1))
        {
            strcat(string, sprintf("%d\t%s "WHITE"(%s"WHITE")\t%s\n", i, BusinessData[i][bizName], (BusinessData[i][bizLocked])?(RED"Closed"):(GREEN"Opened"), GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2])));
            count++;
        }
        if ( count ) Dialog_Show(playerid, TrackBusiness, DIALOG_STYLE_TABLIST_HEADERS, header, string, "Track", "Back");
        else SendErrorMessage(playerid, "Unable to find business with this type.");
    }
    else {
        if(!Inventory_HasItem(playerid, "GPS System")) cmd_map(playerid, "\1");
        else cmd_gps(playerid, "\1");
    }
    return 1;
}

Dialog:TrackBusiness(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = strval(inputtext);
        if (GetPVarInt(playerid, "findFurnitureStore")) {
            SetPlayerWaypoint(playerid, storeData[bizid][storeName], storeData[bizid][storePos][0], storeData[bizid][storePos][1], storeData[bizid][storePos][2]);
            SendServerMessage(playerid, "Waypoint set to closest %s (marked on radar).", inputtext);
            DeletePVar(playerid, "findFurnitureStore");
            return 1;
        }
        SetPlayerWaypoint(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
        SendServerMessage(playerid, "Waypoint set to closest %s (marked on radar).", inputtext);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        for (new i = 0; i < MAX_ENTRANCES; i ++) if(EntranceData[i][entranceExists]) {
            switch (listitem) {
                case 0: {
                    if (i == 4) {
                        SetPlayerWaypoint(playerid, inputtext, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);
                    }
                }
                case 1: {
                    if (i == 0) {
                        SetPlayerWaypoint(playerid, inputtext, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);
                    }
                }
                case 2: {
                    if (i == 7) {
                        SetPlayerWaypoint(playerid, inputtext, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);
                    }
                }
                case 3: {
                    if (i == 11) {
                        SetPlayerWaypoint(playerid, inputtext, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);
                    }
                }
                case 4: {
                    if (i == 8) {
                        SetPlayerWaypoint(playerid, inputtext, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);
                    }
                }
            }
        }
        SendCustomMessage(playerid, "GPS", "Waypoint set to %s (marked on radar).", inputtext);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = listitem;

        if(id != -1)
        {
            if (JobData[id][jobType] == JOB_ARMS_DEALER || JobData[id][jobType] == JOB_SMUGGLER)
                return SendErrorMessage(playerid, "Unable to locate this job.");

            static
                str[32];

            format(str, 32, "%s Job", Job_GetName(JobData[id][jobType]));

            SetPlayerWaypoint(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
            SendServerMessage(playerid, "Waypoint set to %s (marked on radar).", str);
        }
        else
        {
            SendErrorMessage(playerid, "The GPS was unable to locate any job.");
        }
    }
    else {
        if(!Inventory_HasItem(playerid, "GPS System")) cmd_map(playerid, "\1");
        else cmd_gps(playerid, "\1");
    }
    return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!listitem) {
            Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Please enter the desired name of the location below:", "Submit", "Cancel");
        }
        else
        {
            new id = Location_GetID(playerid, inputtext);

            if(id != -1) {
                PlayerData[playerid][pSelectedSlot] = id;

                Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Set Waypoint\nDelete Location", "Select", "Back");
            }
        }
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Please enter the desired name of the location below:", "Submit", "Cancel");

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Location", "Error: The name can't exceed 32 characters.\n\nPlease enter the desired name of the location below:", "Submit", "Cancel");

        static
            Float:fX,
            Float:fY,
            Float:fZ,
            id = -1;

        if((id = House_Inside(playerid)) != -1) {
            fX = HouseData[id][housePos][0];
            fY = HouseData[id][housePos][1];
            fZ = HouseData[id][housePos][2];
        }
        else if((id = Business_Inside(playerid)) != -1) {
            fX = BusinessData[id][bizPos][0];
            fY = BusinessData[id][bizPos][1];
            fZ = BusinessData[id][bizPos][2];
        }
        else if((id = Entrance_Inside(playerid)) != -1) {
            fX = EntranceData[id][entrancePos][0];
            fY = EntranceData[id][entrancePos][1];
            fZ = EntranceData[id][entrancePos][2];
        }
        else GetPlayerPos(playerid, fX, fY, fZ);

        Location_Add(playerid, inputtext, fX, fY, fZ);
        SendServerMessage(playerid, "You have added \"%s\" to your GPS.", inputtext);
    }
    else cmd_gps(playerid, "\1");
    return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pSelectedSlot];

        switch (listitem)
        {
            case 0:
            {
                SetPlayerWaypoint(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
                SendServerMessage(playerid, "Waypoint set to \"%s\" (marked on radar).", LocationData[playerid][id][locationName]);
            }
            case 1:
            {
                SendServerMessage(playerid, "You have removed \"%s\" from your GPS.", LocationData[playerid][id][locationName]);

                Location_Delete(playerid, LocationData[playerid][id][locationName]);
                dialog_MainGPS(playerid, 1, 4, "\1");
            }
        }
    }
    else dialog_MainGPS(playerid, 1, 4, "\1");
    return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return 0;

    if(response)
    {
        static
            name[64],
            targetid = INVALID_PLAYER_ID;

        strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

        if((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
            return SendErrorMessage(playerid, "The player is no longer connected.");

        if(PlayerData[targetid][pWarrants] < 1)
            return SendErrorMessage(playerid, "The player no longer has any warrants.");

        PlayerData[playerid][pMDCPlayer] = targetid;

        format(name, sizeof(name), "MDC: %s", name);
        Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Track Player\nClear Warrants", "Select", "Back");
    }
    else cmd_mdc(playerid, "\1");
    return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                SendServerMessage(playerid, "The MDC Satellite System is now trying to track %s...", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
                PlayerData[playerid][pTrackTime] = 3;
            }
            case 1:
            {
                PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

                SendServerMessage(playerid, "You have cleared %s's warrants.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
                SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has cleared %s's active warrants.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

                PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
            }
        }
    }
    else
    {
        PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
        dialog_MainMDC(playerid, 1, 0, "\1");
    }
    return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return 0;

    if(response)
    {
        new targetid;

        if(sscanf(inputtext, "u", targetid))
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Please enter a valid user.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if(targetid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        if(PlayerData[targetid][pWarrants] > 14)
            return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: The user already has 15 active warrants.\n\nPlease enter the name or ID of the player:", "Submit", "Back");

        PlayerData[playerid][pMDCPlayer] = targetid;
        Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
    }
    else cmd_mdc(playerid, "\1");
    return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE || IsABike(GetPlayerVehicleID(playerid)) || !IsEngineVehicle(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
        return 0;

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Please enter the description of the crime committed by %s:", "Submit", "Back", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

        PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

        AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s has placed a charge on %s for \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

        cmd_mdc(playerid, "\1");
    }
    else
    {
        PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
        cmd_mdc(playerid, "\1");
    }
    return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                static
                    string[512];

                string[0] = 0;

                foreach (new i : Player) if(PlayerData[i][pWarrants] > 4) {
                    format(string, sizeof(string), "%s%s (%d warrants)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
                }
                if(!strlen(string))
                    return SendErrorMessage(playerid, "There are no active warrants.");

                Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Active Warrants", string, "Select", "Back");
            }
            case 1: Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Please enter the ID of the player:", "Submit", "Back");
            case 2: Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Please enter the ID of the player:", "Submit", "Back");
            case 3: Dialog_Show(playerid, PersonalIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "Please enter the ID of the player:", "Submit", "Back");
            case 4: Dialog_Show(playerid, OfflineIdentification, DIALOG_STYLE_INPUT, "Offline Personal Identification", "Please enter name of the target:", "Submit", "Back");
        }
    }
    return 1;
}

Dialog:OfflineIdentification(playerid, response, listitem, inputtext[])
{
    if(response) 
    {
        mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s'", inputtext), "OfflinePI", "ds", playerid, inputtext);
    }
    return 1;
}

Dialog:PersonalIdentification(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return 0;

    if(response)
    {
        if(isnull(inputtext) || strlen(inputtext) > 24) return Dialog_Show(playerid, PersonalIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "Please enter the ID of the player:", "Submit", "Back");

        new userid;
        if (!sscanf(inputtext, "d", userid)) {
            if(!IsPlayerConnected(userid)) return Dialog_Show(playerid, PersonalIdentification, DIALOG_STYLE_INPUT, "Personal Identification", "Please enter the ID of the player:", "Submit", "Back");

            new str[1500],
                query[128],
                id = userid,
                Cache:charges;

            strcat(str, sprintf("{AAC4E5}I. Personal information\n"WHITE"Personal ID: "YELLOW"SA%09d\n"WHITE"Name: "YELLOW"%s\n", PlayerData[id][pID], ReturnName(id)));
            strcat(str, sprintf(""WHITE"Phone Number: "YELLOW"%d\n"WHITE"Job: "YELLOW"%s\n", PlayerData[id][pPhone], GetPlayerJobName(playerid)));
            if(PlayerData[id][pFaction] != -1) {
                strcat(str, sprintf(""WHITE"Faction/Family: "YELLOW"%s\n"WHITE"Rank: "YELLOW"%s\n", Faction_GetName(id), Faction_GetRank(id)));
            }
            strcat(str, "\n{AAC4E5}II. Licenses"WHITE"\n");
            //---------------------------
            if(PlayerData[id][pDrivingLicense])  {
                if(PlayerData[id][pDrivingLicenseExpired] != 0) strcat(str, sprintf("Driving: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pDrivingLicenseExpired])));
                else strcat(str, "Driving: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Driving: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pFirearmLicense])  {
                if(PlayerData[id][pFirearmLicenseExpired] != 0) strcat(str, sprintf("Firearm: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pFirearmLicenseExpired])));
                else strcat(str, "Firearm: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Firearm: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pBusinessLicense])  {
                if(PlayerData[id][pBusinessLicenseExpired] != 0) strcat(str, sprintf("Business: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pBusinessLicenseExpired])));
                else strcat(str, "Business: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Business: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pWorkshopLicense])  {
                if(PlayerData[id][pWorkshopLicenseExpired] != 0) strcat(str, sprintf("Workshop: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pWorkshopLicenseExpired])));
                else strcat(str, "Workshop: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Workshop: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pFarmLicense])  {
                if(PlayerData[id][pFarmLicenseExpired] != 0) strcat(str, sprintf("Farm: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pFarmLicenseExpired])));
                else strcat(str, "Farm: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Farm: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pBoatLicense])  {
                if(PlayerData[id][pBoatLicenseExpired] != 0) strcat(str, sprintf("Boat: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pBoatLicenseExpired])));
                else strcat(str, "Boat: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Boat: ["RED"Not Passed"WHITE"]\n");
            
            if(PlayerData[id][pFlyingLicense])  {
                if(PlayerData[id][pFlyingLicenseExpired] != 0) strcat(str, sprintf("Flying: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pFlyingLicenseExpired])));
                else strcat(str, "Flying: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Flying: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pLumberLicense])  {
                if(PlayerData[id][pLumberLicenseExpired] != 0) strcat(str, sprintf("Lumber: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pLumberLicenseExpired])));
                else strcat(str, "Lumber: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Lumber: ["RED"Not Passed"WHITE"]\n");

            if(PlayerData[id][pTruckerLicense])  {
                if(PlayerData[id][pTruckerLicenseExpired] != 0) strcat(str, sprintf("Trucker: ["GREEN"Valid until %s"WHITE"]\n", ConvertTimestamp(Time:PlayerData[id][pTruckerLicenseExpired])));
                else strcat(str, "Trucker: ["RED"Expired"WHITE"]\n");
            }
            else strcat(str, "Trucker: ["RED"Not Passed"WHITE"]\n");

            strcat(str, "\n{AAC4E5}III. Active Charges\n"WHITE"");
            mysql_format(g_iHandle, query, sizeof(query), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", ReturnName(id));
            charges = mysql_query(g_iHandle, query);

            if(!cache_num_rows())
                strcat(str, "None\n");

            for(new i=0; i<cache_num_rows(); i++) {
                new reason[128],date[64], suspect[24], username[24];
                cache_get_value(i, "Suspect", suspect);
                cache_get_value(i, "Description", reason);
                cache_get_value(i, "Date", date);
                cache_get_value(i, "Username", username);
                strcat(str, sprintf("%d. {BDF38B}%s\n"WHITE"Issuer: "YELLOW"%s"WHITE" - (%s)\n", i+1, reason, username, date));
            }
            cache_delete(charges);

    //        strcat(str, "\n{AAC4E5}IV. Crime Record\n"WHITE"None\n\n");

            strcat(str, "\n{AAC4E5}V. Registered Vehicle\n");
            if(!Vehicle_GetCount(id))
                strcat(str, "None\n");
            else {
                new vehname[32];

                for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && Vehicle_IsOwner(id, i)) {
                    GetVehicleNameByVehicle(VehicleData[i][cVehicle], vehname);
                    strcat(str, sprintf("%d. "YELLOW"%s "WHITE"( %s )\n", i+1, vehname, VehicleData[i][cPlate]));
                }
            }
            strcat(str, "\n{AAC4E5}VI. Unpaid Ticket"WHITE"\n");

            new count = 0;
            for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if(TicketData[id][i][ticketExists]) {
                count++;
                strcat(str, sprintf("%d. {BDF38B}%s "WHITE"(%s - %s)\n", i+1, TicketData[id][i][ticketReason], FormatNumber(TicketData[id][i][ticketFee]), TicketData[id][i][ticketDate]));
            }
            if(!count)
                strcat(str, "None");
            Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Summary", str, "Close", "");
        }
    }
    return 1;
}

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
    if(GetFactionType(playerid) != FACTION_POLICE)
        return 0;

    if(response)
    {
        if(isnull(inputtext) || strlen(inputtext) > 24)
            return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Please enter the name or ID of the player:", "Submit", "Back");

        if(IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
            ViewCharges(playerid, ReturnName(strval(inputtext)));
        }
        else if(!IsNumeric(inputtext)) {
            ViewCharges(playerid, inputtext);
        }
        else {
            Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");
        }
    }
    else cmd_mdc(playerid, "\1");
    return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || !IsNearFactionLocker(playerid))
        return 0;

    if(response)
    {
        new skins[10], string[256];

        string[0] = 0;

        if(FactionData[factionid][factionType] != FACTION_GANG)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(!PlayerData[playerid][pOnDuty])
                    {
                        if(!PlayerData[playerid][pSkinFaction])
                            return SendErrorMessage(playerid, "Faction skin isn't set. (/flocker > Locker Skins)");

                        if(ReturnWeaponCount(playerid))
                            return SendErrorMessage(playerid, "Kamu masih memegang senjata milikmu (/weapons), letakkan dirumah atau kendaraan.");

                        PlayerData[playerid][pOnDuty] = true;

                        SetFactionColor(playerid);
                        SetPlayerHealth(playerid, PlayerData[playerid][pMaxHealth]);
                        SetPlayerSkinEx(playerid, PlayerData[playerid][pSkinFaction], 1);
                        SendCustomMessage(playerid, "DUTY", "You are now "GREEN"on "WHITE"duty.");
                    }
                    else
                    {
                        if(PlayerData[playerid][pTazer]) {
                            cmd_tazer(playerid, "\1");
                        }

                        ResetFactionWeapon(playerid);
                        RefreshWeapon(playerid);

                        PlayerData[playerid][pOnDuty] = false;
                        SetPlayerColor(playerid, DEFAULT_COLOR);

                        SetPlayerArmour(playerid, 0.0);
                        SetPlayerSkinEx(playerid, PlayerData[playerid][pSkin]);
                        format(PlayerData[playerid][pUnit], 24, "None");
                        SendCustomMessage(playerid, "DUTY", "You are now "RED"off "WHITE"duty.");
                    }
                }
                case 1:
                {
                    if (FactionData[factionid][factionType] == FACTION_POLICE) {
                        if(!PlayerData[playerid][pOnDuty])
                            return SendErrorMessage(playerid, "You can't take Armored Vest if not in duty");
                            
                        SetPlayerArmour(playerid, 100.0);
                        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s reaches into the locker and takes out a vest.", ReturnName(playerid, 0, 1));
                    } else {
                        for (new i = 0; i < sizeof(skins); i ++)
                        skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

                        ShowModelSelectionMenu(playerid, "Choose Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
                    }
                }
                case 2:
                {
                    if (FactionData[factionid][factionType] == FACTION_POLICE) {
                        for (new i = 0; i < sizeof(skins); i ++)
                            skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

                        ShowModelSelectionMenu(playerid, "Choose Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
                    } else {
                        if(!PlayerData[playerid][pOnDuty])
                            return SendErrorMessage(playerid, "You can't use this if you're not duty");

                        if(PlayerData[playerid][pScore] < 2)
                            return SendErrorMessage(playerid, "You're not allowed to accese this locker if you're not level 2.");
                            
                        for (new i = 0; i < 10; i ++)
                        {
                            if(FactionData[factionid][factionWeapons][i]) format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));
                            else format(string, sizeof(string), "%sEmpty Slot\n", string);
                        }
                        Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
                    }
                }
                case 3:
                {
                    if (FactionData[factionid][factionType] == FACTION_POLICE) {
                        if(!PlayerData[playerid][pOnDuty])
                            return SendErrorMessage(playerid, "You can't use this if you're not duty");

                        if(PlayerData[playerid][pScore] < 2)
                            return SendErrorMessage(playerid, "You're not allowed to accese this locker if you're not level 2.");
                            
                        for (new i = 0; i < 10; i ++)
                        {
                            if(FactionData[factionid][factionWeapons][i]) format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));
                            else format(string, sizeof(string), "%sEmpty Slot\n", string);
                        }
                        Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
                    } else {
                        Dialog_Show(playerid, FactionBank, DIALOG_STYLE_LIST, "Faction Bank", "Check balance\nDeposit money (%s)\nWithdraw money (%s)", "Select", "Close", FormatNumber(GetMoney(playerid)), FormatNumber(FactionData[PlayerData[playerid][pFaction]][factionMoney]));
                    }
                }
                case 4: {
                    if (FactionData[factionid][factionType] == FACTION_POLICE) {
                        Dialog_Show(playerid, FactionBank, DIALOG_STYLE_LIST, "Faction Bank", "Check balance\nDeposit money (%s)\nWithdraw money (%s)", "Select", "Close", FormatNumber(GetMoney(playerid)), FormatNumber(FactionData[PlayerData[playerid][pFaction]][factionMoney]));
                    } else {
                        if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2) return SendErrorMessage(playerid, "You can't use this menu.");

                        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cFaction] == FactionData[PlayerData[playerid][pFaction]][factionID] && IsValidVehicle(VehicleData[i][cVehicle]) && GetVehicleDriver(VehicleData[i][cVehicle]) == INVALID_PLAYER_ID) {
                            RespawnVehicle(VehicleData[i][cVehicle]);
                        }
                        SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,0), PlayerData[playerid][pFaction]);
                        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTIONCARS: "YELLOW"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnName(playerid, 0));    
                    }
                }
                case 5: {
                    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2) return SendErrorMessage(playerid, "You can't use this menu.");

                    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cFaction] == FactionData[PlayerData[playerid][pFaction]][factionID] && IsValidVehicle(VehicleData[i][cVehicle]) && GetVehicleDriver(VehicleData[i][cVehicle]) == INVALID_PLAYER_ID) {
                        RespawnVehicle(VehicleData[i][cVehicle]);
                    }
                    SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,0), PlayerData[playerid][pFaction]);
                    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTIONCARS: "YELLOW"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnName(playerid, 0));
                }
            }
        }
        else
        {
            switch (listitem)
            {
                case 0:
                {
                    if(PlayerData[playerid][pScore] < 2) return SendErrorMessage(playerid, "You're not allowed to accese this locker if you're not level 2.");
                    if(PlayerData[playerid][pFactionRank] < 2) return SendErrorMessage(playerid, "Level 1 family can'taccese this weapon locker.");

                    for (new i = 0; i < 10; i ++)
                    {
                        if(FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG)
                            format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

                        else if(FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG)
                            format(string, sizeof(string), "%s#%d: %s ("YELLOW"ammo: %d"WHITE") ("GREEN"durability: %d"WHITE")\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i], FactionData[factionid][factionDurability][i]);

                        else format(string, sizeof(string), "%sEmpty Slot\n", string);
                    }
                    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
                }
                case 1: Dialog_Show(playerid, FactionBank, DIALOG_STYLE_LIST, "Faction Bank", "Check balance\nDeposit money (%s)\nWithdraw money (%s)", "Select", "Close", FormatNumber(GetMoney(playerid)), FormatNumber(FactionData[PlayerData[playerid][pFaction]][factionMoney]));
                case 2: {
                    if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2) return SendErrorMessage(playerid, "You can't use this menu.");
                    
                    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cFaction] == FactionData[PlayerData[playerid][pFaction]][factionID] && IsValidVehicle(VehicleData[i][cVehicle]) && GetVehicleDriver(VehicleData[i][cVehicle]) == INVALID_PLAYER_ID) {
                        RespawnVehicle(VehicleData[i][cVehicle]);
                    }
                    SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s respawned all unused vehicle for faction id %d", ReturnName(playerid,0), PlayerData[playerid][pFaction]);
                    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTIONCARS: "WHITE""RED"%s "WHITE"now is respawned all unused vehicle on this faction.", ReturnName(playerid, 0));
                }
            }
        }
    }
    return 1;
}

Dialog:FactionBank(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pFaction];
        switch(listitem)
        {
            case 0:
            {
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Faction Bank", ""WHITE"Faction bank status\n\nFaction bank of: %s\n"WHITE"Current money on bank faction: "GREEN"%s\n"WHITE"Last deposit: "YELLOW"%s "WHITE"for "GREEN"%s\n"WHITE"Last withdrawn: "YELLOW"%s "WHITE"for "RED"-%s", "Close", "", FactionData[id][factionName], FormatNumber(FactionData[id][factionMoney]), FactionData[id][factionDeposit], FormatNumber(FactionData[id][factionDepositMoney]), FactionData[id][factionWithdraw], FormatNumber(FactionData[id][factionWithdrawMoney]));
            }
            case 1:
            {
                Dialog_Show(playerid, DepositFaction, DIALOG_STYLE_INPUT, "Deposit For Faction Bank", "Bank of faction: %s\nYour money: %s\n\nHow much money you have to added to bank account?.", "Deposit", "Close", FactionData[id][factionName], FormatNumber(GetMoney(playerid)));
            }
            case 2:
            {
                if(PlayerData[playerid][pFactionRank] < FactionData[id][factionRanks] - 1)
                    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[id][factionRanks] - 1);
                
                Dialog_Show(playerid, WithdrawFaction, DIALOG_STYLE_INPUT, "Withdraw Faction Bank", "Bank of faction: %s\nCurrent Balance: %s\n\nHow much money you want to withdraw?.", "Withdraw", "Close", FactionData[id][factionName], FormatNumber(FactionData[id][factionMoney]));
            }
        }
    }
    return 1;
}

Dialog:WithdrawFaction(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pFaction];

        if(strval(inputtext) < 1)
            return SendErrorMessage(playerid, "You can't withdraw money under $0.");

        if(strval(inputtext) > FactionData[id][factionMoney])
            return SendErrorMessage(playerid, "Uang di bank faction tidak mencukupi.");        

        FactionData[id][factionMoney] -= strval(inputtext);
        FactionData[id][factionWithdrawMoney] = strval(inputtext);
        GiveMoney(playerid, strval(inputtext));
        format(FactionData[id][factionWithdraw], MAX_PLAYER_NAME, NormalName(playerid));
        SendCustomMessage(playerid, "BANK FACTION", "Anda telah mengambil "YELLOW"%s "WHITE"dari bank faction. bank faction sekarang tersisa "GREEN"%s", FormatNumber(strval(inputtext)), FormatNumber(FactionData[id][factionMoney]));
        Log_Write("logs/fwithdraw_log.txt", "[%s] %s withdrawn %s for %s.", ReturnDate(), ReturnName2(playerid, 0), FormatNumber(strval(inputtext)), FactionData[id][factionName]);
        Faction_Save(id);
    }
    return 1;
}

Dialog:DepositFaction(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            id = PlayerData[playerid][pFaction]
        ;
        if(strval(inputtext) < 1)
            return SendErrorMessage(playerid, "You can't deposit money under $0.");

        if(GetMoney(playerid) < strval(inputtext))
            return SendErrorMessage(playerid, "You don't have enough money.");        

        FactionData[id][factionMoney] += strval(inputtext);
        FactionData[id][factionDepositMoney] = strval(inputtext);

        GiveMoney(playerid, -strval(inputtext));
        format(FactionData[id][factionDeposit], MAX_PLAYER_NAME, NormalName(playerid));

        SendCustomMessage(playerid, "BANK FACTION", "Anda telah menyimpan "GREEN"%s"WHITE" dalam bank faction "YELLOW"(total: %s).", FormatNumber(strval(inputtext)), FormatNumber(FactionData[id][factionMoney]));
        
        Faction_Save(id);
    }
    return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
    new factionid = PlayerData[playerid][pFaction];

    if(factionid == -1 || !IsNearFactionLocker(playerid))
        return 0;

    if(response)
    {
        new
            weaponid = FactionData[factionid][factionWeapons][listitem],
            ammo = FactionData[factionid][factionAmmo][listitem],
            durability = FactionData[factionid][factionDurability][listitem],
            rank = FactionData[factionid][factionGunRank][listitem];

        if(weaponid)
        {
            if(GetFactionType(playerid) == FACTION_GANG)
            {
                if(PlayerHasWeaponInSlot(playerid, weaponid))
                    return SendErrorMessage(playerid, "Kamu memiliki senjata dislot yang sama, simpan terlebih dahulu.");

                GivePlayerWeaponEx(playerid, weaponid, ammo, durability);

                FactionData[factionid][factionWeapons][listitem] = 0;
                FactionData[factionid][factionAmmo][listitem] = 0;
                FactionData[factionid][factionDurability][listitem] = 0;

                Faction_Save(factionid);
            }
            else 
            {
                if(PlayerData[playerid][pFactionRank] < rank) 
                    return SendErrorMessage(playerid, "Rank belum tercapai untuk menggunakan senjata ini.");

                if(ReturnWeaponCount(playerid))
                    return SendErrorMessage(playerid, "Kamu masih memegang senjata milikmu (/weapons), letakkan dirumah atau kendaraan.");

                GiveFactionWeapon(playerid, weaponid, ammo);
            }
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s reaches inside the locker and equips a %s.", ReturnName(playerid, 0, 1), ReturnWeaponName(weaponid));
        }
        else
        {
            if(GetFactionType(playerid) == FACTION_GANG)
            {
                if((weaponid = GetWeapon(playerid)) == 0)
                    return SendErrorMessage(playerid, "You are not holding any weapon.");

                FactionData[factionid][factionWeapons][listitem]    = weaponid;
                FactionData[factionid][factionAmmo][listitem]       = ReturnWeaponAmmo(playerid, weaponid);
                FactionData[factionid][factionDurability][listitem] = ReturnWeaponDurability(playerid, weaponid);

                Faction_Save(factionid);

                ResetWeaponID(playerid, weaponid);
                SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out a %s and stores it in the locker.", ReturnName(playerid, 0, 1), ReturnWeaponName(weaponid));
            }
            else SendErrorMessage(playerid, "The selected weapon slot is empty.");
        }
    }
    else cmd_flocker(playerid, "\1");
    return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            // case 0:
            // {
            //     static
            //         Float:x,
            //         Float:y,
            //         Float:z;

            //     GetPlayerPos(playerid, x, y, z);

            //     FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
            //     FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
            //     FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

            //     FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
            //     FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

            //     Faction_Refresh(PlayerData[playerid][pFactionEdit]);
            //     Faction_Save(PlayerData[playerid][pFactionEdit]);
            //     SendServerMessage(playerid, "You have adjusted the locker position of faction ID: %d.", PlayerData[playerid][pFactionEdit]);
            // }
            case 0:
            {
                static
                    string[512];

                string[0] = 0;

                for (new i = 0; i < 10; i ++)
                {
                    if(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]) format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));
                    else format(string, sizeof(string), "%sEmpty Slot\n", string);
                }
                Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Select", "Cancel");
            }
        }
    }
    return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        PlayerData[playerid][pSelectedSlot] = listitem;
        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);
    }
    return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        switch (listitem)
        {
            case 0: Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Current Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
            case 1: Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Current Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
            case 2: Dialog_Show(playerid, FactionWeaponRank, DIALOG_STYLE_INPUT, "Set Rank", "Current Rank: %d\n\nPlease enter the new rank for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
            case 3:
            {
                FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
                FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

                Faction_Save(PlayerData[playerid][pFactionEdit]);

                dialog_FactionLocker(playerid, 1, 1, "\1");
                SendServerMessage(playerid, "You have removed the weapon in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
            }
        }
    }
    else {
        dialog_FactionLocker(playerid, 1, 1, "\1");
    }
    return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new weaponid = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Current Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        if(weaponid < 0 || weaponid > 46)
            return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Set Weapon", "Error: The weapon ID can't be below 0 or above 46.\n\nCurrent Weapon: %s (%d)\n\nPlease enter the new weapon ID for slot %d:", "Submit", "Cancel", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);

        if(weaponid) {
            SendServerMessage(playerid, "You have set the weapon in slot %d to %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
        }
        else {
            SendServerMessage(playerid, "You have removed the weapon in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
        }
    }
    return 1;
}

Dialog:FactionWeaponRank(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new rank = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionWeaponRank, DIALOG_STYLE_INPUT, "Set Rank", "Current Rank: %d\n\nPlease enter the new rank for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        if(rank < 1 || rank > FactionData[PlayerData[playerid][pFactionEdit]][factionRanks])
            return Dialog_Show(playerid, FactionWeaponRank, DIALOG_STYLE_INPUT, "Set Rank", "Error: The rank can't be below 1 or above %d.\n\nCurrent Rank: %d\n\nPlease enter the new rank for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionRanks], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]] = rank;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);
        SendServerMessage(playerid, "You have set the rank in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, rank);
    }
    return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new ammo = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Current Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        if(ammo < 1 || ammo > 15000)
            return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Set Ammunition", "Error: The ammo can't be below 1 or above 15,000.\n\nCurrent Ammo: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Edit Weapon", "Set Weapon (%d)\nSet Ammunition (%d)\nSet Rank (%d)\nClear Slot", "Select", "Cancel", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionGunRank][PlayerData[playerid][pSelectedSlot]]);
        SendServerMessage(playerid, "You have set the ammunition in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
    }
    return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        static
            skins[311];

        switch (listitem)
        {
            case 0:
                Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

            case 1:
            {
                for (new i = 0; i < sizeof(skins); i ++)
                    skins[i] = i + 1;

                ShowModelSelectionMenu(playerid, "Add Skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
            }
            case 2:
            {
                FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

                Faction_Save(PlayerData[playerid][pFactionEdit]);
                SendServerMessage(playerid, "You have removed the skin ID in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
            }
        }
    }
    return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
    if(PlayerData[playerid][pFactionEdit] == -1)
        return 0;

    if(response)
    {
        new skin = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Please enter the model ID of the skin below (0-311):", "Add", "Cancel");

        if(skin < 0 || skin > 311)
            return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Add by Model ID", "Error: The skin ID can't be below 0 or above 311.\n\nPlease enter the model ID of the skin below (0-311):", "Add", "Cancel");

        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

        if(skin) {
            SendServerMessage(playerid, "You have set the skin ID in slot %d to %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
        }
        else {
            SendServerMessage(playerid, "You have removed the skin ID in slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
        }
    }
    return 1;
}

// Dialog:Crates(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         if(PlayerData[playerid][pCarryCrate] != -1)
//             return SendErrorMessage(playerid, "You are already carrying a crate.");

//         new id = strfind(inputtext, "#");

//         if(id != -1) {
//             id = strval(inputtext[id + 1]);

//             CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
//             PlayerData[playerid][pCarryCrate] = id;

//             SetPlayerAttachedObject(playerid, JOB_SLOT, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
//             SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

//             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes a crate out of the vehicle.", ReturnName(playerid, 0, 1));
//             SendServerMessage(playerid, "You have taken a %s crate out of the vehicle.", Crate_GetType(CrateData[id][crateType]));
//         }
//     }
//     return 1;
// }

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(isnull(inputtext))
                return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Please enter the name or the ID of the vehicle model:", "Add", "Cancel");

            new model = GetVehicleModelByName(inputtext);

            if(!model)
                return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Error: Invalid model specified.\n\nPlease enter the name or the ID of the vehicle model:", "Add", "Cancel");

            for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
            {
                if(DealershipCars[id][i][vehModel] == model)
                    return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Error: This model is already sold at this dealership.\n\nPlease enter the name or the ID of the vehicle model:", "Add", "Cancel");
            }
            PlayerData[playerid][pDealerCar] = model;
            Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", GetVehicleNameByModel(PlayerData[playerid][pDealerCar]));
        }
    }
    return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(!listitem)
            {
                Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Please enter the name or the ID of the vehicle model:", "Add", "Cancel");
            }
            else
            {
                static
                    cars[212];

                for (new i = 0; i < sizeof(cars); i ++)
                    cars[i] = i + 400;

                ShowModelSelectionMenu(playerid, "Add Vehicle", MODEL_SELECTION_DEALER_ADD, cars, sizeof(cars), -16.0, 0.0, -55.0);
            }
        }
    }
    return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            name[32],
            string[128];

        strunpack(name, PlayerData[playerid][pEditingItem]);

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact Number", "Contact Name: %s\n\nPlease enter the phone number for this contact:", "Submit", "Back", name);

        for (new i = 0; i != MAX_CONTACTS; i ++)
        {
            if(!ContactData[playerid][i][contactExists])
            {
                ContactData[playerid][i][contactExists] = true;
                ContactData[playerid][i][contactNumber] = strval(inputtext);

                format(ContactData[playerid][i][contactName], 32, name);

                format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
                mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

                SendServerMessage(playerid, "You have added \"%s\" to your contacts.", name);
                return cmd_phone(playerid, "");
            }
        }
        SendErrorMessage(playerid, "There is no room left for anymore contacts.");
    }
    else {
        ShowContacts(playerid);
    }
    return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Error: Please enter a contact name.\n\nPlease enter the name of the contact below:", "Submit", "Back");

        if(strlen(inputtext) > 32)
            return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Error: The contact name can't exceed 32 characters.\n\nPlease enter the name of the contact below:", "Submit", "Back");

        strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

        Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact Number", "Contact Name: %s\n\nPlease enter the phone number for this contact:", "Submit", "Back", inputtext);
    }
    else {
        ShowContacts(playerid);
    }
    return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            id = PlayerData[playerid][pContact],
            string[72];

        switch (listitem)
        {
            case 0:
            {
                format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
                cmd_call(playerid, string);
            }
            case 1: {
                static
                    targetid;

                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                if((targetid = GetNumberOwner(ContactData[playerid][id][contactNumber])) != INVALID_PLAYER_ID) {
                    if(PlayerData[targetid][pPhoneOff])
                        return SendErrorMessage(playerid, "The recipient has their cellphone powered off.");

                    SetPVarInt(playerid, "replyTextTo", targetid);
                    Dialog_Show(playerid, ReplyMessage, DIALOG_STYLE_INPUT, "Send Message", "Send message to: "CYAN"%s (%d)", "Send", "Cancel", GetContactNameByNumber(playerid, PlayerData[targetid][pPhone]), PlayerData[targetid][pPhone]);
                } else SendErrorMessage(playerid, "The specified phone number is not in service.");
            }
            case 2:
            {
                format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
                mysql_tquery(g_iHandle, string);

                SendServerMessage(playerid, "You have deleted \"%s\" from your contacts.", ContactData[playerid][id][contactName]);

                ContactData[playerid][id][contactExists] = false;
                ContactData[playerid][id][contactNumber] = 0;
                ContactData[playerid][id][contactID] = 0;

                ShowContacts(playerid);
            }
        }
    }
    else {
        ShowContacts(playerid);
    }
    return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if (listitem != -1) {
            if(!listitem) {
                Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "New Contact", "Please enter the name of the contact below:", "Submit", "Back");
            }
            else {
                PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

                Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Call Contact\nSMS\nDelete Contact", "Select", "Back");
            }
        }
    }
    else {
        cmd_phone(playerid, "\1");
    }
    for (new i = 0; i != MAX_CONTACTS; i ++) {
        ListedContacts[playerid][i] = -1;
    }
    return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            string[16];

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");

        format(string, 16, "%d", strval(inputtext));
        cmd_call(playerid, string);
    }
    else {
        cmd_phone(playerid, "\1");
    }
    return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new number = strval(inputtext);

        if(isnull(inputtext) || !IsNumeric(inputtext))
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");

        if(GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Error: That number is not online right now.\n\nPlease enter the number that you wish to send a text message to:", "Dial", "Back");

        PlayerData[playerid][pContact] = GetNumberOwner(number);
        Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Please enter the message to send to %s:", "Send", "Back", ReturnName(PlayerData[playerid][pContact], 0));
    }
    else {
        cmd_phone(playerid, "\1");
    }
    return 1;
}

Dialog:ShareLoc(playerid, response, listitem, inputtext[]) {
    if (response) {
        if (isnull(inputtext))
            return Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "Input playerid or name to share your location: "GREEN"(input below)\n"RED"ERROR: Please input playerid or name!", "Share", "Back");

        new userid;
        if (sscanf(inputtext, "u", userid))
            return Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "Input playerid or name to share your location: "GREEN"(input below)\n"RED"ERROR: Please input playerid or name!", "Share", "Back");

        if (!IsPlayerConnected(userid))
            return Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "Input playerid or name to share your location: "GREEN"(input below)\n"RED"ERROR: Invalid playerid or name!", "Share", "Back");

        PlayerData[userid][pSharelocOffer] = playerid;
        SendCustomMessage(userid, "SHARELOC", ""YELLOW"%s "WHITE"has shared their location to you, please '/approve shareloc' to accept sharing location.", ReturnName(playerid, 0));
        SendCustomMessage(playerid, "SHARELOC", "You've been shared your location to "YELLOW"%s"WHITE", please wait until approved.", ReturnName(userid, 0));
    } else cmd_phone(playerid, "\1");
    return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Error: Please enter a message to send.\n\nPlease enter the message to send to %s:", "Send", "Back", ReturnName(PlayerData[playerid][pContact], 0));

        new targetid = PlayerData[playerid][pContact];

        if(!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
            return SendErrorMessage(playerid, "The specified phone number went offline.");

        if (Inventory_Count(playerid, "PhoneCredits") < 1)
            return SendErrorMessage(playerid, "You don't have any phone credits");

        Inventory_Remove(playerid, "PhoneCredits", 1);

        SendClientMessageEx(targetid, X11_RED, "Message from: "CYAN"%s (%d)", GetContactNameByNumber(targetid, PlayerData[playerid][pPhone]), PlayerData[playerid][pPhone]);
        SendClientMessageEx(targetid, X11_RED, "Message: "YELLOW"%s", inputtext);

        SendClientMessageEx(playerid, X11_RED, "Message to: "CYAN"%s (%d)", GetContactNameByNumber(playerid, PlayerData[targetid][pPhone]), PlayerData[targetid][pPhone]);
        SendClientMessageEx(playerid, X11_RED, "Message: "YELLOW"%s", inputtext);

        PlayerPlaySoundEx(targetid, 21001);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s takes out their phone and sends a text.", ReturnName(playerid, 0, 1));
    }
    else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Submit", "Back");
    }
    return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0:
            {
                if(!PlayerData[playerid][pPhone])
                    return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Dial Number", "Please enter the number that you wish to dial below:", "Dial", "Back");
            }
            case 1:
            {
                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                ShowContacts(playerid);
            }
            case 2:
            {
                if(!PlayerData[playerid][pPhone])
                    return SendErrorMessage(playerid, "You dont have SIM card on your phone.");

                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");

                Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Please enter the number that you wish to send a text message to:", "Dial", "Back");
            }
            case 3:
            {
                if(!PlayerData[playerid][pPhoneOff])
                {
                    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
                        CancelCall(playerid);
                    }
                    PlayerData[playerid][pPhoneOff] = 1;
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has powered off their cellphone.", ReturnName(playerid, 0, 1));
                }
                else
                {
                    PlayerData[playerid][pPhoneOff] = 0;

                    SendCustomMessage(playerid, "CELLPHONE", "There is total %d miss call on your phone.", GetMissCallCount(playerid));
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has powered on their cellphone.", ReturnName(playerid, 0, 1));
                }
            }
            case 5: ShowMissCallList(playerid);
            case 6: {
                if(PlayerData[playerid][pPhoneOff])
                    return SendErrorMessage(playerid, "Your phone must be powered on.");
                
                if(PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0 || PlayerData[playerid][pMissions] > 0 || GetPVarInt(playerid, "DeliveryWood") > 0)
                    return SendErrorMessage(playerid, "You can't use this command at the moment.");

                Dialog_Show(playerid, ShareLoc, DIALOG_STYLE_INPUT, "Share Location", "Input playerid or name to share your location: "GREEN"(input below)", "Share", "Back");
            }
        }
    }
    return 1;
}

Dialog:ReplyMessage(playerid, response, listitem, inputtext[]) {
    if (response) {
        if (GetPVarInt(playerid, "replyTextTo") != INVALID_PLAYER_ID) {
            new targetid = GetPVarInt(playerid, "replyTextTo"), msg[64];

            if (sscanf(inputtext, "s[64]", msg))
                return Dialog_Show(playerid, ReplyMessage, DIALOG_STYLE_INPUT, "Reply Message", "Replying message to: "CYAN"%s (%d)", "Send", "Cancel", GetContactNameByNumber(playerid, PlayerData[targetid][pPhone]), PlayerData[targetid][pPhone]);

            if (strlen(msg) > 64)
                return Dialog_Show(playerid, ReplyMessage, DIALOG_STYLE_INPUT, "Reply Message", "Replying message to: "CYAN"%s (%d)", "Send", "Cancel", GetContactNameByNumber(playerid, PlayerData[targetid][pPhone]), PlayerData[targetid][pPhone]);

            cmd_text(playerid, sprintf("%d %s", PlayerData[targetid][pPhone], msg));
        }
    } else DeletePVar(playerid, "replyTextTo");
    return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = House_Inside(playerid);

        if(id != -1 && (House_IsOwner(playerid, id) || HouseData[id][houseBuilder] == PlayerData[playerid][pID]))
        {
            PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];
            PlayerData[playerid][pEditFurnHouse] = id;
            Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureName], "Edit Position\nMove to in front me\nDestroy Furniture\nStore Furniture", "Select", "Cancel");
        }
    }
    return 1;
}

Dialog:ListedStructure(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = House_Inside(playerid);

        if (id != -1 && (House_IsOwner(playerid, id) || HouseData[id][houseBuilder] == PlayerData[playerid][pID])) {
            PlayerData[playerid][pEditStructure] = ListedStructure[playerid][listitem];
            PlayerData[playerid][pEditHouseStructure] = id;
            Dialog_Show(playerid, StructureList, DIALOG_STYLE_LIST, "House Structure: Edit", "Move\nRetexture\nCopy\nDestroy", "Select", "Back");
        }
    } else cmd_dyoh(playerid, "\0");
    return 1;
}

Dialog:StructureList(playerid, response, listitem, inputtext[]) {
    if (response) {
        new houseid = House_Inside(playerid), id = PlayerData[playerid][pEditStructure];

        if (houseid != -1) {
            switch (listitem) {
                case 0: {
                    if (HouseStructure[houseid][id][structureType] > 0)
                        return SendErrorMessage(playerid, "Cannot move static house structure.");

                    PlayerData[playerid][pEditingMode] = STRUCTURE;
                    PlayerData[playerid][pEditHouseStructure] = houseid;
                    EditDynamicObject(playerid, HouseStructure[houseid][id][structureObject]);
                    SendCustomMessage(playerid, "HOUSE", "You're now editing %s.", GetStructureNameByModel(HouseStructure[houseid][id][structureModel]));
                }
                case 1: {
                    SetPVarInt(playerid, "structureObj", id);
                    PlayerData[playerid][pEditHouseStructure] = houseid;
                    Dialog_Show(playerid, House_StructureRetexture, DIALOG_STYLE_INPUT, "Retexture House Structure", "Please input the texture name below:\n"YELLOW"[model] [txdname] [texture] [opt: alpha] [opt: red] [opt: green] [opt: blue]", "Retexture", "Cancel");
                }
                case 2: {
                    if (HouseStructure[houseid][id][structureType] > 0)
                        return SendErrorMessage(playerid, "Cannot copy static house structure.");
                    
                    new price;

                    for (new i = 0; i < sizeof(g_aHouseStructure); i ++) if (g_aHouseStructure[i][e_StructureModel] == HouseStructure[houseid][id][structureModel]) {
                        price = g_aHouseStructure[i][e_StructureCost];
                    }

                    if (Inventory_Count(playerid, "Component") < price)
                        return SendErrorMessage(playerid, "You need %d Component(s) to copy this structure.", price);

                    new copyId = HouseStructure_CopyObject(id, houseid);

                    if (copyId == cellmin)
                        return SendErrorMessage(playerid, "Your house has reached maximum of structure");

                    Inventory_Remove(playerid, "Component", price);
                    PlayerData[playerid][pEditStructure] = copyId;
                    PlayerData[playerid][pEditingMode] = STRUCTURE;
                    PlayerData[playerid][pEditHouseStructure] = houseid;
                    EditDynamicObject(playerid, HouseStructure[houseid][copyId][structureObject]);
                    SendCustomMessage(playerid, "BUILDER", "You have copied structure for "GREEN"%d component(s)", price);
                    SendCustomMessage(playerid, "BUILDER", "You're now editing copied object of %s.", GetStructureNameByModel(HouseStructure[houseid][id][structureModel]));
                }
                case 3: {
                    if (HouseStructure[houseid][id][structureType] > 0)
                        return SendErrorMessage(playerid, "Cannot destroy static house structure.");

                    SendCustomMessage(playerid, "HOUSE", "You've been successfully deleted %s", GetStructureNameByModel(HouseStructure[houseid][id][structureModel]));
                    HouseStructure_Delete(id, houseid);
                }
            }
        }
    } else cmd_dyoh(playerid, "\0");
    return 1;
}

Dialog:House_Structure(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = House_Inside(playerid);
        if (id != -1) {
            switch (listitem) {
                case 0: {
                    new str[128];
                    strcat(str, "Type\tCost (components)\n");
                    for (new i = 0; i < sizeof(g_aHouseStructure); i ++) {
                        strcat(str, sprintf("%s\t%d\n", g_aHouseStructure[i][e_StructureName], g_aHouseStructure[i][e_StructureCost]));
                    }
                    Dialog_Show(playerid, House_StructureAdd, DIALOG_STYLE_TABLIST_HEADERS, "House Structure Modification", str, "Select", "Back");
                }
                case 1: {
                    PlayerData[playerid][pEditHouseStructure] = id;
                    SelectStructureType[playerid] = STRUCTURE_SELECT_EDITOR;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Please select the structure, you wish to move.");
                }
                case 2: {
                    PlayerData[playerid][pEditHouseStructure] = id;
                    SelectStructureType[playerid] = STRUCTURE_SELECT_RETEXTURE;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Please select the structure, you wish to retexture.");
                }
                case 3: {
                    PlayerData[playerid][pEditHouseStructure] = id;
                    SelectStructureType[playerid] = STRUCTURE_SELECT_DELETE;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Please select the structure, you wish to destroy.");
                }
                case 4: {
                    PlayerData[playerid][pEditHouseStructure] = id;
                    SelectStructureType[playerid] = STRUCTURE_SELECT_COPY;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Please select the structure, you wish to copy.");
                }
                case 5: {
                    if (!HouseStructure_GetCount(id))
                        return SendErrorMessage(playerid, "There are no structures in this house.");
                    
                    PlayerData[playerid][pEditHouseStructure] = id;
                    Dialog_Show(playerid, House_StructureDestroy, DIALOG_STYLE_MSGBOX, "Destroy All Structures", RED"WARNING:\n"WHITE"Are you sure you want to destroy all structures in this house?", "Yes", "No");
                }
                case 6: {
                    PlayerData[playerid][pEditHouseStructure] = id;
                    Dialog_Show(playerid, House_StructureType, DIALOG_STYLE_LIST, "Structure Type", "Static\nCostum", "Select", "Cancel");
                }
                case 7: {
                    PlayerData[playerid][pEditFurnHouse] = id;
                    SelectFurnitureType[playerid] = FURNITURE_SELECT_MOVE;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Plase select the furniture, you wish to move.");
                }
                case 8: {
                    PlayerData[playerid][pEditFurnHouse] = id;
                    SelectFurnitureType[playerid] = FURNITURE_SELECT_DESTROY;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Plase select the furniture, you wish to destroy.");
                }
                case 9: {
                    PlayerData[playerid][pEditFurnHouse] = id;
                    SelectFurnitureType[playerid] = FURNITURE_SELECT_STORE;
                    SelectObject(playerid);
                    SendCustomMessage(playerid, "BUILDER", "Plase select the furniture, you wish to store.");
                }
                case 10: {
                    new
                        count = 0,
                        string[MAX_FURNITURE * 64];

                    if(!Furniture_GetCount(id))
                        return SendErrorMessage(playerid, "This house doesn't have any furniture spawned.");

                    strcat(string, "Model\tDistance\n");
                    foreach (new i : HouseFurnitures[id])
                    {
                        if(FurnitureData[id][i][furnitureUnused]) 
                            strcat(string, sprintf("%s\t(Not placed)\n", FurnitureData[id][i][furnitureName]));
                        else 
                            strcat(string, sprintf("%s\t%.2f\n", FurnitureData[id][i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[id][i][furniturePos][0], FurnitureData[id][i][furniturePos][1], FurnitureData[id][i][furniturePos][2])));

                        ListedFurniture[playerid][count++] = i;
                    }
                    Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_TABLIST_HEADERS, "House Furniture", string, "Select", "Cancel");
                }
            }
        }
    }
    return 1;
}

Dialog:House_StructureDestroy(playerid, response, listitem, inputtext[]) {
    if (!response)
        return cmd_dyoh(playerid, "\0");
    
    new houseid = PlayerData[playerid][pEditHouseStructure];

    if (houseid != -1 && (House_IsOwner(playerid, houseid) || HouseData[houseid][houseBuilder] == PlayerData[playerid][pID])) {
        HouseStructure_DeleteAll(houseid);
        SendCustomMessage(playerid, "BUILDER", "All structures in this house have been destroyed.");
    }
    return 1;
}

Dialog:House_StructureType(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = House_Inside(playerid);
        if (id != -1) {
            switch (listitem) {
                case 0: {
                    new
                        count = 0,
                        string[90 * 64];

                    strcat(string, "Model\tDistance\n");
                    foreach (new i : HouseStruct[id]) if (HouseStructure[id][i][structureType] > 0) {
                        strcat(string, sprintf(ORANGE"Static\t%.2f\n", GetPlayerDistanceFromPoint(playerid, HouseStructure[id][i][structurePos][0], HouseStructure[id][i][structurePos][1], HouseStructure[id][i][structurePos][2])));
                        ListedStructure[playerid][count++] = i;
                    }
                    Dialog_Show(playerid, ListedStructure, DIALOG_STYLE_TABLIST_HEADERS, "Static House Structure", string, "Select", "Cancel");
                }
                case 1: {
                    new
                        count = 0,
                        string[MAX_HOUSE_STRUCTURES * 64];

                    if(!HouseStructure_GetCount(id))
                        return SendErrorMessage(playerid, "This house doesn't have any structures.");

                    strcat(string, "Model\tDistance\n");
                    foreach (new i : HouseStruct[id]) if (HouseStructure[id][i][structureType] == 0) {
                        strcat(string, sprintf("%s\t%.2f\n", GetStructureNameByModel(HouseStructure[id][i][structureModel]), GetPlayerDistanceFromPoint(playerid, HouseStructure[id][i][structurePos][0], HouseStructure[id][i][structurePos][1], HouseStructure[id][i][structurePos][2])));
                        ListedStructure[playerid][count++] = i;
                    }
                    Dialog_Show(playerid, ListedStructure, DIALOG_STYLE_TABLIST_HEADERS, "Custom House Structure", string, "Select", "Cancel");
                }
            }
        }
    }
    return 1;
}

Dialog:House_StructureAdd(playerid, response, listitem, inputtext[]) {
    new houseid = House_Inside(playerid);
    if (houseid != -1) {
        if (response) {
            static
                Float:x,
                Float:y,
                Float:z,
                Float:angle
            ;

            GetPlayerPos(playerid, z, z, z);
            GetXYInFrontOfPlayer(playerid, x, y, 3.0);
            GetPlayerFacingAngle(playerid, angle);

            if (Inventory_Count(playerid, "Component") < g_aHouseStructure[listitem][e_StructureCost])
                return SendErrorMessage(playerid, "You need %d component to created %s structure", g_aHouseStructure[listitem][e_StructureCost], g_aHouseStructure[listitem][e_StructureName]);

            if(HouseStructure_GetCount(houseid) >= MAX_HOUSE_STRUCTURES)
                return SendErrorMessage(playerid, "You can only have %d structure items in your house.", MAX_HOUSE_STRUCTURES);

            new id = HouseStructure_Add(houseid, g_aHouseStructure[listitem][e_StructureModel], x, y, z, 0.0, 0.0, angle);

            if (id == cellmin)
                return SendErrorMessage(playerid, "Server has been reached maximum of house structure");

            Inventory_Remove(playerid, "Component", g_aHouseStructure[listitem][e_StructureCost]);
            PlayerData[playerid][pEditStructure] = id;
            PlayerData[playerid][pEditHouseStructure] = houseid;
            PlayerData[playerid][pEditingMode] = STRUCTURE;
            EditDynamicObject(playerid, HouseStructure[houseid][id][structureObject]);
            SendCustomMessage(playerid, "HOUSE", "You've been created "YELLOW"%s "WHITE"structure for "GREEN"%d components", g_aHouseStructure[listitem][e_StructureName], g_aHouseStructure[listitem][e_StructureCost]);
        } else cmd_dyoh(playerid, "\0");
    }
    return 1;
}

Dialog:House_StructureRetexture(playerid, response, listitem, inputtext[]) {
    new houseid = House_Inside(playerid);
    if (houseid != -1) {
        new id = GetPVarInt(playerid, "structureObj");
        if (response) {
            new model,color[4];
            new const txdname[32],texture[32];
            if (isnull(inputtext))
                return Dialog_Show(playerid, House_StructureRetexture, DIALOG_STYLE_INPUT, "Retexture House Structure", "Please input the texture name below:\n"YELLOW"[model] [txdname] [texture] [opt: alpha] [opt: red] [opt: green] [opt: blue]", "Retexture", "Cancel"), SendErrorMessage(playerid, "Invalid input!");

            if (sscanf(inputtext, "ds[32]s[32]D(0)D(0)D(0)D(0)",model,txdname,texture,color[0],color[1],color[2],color[3]))
                return Dialog_Show(playerid, House_StructureRetexture, DIALOG_STYLE_INPUT, "Retexture House Structure", "Please input the texture name below:\n"YELLOW"[model] [txdname] [texture] [opt: alpha] [opt: red] [opt: green] [opt: blue]", "Retexture", "Cancel"), SendErrorMessage(playerid, "Invalid input!");

            if (!IsValidTexture(texture))
                return Dialog_Show(playerid, House_StructureRetexture, DIALOG_STYLE_INPUT, "Retexture House Structure", "Please input the texture name below:\n"YELLOW"[model] [txdname] [texture] [opt: alpha] [opt: red] [opt: green] [opt: blue]", "Retexture", "Cancel"), SendErrorMessage(playerid, "Texture model tidak terdaftar dalam database");

            if (Inventory_Count(playerid, "Component") < 10)
                return SendErrorMessage(playerid, "You need 10 components to retexture the house structure");

            HouseStructure[houseid][id][structureMaterial] = GetTextureIndex(texture);
            HouseStructure[houseid][id][structureColor] = RGBAToInt(color[1], color[2], color[3], color[0]);
            HouseStructure_Refresh(id, houseid);
            HouseStructure_Save(id, houseid);

            Inventory_Remove(playerid, "Component", 10);
            SendCustomMessage(playerid, "BUILDER", "You've been retextured the house structure with "YELLOW"10 components");
        } else cmd_dyoh(playerid, "\0");
    }
    return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = House_Inside(playerid),
            Float:x,
            Float:y,
            Float:z,
            Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 1.0 * floatsin(-angle, degrees);
        y += 1.0 * floatcos(-angle, degrees);

        if(id != -1 && (House_IsOwner(playerid, id) || HouseData[id][houseBuilder] == PlayerData[playerid][pID]))
        {
            switch (listitem)
            {
                case 0:
                {
                    new furnitureid = PlayerData[playerid][pEditFurniture];

                    PlayerData[playerid][pEditingMode] = FURNITURE;

                    if(FurnitureData[id][furnitureid][furnitureUnused])
                    {
                        FurnitureData[id][furnitureid][furnitureUnused] = 0;
                        FurnitureData[id][furnitureid][furniturePos][0] = x;
                        FurnitureData[id][furnitureid][furniturePos][1] = y;
                        FurnitureData[id][furnitureid][furniturePos][2] = z;
                        FurnitureData[id][furnitureid][furnitureRot][0] = 0.0;
                        FurnitureData[id][furnitureid][furnitureRot][1] = 0.0;
                        FurnitureData[id][furnitureid][furnitureRot][2] = angle;

                        Furniture_Refresh(furnitureid, id);
                    }
                    EditDynamicObject(playerid, FurnitureData[id][furnitureid][furnitureObject]);
                    SendCustomMessage(playerid, "HOUSE", "You are now editing the position of item \"%s"WHITE"\".", FurnitureData[id][furnitureid][furnitureName]);
                }
                case 1:
                {
                    new furnitureid = PlayerData[playerid][pEditFurniture];

                    if(FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureUnused])
                        return SendErrorMessage(playerid, "Attach this furniture first by select option \"Editing Position\"");

                    FurnitureData[id][furnitureid][furnitureUnused] = 0;
                    FurnitureData[id][furnitureid][furniturePos][0] = x;
                    FurnitureData[id][furnitureid][furniturePos][1] = y;
                    FurnitureData[id][furnitureid][furniturePos][2] = z;
                    FurnitureData[id][furnitureid][furnitureRot][0] = 0.0;
                    FurnitureData[id][furnitureid][furnitureRot][1] = 0.0;
                    FurnitureData[id][furnitureid][furnitureRot][2] = angle;

                    SetDynamicObjectPos(FurnitureData[id][furnitureid][furnitureObject], FurnitureData[id][furnitureid][furniturePos][0], FurnitureData[id][furnitureid][furniturePos][1], FurnitureData[id][furnitureid][furniturePos][2]);
                    SetDynamicObjectRot(FurnitureData[id][furnitureid][furnitureObject], FurnitureData[id][furnitureid][furnitureRot][0], FurnitureData[id][furnitureid][furnitureRot][1], FurnitureData[id][furnitureid][furnitureRot][2]);
                    Furniture_Refresh(furnitureid, id);
                    Furniture_Save(furnitureid, id);
                    SendCustomMessage(playerid, "HOUSE", "Now this furniture is moved to in front you.");
                }
                case 2:
                {
                    SendCustomMessage(playerid, "HOUSE", "You have destroyed furniture \"%s"WHITE"\".", FurnitureData[id][PlayerData[playerid][pEditFurniture]][furnitureName]);
                    Furniture_Delete(PlayerData[playerid][pEditFurniture], id);

                    CancelEdit(playerid);
                    PlayerData[playerid][pEditFurniture] = -1;
                    PlayerData[playerid][pEditFurnHouse] = -1;
                }
                case 3: {
                    new furnitureid = PlayerData[playerid][pEditFurniture];

                    if (FurnitureData[id][furnitureid][furnitureUnused])
                        return SendErrorMessage(playerid, "This furniture is already stored");
                    
                    FurnitureData[id][furnitureid][furnitureUnused] = 1;
                    Furniture_Refresh(furnitureid, id);
                    Furniture_Save(furnitureid, id);
                    SendCustomMessage(playerid, "HOUSE", "You have stored furniture \"%s"WHITE"\" into your house.", FurnitureData[id][furnitureid][furnitureName]);
                }
            }
        }
        else {
            PlayerData[playerid][pEditFurniture] = -1;
            PlayerData[playerid][pEditFurnHouse] = -1;
        }
    }
    else {
        PlayerData[playerid][pEditFurniture] = -1;
        PlayerData[playerid][pEditFurnHouse] = -1;
    }
    return 1;
}

Dialog:Trunk_WeaponStorage(playerid, response, listitem, inputtext[])
{
    new carid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false));

    if(VehicleData[carid][cImpounded] != -1)
        return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

    if(carid != -1)
    {
        if(response)
        {
            if(!VehicleData[carid][cWeapons][listitem])
            {
                new
                    weaponid = 0
                ;

                if(!Vehicle_IsOwner(playerid, carid)) 
                    return SendErrorMessage(playerid, "This is not your vehicle.");
                    
                /*if(IsPlayerDuty(playerid)) 
                    return SendErrorMessage(playerid, "Can't store weapon while faction on duty.");*/

                if((weaponid = GetWeapon(playerid)) == 0) 
                    return SendErrorMessage(playerid, "You aren't holding any weapon.");
               
                if(PlayerHasTazer(playerid)) 
                    return SendErrorMessage(playerid, "You can't store a tazer into your trunk.");
                
                VehicleData[carid][cWeapons][listitem]      = weaponid;
                VehicleData[carid][cAmmo][listitem]         = ReturnWeaponAmmo(playerid, weaponid);
                VehicleData[carid][cDurability][listitem]   = ReturnWeaponDurability(playerid, weaponid);

                ResetWeaponID(playerid, VehicleData[carid][cWeapons][listitem]);
                cmd_ame(playerid, sprintf("stored a %s into the trunk.", ReturnWeaponName(VehicleData[carid][cWeapons][listitem])));

                Vehicle_Save(carid);
                Car_WeaponStorage(playerid, carid);
            }
            else
            {
                if(IsPlayerDuty(playerid)) 
                    return SendErrorMessage(playerid, "Can't access weapon trunk while faction on duty.");

                if (!Vehicle_IsOwner(playerid, carid))
                    return SendErrorMessage(playerid, "You don't have permission to take/store weapon to this vehicle!");

                if(PlayerHasWeaponInSlot(playerid, VehicleData[carid][cWeapons][listitem]))
                    return SendErrorMessage(playerid, "You have weapon on that slot!.");

                GivePlayerWeaponEx(playerid, VehicleData[carid][cWeapons][listitem], VehicleData[carid][cAmmo][listitem], VehicleData[carid][cDurability][listitem]);
                cmd_ame(playerid, sprintf("takes a %s from the trunk.", ReturnWeaponName(VehicleData[carid][cWeapons][listitem])));

                VehicleData[carid][cWeapons][listitem] = VehicleData[carid][cAmmo][listitem] = VehicleData[carid][cDurability][listitem] = 0;
                Vehicle_Save(carid);

                Car_WeaponStorage(playerid, carid);
            }
        }
        else Car_ShowTrunk(playerid);
    }
    return 1;
}

Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            bizid = Business_Inside(playerid),
            carid = PlayerData[playerid][pDealerCar],
            price = DealershipCars[bizid][carid][vehPrice];

        if(bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
        {
            if(GetMoney(playerid) < price)
                return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

            if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 3) {
                if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE+1)
                    return SendErrorMessage(playerid, "You have %d vehicle slot.", MAX_PLAYER_VEHICLE+1);
            } else if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 4) {
                if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE+2)
                    return SendErrorMessage(playerid, "You have %d vehicle slot.", MAX_PLAYER_VEHICLE+2);
            } else {
                if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE)
                    return SendErrorMessage(playerid, "You have %d vehicle slot.", MAX_PLAYER_VEHICLE);
            }

            new id = Vehicle_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], BusinessData[bizid][bizSpawn][0], BusinessData[bizid][bizSpawn][1], BusinessData[bizid][bizSpawn][2], BusinessData[bizid][bizSpawn][3], 1, 1, 0, "NO HAVE");
            if(id != cellmin)
            {
                Tax_AddPercent(price);

                BusinessData[bizid][bizVault] += Tax_Percent(price);
                Business_Save(bizid);

                SendServerMessage(playerid, "You have bought a "CYAN"%s "WHITE"for "GREEN"%s", GetVehicleNameByModel(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
                GiveMoney(playerid, -price);

                ShowPlayerFooter(playerid, "~w~Vehicle ~p~purchased!");
                Log_Write("logs/car_log.txt", "[%s] %s has purchased a %s for %s.", ReturnDate(), ReturnName(playerid, 0), GetVehicleNameByModel(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
            }
        }
    }
    return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(isnull(inputtext) || strval(inputtext) < 1)
                return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Enter Price", "Please enter a price for '%s':", "Submit", "Cancel", GetVehicleNameByModel(PlayerData[playerid][pDealerCar]));

            Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
            Business_EditCars(playerid, id);

            SendServerMessage(playerid, "You have added a '%s' to the dealership.", GetVehicleNameByModel(PlayerData[playerid][pDealerCar]));
            return 1;
        }
    }
    return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(isnull(inputtext) || strval(inputtext) < 1)
                return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Set Price", "The current price for '%s' is %s.\n\nPlease enter the new price for this vehicle model below:", "Submit", "Cancel", GetVehicleNameByModel(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

            new
                string[128];

            DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

            format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
            mysql_tquery(g_iHandle, string);

            SendServerMessage(playerid, "You have set the price of '%s' to %s.", GetVehicleNameByModel(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
            Business_EditCars(playerid, id);
        }
        return 1;
    }
    return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pDealership];

        if(id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
        {
            if(listitem == 0)
            {
                Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Set Price", "The current price for '%s' is %s.\n\nPlease enter the new price for this vehicle model below:", "Submit", "Cancel", GetVehicleNameByModel(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
            }
            else if(listitem == 1)
            {
                new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
                Business_RemoveVehicle(id, model);

                SendServerMessage(playerid, "You have removed the '%s' from the dealership.", GetVehicleNameByModel(model));
                Business_EditCars(playerid, id);
            }
        }
    }
    return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
        return 0;

    if(response)
    {
        static
            rekening;

        //if(PlayerData[playerid][pScore] < 2) return SendErrorMessage(playerid, "You must be level 2.");

        if(sscanf(inputtext, "d", rekening))
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the bank account of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if (strlen(inputtext) != 7 && rekening < 1)
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: The bank account must be exactly 7 digits of number.\n\nYour bank account's balance: %s\n\nPlease enter the bank account of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(GetPlayerByRekening(rekening) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Invalid bank account specified.\n\nYour bank account's balance: %s\n\nPlease enter the bank account of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(GetPlayerByRekening(rekening) == playerid)
            return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Error: You can't transfer funds to yourself.\n\nYour bank account's balance: %s\n\nPlease enter the bank account of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pTransfer] = GetPlayerByRekening(rekening);
        Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s (%d):", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0), rekening);
    }
    return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
        return 0;

    if(response)
    {
        new amount = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s (%d):", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[PlayerData[playerid][pTransfer]][pRekening]);

        if(amount < 1 || amount > PlayerData[playerid][pBankMoney])
            return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Make a transfer", "Error: Insufficient funds!\n\nYour bank account's balance: %s\n\nPlease enter the amount of money to transfer to %s (%d):", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[PlayerData[playerid][pTransfer]][pRekening]);

        if(!strcmp(AccountData[playerid][pIP], AccountData[PlayerData[playerid][pTransfer]][pIP])) {
            SendAdminWarning(X11_TOMATO_1, "AdmWarn: %s (%s) has transferred %s to %s (%s).", ReturnName(playerid, 0), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), AccountData[playerid][pIP]);
        }
        PlayerData[playerid][pBankMoney] -= amount;
        PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

        SendCustomMessage(playerid, "BANK", "You have transferred "GREEN"%s "WHITE"to "YELLOW"%s's "CYAN"(%d) "WHITE"bank account.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[PlayerData[playerid][pTransfer]][pRekening]);
        SendCustomMessage(PlayerData[playerid][pTransfer], "BANK", YELLOW"%s "CYAN"(%d) "WHITE"has transferred "GREEN"%s "WHITE"into your bank account.", ReturnName(playerid, 0), PlayerData[PlayerData[playerid][pTransfer]][pRekening], FormatNumber(amount));
        Log_Write("logs/transfer_log.txt", "[%s] %s (%s) has transferred %s to %s (%s).", ReturnDate(), ReturnName(playerid), AccountData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), AccountData[PlayerData[playerid][pTransfer]][pIP]);
    }
    return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
    if(!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
        return 0;

    if(response)
    {
        new amount = strval(inputtext);

        if(isnull(inputtext))
            return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        if(amount < 1 || amount > GetMoney(playerid))
            return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Error: You don't have that much.\n\nYour bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));

        PlayerData[playerid][pBankMoney] += amount;
        GiveMoney(playerid, -amount);

        SendServerMessage(playerid, "You have deposited %s into your bank account.", FormatNumber(amount));
        Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposit funds", "Your bank account's balance: %s\n\nPlease enter the amount of money you wish to deposit:", "Deposit", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
    }
    return 1;
}

Dialog:FAQ1(playerid, response, listitem, inputtext[])
{
    if(!response)
        cmd_faq(playerid, "\1");

    return 1;
}

Dialog:FAQ(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch (listitem)
        {
            case 0: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda dapat akses "YELLOW"/map"WHITE" untuk mengethaui lokasi yang harus anda kunjungi. Disarankan penuhi kebutuhan handphone, GPS dan SIMCard, lalu ke JOB.", "OK", "Back");
            case 1: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa masuk ke dalam ruangan dengan menekan tombol "YELLOW"'H'"WHITE" di keyboard mu.", "OK", "Back");
            case 2: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Cukup menekan "YELLOW"'Y'"WHITE" di keyboard mu.\nAnda juga bisa menggunakan printah "YELLOW"/inventory"WHITE" untuk melihat inventory.", "OK", "Back");
            case 3: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa mengambil item hanya dengan menekan "YELLOW"'N'"WHITE" di keyboarmu.\nAnda harus jongkok "YELLOW"'C'"WHITE" terlebih dahulu.", "OK", "Back");
            case 4: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Di screen anda terlihat ada gambar skin yang berarti skin yang karakter pakai saat ini\n"YELLOW"HUNGER Bar:"WHITE" Bar ini mempermudah untuk mengatur kesehatan dari karakter itu sendiri,\njika hunger lemah dan berwarna merah, berarti ada efek lain yang akan mempengaruhi.", "OK", "Back");
            case 5: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa mengisi hunger dengan membeli makanan di bisnis "YELLOW"Fast Food"WHITE".\nUntuk memasak, anda cukup "YELLOW"/cook"WHITE" di rumah.\nAnda bisa membeli Froozen Food di bisnis "YELLOW"Gas Station"WHITE".", "OK", "Back");
            case 6: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda bisa mudah mencari lokasi yang tidak anda ketahui sebelumnya hanya dengan membeli "YELLOW"GPS System"WHITE".\nAnda bisa membeli GPS System di bisnis "YELLOW"Electronic Store"WHITE".", "OK", "Back");
            case 7: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Ketik perintah "YELLOW"/disablecp"WHITE" untuk menonaktifkan saat melakukan berbagai pekerjaan, seperti trucker, dll.\nJika anda membawa box, cukup "YELLOW"/cargo putdown"WHITE" untuk menyelesaikan\nJika ingin keluar dari pekerjaan cukup menggunakan perintah "YELLOW"/quitjob.", "OK", "Back");
            case 8: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Anda dapat membuat senjata dengan "YELLOW"'/creategun'"WHITE" di Blackmarket dan Anda harus menjadi seorang Arms Dealer untuk membuat senjata.\n"WHITE"Di saat anda memegang senjata, anda harus memiliki pelurunya yaitu dengan command "YELLOW"'/createammo'"WHITE" untuk membuat peluru.", "OK", "Back");
            case 9: Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, ""WHITE"Berbagai furniture saat di beli akan di letakkan ke dalam inventory.\nTekan "YELLOW"'Y'"WHITE", pilih item furniture dan pilih "YELLOW"Use Item"WHITE" untuk meletakkan item.\n\nJika ingin melihat item furniture yang ada di rumah cukup menggunakan printah "YELLOW"/hm > furniture"WHITE" di dalam rumah.\nPilih item yang tersedia, nantinya anda akan di perintahkan untuk mengedit posisi atau menghilangkan item furniture.", "OK", "Back");
        }
    }
    return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
        SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
    }
    return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        CancelDrivingTest(playerid);
        SendErrorMessage(playerid, "Anda gagal dalam test ini, coba lagi di lain waktu.");
    }
    else
    {
        PutPlayerInVehicleEx(playerid, PlayerData[playerid][pTestCar], 0);
    }
    return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new
            itemid = PlayerData[playerid][pInventoryItem],
            string[64];

        strunpack(string, InventoryData[playerid][itemid][invItem]);

        switch (listitem)
        {
            case 0:
            {
                CallLocalFunction("OnPlayerUseInvItem", "dds", playerid, itemid, string);
            }
            case 1:
            {
                if(!strcmp(string, "Kunci Gubuk"))
                    return 0;

                if(!strcmp(string, "Mask") && PlayerData[playerid][pMaskOn])
                    return SendErrorMessage(playerid, "Lepas terlebih dahulu masker yang anda gunakan.");

                PlayerData[playerid][pInventoryItem] = itemid;
                Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Give Item", "Please enter the name or the ID of the player:", "Submit", "Cancel");
            }
            case 2:
            {
                new id = -1;

                for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                    if(g_aInventoryItems[i][e_InventoryDrop] == false) return SendErrorMessage(playerid, "You can't drop this item (%s).", string);
                }

                if(!strcmp(string, "Mask") && PlayerData[playerid][pMaskOn])
                    return SendErrorMessage(playerid, "Lepas terlebih dahulu masker yang anda gunakan.");

                if(IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
                    return SendErrorMessage(playerid, "You can't drop items right now.");

                /*else if(!strcmp(string, "Backpack"))
                    return cmd_dropbackpack(playerid, "\1");*/

                else if((id = Garbage_Nearest(playerid)) != -1)
                {
                    if(GarbageData[id][garbageCapacity] >= 10)
                        return SendErrorMessage(playerid, "This garbage bin is full of trash.");

                    GarbageData[id][garbageCapacity]++;
                    Garbage_Save(id);

                    Inventory_Remove(playerid, string);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s throws a \"%s\" into the garbage bin.", ReturnName(playerid, 0, 1), string);
                }
                else if(InventoryData[playerid][itemid][invQuantity] == 1) DropPlayerItem(playerid, itemid);
                else Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);
            }
        }
    }
    return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
    new
        itemid = PlayerData[playerid][pInventoryItem],
        string[32];

    strunpack(string, InventoryData[playerid][itemid][invItem]);

    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);

        if(strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
            return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Error: Insufficient amount specified.\n\nItem: %s - Quantity: %d\n\nPlease specify how much of this item you wish to drop:", "Drop", "Cancel", string, InventoryData[playerid][itemid][invQuantity]);

        DropPlayerItem(playerid, itemid, strval(inputtext));
    }
    return 1;
}

Dialog:RandNumber(playerid, response, listitem, inputtext[])
{
    new string[128], number[150];

    if(response)
    {
        PlayerData[playerid][pPhone] = strval(inputtext);

        format(string, sizeof(string), "Your new number is ~p~%d.", PlayerData[playerid][pPhone]);
        ShowPlayerFooter(playerid, string);

        SendServerMessage(playerid, "Your new number is %d.", PlayerData[playerid][pPhone]);
    }
    else
    {
        for(new i; i != 10; i++)
        {
            format(number, sizeof(number), "%s{%s}%d\n", number, ((i+1) % 2 == 0) ? ("C0C0C0") : ("FFFFFF") , (random(90000)+10000));
        }
        Dialog_Show(playerid, RandNumber, DIALOG_STYLE_LIST, "Phone Number", number, "Select", "Refresh");
    }
    return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
    static
        bizid = -1,
        price;

    if((((bizid = Business_Inside(playerid)) != -1) || ((bizid = Business_NearestDeliver(playerid)) != -1) || ((bizid = PlayerData[playerid][pOfferMenu]) != -1)) && response)
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if(GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

        if(BusinessData[bizid][bizProducts] < 1)
            return SendErrorMessage(playerid, "This business is out of stock.");

        if(BusinessData[bizid][bizType] == 1)
        {
            switch (listitem)
            {
                case 0:
                {
                    new id = Inventory_Add(playerid, "Spray Can", 365);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a can of spray paint.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 1:
                {
                    if(PlayerData[playerid][pLottery])
                        return SendErrorMessage(playerid, "You have a lottery ticket already.");

                    Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
                }
                case 2:
                {
                    new id = Inventory_Add(playerid, "Bandage", 1580);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a Bandage.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 3:
                {
                    if(Inventory_HasItem(playerid, "Mask"))
                        return SendErrorMessage(playerid, "You have a mask already.");

                    new id = Inventory_Add(playerid, "Mask", 19036);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a mask.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 4:
                {
                    new id = Inventory_Add(playerid, "Farm Hoe", 337, 50);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a farm hoe.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                // case 5:
                // {
                //     new id = Inventory_Add(playerid, "Repair Kit", 19921, 1);

                //     if(id == -1)
                //         return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                //     GiveMoney(playerid, -price);
                //     SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a repair kit.", ReturnName(playerid, 0, 1), FormatNumber(price));

                //     BusinessData[bizid][bizProducts]--;
                //     BusinessData[bizid][bizVault] += Tax_Percent(price);

                //     Business_Save(bizid);
                //     Tax_AddPercent(price);
                // }
            }
        }
        else if(BusinessData[bizid][bizType] == 6)
        {
            switch(listitem)
            {
                case 0:
                {
                    new id = Inventory_Add(playerid, "Fuel Can", 1650);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a can of fuel.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 1:
                {
                    new id = Inventory_Add(playerid, "Snack", 2768);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a snack.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 2:
                {
                    new id = Inventory_Add(playerid, "Frozen Burger", 2768);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a frozen burger.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 3: {
                    new id = Inventory_Add(playerid, "Toll Card", 1581, 50);

                    if (id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a Toll Card.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 4:
                {
                    new id = Inventory_Add(playerid, "Frozen Pizza", 2814);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a box of frozen pizza.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 5:
                {
                    new id = Inventory_Add(playerid, "Bottle of Water", 1484, 2);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received two bottle of water.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 8)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(Inventory_HasItem(playerid, "Cellphone"))
                        return SendErrorMessage(playerid, "You have a cellphone already.");

                    new id = Inventory_Add(playerid, "Cellphone", 330);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    PlayerData[playerid][pPhone] = 0;

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a cellphone.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 1:
                {
                    if(Inventory_HasItem(playerid, "GPS System"))
                        return SendErrorMessage(playerid, "You have a GPS system already.");

                    new id = Inventory_Add(playerid, "GPS System", 18875);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a GPS System.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 2:
                {
                    if(Inventory_HasItem(playerid, "Portable Radio"))
                        return SendErrorMessage(playerid, "You have this item already.");

                    new id = Inventory_Add(playerid, "Portable Radio", 18868);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a portable radio.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 3:
                {
                    if(Inventory_HasItem(playerid, "Boombox"))
                        return SendErrorMessage(playerid, "You have a boombox already.");

                    new id = Inventory_Add(playerid, "Boombox", 2226);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a boombox.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 4:
                {
                    if(PlayerHasWeapon(playerid, 5))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(PlayerHasWeaponInSlot(playerid, 5))
                        return SendErrorMessage(playerid, "You already have the weapon in the same slot.");

                    GivePlayerWeaponEx(playerid, 5, 1);

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a baseball bat.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 5:
                {
                    if(PlayerHasWeapon(playerid, 43))
                        return SendErrorMessage(playerid, "You have this item already.");

                    if(PlayerHasWeaponInSlot(playerid, 5))
                        return SendErrorMessage(playerid, "You already have the weapon in the same slot.");

                    GivePlayerWeaponEx(playerid, 43, 100);

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a Camera.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 6:
                {
                    if(!Inventory_HasItem(playerid, "Cellphone"))
                        return SendErrorMessage(playerid, "You don't have a cellphone.");

                    new number[150];

                    for(new i; i != 10; i++)
                    {
                        format(number, sizeof(number), "%s{%s}%d\n", number, ((i+1) % 2 == 0) ? ("C0C0C0") : ("FFFFFF"), (random(90000)+10000));
                    }
                    Dialog_Show(playerid, RandNumber, DIALOG_STYLE_LIST, "Phone Number", number, "Select", "Refresh");

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    GiveMoney(playerid, -price);
                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);

                    SendServerMessage(playerid, "Select the number on dialog list, you can refresh newest number with click 'Refresh' or Press 'ESC' on keyboard.");
                }
                case 7: {
                    if(!Inventory_HasItem(playerid, "Cellphone"))
                        return SendErrorMessage(playerid, "You don't have a cellphone.");

                    new id = Inventory_Add(playerid, "PhoneCredits", 330, 1000);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received 1000 points of Phone Credits.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
            }
        }
        else if (BusinessData[bizid][bizType] == 9) {
	        switch (listitem) {
                 case 0: {
                    if (PlayerData[playerid][pGYMMember])
                        return SendErrorMessage(playerid, "You're already have GYM Membership.");
                
                    PlayerData[playerid][pGYMMember] = BusinessData[bizid][bizID];
                    PlayerData[playerid][pGYMMemberTime] = (gettime()+3600);

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a GYM Membership.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 1: {
                    if(PlayerData[playerid][pEnergy] > 90)
                        return SendErrorMessage(playerid, "You are not thirsty right now.");

                    SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+35);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a sprunk.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "VENDING", "VEND_Drink2_P", 4.1, 0, 0, 0, 0, 0, 1);
                    GiveMoney(playerid, -price);

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 2: {
                    new id = Inventory_Add(playerid, "Snack", 2768);

                    if(id == -1)
                        return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                    GiveMoney(playerid, -price);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a snack.", ReturnName(playerid, 0, 1), FormatNumber(price));

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 3: {
                    if(PlayerData[playerid][pFightStyle][0])
                        return SendErrorMessage(playerid, "You has already learning this fighting style.");

                    PlayerData[playerid][pFightStyle][0] = 1;
                    PlayerData[playerid][pUsedFightStyle] = 0;
                    switch (PlayerData[playerid][pUsedFightStyle]) {
                        case 0: SetPlayerFightingStyle(playerid, 5);
                        case 1: SetPlayerFightingStyle(playerid, 6);
                        case 2: SetPlayerFightingStyle(playerid, 7);
                        default: SetPlayerFightingStyle(playerid, 15);
                    }
                    SendCustomMessage(playerid, "FIGHTSTYLE", "You've been learned Boxing Fighting Style, you can change anytime by using '/changefightstyle'");

                    GiveMoney(playerid, -price);

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 4: {
                    if(PlayerData[playerid][pFightStyle][1])
                        return SendErrorMessage(playerid, "You has already learning this fighting style.");

                    PlayerData[playerid][pFightStyle][1] = 1;
                    PlayerData[playerid][pUsedFightStyle] = 2;
                    switch (PlayerData[playerid][pUsedFightStyle]) {
                        case 0: SetPlayerFightingStyle(playerid, 5);
                        case 1: SetPlayerFightingStyle(playerid, 6);
                        case 2: SetPlayerFightingStyle(playerid, 7);
                        default: SetPlayerFightingStyle(playerid, 15);
                    }
                    SendCustomMessage(playerid, "FIGHTSTYLE", "You've been learned Kneehead Fighting Style, you can change anytime by using '/changefightstyle'");

                    GiveMoney(playerid, -price);

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
                case 5: {
                    if(PlayerData[playerid][pFightStyle][2])
                        return SendErrorMessage(playerid, "You has already learning this fighting style.");

                    PlayerData[playerid][pFightStyle][2] = 1;
                    PlayerData[playerid][pUsedFightStyle] = 1;
                    switch (PlayerData[playerid][pUsedFightStyle]) {
                        case 0: SetPlayerFightingStyle(playerid, 5);
                        case 1: SetPlayerFightingStyle(playerid, 6);
                        case 2: SetPlayerFightingStyle(playerid, 7);
                        default: SetPlayerFightingStyle(playerid, 15);
                    }
                    SendCustomMessage(playerid, "FIGHTSTYLE", "You've been learned Kungfu Fighting Style, you can change anytime by using '/changefightstyle'");

                    GiveMoney(playerid, -price);

                    BusinessData[bizid][bizProducts]--;
                    BusinessData[bizid][bizVault] += Tax_Percent(price);

                    Business_Save(bizid);
                    Business_Refresh(bizid);
                    Tax_AddPercent(price);
                }
	        }
        }
        // else if(BusinessData[bizid][bizType] == 2)
        // {
        //     new id 
        //         = -1;

        //     if(PlayerData[playerid][pFirearmLicenseExpired] < 1)
        //         return SendErrorMessage(playerid, "This store only sells to people with a firearm license.");

        //     switch (listitem)
        //     {
        //         case 0:
        //         {
        //             if(Inventory_Count(playerid, "Magazine") >= 10)
        //                 return SendErrorMessage(playerid, "You have 10 magazines, you can't buy anymore.");

        //             id = Inventory_Add(playerid, "Magazine", 2039);
        //             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a weapon magazine.", ReturnName(playerid, 0, 1), FormatNumber(price));
        //         }
        //         case 1:
        //         {
        //             if(Inventory_Count(playerid, "Ammo Cartridge") >= 2)
        //                 return SendErrorMessage(playerid, "You have 2 ammo cartridges, you can't buy anymore.");

        //             id = Inventory_Add(playerid, "Ammo Cartridge", 2358);
        //             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received an ammo cartridge.", ReturnName(playerid, 0, 1), FormatNumber(price));
        //         }
        //         case 2:
        //         {
        //             if(Inventory_Count(playerid, "Armored Vest") >= 2)
        //                 return SendErrorMessage(playerid, "You have 2 armored vests, you can't buy anymore.");

        //             id = Inventory_Add(playerid, "Armored Vest", 19142);
        //             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received an armored vest.", ReturnName(playerid, 0, 1), FormatNumber(price));
        //         }
        //         case 3:
        //         {
        //             if(PlayerData[playerid][pScore] < 2)
        //                 return SendErrorMessage(playerid, "You must level 2 to use this.");

        //             if(Inventory_Count(playerid, "Desert Eagle") > 5)
        //                 return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

        //             id = Inventory_Add(playerid, "Desert Eagle", 348);
        //             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a Desert Eagle.", ReturnName(playerid, 0, 1), FormatNumber(price));
        //         }
        //         case 4:
        //         {
        //             if(PlayerData[playerid][pScore] < 2)
        //                 return SendErrorMessage(playerid, "You must level 2 to use this.");

        //             if(Inventory_Count(playerid, "Shotgun") > 5)
        //                 return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

        //             id = Inventory_Add(playerid, "Shotgun", 349);
        //             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a Remington 870.", ReturnName(playerid, 0, 1), FormatNumber(price));
        //         }
        //         case 5:
        //         {
        //             if(PlayerData[playerid][pScore] < 2)
        //                 return SendErrorMessage(playerid, "You must level 2 to use this.");

        //             if(Inventory_Count(playerid, "Rifle") > 5)
        //                 return SendErrorMessage(playerid, "You can't carry anymore of this weapon.");

        //             id = Inventory_Add(playerid, "Rifle", 357);
        //             SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a M14 Rifle.", ReturnName(playerid, 0, 1), FormatNumber(price));
        //         }
        //     }
        //     if(id == -1)
        //         return SendErrorMessage(playerid, "You don't have any inventory slots left.");

        //     GiveMoney(playerid, -price);

        //     BusinessData[bizid][bizProducts]--;
        //     BusinessData[bizid][bizVault] += Tax_Percent(price);

        //     Business_Save(bizid);
        //     Tax_AddPercent(price);

        // }
        else if(BusinessData[bizid][bizType] == 3)
        {
            new models[50] = {-1, ... },
                count;

            switch (listitem)
            {
                case 0:
                {
                    PlayerData[playerid][pClothesType] = 1;
                    PlayerTemp[playerid][temp_realskin] = PlayerData[playerid][pSkin];
                    PlayerTemp[playerid][temp_selectskin] = 0;

                    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
                    SetPlayerVirtualWorld(playerid, playerid+MAX_PLAYERS);
                    TogglePlayerControllable(playerid, false);

                    ShowClothesTextdraw(playerid);

                    SetPlayerSkinEx(playerid, (PlayerData[playerid][pGender] == 1) ? g_aMaleSkins[PlayerTemp[playerid][temp_selectskin]] : g_aFemaleSkins[PlayerTemp[playerid][temp_selectskin]]);
                    PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_clothes][5], sprintf("Skin:_%d/%d", PlayerTemp[playerid][temp_selectskin] + 1, ((PlayerData[playerid][pGender] == 1) ? sizeof(g_aMaleSkins) : sizeof(g_aFemaleSkins))));

                    SelectTextDrawEx(playerid, -1);

                    SendServerMessage(playerid, "Tekan "YELLOW"'ESCAPE' "WHITE"di keyboard untuk keluar dari menu ini.");
                }
                case 1:
                {

                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 2;
                        
                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 1) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Cap List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 2:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 3;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 2) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Bandana List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 3:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                        return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 4;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 3) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Mask List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 4:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 5;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 4) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Helmet List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 5:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 6;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 5) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Watch List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 6:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 7;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 6) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Glasses List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 7:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 8;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 7) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Hair List", MODEL_SELECTION_AKSESORIS, models, count);
                }
                case 8:
                {
                    if (PlayerData[playerid][pVip] > 0 && PlayerData[playerid][pVipTime] > 0) {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    } else {
                        if(Aksesoris_GetCount(playerid) >= MAX_ACC-2)
                            return SendErrorMessage(playerid, "Slot untuk aksesoris sudah penuh.");
                    }

                    PlayerData[playerid][pClothesType] = 9;

                    for (new id; id < sizeof(accList); id++) if(accList[id][accListType] == 8) {
                        models[count++] = accList[id][accListModel];
                    }
                    ShowCustomSelection(playerid, "Misc List", MODEL_SELECTION_AKSESORIS, models, count);
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 4)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(PlayerData[playerid][pHunger] > 90)
                        return SendErrorMessage(playerid, "You are not hungry right now.");

                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+12);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received some french fries.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                }
                case 1:
                {
                    if(PlayerData[playerid][pHunger] > 90)
                        return SendErrorMessage(playerid, "You are not hungry right now.");

                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+20);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a cheeseburger.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                }
                case 2:
                {
                    if(PlayerData[playerid][pHunger] > 90)
                        return SendErrorMessage(playerid, "You are not hungry right now.");

                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+26);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a chicken burger.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                }
                case 3:
                {
                    if(PlayerData[playerid][pHunger] > 90)
                        return SendErrorMessage(playerid, "You are not hungry right now.");

                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+30);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received some chicken nuggets.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                }
                case 4:
                {
                    if(PlayerData[playerid][pHunger] > 90)
                        return SendErrorMessage(playerid, "You are not hungry right now.");

                    SetPlayerHunger(playerid, PlayerData[playerid][pHunger]+35);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a salad.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
                }
                case 5:
                {
                    if(PlayerData[playerid][pEnergy] > 90)
                        return SendErrorMessage(playerid, "You are not thirsty right now.");

                    SetPlayerEnergy(playerid, PlayerData[playerid][pEnergy]+35);
                    SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a sprunk.", ReturnName(playerid, 0, 1), FormatNumber(price));
                    ApplyAnimation(playerid, "VENDING", "VEND_Drink2_P", 4.1, 0, 0, 0, 0, 0, 1);
                }
            }
            GiveMoney(playerid, -price);
            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += Tax_Percent(price);

            Business_Save(bizid);
            Business_Refresh(bizid);
            Tax_AddPercent(price);

            new id = -1;
            for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && IsValidVehicle(VehicleData[i][cVehicle])) {
                if ((id = GetBusinessByID(VehicleData[i][cBiz])) != -1 && id == PlayerData[playerid][pOfferMenu]) {
                    if (VehicleData[i][cBiz] == BusinessData[id][bizID] && IsPlayerNearPlayer(playerid, PlayerData[playerid][pMenuSeller], 5.0)) {
                        VehicleData[i][cFood]--;
                        Storage_GUI(PlayerData[playerid][pMenuSeller], true, "Food Storage", sprintf("%d stock", VehicleData[i][cFood]));
                        PlayerData[playerid][pMenuSeller] = INVALID_PLAYER_ID;
                        PlayerData[playerid][pOfferMenu] = -1;
                        Vehicle_Save(i);
                    } else return SendErrorMessage(playerid, "You need to be near to player which giving menu to you.");
                }
            }
        }
        else if(BusinessData[bizid][bizType] == 7)
        {
            new
                items[100] = {-1, ...},
                count;

            for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if(g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
                items[count++] = g_aFurnitureData[i][e_FurnitureModel];
            }
            PlayerData[playerid][pFurnitureType] = listitem;

            if(listitem == 3) {
                ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count, -12.0, 0.0, 0.0);
            }
            else {
                ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count);
            }
        }
    }
    return 1;
}

Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new bizid = Business_Inside(playerid);

        if(bizid != -1)
        {
            if(isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
                return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Please enter your desired lottery number below (from 1-60):", "Submit", "Cancel");
            }
            PlayerData[playerid][pLottery] = strval(inputtext);
            PlayerData[playerid][pLotteryB] = 1;

            GiveMoney(playerid, -BusinessData[bizid][bizPrices][6]);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has paid %s and received a lottery ticket.", ReturnName(playerid, 0, 1), FormatNumber(BusinessData[bizid][bizPrices][6]));

            BusinessData[bizid][bizProducts]--;
            BusinessData[bizid][bizVault] += Tax_Percent(BusinessData[bizid][bizPrices][6]);

            Business_Save(bizid);
            Business_Refresh(bizid);
            Tax_AddPercent(BusinessData[bizid][bizPrices][6]);
        }
    }
    return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
    static
        bizid = -1;

    if((bizid = Business_Inside(playerid)) != -1 && (Business_IsOwner(playerid, bizid) || Business_IsEmployee(playerid, bizid)))
    {
        if(response)
        {
            static
                item[24];

            strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
            strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
            Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\":", "Modify", "Back", item);
        }
        else
            return cmd_bm(playerid, "\0");
    }
    return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
        bizid = -1,
        item[32];

    if((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
    {
        if(response)
        {
            strunpack(item, PlayerData[playerid][pEditingItem]);

            if(isnull(inputtext))
                return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\":", "Modify", "Back", item);

            if(strval(inputtext) < 1 || strval(inputtext) > 2000)
                return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\" ($1 to $2,000):", "Modify", "Back", item);

            if(BusinessData[bizid][bizType] == 6 && PlayerData[playerid][pProductModify] == 3 && strval(inputtext) > 5)
                return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Set Price", "Please enter the new product price for \"%s\" ($1 to $5):", "Modify", "Back", item);

            BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
            Business_Save(bizid);

            SendServerMessage(playerid, "You have adjusted the price of \"%s\" to: %s!", item, FormatNumber(strval(inputtext)));
            Business_ProductMenu(playerid, bizid);
        }
        else
        {
            Business_ProductMenu(playerid, bizid);
        }
    }
    return 1;
}

Dialog:ShowBusiness_Employee(playerid, response, listitem, inputtext[]) {
    static
        bizid = -1;

    if((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
    {
		if (response) {
			switch(listitem)
			{
				case 0: {
					Dialog_Show(playerid, Business_AddEmployee, DIALOG_STYLE_INPUT, "Add Employe", "Masukkan nama ataupun id player untuk kamu masukkan sebagai -\npekerja di bisnis ini.", "Add", "Close");
				}
				case 1: {
					Business_ShowEmployee(playerid, bizid, 1);
				}
				case 2: {
					BusinessEmployee_RemoveAll(bizid);
					SendCustomMessage(playerid, "BUSINESS", "You've remove all employe on this business.");
				}
				case 3: Business_ShowEmployee(playerid, bizid, 0);
			}
		} else cmd_bm(playerid, "\1");
	}
    return 1;
}

Dialog:Business_AddEmployee(playerid, response, listitem, inputtext[]) {
    if(response)
	{
		new id,
			bizid = GetPVarInt(playerid,"BM");

		if (BusinessEmployee_GetCount(bizid) >= 3) return SendErrorMessage(playerid, "This business is limited 3 employee.");
		if (sscanf(inputtext, "u", id)) return Dialog_Show(playerid, Business_AddEmployee, DIALOG_STYLE_INPUT, "Add Employe", "Masukkan nama ataupun id player untuk kamu masukkan sebagai -\npekerja di bisnis ini.", "Add", "Close");
		if (!IsPlayerConnected(id)) return Dialog_Show(playerid, Business_AddEmployee, DIALOG_STYLE_INPUT, "Add Employe", "Player yang kamu masukkan tidak terkoneksi dalam game\nMasukkan nama ataupun id player untuk kamu masukkan sebagai -\npekerja di bisnis ini.", "Add", "Close");
        if (id == playerid) return Dialog_Show(playerid, Business_AddEmployee, DIALOG_STYLE_INPUT, "Add Employe", "Tidak dapat memasukkan karakter kamu sendiri\nMasukkan nama ataupun id player untuk kamu masukkan sebagai -\npekerja di bisnis ini.", "Add", "Close");
		if (Business_IsEmployee(id, bizid)) return Dialog_Show(playerid, Business_AddEmployee, DIALOG_STYLE_INPUT, "Add Employe", "Player tersebut sudah masuk dalam list employee\nMasukkan nama ataupun id player untuk kamu masukkan sebagai -\npekerja di bisnis ini.", "Add", "Close");

		BusinessEmployee_Add(id, bizid);
		SendCustomMessage(playerid, "BUSINESS", "Kamu memasukkan "YELLOW"%s "WHITE"ke dalam list pekerja bisnismu.", NormalName(id));
		SendCustomMessage(id, "BUSINESS", YELLOW"%s "WHITE"mempekerjakan kamu di bisnis miliknya (Bisnis: %s).", NormalName(playerid), BusinessData[bizid][bizName]);
	}
    return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
    static
        carid = -1,
        string[32],
        itemid = -1;

    if((carid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
    {
        strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);
        itemid = PlayerData[playerid][pStorageItem];

        if(response)
        {
            new amount = strval(inputtext);

            if(amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
                return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Car Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
            
            if (Iter_Contains(CarsStorage[carid], itemid)) Car_StoreItem(itemid, carid, amount);
            else Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);

            Inventory_Remove(playerid, string, amount);

            cmd_ame(playerid, sprintf("stored a \"%s\" into the trunk.", string));
            Car_ShowTrunk(playerid);
        }
        else Car_ShowTrunk(playerid);
    }
    return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
    static
        carid = -1,
        string[32];

    if((carid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
    {
        strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

        if(response)
        {
            new amount = strval(inputtext);

            if(amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
                return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Car Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

            for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+amount) > g_aInventoryItems[i][e_InventoryMax])
                    return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], string);
            }

            new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any inventory slots left.");

            Car_RemoveItem(PlayerData[playerid][pStorageItem], carid, amount);

            cmd_ame(playerid, sprintf("takes a \"%s\" from the trunk.", string));
            Car_ShowTrunk(playerid);
        }
        else Car_ShowTrunk(playerid);
    }
    return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
    new
        carid = -1;

    if((carid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
    {
        if(response)
        {
            switch (listitem) {
                case 0: {
                    new
                        string[MAX_CAR_STORAGE * 32],
                        name[32];

                    string[0] = 0;

                    for (new i = 0; i != MAX_CAR_STORAGE; i ++)
                    {
                        if(!Iter_Contains(CarsStorage[carid], i)) format(string, sizeof(string), "%sEmpty Slot\n", string);
                        else {
                            strunpack(name, CarStorage[carid][i][cItemName]);

                            if(CarStorage[carid][i][cItemQuantity] == 1) format(string, sizeof(string), "%s%s\n", string, name);
                            else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
                        }
                    }
                    PlayerData[playerid][pStorageSelect] = 0;
                    Dialog_Show(playerid, Car_ItemStorage, DIALOG_STYLE_LIST, "Car Item Storage", string, "Select", "Close");
                }
                case 1: {
                    if(PlayerData[playerid][pScore] < 2)
                        return SendErrorMessage(playerid, "You're not allowed to accese this vehicle weapon storage if you're not level 2.");

                    if (!PlayerData[playerid][pStory])
                        return SendErrorMessage(playerid, "You must have an active character story to access this option.");

                    Car_WeaponStorage(playerid, carid);
                }
            }
        }
    }
    return 1;
}

Dialog:Car_ItemStorage(playerid, response, listitem, inputtext[]) {
    new
        carid = -1,
        string[64];

    if ((carid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
    {
        if (response) {
            PlayerData[playerid][pStorageItem] = listitem;

            if(Iter_Contains(CarsStorage[carid], listitem))
            {
                if (!Vehicle_IsOwner(playerid, carid))
                    return SendErrorMessage(playerid, "You don't have permission to take/store item to this vehicle!");
                
                PlayerData[playerid][pInventoryItem] = listitem;
                strunpack(string, CarStorage[carid][listitem][cItemName]);

                if (CarStorage[carid][listitem][cItemQuantity] >= Inventory_MaxCount(string)) {
                    format(string, sizeof(string), "%s (Quantity: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
                    Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Take Item", "Select", "Back");
                } else {
                    format(string, sizeof(string), "%s (Quantity: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
                    Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item", "Select", "Back");
                }
            } else {
                if (!Vehicle_IsOwner(playerid, carid))
                    return SendErrorMessage(playerid, "You don't have permission to take/store item to this vehicle!");

                OpenInventory(playerid);

                PlayerData[playerid][pStorageSelect] = 2;
            }
        } else Car_ShowTrunk(playerid);
    }
    return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
    static
        carid = -1,
        itemid = -1,
        string[32];

    if((carid = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
    {
        itemid = PlayerData[playerid][pStorageItem];

        strunpack(string, CarStorage[carid][itemid][cItemName]);

        if(response)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(CarStorage[carid][itemid][cItemQuantity] == 1)
                    {
                        for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                            if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+1) > g_aInventoryItems[i][e_InventoryMax])
                                return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], string);
                        }

                        new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

                        if(id == -1)
                            return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                        Car_RemoveItem(itemid, carid);

                        SendServerMessage(playerid, "You have taken a "YELLOW"\"%s\""WHITE" from the trunk.", string);
                        Car_ShowTrunk(playerid);
                    }
                    else
                    {
                        Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Car Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, CarStorage[carid][itemid][cItemQuantity]);
                    }
                }
                case 1:
                {
                    new id = Inventory_GetItemID(playerid, string);
                    
                    if(id == -1) {
                        Car_ShowTrunk(playerid);

                        return SendErrorMessage(playerid, "You don't have anymore of this item to store!");
                    }
                    else if(InventoryData[playerid][id][invQuantity] == 1)
                    {
                        if (CarStorage[carid][itemid][cItemQuantity] >= Inventory_MaxCount(string))
                            return SendErrorMessage(playerid, "Cannot store more %s on this slot. (Max: %d)", string, Inventory_MaxCount(string));

                        // Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
                        Car_StoreItem(itemid, carid, 1);
                        Inventory_Remove(playerid, string);

                        cmd_ame(playerid, sprintf("stored a \"%s\" into the trunk.", string));
                        Car_ShowTrunk(playerid);
                    }
                    else if(InventoryData[playerid][id][invQuantity] > 1) {
                        if (CarStorage[carid][itemid][cItemQuantity] >= Inventory_MaxCount(string))
                            return SendErrorMessage(playerid, "Cannot store more %s on this slot. (Max: %d)", string, Inventory_MaxCount(string));

                        PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Car Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][id][invQuantity]);
                    }
                }
            }
        }
        else
        {
            Car_ShowTrunk(playerid);
        }
    }
    return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] > 5))
    {
        if(response)
        {
            if (listitem != -1) {
                if(HouseData[houseid][houseWeapons][listitem] != 0)
                {
                    if(IsPlayerDuty(playerid))
                        return SendErrorMessage(playerid, "Duty faction tidak dapat mengambil senjata.");

                    if(PlayerHasWeapon(playerid, HouseData[houseid][houseWeapons][listitem]))
                        return SendErrorMessage(playerid, "Kamu sudah memiliki senjata yang sama.");

                    if(PlayerHasWeaponInSlot(playerid, HouseData[houseid][houseWeapons][listitem]))
                        return SendErrorMessage(playerid, "Senjata ini berada satu slot dengan senjata yang kamu punya.");

                    GivePlayerWeaponEx(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem], HouseData[houseid][houseDurability][listitem]);

                    cmd_ame(playerid, sprintf("takes a \"%s\" from their weapon storage.", ReturnWeaponName(HouseData[houseid][houseWeapons][listitem])));
                    Log_Write("logs/storage_log.txt", "[%s] %s has taken a \"%s\" from house ID: %d (owner: %s).", ReturnDate(), NormalName(playerid), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), houseid, (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));

                    mysql_tquery(g_iHandle, sprintf("DELETE FROM `weapon_houses` WHERE `houseid` = '%d' AND `ammo`='%d' AND `weaponid`='%d' AND `durability`='%d';", HouseData[houseid][houseID], HouseData[houseid][houseAmmo][listitem], HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseDurability][listitem]));

                    HouseData[houseid][houseWeapons][listitem]      = 0;
                    HouseData[houseid][houseAmmo][listitem]         = 0;
                    HouseData[houseid][houseDurability][listitem]   = 0;
                    
                    House_WeaponStorage(playerid, houseid);
                }
                else
                {
                    new
                        weaponid = GetWeapon(playerid),
                        ammo = ReturnWeaponAmmo(playerid, weaponid),
                        durability = ReturnWeaponDurability(playerid, weaponid);

                    if(IsPlayerDuty(playerid))
                        return SendErrorMessage(playerid, "Duty faction tidak dapat menyimpan senjata.");

                    if(!weaponid)
                        return SendErrorMessage(playerid, "You are not holding any weapon!");

                    HouseData[houseid][houseWeapons][listitem] = weaponid;
                    HouseData[houseid][houseAmmo][listitem] = ammo;
                    HouseData[houseid][houseDurability][listitem] = durability;

                    mysql_tquery(g_iHandle, sprintf("INSERT INTO `weapon_houses`(`houseid`, `weaponid`, `ammo`, `durability`) VALUES ('%d','%d','%d','%d');", HouseData[houseid][houseID], weaponid, ammo, durability));

                    ResetWeaponID(playerid, weaponid);
                    House_WeaponStorage(playerid, houseid);
                    
                    cmd_ame(playerid, sprintf("stored a \"%s\" into their weapon storage.", ReturnWeaponName(weaponid)));
                    Log_Write("logs/storage_log.txt", "[%s] %s has stored a \"%s\" into their house ID: %d.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid), houseid);
                }
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
    new
        houseid,
        string[32];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
    {
        strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

        if(response)
        {
            new amount = strval(inputtext);

            if(amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
                return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

            House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
            Inventory_Remove(playerid, string, amount);

            cmd_ame(playerid, sprintf("stored a \"%s\" into their house storage.", string));
            Log_Write("logs/storage_log.txt", "[%s] %s has stored \"%s\" (%d) into their house ID: %d.", ReturnDate(), ReturnName(playerid, 0), string, amount, houseid);

            House_ShowItems(playerid, houseid);
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
    new
        houseid,
        string[32];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] > 5))
    {
        strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

        if(response)
        {
            new amount = strval(inputtext);

            if(amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
                return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

            for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+amount) > g_aInventoryItems[i][e_InventoryMax])
                    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:\n(You can take %d %s now!)", "Take", "Back", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity], (g_aInventoryItems[i][e_InventoryMax]-Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])), string);
            }

            new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

            if(id == -1)
                return SendErrorMessage(playerid, "You don't have any inventory slots left.");

            House_RemoveItem(houseid, string, amount);
            cmd_ame(playerid, sprintf("takes a \"%s\" from their house storage.", string));

            House_ShowItems(playerid, houseid);
            Log_Write("logs/storage_log.txt", "[%s] %s has taken %d \"%s\" from house ID: %d (owner: %s).", ReturnDate(), NormalName(playerid), amount, string, houseid, (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] > 5))
    {
        if(response)
        {
            new amount = strval(inputtext);

            if(isnull(inputtext))
                return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Safe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            if(amount < 1 || amount > HouseData[houseid][houseMoney])
                return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Error: Insufficient funds.\n\nSafe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            HouseData[houseid][houseMoney] -= amount;
            GiveMoney(playerid, amount);

            House_Save(houseid);
            House_OpenStorage(playerid, houseid);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has withdrawn %s from their house safe.", ReturnName(playerid, 0, 1), FormatNumber(amount));
            Log_Write("logs/housestorage_log.txt", "[%s] %s has withdrawn \"%s\" from their house id: %d.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), houseid);
        }
        else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
    }
    return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
    {
        if(response)
        {
            new amount = strval(inputtext);

            if(isnull(inputtext))
                return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Safe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            if(amount < 1 || amount > GetMoney(playerid))
                return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Error: Insufficient funds.\n\nSafe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));

            HouseData[houseid][houseMoney] += amount;
            GiveMoney(playerid, -amount);

            House_Save(houseid);
            House_OpenStorage(playerid, houseid);

            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has deposited %s into their house safe.", ReturnName(playerid, 0, 1), FormatNumber(amount));
            Log_Write("logs/housestorage_log.txt", "[%s] %s has deposited \"%s\" into their house id: %d.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), houseid);
        }
        else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
    }
    return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    new
        houseid;

    if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] > 5)
    {
        if(response)
        {
            switch (listitem)
            {
                case 0: Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw from safe", "Safe Balance: %s\n\nPlease enter how much money you wish to withdraw from the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));
                case 1: Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit into safe", "Safe Balance: %s\n\nPlease enter how much money you wish to deposit into the safe:", "Withdraw", "Back", FormatNumber(HouseData[houseid][houseMoney]));
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    new
        houseid,
        string[64];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] > 5))
    {
        if(response)
        {
            if(Iter_Contains(HousesStorage[houseid], listitem))
            {
                PlayerData[playerid][pStorageItem] = listitem;
                PlayerData[playerid][pInventoryItem] = listitem;

                strunpack(string, HouseStorage[houseid][listitem][hItemName]);

                format(string, sizeof(string), "%s (Quantity: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
                Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Take Item\nStore Item", "Select", "Back");
            }
            else {
                OpenInventory(playerid);

                PlayerData[playerid][pStorageSelect] = 1;
            }
        }
        else House_OpenStorage(playerid, houseid);
    }
    return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
    new
        houseid = -1;

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] >= 3))
    {
        if(response)
        {
            if(listitem == 0) {
                House_ShowItems(playerid, houseid);
            }
            else if(listitem == 1) {
                if(PlayerData[playerid][pScore] < 2)
                    return SendErrorMessage(playerid, "You're not allowed to access this storage if you're not level 2.");

                if (!PlayerData[playerid][pStory])
                    return SendErrorMessage(playerid, "You must have an active character story to access this option.");

                House_WeaponStorage(playerid, houseid);
            }
            else if(listitem == 2) {
                Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw from safe\nDeposit into safe", "Select", "Back");
            }
        }
    }
    return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    new
        houseid = -1,
        itemid = -1,
//        backpack = -1,
        string[32];

    if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || AccountData[playerid][pAdmin] >= 3))
    {
        itemid = PlayerData[playerid][pStorageItem];

        strunpack(string, HouseStorage[houseid][itemid][hItemName]);

        if(response)
        {
            switch (listitem)
            {
                case 0:
                {
                    if(HouseStorage[houseid][itemid][hItemQuantity] == 1)
                    {
                        if(!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
                            return SendErrorMessage(playerid, "You already have a backpack in your inventory.");

                        for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], string, true)) {
                            if((Inventory_Count(playerid, g_aInventoryItems[i][e_InventoryItem])+1) > g_aInventoryItems[i][e_InventoryMax])
                                return SendErrorMessage(playerid, "You're limited %d for %s.", g_aInventoryItems[i][e_InventoryMax], string);
                        }

                        new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

                        if(id == -1)
                            return SendErrorMessage(playerid, "You don't have any inventory slots left.");

                        /*if(!strcmp(string, "Backpack") && (backpack = GetHouseBackpack(houseid)) != -1)
                        {
                            BackpackData[backpack][backpackHouse] = 0;
                            BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

                            Backpack_Save(backpack);
                            SetAccessories(playerid);
                        }*/
                        House_RemoveItem(houseid, string);
                        cmd_ame(playerid, sprintf("takes a \"%s\" from their house storage.", string));

                        House_ShowItems(playerid, houseid);
                        Log_Write("logs/storage_log.txt", "[%s] %s has taken \"%s\" from house ID: %d.", ReturnDate(), ReturnName(playerid, 0), string, houseid);
                    }
                    else
                    {
                        Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "House Take", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to take for this item:", "Take", "Back", string, HouseStorage[houseid][itemid][hItemQuantity]);
                    }
                }
                case 1:
                {
                    new id = Inventory_GetItemID(playerid, string);

                    if(!strcmp(string, "Backpack")) {
                        House_ShowItems(playerid, houseid);

                        return SendErrorMessage(playerid, "You can only store one backpack in your house.");
                    }
                    else if(id == -1) {
                        House_ShowItems(playerid, houseid);

                        return SendErrorMessage(playerid, "You don't have anymore of this item to store!");
                    }
                    else if(InventoryData[playerid][id][invQuantity] == 1)
                    {
                        House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
                        Inventory_Remove(playerid, string);

                        cmd_ame(playerid, sprintf("stored a \"%s\" into their house storage.", string));
                        Log_Write("logs/storage_log.txt", "[%s] %s has stored \"%s\" into their house ID: %d.", ReturnDate(), ReturnName(playerid, 0), string, houseid);
                        House_ShowItems(playerid, houseid);
                    }
                    else if(InventoryData[playerid][id][invQuantity] > 1) {
                        PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Quantity: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", string, InventoryData[playerid][id][invQuantity]);
                    }
                }
            }
        }
        else
        {
            House_ShowItems(playerid, houseid);
        }
    }
    return 1;
}

Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
    if(!response) {
        SendServerMessage(playerid, "Gagal melakukan registrasi, anda keluar dari server.");
        KickEx(playerid);
    }
    else {
        if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
            return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Registrasi", ""WHITE"Selamat datang "YELLOW"%s"WHITE".\n\nMasukkan password untuk membuat password akun: (password minimal 8 sampai dengan 32 karakter)", "Buat", "Quit", ReturnName(playerid));

        for (new i; i < 64; i++)
            AccountData[playerid][pSalt][i] = random(79) + 47;

        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], AccountData[playerid][pPassword], 64);
        Dialog_Show(playerid, KonfirmasiPassword, DIALOG_STYLE_PASSWORD, "Konfirmasi password anda", ""WHITE"Masukkan password yang anda masukkan di kolom sebelumnya:", "Konfirmasi", "Kembali");
    }
    return 1;
}

Dialog:KonfirmasiPassword(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new hash[65];
        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], hash, sizeof(hash));

        if(strcmp(hash, AccountData[playerid][pPassword]))
            return Dialog_Show(playerid, KonfirmasiPassword, DIALOG_STYLE_PASSWORD, "Konfirmasi password anda salah", ""WHITE"Masukkan password yang anda masukkan di kolom sebelumnya:\n\n"COL_GREY"ERROR: Password tidak sesuai, masukkan ulang password atau anda dapat ...\n... mengubahnya dengan password baru dengan menekan opsi 'Kembali'", "Konfirmasi", "Kembali");

        // AccountData[playerid][pRegisterDate] = gettime();

        GetPlayerIp(playerid, AccountData[playerid][pIP], 16);
        GetPlayerName(playerid, AccountData[playerid][pUsername], MAX_PLAYER_NAME + 1);

        new query[500];
        // format(query, sizeof(query), "INSERT INTO `accounts` (`Username`, `Password`, `Salt`, `IP`, `RegisterDate`) VALUES ('%s', '%s', '%s', '%s', '%i')", AccountData[playerid][pUsername], SQL_ReturnEscaped(AccountData[playerid][pPassword]), SQL_ReturnEscaped(AccountData[playerid][pSalt]), AccountData[playerid][pIP], AccountData[playerid][pRegisterDate]);
        // mysql_tquery(g_iHandle, query);
        format(query,sizeof(query),"UPDATE `accounts` SET `Password`='%s', `Salt`='%s', `IP`='%s' WHERE `Username`='%s'",SQL_ReturnEscaped(AccountData[playerid][pPassword]),SQL_ReturnEscaped(AccountData[playerid][pSalt]),AccountData[playerid][pIP],AccountData[playerid][pUsername]);
        mysql_tquery(g_iHandle, query);

        AccountData[playerid][pEmailTimer] = defer refuseVCode(playerid);
        Dialog_Show(playerid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi akun kamu\n(kode sudah dikirim ke Direct Message akun Discord kamu secara otomatis):", "Verifikasi", "Kembali");
    }
    else Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Registrasi", ""WHITE"Selamat datang "YELLOW"%s"WHITE".\n\nMasukkan password untuk membuat password akun: (password minimal 8 sampai dengan 32 karakter)", "Buat", "Quit", ReturnName(playerid));
    return 1;
}

Dialog:PutEmail(playerid, response, listitem, inputtext[]) 
{
    new 
        email_query[128];

    if (!response)
        return KickEx(playerid);

    if (!IsValidEmail(inputtext)) {
        SendErrorMessage(playerid, "Email yang anda masukkan tidak valid.");
        return Dialog_Show(playerid, PutEmail, DIALOG_STYLE_INPUT, "Email", WHITE"Tolong masukkan email dibawah ini untuk melakukan konfirmasi akun\nCek folder INBOX/SPAM untuk melihat kode verifikasi\n\nEmail valid: "YELLOW"@gmail.com, @hotmail.com", "Enter", "Quit");
    }

    format(AccountData[playerid][pMail], 32, inputtext);
    format(email_query, sizeof(email_query), "SELECT * FROM `accounts` WHERE `Email` = '%s' LIMIT 1;", SQL_ReturnEscaped(inputtext));
    mysql_tquery(g_iHandle, email_query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_EMAIL);
    return 1;
}

Dialog:PutCode(playerid, response, listitem, inputtext[])
{
    new send_query[124];

    // if (!response)
    //     return Dialog_Show(playerid, PutEmail, DIALOG_STYLE_INPUT, "Email", WHITE"Tolong masukkan email dibawah ini untuk melakukan konfirmasi akun\nCek folder INBOX/SPAM untuk melihat kode verifikasi\n\nEmail valid: "YELLOW"@gmail.com, @hotmail.com", "Enter", "Quit");
    if (!response)
        return KickEx(playerid);

    if(strcmp(AccountData[playerid][pVerifyCode], inputtext))
    {
        SendErrorMessage(playerid, "Kode verifikasi salah, mohon di cek kembali pada Discord Anda.");
        return Dialog_Show(playerid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi akun kamu\n(kode sudah dikirim ke Direct Message akun Discord kamu secara otomatis):", "Verifikasi", "Kembali");
    }
    
    SetPVarInt(playerid, "UCPRegistration", 1);
    format(send_query, sizeof(send_query), "UPDATE `accounts` SET `VerifyCode` = '0' WHERE `Username` = '%s';", ReturnName(playerid));
    mysql_tquery(g_iHandle, send_query, "OnQueryFinished", "dd", playerid, THREAD_CREATE_CHAR);
    return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
    if(!response) 
        return KickEx(playerid);

    if(isnull(inputtext)) 
        return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "LOGIN", ""GREEN"UCP Name: "WHITE"%s\n"GREEN"Attempts: "WHITE"%d/3\n"GREEN"Password: "WHITE"(input below)", "Login", "Quit", ReturnName(playerid,0), AccountData[playerid][pLoginAttempts]);

    new hash[65];
    SHA256_PassHash(inputtext, AccountData[playerid][pSalt], hash, sizeof(hash));

    if(strcmp(hash, AccountData[playerid][pPassword]))
    {
        if(++AccountData[playerid][pLoginAttempts] >= 3) {
            AccountData[playerid][pLoginAttempts] = 0;
            SendClientMessage(playerid, X11_TOMATO_1, "Notice: Anda telah di kick karena kesalahan 3 kali memasukkan password.");
            KickEx(playerid);
        }
        else {
            Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "LOGIN", ""GREEN"UCP Name: "WHITE"%s\n"GREEN"Attempts: "WHITE"%d/3\n"GREEN"Password: "WHITE"(input below)", "Login", "Quit", ReturnName(playerid,0), AccountData[playerid][pLoginAttempts]);
        }
        return 1;
    }

    // if (!strcmp(AccountData[playerid][pMail], "server@test.com"))
    //     return Dialog_Show(playerid, PutEmail, DIALOG_STYLE_INPUT, "Email", WHITE"Tolong masukkan email dibawah ini untuk melakukan konfirmasi akun\nCek folder INBOX/SPAM untuk melihat kode verifikasi\n\nEmail valid: "YELLOW"@gmail.com, @hotmail.com", "Enter", "Quit");

    if (strcmp(AccountData[playerid][pVerifyCode], "0")) {
        SetPVarInt(playerid, "Verifikasi", 1);
        return Dialog_Show(playerid, PutCode, DIALOG_STYLE_INPUT, "Kode Verifikasi", WHITE"Isi kode disini untuk memverifikasi akun kamu\n(kode sudah dikirim ke Direct Message akun Discord kamu secara otomatis):", "Verifikasi", "Kembali");
    }

    new
        query[128];

    AccountData[playerid][pLogged] = 1;

    format(query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `Username` = '%s' LIMIT %d;", AccountData[playerid][pUsername], MAX_CHARACTERS);
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LIST_CHARACTERS);

    stop AccountData[playerid][pLoginTimer];

    return 1;
}

Dialog:LoginChar(playerid, response, listitem, inputtext[])
{
    if(!response) 
        return KickEx(playerid);

    if(isnull(inputtext)) 
        return Dialog_Show(playerid, LoginChar, DIALOG_STYLE_PASSWORD, "LOGIN", ""GREEN"UCP Name: "WHITE"%s\n"GREEN"Character: "WHITE"%s\n"GREEN"Attempts: "WHITE"%d/3\n"GREEN"Password: "WHITE"(input below)", "Login", "Quit", ReturnAdminName(playerid), ReturnName(playerid), AccountData[playerid][pLoginAttempts]);

    new hash[65];
    SHA256_PassHash(inputtext, PlayerData[playerid][pSalt], hash, sizeof(hash));

    if(strcmp(hash, PlayerData[playerid][pPassword]))
    {
        if(++AccountData[playerid][pLoginAttempts] >= 3) {
            AccountData[playerid][pLoginAttempts] = 0;
            SendClientMessage(playerid, X11_TOMATO_1, "Notice: Anda telah di kick karena kesalahan 3 kali memasukkan password.");
            KickEx(playerid);
        }
        else {
            Dialog_Show(playerid, LoginChar, DIALOG_STYLE_PASSWORD, "LOGIN", ""GREEN"UCP Name: "WHITE"%s\n"GREEN"Character: "WHITE"%s\n"GREEN"Attempts: "WHITE"%d/3\n"GREEN"Password: "WHITE"(input below)", "Login", "Quit", ReturnAdminName(playerid), ReturnName(playerid), AccountData[playerid][pLoginAttempts]);
        }
        return 1;
    }

    PlayerData[playerid][pLogged] = 1;
    AccountData[playerid][pLogged] = 1;

    mysql_tquery(g_iHandle, sprintf("SELECT * FROM `characters` WHERE `Character`='%s' ORDER BY `ID` ASC LIMIT 1;", SQL_ReturnEscaped(ReturnName(playerid))), "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTERS);

    stop AccountData[playerid][pLoginTimer];

    return 1;
}

Dialog:Personal(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, Gender, DIALOG_STYLE_LIST, "Gender", "Laki-laki\nPerempuan", "Select", "Cancel");
            case 1: Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Masukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
            case 2: {
                new countries[190*32];
                for (new i; i < sizeof(countryList); i++) {
                    format(countries, sizeof(countries), "%s%s\n", countries, countryList[i]);
                }
                Dialog_Show(playerid, Origin, DIALOG_STYLE_LIST, "Asal Karakter", countries, "Submit", "Cancel");
            }
            case 3:
            {
                if(!strlen(PlayerData[playerid][pBirthdate]))
                    return SendErrorMessage(playerid, "Tanggal lahir belum di isi!.");

                else if(!strlen(PlayerData[playerid][pOrigin]))
                    return SendErrorMessage(playerid, "Asal karakter belum di isi.");

                else
                {
                    for (new i = 0; i < 10; i ++) {
                        PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_registrasi][i]);
                    }
                    switch (PlayerData[playerid][pGender])
                    {
                        case 1: ShowModelSelectionMenu(playerid, "Pilih Pakaian Karakter", MODEL_SELECTION_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
                        case 2: ShowModelSelectionMenu(playerid, "Pilih Pakaian Karakter", MODEL_SELECTION_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
                }
            }
        }
    }
    return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
    if(!response) return SetTimerEx("SelectTD", 100, false, "d", playerid);
    if(response)
    {
        PlayerData[playerid][pGender] = listitem + 1;
        switch (listitem) {
            case 0: {
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], "~b~~h~Gender~n~~w~Anda seorang ~r~laki-laki");
                PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 98);

                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4]);
            }
            case 1: {
                PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4], "~b~~h~Gender~n~~w~Anda seorang ~r~perempuan");
                PlayerTextDrawSetPreviewModel(playerid, PlayerTextdraws[playerid][textdraw_registrasi][2], 233);

                PlayerTextDrawHide(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4]);
                PlayerTextDrawShow(playerid, PlayerTextdraws[playerid][textdraw_registrasi][4]);
            }
        }
        PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
        SetPlayerSkin(playerid,PlayerData[playerid][pSkin]);
        SetTimerEx("SelectTD", 200, false, "d", playerid);
    }
    else SetTimerEx("SelectTD", 200, false, "d", playerid);
    return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
    if(!response) return SetTimerEx("SelectTD", 100, false, "d", playerid);
    if(response)
    {
        new
            iDay,
            iMonth,
            iYear,
            str[64],
            day,
            month,
            year;
            
        getdate(year, month, day);

        static const
                arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        if(sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Tidak sesuai format, gunakan / di setiap tanggal/bulan/tahun!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else if(iYear < 1900 || iYear > year) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Tahun tidak sesuai!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else if(iMonth < 1 || iMonth > 12) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Bulan tidak sesuai!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else if(iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
            Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Hari tidak sesuai!\n\nMasukkan tanggal lahir dengan mengikuti format (DD/MM/YYYY):", "Submit", "Cancel");
        }
        else {
            format(PlayerData[playerid][pBirthdate], 24, inputtext);

            format(str, sizeof(str), "~b~~h~Tanggal lahir~n~~w~%s", inputtext);
            PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_registrasi][5], str);
        }
    }
    else SetTimerEx("SelectTD", 100, false, "d", playerid);
    return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
    if(!response) return SetTimerEx("SelectTD", 100, false, "d", playerid);
    if(response)
    {
        new str[64];

        // if(isnull(inputtext) || strlen(inputtext) <= 3 || strlen(inputtext) > 32) 
        //     return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal Karakter", "Silahkan memasukkan asal geografi dari karakter anda:", "Submit", "Cancel");

        // for (new i = 0, len = strlen(inputtext); i != len; i ++) {
        //     if((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
        //         continue;

        //     else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal Karakter", "Error: Tidak dapat memasukkan data selain huruf dan angka.\n\nSilahkan memasukkan asal geografi dari karakter anda:", "Submit", "Cancel");
        // }

        format(PlayerData[playerid][pOrigin], 32, inputtext);
        format(str, sizeof(str), "~b~~h~Asal Karakter~n~~w~%s", inputtext);
        PlayerTextDrawSetString(playerid, PlayerTextdraws[playerid][textdraw_registrasi][6], str);
    }
    else SetTimerEx("SelectTD", 100, false, "d", playerid);
    return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please use a strong and safe password for additional security.", "Change", "Cancel");

        if(strlen(inputtext) < 8 || strlen(inputtext) > 32)
            return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please input password between 8 - 32 characters.", "Change", "Cancel");

        // WP_Hash(buffer, sizeof(buffer), inputtext);
        // format(PlayerData[playerid][pPassword], 129, buffer);
        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], AccountData[playerid][pPassword], 64);

        new string[256];
        format(string,sizeof(string),"UPDATE `accounts` SET `Password`='%s' WHERE `Username`='%s'", AccountData[playerid][pPassword], AccountData[playerid][pUsername]);
        mysql_tquery(g_iHandle, string);

        format(string,sizeof(string),"UPDATE `characters` SET `password`='%s' WHERE `Username`='%s'",AccountData[playerid][pPassword],AccountData[playerid][pUsername]);
        mysql_tquery(g_iHandle, string);

        for(new i = 0; i != strlen(inputtext); i++)
        {
            inputtext[i] = '*';
        }
        SendServerMessage(playerid, "Successfully changed your password. [P: %s]", inputtext);
    }
    return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return cmd_changepass(playerid, "\1");

        new
            hash[65];

        SHA256_PassHash(inputtext, AccountData[playerid][pSalt], hash, 64);
        // WP_Hash(buffer, sizeof(buffer), inputtext);

        if(strcmp(hash, AccountData[playerid][pPassword])) {
            SendErrorMessage(playerid, "You have entered an incorrect password.");
        }
        else Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Enter New Password", "Please enter your new password below.\n\nNote: Please use a strong and safe password for additional security.", "Change", "Cancel");
/*        format(query, sizeof(query), "SELECT `password` FROM `characters` WHERE `Character` = '%s' AND `password` = '%s'", NormalName(playerid), buffer);
        mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_PASS);*/
    }
    return 1;
}

Dialog:Aksesoris(playerid, response, listitem, inputtext[])
{
    new string[24];
    if(response)
    {
        PlayerData[playerid][pAksesoris] = ListedAcc[playerid][listitem];

        format(string,sizeof(string),"Edit Accessory (#%d)",PlayerData[playerid][pAksesoris]);
        Dialog_Show(playerid, AksesorisEdit, DIALOG_STYLE_LIST, string, "Place %s\nChange Bone\nChange Placement\nChange Color 1\nChange Color 2\nRemove from list\nShare Placement\nChange Placement (Android)", "Select", "Exit", IsPlayerAttachedObjectSlotUsed(playerid, PlayerData[playerid][pAksesoris]) ? ("Off") : ("On"));
    }
    return 1;
}

Dialog:AksesorisEdit(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pAksesoris], str[256];
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, id))
                {
                    RemovePlayerAttachedObject(playerid, id);
                    AccData[playerid][id][accShow] = 0;
                    Aksesoris_Save(playerid, id);
                }
                else Aksesoris_Attach(playerid, id);
            }
            case 1:
            {
                new string[256+1];
                for(new i; i < sizeof(accBones); i++)
                {
                        format(string,sizeof(string),"%s%s\n",string,accBones[i]);
                }
                Dialog_Show(playerid, AksesorisBone, DIALOG_STYLE_LIST, "Edit Bone",string,"Select","Close");
            }
            case 2:
            {                    
                if(IsPlayerAttachedObjectSlotUsed(playerid, id))
                {
                    SendServerMessage(playerid, "Use "YELLOW"~k~~PED_SPRINT~"WHITE" to look around.");
                    EditAttachedObject(playerid, id);
                }
                else return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");
            }
            case 3:
            {                    
                if(!IsPlayerAttachedObjectSlotUsed(playerid, id))
                    return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");

                Dialog_Show(playerid, WarnaAksesoris, DIALOG_STYLE_INPUT, "Accessory Color 1",color_string, "Choose","Close");
                SetPVarInt(playerid, "Color", 1);
            }
            case 4:
            {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, id))
                    return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");
                        
                Dialog_Show(playerid, WarnaAksesoris, DIALOG_STYLE_INPUT, "Accessory Color 2",color_string, "Choose","Close");
                SetPVarInt(playerid, "Color", 2);
            }
            case 5:
            {
                new string[128];
                AccData[playerid][id][accExists] = 0;
                AccData[playerid][id][accModel] = 0;
                
                if(IsPlayerAttachedObjectSlotUsed(playerid, id))
                {
                    RemovePlayerAttachedObject(playerid, id);
                    AccData[playerid][id][accShow] = 0;
                    Aksesoris_Save(playerid, id);
                }
                format(string,sizeof(string),"DELETE FROM `aksesoris` WHERE `ID`='%d'", AccData[playerid][id][accID]);
                mysql_tquery(g_iHandle, string);
                
                SendCustomMessage(playerid, "ACCESORY","You have removed accessory index #%d.", id);
            }
            case 6: {
                format(str,sizeof(str),"Pos X: %.3f\n",AccData[playerid][id][accOffset][0]);
                format(str,sizeof(str),"%sPos Y: %.3f\n",str,AccData[playerid][id][accOffset][1]);
                format(str,sizeof(str),"%sPos Z: %.3f\n",str,AccData[playerid][id][accOffset][2]);
                format(str,sizeof(str),"%sPos RotX: %.3f\n",str,AccData[playerid][id][accRot][0]);
                format(str,sizeof(str),"%sPos RotY: %.3f\n",str,AccData[playerid][id][accRot][1]);
                format(str,sizeof(str),"%sPos RotZ: %.3f\n",str,AccData[playerid][id][accRot][2]);
                format(str,sizeof(str),"%sPos ScaleX: %.3f\n",str,AccData[playerid][id][accScale][0]);
                format(str,sizeof(str),"%sPos ScaleY: %.3f\n",str,AccData[playerid][id][accScale][1]);
                format(str,sizeof(str),"%sPos ScaleZ: %.3f",str,AccData[playerid][id][accScale][2]);
                Dialog_Show(playerid, DisplayOnly, DIALOG_STYLE_LIST, "Share Accessories Position", str, "Close", "");
            }
            case 7: {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, id))
                    return SendCustomMessage(playerid, "ACCESORY","This accessory is not attached.");

                format(str,sizeof(str),"Position\tValue\n");
                format(str,sizeof(str),"%sX\t%.3f\n",str,AccData[playerid][id][accOffset][0]);
                format(str,sizeof(str),"%sY\t%.3f\n",str,AccData[playerid][id][accOffset][1]);
                format(str,sizeof(str),"%sZ\t%.3f\n",str,AccData[playerid][id][accOffset][2]);
                format(str,sizeof(str),"%sRotX\t%.3f\n",str,AccData[playerid][id][accRot][0]);
                format(str,sizeof(str),"%sRotY\t%.3f\n",str,AccData[playerid][id][accRot][1]);
                format(str,sizeof(str),"%sRotZ\t%.3f\n",str,AccData[playerid][id][accRot][2]);
                format(str,sizeof(str),"%sScaleX\t%.3f\n",str,AccData[playerid][id][accScale][0]);
                format(str,sizeof(str),"%sScaleY\t%.3f\n",str,AccData[playerid][id][accScale][1]);
                format(str,sizeof(str),"%sScaleZ\t%.3f",str,AccData[playerid][id][accScale][2]);
                Dialog_Show(playerid, EditAksesorisAndroid, DIALOG_STYLE_TABLIST_HEADERS, "Edit Placement (Android)", str, "Change", "Close");
            }
        }
    }
    return 1;
}

Dialog:WarnaAksesoris(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pAksesoris];
    if(response)
    {
        new color = strval(inputtext);
        
        if(!(0 <= color <= sizeof(ColorList)-1)) 
            return SendErrorMessage(playerid, "Invalid color ID.");
        
        switch(GetPVarInt(playerid, "Color"))
        {
            case 1: GetRGB(ColorList[color], AccData[playerid][id][accColor1][0], AccData[playerid][id][accColor1][1], AccData[playerid][id][accColor1][2]);
            case 2: GetRGB(ColorList[color], AccData[playerid][id][accColor2][0], AccData[playerid][id][accColor2][1], AccData[playerid][id][accColor2][2]);
        }
        Aksesoris_Attach(playerid, id);
    }
    return 1;
}

Dialog:AksesorisBone(playerid, response, listitem, inputtext[])
{
    new id = PlayerData[playerid][pAksesoris];
    if(response)
    {
        if (listitem != -1) {
            AccData[playerid][id][accBone] = listitem+1;
            if(IsPlayerAttachedObjectSlotUsed(playerid, id))
            {
                RemovePlayerAttachedObject(playerid, id);
                AccData[playerid][id][accScale][0] = AccData[playerid][id][accScale][1] = AccData[playerid][id][accScale][2] = 1.0;
                AccData[playerid][id][accOffset][0] = AccData[playerid][id][accOffset][1] = AccData[playerid][id][accOffset][2] = 0.0;
                AccData[playerid][id][accRot][0] = AccData[playerid][id][accRot][1] = AccData[playerid][id][accRot][2] = 0.0;
            
                Aksesoris_Attach(playerid, id);
                EditAttachedObject(playerid, id);
            }
            SendCustomMessage(playerid, "ACCESORY","You have been changed accessory bone index #%d to %s", id, accBones[listitem]);
        }
    }
    return 1;
}

Dialog:EditAksesorisAndroid(playerid, response, listitem, inputtext[]) {
    new id = PlayerData[playerid][pAksesoris];
    if (response) {
        switch (listitem) {
            case 0: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 1);
                format(str,sizeof(str),"Current X Position: %.3f\nInput new X Position below:", AccData[playerid][id][accOffset][0]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit X Position", str, "Change", "Close");
            }
            case 1: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 2);
                format(str,sizeof(str),"Current Y Position: %.3f\nInput new Y Position below:", AccData[playerid][id][accOffset][1]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit Y Position", str, "Change", "Close");
            }
            case 2: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 3);
                format(str,sizeof(str),"Current Z Position: %.3f\nInput new Z Position below:", AccData[playerid][id][accOffset][2]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit Z Position", str, "Change", "Close");
            }
            case 3: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 4);
                format(str,sizeof(str),"Current RotX Position: %.3f\nInput new RotX Position below:", AccData[playerid][id][accRot][0]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit RotX Position", str, "Change", "Close");
            }
            case 4: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 5);
                format(str,sizeof(str),"Current RotY Position: %.3f\nInput new RotY Position below:", AccData[playerid][id][accRot][1]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit RotY Position", str, "Change", "Close");
            }
            case 5: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 6);
                format(str,sizeof(str),"Current RotZ Position: %.3f\nInput new RotZ Position below:", AccData[playerid][id][accRot][2]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit RotZ Position", str, "Change", "Close");
            }
            case 6: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 7);
                format(str,sizeof(str),"Current ScaleX Position: %.3f\nInput new ScaleX Position below:", AccData[playerid][id][accScale][0]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit ScaleX Position", str, "Change", "Close");
            }
            case 7: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 8);
                format(str,sizeof(str),"Current ScaleY Position: %.3f\nInput new ScaleY Position below:", AccData[playerid][id][accScale][1]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit ScaleY Position", str, "Change", "Close");
            }
            case 8: {
                new str[128];
                SetPVarInt(playerid, "aksesorisEdit", 9);
                format(str,sizeof(str),"Current ScaleZ Position: %.3f\nInput new ScaleZ Position below:", AccData[playerid][id][accScale][2]);
                Dialog_Show(playerid, EditAksesorisPos, DIALOG_STYLE_INPUT, "Edit ScaleZ Position", str, "Change", "Close");
            }
        }
    } else {
        PlayerData[playerid][pAksesoris] = -1;
    }
    return 1;
}

Dialog:EditAksesorisPos(playerid, response, listitem, inputtext[]) {
    new id = PlayerData[playerid][pAksesoris];
    if (response) {
        switch (GetPVarInt(playerid, "aksesorisEdit")) {
            // X Position
            case 1: {
                new Float:X = floatstr(inputtext);

                AccData[playerid][id][accOffset][0] = X;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // Y Position
            case 2: {
                new Float:Y = floatstr(inputtext);

                AccData[playerid][id][accOffset][1] = Y;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // Z Position
            case 3: {
                new Float:Z = floatstr(inputtext);

                AccData[playerid][id][accOffset][2] = Z;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // RotX Position
            case 4: {
                new Float:RotX = floatstr(inputtext);

                AccData[playerid][id][accRot][0] = RotX;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // RotY Position
            case 5: {
                new Float:RotY = floatstr(inputtext);

                AccData[playerid][id][accRot][1] = RotY;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // RotZ Position
            case 6: {
                new Float:RotZ = floatstr(inputtext);

                AccData[playerid][id][accRot][2] = RotZ;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // ScaleX Position
            case 7: {
                new Float:ScaleX = floatstr(inputtext);

                AccData[playerid][id][accScale][0] = ScaleX;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // Scale Y Position
            case 8: {
                new Float:ScaleY = floatstr(inputtext);

                AccData[playerid][id][accScale][1] = ScaleY;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
            // Scale Z Position
            case 9: {
                new Float:ScaleZ = floatstr(inputtext);

                AccData[playerid][id][accScale][2] = ScaleZ;
                Aksesoris_Attach(playerid, id);
                PlayerData[playerid][pAksesoris] = -1;  
                SetPVarInt(playerid, "aksesorisEdit", 0);
                SendCustomMessage(playerid, "ACCESORY","Accessory saved!.");
            }
        }
    } else {
        PlayerData[playerid][pAksesoris] = -1;
    }
    return 1;
}

Dialog:VACCS(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = PlayerData[playerid][pVObject];

        if(Iter_Contains(DynamicVehicles, id))
        {
            new list[181];

            if(GetEngineStatus(GetPlayerVehicleID(playerid)))
                return SendErrorMessage(playerid, "Turn off vehicle engine first.");

            if(!VehicleObjects[id][listitem][object_exists]) {
                if (GetMoney(playerid) < VEHICLE_OBJECT_PRICE)
                    return SendErrorMessage(playerid, "You don't have $100 for install mods.");

                if (IsAMotor(GetPlayerVehicleID(playerid))) {
                    if (PlayerData[playerid][pVipTime] > 0) {
                        Dialog_Show(playerid, VACCST, DIALOG_STYLE_LIST, "Select Type", "Sticker", "Select", "Back");
                    } else SendErrorMessage(playerid, "This vehicle is only support sticker modifications!");
                } else {
                    if (PlayerData[playerid][pVipTime] > 0) {
                        Dialog_Show(playerid, VACCST, DIALOG_STYLE_LIST, "Select Type", "Sticker\nMods", "Select", "Back");
                    } else {
                        for(new i; i < 181; i++) {
                            list[i] = BodyWork[i][Id];
                        }
                        ShowCustomSelection(playerid, "Vehicle Mods", MODEL_SELECTION_VACC, list, sizeof(list));
                    }
                }
                return 1;
            }

            if (GetMoney(playerid) < VEHICLE_OBJECT_EDIT_PRICE)
                return SendErrorMessage(playerid, "You don't have $10 for editing mods.");
                
            PlayerData[playerid][pVObjectList] = listitem;
            Dialog_Show(playerid, VACCSE, DIALOG_STYLE_LIST, "Vehicle Accesories > Edit", "%s\nEdit Position\nRemove From Vehicle", "Select", "Back", VehicleObjects[id][listitem][object_type] == OBJECT_TYPE_BODY ? ("Set Color") : ("Edit Text"));
        }
        else SendErrorMessage(playerid, "This vehicle object does'nt exists."), PlayerData[playerid][pVObject] = -1;
    }
    return 1;
}

Dialog:VACCST(playerid, response, listitem, inputtext[]) {
    if (response) {
        switch (listitem) {
            case 0: {
                new
                    vehicleid = GetPlayerVehicleID(playerid),
                    id = -1;

                if ((id = Vehicle_GetID(vehicleid)) != -1 && VehicleData[id][cOwner]) {
                    Vehicle_ObjectAdd(id, 18659, OBJECT_TYPE_TEXT);
                    Streamer_Update(playerid);
                    GiveMoney(playerid, -VEHICLE_OBJECT_PRICE);
                    SendCustomMessage(playerid, "MODSHOP", "You have select "YELLOW"Sticker "WHITE"for this vehicle (/vacc to edit vehicle object).");
                    return 1;
                }
            }
            case 1: {
                new list[181];
                for(new i; i < 181; i++) {
                    list[i] = BodyWork[i][Id];
                }
                ShowCustomSelection(playerid, "Vehicle Mods", MODEL_SELECTION_VACC, list, sizeof(list));
            }
        }
    } else cmd_vacc(playerid, "\1");
    return 1;
}

Dialog:VACCSE(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new slot = PlayerData[playerid][pVObjectList],
            id = PlayerData[playerid][pVObject];

        switch(listitem)
        {
            case 0: {
                if(VehicleObjects[id][slot][object_type] == OBJECT_TYPE_BODY) Vehicle_ObjectColor(playerid, id, slot);
                else Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
            }
            case 1: 
            {
                Dialog_Show(playerid, VACCSEP, DIALOG_STYLE_LIST, "Edit Position", "For PC\nFor Android", "Select", "Close");
            }
            case 2: Dialog_Show(playerid, VACCSA, DIALOG_STYLE_MSGBOX, "Remove Confirmation", "Do you want to remove this object vehicle?.", "Yes", "No (Close)");
        }
    }
    else cmd_vacc(playerid, "\1");

    return 1;
}

Dialog:VACCSEP(playerid, response, listitem, inputtext[]) {
    if (response) {
        new slot = PlayerData[playerid][pVObjectList],
            id = PlayerData[playerid][pVObject];

        switch (listitem) {
            // For PC
            case 0: {
                Vehicle_ObjectEdit(playerid, id, slot);
            }
            // For Android
            case 1: {
                new str[256];
                format(str,sizeof(str),"Position\tValue\n");
                format(str,sizeof(str),"%sX\t%.3f\n",str,VehicleObjects[ id ][ slot ][object_x]);
                format(str,sizeof(str),"%sY\t%.3f\n",str,VehicleObjects[ id ][ slot ][object_y]);
                format(str,sizeof(str),"%sZ\t%.3f\n",str,VehicleObjects[ id ][ slot ][object_z]);
                format(str,sizeof(str),"%sRX\t%.3f\n",str,VehicleObjects[ id ][ slot ][object_rx]);
                format(str,sizeof(str),"%sRY\t%.3f\n",str,VehicleObjects[ id ][ slot ][object_ry]);
                format(str,sizeof(str),"%sRZ\t%.3f",str,VehicleObjects[ id ][ slot ][object_rz]);
                Dialog_Show(playerid, VACCSEPA, DIALOG_STYLE_TABLIST_HEADERS, "Edit Position Android", str, "Change", "Close");
            }
        }
    }
    return 1;
}

Dialog:VACCSEPA(playerid, response, listitem, inputtext[]) {
    if (response) {
        new str[256],
            slot = PlayerData[playerid][pVObjectList],
            id = PlayerData[playerid][pVObject];

        switch (listitem) {
            // X
            case 0: {
                SetPVarInt(playerid, "editPosVehObject", 1);
                format(str,sizeof(str),"Current Value: "WHITE"%.3f", VehicleObjects[ id ][ slot ][object_x]);
                Dialog_Show(playerid, VACCEPOS, DIALOG_STYLE_INPUT, "X Position", str, "Set", "Close");
            }
            // Y
            case 1: {
                SetPVarInt(playerid, "editPosVehObject", 2);
                format(str,sizeof(str),"Current Value: "WHITE"%.3f", VehicleObjects[ id ][ slot ][object_y]);
                Dialog_Show(playerid, VACCEPOS, DIALOG_STYLE_INPUT, "Y Position", str, "Set", "Close");
            }
            // Z
            case 2: {
                SetPVarInt(playerid, "editPosVehObject", 3);
                format(str,sizeof(str),"Current Value: "WHITE"%.3f", VehicleObjects[ id ][ slot ][object_z]);
                Dialog_Show(playerid, VACCEPOS, DIALOG_STYLE_INPUT, "Z Position", str, "Set", "Close");
            }
            // RX
            case 3: {
                SetPVarInt(playerid, "editPosVehObject", 4);
                format(str,sizeof(str),"Current Value: "WHITE"%.3f", VehicleObjects[ id ][ slot ][object_rx]);
                Dialog_Show(playerid, VACCEPOS, DIALOG_STYLE_INPUT, "RX Position", str, "Set", "Close");
            }
            // RY
            case 4: {
                SetPVarInt(playerid, "editPosVehObject", 5);
                format(str,sizeof(str),"Current Value: "WHITE"%.3f", VehicleObjects[ id ][ slot ][object_ry]);
                Dialog_Show(playerid, VACCEPOS, DIALOG_STYLE_INPUT, "RY Position", str, "Set", "Close");
            }
            // RZ
            case 5: {
                SetPVarInt(playerid, "editPosVehObject", 6);
                format(str,sizeof(str),"Current Value: "WHITE"%.3f", VehicleObjects[ id ][ slot ][object_rz]);
                Dialog_Show(playerid, VACCEPOS, DIALOG_STYLE_INPUT, "RZ Position", str, "Set", "Close");
            }
        }
    }
    return 1;
}

Dialog:VACCEPOS(playerid, response, listitem, inputtext[]) {
    if (response) {
        new Float:value = floatstr(inputtext),
            slot = PlayerData[playerid][pVObjectList],
            id = PlayerData[playerid][pVObject],
            Float:v_size[3];

        GetVehicleModelInfo(VehicleData[id][cModel], VEHICLE_MODEL_INFO_SIZE, v_size[0], v_size[1], v_size[2]);

        switch (GetPVarInt(playerid, "editPosVehObject")) {
            // X Position
            case 1: {
                if ((VehicleObjects[ id ][ slot ][object_x] >= v_size[0] || -v_size[0] >= VehicleObjects[ id ][ slot ][object_x]) || 
                (VehicleObjects[ id ][ slot ][object_y] >= v_size[1] || -v_size[1] >= VehicleObjects[ id ][ slot ][object_y]) ||
                (VehicleObjects[ id ][ slot ][object_z] >= v_size[2] || -v_size[2] >= VehicleObjects[ id ][ slot ][object_z])) {
                    ShowPlayerFooter(playerid, "Posisi object terlal jauh dari body kendaraan.");
                    return 1;
                }
                VehicleObjects[ id ][ slot ][object_x] = value;
                GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
                Vehicle_ObjectUpdate(id, slot, 0);
                Vehicle_ObjectSave(id, slot);
                SendCustomMessage(playerid, "MODSHOP", "Vehicle object saved!");
            }
            // Y Position
            case 2: {
                if ((VehicleObjects[ id ][ slot ][object_x] >= v_size[0] || -v_size[0] >= VehicleObjects[ id ][ slot ][object_x]) || 
                (VehicleObjects[ id ][ slot ][object_y] >= v_size[1] || -v_size[1] >= VehicleObjects[ id ][ slot ][object_y]) ||
                (VehicleObjects[ id ][ slot ][object_z] >= v_size[2] || -v_size[2] >= VehicleObjects[ id ][ slot ][object_z])) {
                    ShowPlayerFooter(playerid, "Posisi object terlal jauh dari body kendaraan.");
                    return 1;
                }
                VehicleObjects[ id ][ slot ][object_y] = value;
                GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
                Vehicle_ObjectUpdate(id, slot, 0);
                Vehicle_ObjectSave(id, slot);
                SendCustomMessage(playerid, "MODSHOP", "Vehicle object saved!");
            }
            // Z Position
            case 3: {
                if ((VehicleObjects[ id ][ slot ][object_x] >= v_size[0] || -v_size[0] >= VehicleObjects[ id ][ slot ][object_x]) || 
                (VehicleObjects[ id ][ slot ][object_y] >= v_size[1] || -v_size[1] >= VehicleObjects[ id ][ slot ][object_y]) ||
                (VehicleObjects[ id ][ slot ][object_z] >= v_size[2] || -v_size[2] >= VehicleObjects[ id ][ slot ][object_z])) {
                    ShowPlayerFooter(playerid, "Posisi object terlal jauh dari body kendaraan.");
                    return 1;
                }
                VehicleObjects[ id ][ slot ][object_z] = value;
                GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
                Vehicle_ObjectUpdate(id, slot, 0);
                Vehicle_ObjectSave(id, slot);
                SendCustomMessage(playerid, "MODSHOP", "Vehicle object saved!");
            }
            // RX Position
            case 4: {
                if ((VehicleObjects[ id ][ slot ][object_x] >= v_size[0] || -v_size[0] >= VehicleObjects[ id ][ slot ][object_x]) || 
                (VehicleObjects[ id ][ slot ][object_y] >= v_size[1] || -v_size[1] >= VehicleObjects[ id ][ slot ][object_y]) ||
                (VehicleObjects[ id ][ slot ][object_z] >= v_size[2] || -v_size[2] >= VehicleObjects[ id ][ slot ][object_z])) {
                    ShowPlayerFooter(playerid, "Posisi object terlal jauh dari body kendaraan.");
                    return 1;
                }
                VehicleObjects[ id ][ slot ][object_rx] = value;
                GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
                Vehicle_ObjectUpdate(id, slot, 0);
                Vehicle_ObjectSave(id, slot);
                SendCustomMessage(playerid, "MODSHOP", "Vehicle object saved!");
            }
            // RY Position
            case 5: {
                if ((VehicleObjects[ id ][ slot ][object_x] >= v_size[0] || -v_size[0] >= VehicleObjects[ id ][ slot ][object_x]) || 
                (VehicleObjects[ id ][ slot ][object_y] >= v_size[1] || -v_size[1] >= VehicleObjects[ id ][ slot ][object_y]) ||
                (VehicleObjects[ id ][ slot ][object_z] >= v_size[2] || -v_size[2] >= VehicleObjects[ id ][ slot ][object_z])) {
                    ShowPlayerFooter(playerid, "Posisi object terlal jauh dari body kendaraan.");
                    return 1;
                }
                VehicleObjects[ id ][ slot ][object_ry] = value;
                GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
                Vehicle_ObjectUpdate(id, slot, 0);
                Vehicle_ObjectSave(id, slot);
                SendCustomMessage(playerid, "MODSHOP", "Vehicle object saved!");
            }
            // RZ Position
            case 6: {
                if ((VehicleObjects[ id ][ slot ][object_x] >= v_size[0] || -v_size[0] >= VehicleObjects[ id ][ slot ][object_x]) || 
                (VehicleObjects[ id ][ slot ][object_y] >= v_size[1] || -v_size[1] >= VehicleObjects[ id ][ slot ][object_y]) ||
                (VehicleObjects[ id ][ slot ][object_z] >= v_size[2] || -v_size[2] >= VehicleObjects[ id ][ slot ][object_z])) {
                    ShowPlayerFooter(playerid, "Posisi object terlal jauh dari body kendaraan.");
                    return 1;
                }
                VehicleObjects[ id ][ slot ][object_rz] = value;
                GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
                Vehicle_ObjectUpdate(id, slot, 0);
                Vehicle_ObjectSave(id, slot);
                SendCustomMessage(playerid, "MODSHOP", "Vehicle object saved!");
            }
        }
    }
    return 1;
}

Dialog:objectText(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject];

    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, objectTextName, DIALOG_STYLE_INPUT, "Change Text ...", "Masukkan teks untuk mengubah teks pada kendaraan.\nTeks minimal 0 - 128 karakter.", "Set", "Back");
            case 1: Dialog_Show(playerid, objectFontColor, DIALOG_STYLE_INPUT, "Font Color", color_string, "Set", "Back");
            case 2: {
                new fonts[256];
                for (new i; i < sizeof(FontNames); i++) {
					strcat(fonts,FontNames[i],sizeof(fonts));
					strcat(fonts,"\n",sizeof(fonts));
				}
                strcat(fonts,"Custom",sizeof(fonts));
                if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] >= 2) Dialog_Show(playerid, objectFontName, DIALOG_STYLE_LIST, "Font Name", fonts, "Set", "Back");
                else Dialog_Show(playerid, objectFontName, DIALOG_STYLE_LIST, "Font Name", object_font, "Set", "Back");
            }
            case 3: Dialog_Show(playerid, objectFontSize, DIALOG_STYLE_INPUT, "Font Size", "Masukkan ukuran tulisan, ukuran minimal 1 dan maksimal 255.\nPenyalahgunaan akan mendapat sanksi berupa "RED"BANNED.", "Set", "Back");
        }
    }
    else Dialog_Show(playerid, VACCSE, DIALOG_STYLE_LIST, "Vehicle Accesories > Edit", "%s\nEdit Position\nRemove From Vehicle", "Select", "Back", VehicleObjects[id][slot][object_type] == OBJECT_TYPE_BODY ? ("Set Color") : ("Edit Text"));
    return 1;
}

Dialog:objectTextName(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject];

    if(response)
    {
        if(strlen(inputtext) < 0 || strlen(inputtext) > 128)
            return Dialog_Show(playerid, objectTextName, DIALOG_STYLE_INPUT, "Change Text ...", "Masukkan teks untuk mengubah teks pada kendaraan.\nTeks minimal 0 - 128 karakter.", "Set", "Close");

        FixText(inputtext);
        format(VehicleObjects[id][slot][object_text], 128, ColouredText(inputtext));
        GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
        Vehicle_ObjectUpdate(id, slot, 0);
        Vehicle_ObjectSave(id, slot);

        Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    }
    else Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    return 1;
}

Dialog:objectFontColor(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject],
        color = strval(inputtext);

    if(response)
    {
        if(!(0 <= color <= sizeof(ColorList)-1))
            return Dialog_Show(playerid, objectFontColor, DIALOG_STYLE_INPUT, "Font Color", color_string, "Set", "Close");

        VehicleObjects[id][slot][object_fontcolor] = color;
        GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
        Vehicle_ObjectUpdate(id, slot, 0);
        Vehicle_ObjectSave(id, slot);

        Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    }
    else Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    return 1;
}

Dialog:objectFontName(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject];

    if(response)
    {
        if (listitem < sizeof(FontNames)) {
            format(VehicleObjects[id][slot][object_fonts], 32, inputtext);
            GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);

            Vehicle_ObjectUpdate(id, slot, 0);
            Vehicle_ObjectSave(id, slot);

            Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
        } else {
            Dialog_Show(playerid, objectCustomFontName, DIALOG_STYLE_INPUT, "Custom Font Name", "Input font name:", "Input", "Back");
        }
    }
    else Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    return 1;
}

Dialog:objectCustomFontName(playerid, response, listitem, inputtext[]) {
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject];

    if (response) {
        if (isnull(inputtext))
            return SendErrorMessage(playerid, "Invalid input!");

        format(VehicleObjects[id][slot][object_fonts], 32, inputtext);
        GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);

        Vehicle_ObjectUpdate(id, slot, 0);
        Vehicle_ObjectSave(id, slot);

        Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    } else Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    return 1;
}

Dialog:objectFontSize(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject];

    if(response)
    {
        if(strval(inputtext) < 1 || strval(inputtext) > 255)
            return Dialog_Show(playerid, objectFontSize, DIALOG_STYLE_INPUT, "Font Size", "Masukkan ukuran tulisan, ukuran minimal 1 dan maksimal 255.\nPenyalahgunaan akan mendapat sanksi berupa "RED"BANNED.", "Set", "Close");

        VehicleObjects[id][slot][object_fontsize] = strval(inputtext);
        GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);

        Vehicle_ObjectUpdate(id, slot, 0);
        Vehicle_ObjectSave(id, slot);

        Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    }
    else Dialog_Show(playerid, objectText, DIALOG_STYLE_TABLIST_HEADERS, "Edit Text", "Option\tData\nChange\t%s\nFont Color\t{%06x}%d\nFont Name\t%s\nFont Size\t%d", "Select", "Back", VehicleObjects[id][slot][object_text], ColorList[VehicleObjects[id][slot][object_fontcolor]] >>> 8, VehicleObjects[id][slot][object_fontcolor], VehicleObjects[id][slot][object_fonts], VehicleObjects[id][slot][object_fontsize]);
    return 1;
}

Dialog:v_object_color(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject];

    if(response)
    {
        new col1, col2;

        GetVehicleColor(VehicleData[id][cVehicle], col1, col2);
        
        PlayerTemp[playerid][temp_colindex] = listitem;
        PlayerTemp[playerid][temp_col1] = col1;
        PlayerTemp[playerid][temp_col2] = col2;

        Dialog_Show(playerid, v_object_c_option, DIALOG_STYLE_LIST, "Select Option", "Original Color\n{%06x}Veh Color 1\n{%06x}Veh Color 2\n"WHITE"Custom Color", "Select", "Back", ColorList[col1] >>> 8, ColorList[col2] >>> 8);
    }
    else Dialog_Show(playerid, VACCSE, DIALOG_STYLE_LIST, "Vehicle Accesories > Edit", "%s\nEdit Position\nRemove From Vehicle", "Select", "Back", VehicleObjects[id][slot][object_type] == OBJECT_TYPE_BODY ? ("Set Color") : ("Edit Text"));
    return 1;
}

Dialog:v_object_c_option(playerid, response, listitem, inputtext[])
{
    new slot = PlayerData[playerid][pVObjectList],
        id = PlayerData[playerid][pVObject],
        list = PlayerTemp[playerid][temp_colindex];

    if(response)
    {

        switch(listitem)
        {
            case 0: VehicleObjects[ id ][ slot ][ object_color ][ list ] = 1;
            case 1: VehicleObjects[ id ][ slot ][ object_color ][ list ] = PlayerTemp[playerid][temp_col1];
            case 2: VehicleObjects[ id ][ slot ][ object_color ][ list ] = PlayerTemp[playerid][temp_col2];                
            case 3: {
                Dialog_Show(playerid, VACCC, DIALOG_STYLE_INPUT, "Set Object Color", color_string, "Select", "Close");
                return 0;
            }
        }
        GiveMoney(playerid, -VEHICLE_OBJECT_EDIT_PRICE);
        Vehicle_ObjectColor(playerid, id, slot);
        Vehicle_ObjectUpdate(id, slot, 0);
        Vehicle_ObjectSave(id, slot);
    }
    else Dialog_Show(playerid, VACCSE, DIALOG_STYLE_LIST, "Vehicle Accesories > Edit", "%s\nEdit Position\nRemove From Vehicle", "Select", "Back", VehicleObjects[id][slot][object_type] == OBJECT_TYPE_BODY ? ("Set Color") : ("Edit Text"));
    return 1;
}

Dialog:VACCC(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new slot = PlayerData[playerid][pVObjectList],
            id = PlayerData[playerid][pVObject],
            list = PlayerTemp[playerid][temp_colindex],
            color = strval(inputtext);
        
        if(!(0 <= color <= sizeof(ColorList)-1))
        { 
            Dialog_Show(playerid, VACCC, DIALOG_STYLE_INPUT, "Set Object Color", color_string, "Select", "Close");
    
            return SendErrorMessage(playerid, "Invalid color ID.");
        }

        VehicleObjects[id][slot][object_color][list] = color;
    
        for(new mx = 0; mx != MAX_COLOR_MATERIAL; mx++) {
            SetDynamicObjectMaterial(VehicleObjects[id][slot][object_streamer], mx, VehicleObjects[id][slot][object_model], "none", "none", RGBAToARGB(ColorList[VehicleObjects[id][slot][object_color][mx]]));
        }
        Dialog_Show(playerid, VACCSE, DIALOG_STYLE_LIST, "Vehicle Accesories > Edit", "%s\nEdit Position\nRemove From Vehicle", "Select", "Back", VehicleObjects[id][slot][object_type] == OBJECT_TYPE_BODY ? ("Set Color") : ("Edit Text"));
    }
    return 1;
}

Dialog:VACCSA(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new slot = PlayerData[playerid][pVObjectList],
            id = PlayerData[playerid][pVObject];

        Vehicle_ObjectReset(id, slot, true);

        SendCustomMessage(playerid, "VACC","You have remove this object from this vehicle.");

        PlayerData[playerid][pVObject] = -1;
    }
    return 1;
}

Dialog:Help(playerid, response, listitem, inputtext[]) {
    if(response) {
        switch(listitem) {
            case 0: SendCustomMessage(playerid, "ACCOUNT", "/changepass, /properties, /showidcard, /levels.");
            case 1: 
            {
                SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Bank command:");
                SendCustomMessage(playerid,"/balance", "Memperlihatkan jumlah uang yang ada di bank.");
                SendCustomMessage(playerid,"/deposit", "Menyimpan uang di bank.");
                SendCustomMessage(playerid,"/withdraw", "Menarik uang yang ada di dalam sampanan bank.");
                SendCustomMessage(playerid,"/newrek", "Untuk membuat nomor rekening bank baru.");
            }
            case 2: SendCustomMessage(playerid, "BUSINESSES", "/buy, /abandon, /bm, /bizlock, /bshipment, /restock, /givemenu.");
            case 3: SendCustomMessage(playerid, "CHAT", "/s(hout), /l(ow), /me, /do, /lme, /ldo, /ame, /ado, /o(oc), /live.");
            case 4: {
                if(PlayerData[playerid][pFactionMod])
                    SendCustomMessage(playerid, "FACTION", "/createfaction, /editfaction, /destroyfaction.");

                if(PlayerData[playerid][pFaction] != -1)
                {
                    if (GetFactionType(playerid) == FACTION_GANG) {
                        SendCustomMessage(playerid, "FAMILY", "/online, /flocker, /f");
                    }

                    if (GetFactionType(playerid) != FACTION_GANG) {
                        SendCustomMessage(playerid, "FACTION", "/online, /flocker, /setunit, /mydutytime, /spawn, /despawn");
                    }

                    if(PlayerData[playerid][pFactionRank] >= FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
                        SendCustomMessage(playerid, "FACTION", "/finvite, /fremove, /frank, /offlineremove, /fmotd, /frankname, /rdutytime");

                    if(GetFactionType(playerid) == FACTION_POLICE) {
                        SendCustomMessage(playerid, "FACTION", "/tazer, /cuff, /uncuff, /drag, /detain, /mdc, /trace, /arrest, /dept, /seizeplant, /checktrunk, /friskhouse, /friskapart, /locktire, /givecarlic, /undercover, /destroypacket.");
                        SendCustomMessage(playerid, "FACTION", "/ticket, /spike, /roadblock, /fingerprint, /impound, /revokeweapon, /icp(installcustomplate).");
                        SendCustomMessage(playerid, "FACTION", "/take, /kickdoor, /siren, /callsign, /checkseatbelt, /grantweapon, /revokelumber, /grantlumber, /granttrucker, /revoketrucker, /grantboat, /revokeboat, /grantflying, /revokeflying");
                        SendCustomMessage(playerid, "FACTION", "/board, /f(action)r(adio), /odept, /(o)database /charge, /speedcammsg, /backup");
                    }
                    else if(GetFactionType(playerid) == FACTION_NEWS)
                        SendCustomMessage(playerid, "FACTION", "/broadcast, /bc, /inviteguest, /removeguest, /board, /f(action)r(adio), /odept.");

                    else if(GetFactionType(playerid) == FACTION_MEDIC) {
                        SendCustomMessage(playerid, "FACTION", "/dept, /bandage, /loadinjured, /dropinjured /r(adio), /odept, /cure, /database.");
                        SendCustomMessage(playerid, "FACTION", "/inspect, /takepills, /backup.");
                    }
                    else if(GetFactionType(playerid) == FACTION_GOV) {
                        SendCustomMessage(playerid, "FACTION", "/seal ,/unseal, /dept, /twithdraw, /tdeposit, /board, /f(action)r(adio), /odept, /database.");
                        SendCustomMessage(playerid, "FACTION", "/givelicenses, /backup.");
                    }
                    else if(GetFactionType(playerid) == FACTION_SAGS)
                        SendCustomMessage(playerid, "FACTION", "");
                }
                else SendClientMessageEx(playerid, X11_GREY_60,"You're not in any faction");
            }
            case 5: SendCustomMessage(playerid, "FISHING","/fish, /cancelfish, /myfish, /sellfish, /buyrod, /buybait.");
            case 6: {
                SendCustomMessage(playerid,"FORAGER","/sellforage");
                SendCustomMessage(playerid,"FORAGER","Tekan huruf 'N' untuk memetik orange/tomat pada pohonnya.");
            }
            case 7: {
                SendCustomMessage(playerid, "GENERAL", "/stats, /report, /atalk, /acc, /inventory, /switch, /seatbelt, /helmet, /createidcard.");
                SendCustomMessage(playerid, "GENERAL", "/approve, /sell, /cook, /vest, /usebandage, /phone, /tickets, /payticket, /unlocktire, /buyplate, /vote.");
                SendCustomMessage(playerid, "GENERAL", "/id, /call, /hangup, /text, /reply, /factions, /crates, /fill, /pay, /gps, /usedrug.");
                SendCustomMessage(playerid, "GENERAL", "/animhelp, /boombox, /channel, /disablecp, /stopanim, /weapons, /weapon, /attachwep.");
                SendCustomMessage(playerid, "GENERAL", "/shakehand, /showlicense, /frisk, /givegun, /picklock, /listafk, /bansrecord, /delays, /togboombox.");
                SendCustomMessage(playerid, "GENERAL", "/usepills, /givepills, /damages, /examine, /showvehlic, /buymaterials, /refuel, /loadcomponent, /unloadcomponent");
                SendCustomMessage(playerid, "GENERAL", "/usegold, /giftcode, /accent, /propose, /divorce, /togauto, /myhealth, /cancel.");
            }
            case 8: {
                SendCustomMessage(playerid, "HOUSES", "/buy, /hm, /doorbell, /hlock, /sell");
            }
            case 9: {
                SendClientMessageEx(playerid, X11_GREEN_YELLOW, "Perintah pekerjaan yang tersedia:");
                if (GetPlayerJob(playerid, 0) == JOB_COURIER || GetPlayerJob(playerid, 1) == JOB_COURIER)
                {
                    SendCustomMessage(playerid,"/cargo", "Membeli box, menjual, meletakkan, dan sebagainya dan dapat di gunakan dengan 1 perintah utama yaitu '/cargo'.");
                    SendCustomMessage(playerid,"/shipments", "Membantu melihat bisnis yang akan di restock (hanya dapat di lakukan dalam kendaraan kerja).");
                    SendCustomMessage(playerid,"/cancelshipment", "Menolak shipment yang telah di pilih sebelumnya.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_MECHANIC || GetPlayerJob(playerid, 1) == JOB_MECHANIC)
                {
                    SendCustomMessage(playerid,"/jobduty", "Memulai maupun berhenti melakukan pekerjaan. (hanya dapat di lakukan dalam mechanic center)");
                    SendCustomMessage(playerid,"/mechanicmenu", "Memperlihatkan menu mekanik yang akan di kerjakan seperti repair, fix body, repair tires dan lainnya.");
                    SendCustomMessage(playerid,"/paintcar", "Mengganti warna kendaraan.");
                    SendCustomMessage(playerid,"/acceptcall", "Melihat penelpon yang membutuhkan jasa mekanik (dapat di lakukan jika job-duty).");
                    SendCustomMessage(playerid,"/repairgymequip", "Untuk memperbaiki peralatan GYM yang rusak.");
                    SendCustomMessage(playerid,"NOTE", "Kendaraan tow dapat di sewa ataupun di beli, gunakan perintah '"YELLOW"/v tow"WHITE"' untuk menggunakannya.");
                    SendCustomMessage(playerid,"NOTE", "Jika Anda job-duty dan meninggalkan mechanic center akan otomatis off-duty.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_TAXI || GetPlayerJob(playerid, 1) == JOB_TAXI)
                {
                    SendCustomMessage(playerid,"/jobduty", "Memulai maupun berhenti melakukan pekerjaan.");
                    SendCustomMessage(playerid,"/acceptcall", "Melihat penelpon yang membutuhkan jasa TAXI (dapat di lakukan jika job-duty).");
                }
                if (GetPlayerJob(playerid, 0) == JOB_FOOD_VENDOR || GetPlayerJob(playerid, 1) == JOB_FOOD_VENDOR)
                {
                    SendCustomMessage(playerid,"/sellfood", "Menjual berbagai makanan, hanya dapat dilakukan dalam mobil truck makanan.");
                    SendCustomMessage(playerid,"/buyfood", "Membeli stock makanan dan di letakkan dalam kendaraan.");
                    SendCustomMessage(playerid,"/checkfood", "Memeriksa stock yang tersedia dalam kendaraan.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_ARMS_DEALER || GetPlayerJob(playerid, 1) == JOB_ARMS_DEALER)
                {
                    SendCustomMessage(playerid,"/creategun", "Membuat senjata, dapat dilakukan di Blackmarket.");
                    SendCustomMessage(playerid,"/createammo", "Menambah amunisi dari senjata yang di miliki.");
                    SendCustomMessage(playerid,"/repairgun", "Memperbaiki senjata yang rusak.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_LUMBERJACK || GetPlayerJob(playerid, 1) == JOB_LUMBERJACK)
                {
                    SendCustomMessage(playerid,"/buychainsaw", "Anda diharuskan untuk membeli chainwas terlebih dahulu, belilah di job point lumberjack seharga "GREEN"$50.");
                    SendCustomMessage(playerid,"/loadtree", "Memasukkan pohon yang telah di tebang ke dalam mobil, mobil dapat di beli ataupun di sewa.");
                    SendCustomMessage(playerid,"/unloadtree", "Menjual pohon hasil tebang pada job point lumberjack dan di hargai "GREEN"$50 "WHITE"per batang pohon.");
                    SendCustomMessage(playerid,"NOTE", "Anda dapat dengan mudah mencari pohon yang tersebar dengan menggunakan perintah '/gps > Find Tree'.");
                    SendCustomMessage(playerid,"NOTE", "Dilarang menyalah gunakan chainsaw untuk berbuat yang melanggar rules, jika ketahuan akan di "RED"BANNED "WHITE"selama "YELLOW"3 hari.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_SMUGGLER || GetPlayerJob(playerid, 1) == JOB_SMUGGLER) {
                    SendCustomMessage(playerid,"/findpacket", "Untuk mencari packet yang tersedia.");
                    SendCustomMessage(playerid,"/pickpacket", "Untuk mengambil packet yang jatuh.");
                    SendCustomMessage(playerid,"/getpacket", "Untuk mengambil packet.");
                    SendCustomMessage(playerid,"/droppacket", "Untuk menaruh packet ke tanah.");
                    SendCustomMessage(playerid,"/storepacket", "Untuk menyetor packet ke penerima.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_FARMER || GetPlayerJob(playerid, 1) == JOB_FARMER) {
                    SendCustomMessage(playerid, "/sellplant", "Untuk menjual hasil panen");
                    SendCustomMessage(playerid, "/buyseeds", "Untuk membeli bibit-bibit panen");
                    SendCustomMessage(playerid, "/plant", "Untuk memulai memanen (harus di public farm lokasi: Flint Range)");
                    SendCustomMessage(playerid, "/harvest", "Untuk mengambil hasil panen");
                    SendCustomMessage(playerid, "/storeplant", "Untuk memasukkan hasil panen ke bak mobil");
                    SendCustomMessage(playerid, "/unloadplant", "Untuk menjual semua hasil panen yang ada di bak mobil");
                }
                if (GetPlayerJob(playerid, 0) == JOB_BUILDER || GetPlayerJob(playerid, 1) == JOB_BUILDER) {
                    SendCustomMessage(playerid, "/dyoh", "Untuk mendekorasi interior rumah");
                    SendCustomMessage(playerid, "/searchtexture", "Untuk melihat texture yang tersedia di server");
                    SendCustomMessage(playerid, "/buycomponent", "Untuk membeli component pada component warehouse.");
                }
                if (GetPlayerJob(playerid, 0) == JOB_NONE && GetPlayerJob(playerid, 1) == JOB_NONE) SendErrorMessage(playerid, "You are unemployed at the moment.");
            }
            case 10: SendCustomMessage(playerid, "PROPERTY", "/buy, /sell, /abandon, /housecmds, /bizcmds, /garage, /farmcmds, /furnstorecmds, /flatcmds.");
            case 11: {
                SendClientMessageEx(playerid,COLOR_CLIENT,"|__________________ Vehicle Commands __________________|");
                SendCustomMessage(playerid, "VEHICLE", "/showlicenses, /showvehlic");
                SendCustomMessage(playerid,"VEHICLE", "/v [engine] [lights] [hood] [trunk] [find] [tow] [radio] [myveh] [acc] [window] [objectrefresh]");
                SendCustomMessage(playerid,"VEHICLE", "/v [sell] [untow] [speedometer] [lock] [findrentcar] [unrentveh] [storage] [unmod] [keys] [neon] [unstuck]");
                SendCustomMessage(playerid,"VEHICLE", "Press "RED"[Y] "WHITE" inside the car to interact the vehicle.");
            }
            case 12: SendCustomMessage(playerid, "WORKSHOP", "/workshopmenu (/wm), /abandon, /sell.");
            case 13: 
            {
                SendCustomMessage(playerid, "KEYS", ""/*"Y (on foot): "WHITE"Untuk animasi mengangkat tangan.*/ ""YELLOW"Y (dalam kendaraan): "WHITE"Untuk membuka menu kendaraan.");
                SendCustomMessage(playerid, "KEYS", ""YELLOW"C Tahan: "WHITE"Untuk animasi duduk. "YELLOW"C + SPACE: "WHITE"Untuk animasi mengangkat tangan.");
                SendCustomMessage(playerid, "KEYS", ""YELLOW"H: "WHITE"Untuk masuk/keluar entrance/business/dan lainnya. "YELLOW"C (jongkok) + N: "WHITE"Untuk mengambil item yang ada di dekatmu.");
            }
            case 14: Dialog_Show(playerid, SidejobGuide, DIALOG_STYLE_LIST, "Select Sidejob", "Trashmaster\nSweeper\nBus", "Select", "Close");
            case 15: SendCustomMessage(playerid, "RENTAL", "/rentveh, /unrentveh");
            case 16: SendCustomMessage(playerid, "GARAGE", "/garage");
            case 17: SendCustomMessage(playerid, "FURNSTORE", "/buyfurnstore, /fsm, /furnlock, /sell");
            case 18: SendCustomMessage(playerid, "FLAT", "/buyflat, /flatmenu, /flock, /storeveh, /takeveh, /sell");
            case 19: {
                SendCustomMessage(playerid, "/vip", "Untuk melihat benefit yang didapatkan jika Anda berdonasi.");
                SendCustomMessage(playerid, "/vipcontact", "Untuk melihat daftar contact untuk berdonasi.");
                SendCustomMessage(playerid, "/vipchat", "Untuk melakukan chatting ke seluruh player VIP.");
                SendCustomMessage(playerid, "/customooc", "Untuk mengubah custom rank pada global OOC chat.");
                SendCustomMessage(playerid, "/usegold", "Untuk membeli beberapa fitur menggunakan Gold Points.");
                SendCustomMessage(playerid, "/goldstore", "Untuk melihat harga Gold Points.");
            }
        }
    }
    return 1;
}

Dialog:SidejobGuide(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Trashmaster Sidejob", ""WHITE"Pekerjaan trashmaster bertujuan untuk membersikhan sampah yang ada dikota ini.\n\
                Anda bisa menemukan pekerjaan dengan menggunakan GPS (/gps).\n\n\
                "COL_LIGHTGREEN"Langkah-langkah:"WHITE"\n\
                * Pergi ke lokasi kerja.\n\
                * Baca dialog yang di berikan untuk melihat peraturan sebelum memulai pekerjaan.\n\
                * Jika setuju dengan aturan, kendarai mobil ke arah yang di tandai di radar map anda.\n\
                * Anda akan melihat tampilan di sebelah kiri layar, tampilan itu sebagai indikator (bantuan)-\n  \
                  untuk melihat jumlah sampah yang ada di mobil anda.\n\
                * Kumpul lah sampah sebanyak mungkin, setelah itu bawa kembali ke lokasi kerja untuk-\n  \
                  menukarkan dengan bonus.\n\n\
                "COL_LIGHTGREEN"Perintah:"WHITE"\n\
                * /takebag: mengambil sampah dan menaruhnya dimobil.\n\
                * /dumpgarbage: menukarkan sampah untuk mendapatkan bonus.\n\n\
                "COL_LIGHTGREEN"Penting:"WHITE"\n\
                * Saat berada dalam mobil, jangan coba untuk turun sebelum anda menghentikan pekerjaan-\n  \
                  itu akan membuat anda gagal dan tidak mendapatkan bonus.\n\
                * Anda akan delay 15 menit setelah melakukan pekerjaan ini, termasuk gagal saat bekerja.", "Close", "");
        }
    }
    return 1;
}

Dialog:DialogResult(playerid, response, listitem, inputtext[]) {
    if(response) {
        new string[225],
            i = strval(inputtext),
            text[128],
            header[25];

        strunpack(text, ReportData[i][rText]);
        format(header, sizeof(header), ""COL_LIGHTRED"Report Id: #%d", i);
        format(string,sizeof(string),""WHITE"Reported: "COL_DEPARTMENT"%s\n"WHITE"Reason: "COL_DEPARTMENT"%s.", ReturnName(ReportData[i][rPlayer]), text);
        if (AccountData[playerid][pAdmin]) Dialog_Show(playerid, DialogAcceptReport, DIALOG_STYLE_MSGBOX,header,string,"Respond","Back"), SetPVarInt(playerid, "holdingReportID", i);
        else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX,header,string,"Close","");
    }
    return 1;
}

Dialog:DialogAcceptReport(playerid, response, listitem, inputtext[]) {
    if (response) {
        new reportid = GetPVarInt(playerid, "holdingReportID");

        cmd_ar(playerid, sprintf("%d", reportid));
    } else cmd_reports(playerid, "\0"), DeletePVar(playerid, "holdingReportID");
    return 1;
}

Dialog:DialogAsks(playerid, response, listitem, inputtext[]) {
    if (response) {
        new string[225],
            i = strval(inputtext),
            text[128],
            header[25];
        
        strunpack(text, AskData[i][askQuestion]);
        format(header, sizeof(header), ""COL_LIGHTRED"Ask Id: #%d", i);
        format(string,sizeof(string),""WHITE"Issuer: "COL_DEPARTMENT"%s\n"WHITE"Question: "COL_DEPARTMENT"%s.", ReturnName(AskData[i][askPlayer]), text);
        SetPVarInt(playerid, "holdingAskPlayer", AskData[i][askPlayer]);
        Dialog_Show(playerid, DialogAns, DIALOG_STYLE_INPUT,header,string,"Answer","Back");
    }
    return 1;
}

Dialog:DialogAns(playerid, response, listitem, inputtext[]) {
    if (response) {
        new issuerid = GetPVarInt(playerid, "holdingAskPlayer");

        if (!isnull(inputtext)) {
            new params[128];
            format(params, sizeof(params), "%d %s", issuerid, inputtext);
            cmd_ans(playerid, params);
        }
    } else cmd_asks(playerid, "\0"), DeletePVar(playerid, "holdingAskPlayer");
    return 1;
}

/*Dialog:LockedCars(playerid, response, listitem, inputtext[])
{
    return 1;
}*/

Dialog:GotoCars(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if (listitem != -1)
        {
            new id = ListedVehicles[playerid][listitem], Float:fX, Float:fY, Float:fZ;

            if (VehicleData[id][cImpounded] != -1) return SendErrorMessage(playerid, "Can't go to impounded vehicle.");
            if (IsVehicleOnGarage(id)) return SendErrorMessage(playerid, "Cannot go to vehicle inside garage!");
            if (VehicleData[id][cInsideInsurance]) return SendErrorMessage(playerid, "Cannot go to vehicle inside insurance!");

            GetVehiclePos(VehicleData[id][cVehicle], fX, fY, fZ);
            SetPlayerPosEx(playerid, fX, fY, fZ);
            SetPlayerInterior(playerid, VehicleData[id][cInt]);
            SetPlayerVirtualWorld(playerid, VehicleData[id][cVw]);
            SendCustomMessage(playerid, "TELE", "You have been teleported vehicle id: "YELLOW"%d",VehicleData[id][cVehicle]);
        }
    }
    return 1;
}

Dialog:FurnitureHouse(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPlayerPosEx(playerid, houseArray[listitem][hX], houseArray[listitem][hY], houseArray[listitem][hZ]);
        SetPlayerFacingAngle(playerid, houseArray[listitem][hAngle]);
        SetPlayerInterior(playerid, 7);

        SendServerMessage(playerid,"You have teleport to %s", inputtext);
    }
    return 1;
}

Dialog:PemilihanMobil(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                new
                    query[128],
                    Cache: dealer,
                    id = PlayerData[playerid][pDealerEdit];
                
                mysql_format(g_iHandle, query, sizeof(query), "SELECT `Model`, `Price` FROM `dealervehicle` WHERE ID = '%d'", PlayerData[playerid][pDealerVehicle]);
                dealer = mysql_query(g_iHandle, query);
                
                new rows = cache_num_rows();
                
                if(rows)
                {
                    new model,
                        price;
                        
                    cache_get_value_int(0, "Model", model);
                    cache_get_value_int(0, "Price", price);
                    
                    if(GetMoney(playerid) < price)
                        return SendErrorMessage(playerid, "You do not have enough cash to buy this car!.");
                    
                    if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 3) {
                        if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE+1)
                            return SendErrorMessage(playerid, "You has already owns the maximum amount of cars.");
                    } else if (PlayerData[playerid][pVipTime] > 0 && PlayerData[playerid][pVip] == 4) {
                        if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE+2)
                            return SendErrorMessage(playerid, "You has already owns the maximum amount of cars.");
                    } else {
                        if(Vehicle_GetCount(playerid) >= MAX_PLAYER_VEHICLE)
                            return SendErrorMessage(playerid, "You has already owns the maximum amount of cars.");
                    }

                    GiveMoney(playerid, -price);

                    SetPlayerWaypoint(playerid, "Vehicle Spawn", DealershipData[id][dSpawnPos][0],DealershipData[id][dSpawnPos][1],DealershipData[id][dSpawnPos][2]);
                    new veh = Vehicle_Create(PlayerData[playerid][pID], model, DealershipData[id][dSpawnPos][0],DealershipData[id][dSpawnPos][1],DealershipData[id][dSpawnPos][2], DealershipData[id][dSpawnPos][3], random(127), random(127), 0, "NO HAVE");

                    if (veh == cellmin)
                        return SendErrorMessage(playerid, "The server has reached the limit for dynamic vehicles.");

                    SendServerMessage(playerid, "Anda telah membeli kendaraan %s (%s) dari dealership.", GetVehicleNameByModel(model), FormatNumber(price));
                    SendServerMessage(playerid, "Pergi ke checkpoint di map mu untuk mengambil kendaraan yang telah di beli.");

                    DealershipData[id][dStock] -= 1;
                }
                cache_delete(dealer);
            }
            case 1:
            {
                SendClientMessage(playerid, -1, "This feature is currently disabled.");
                //cmd_buycar(playerid, "\0");
            }
            case 2:
            {
                Dialog_Show(playerid, EditDealerCar, DIALOG_STYLE_LIST, "Edit Vehicle Dealer","Model\nPrice\nMove\nDelete","Next","Close");
            }
        }
    }
    return 1;
}

Dialog:EditDealerCar(playerid, response, listitem, inputtext[])
{
    new string[128];
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, EditDealer, DIALOG_STYLE_INPUT, ""YELLOW"DEALER: "WHITE"Edit model", "Masukkan model kendaraan.","Done","Close"), SetPVarInt(playerid, "EditType",1);
            case 1: Dialog_Show(playerid, EditDealer, DIALOG_STYLE_INPUT, ""YELLOW"DEALER: "WHITE"Edit price", "Masukkan harga kendaraan.","Done","Close"), SetPVarInt(playerid, "EditType",2);
            case 2: Dialog_Show(playerid, EditDealer, DIALOG_STYLE_INPUT, ""YELLOW"DEALER: "WHITE"Move to dealer", "Masukkan id dealer untuk memindahkan kendaraan dealer.","Done","Close"), SetPVarInt(playerid, "EditType",3);
            case 3:
            {
                format(string, sizeof(string), "DELETE FROM `dealervehicle` WHERE `ID`='%d'", PlayerData[playerid][pDealerVehicle]);
                mysql_tquery(g_iHandle, string);
                SendClientMessageEx(playerid, X11_YELLOW_2, "DEALERSHIP: "WHITE"You've remove vehicle dealership (db-id: %d | dealer-id: %d)", PlayerData[playerid][pDealerVehicle], PlayerData[playerid][pDealerEdit]);
            }
        }
    }
    return 1;
}

Dialog:EditDealer(playerid, response, listitem, inputtext[])
{
    new string[128];
    if(response)
    {
        switch(GetPVarInt(playerid, "EditType"))
        {
            case 1:
            {
                format(string, sizeof(string), "UPDATE `dealervehicle` SET `Model` = '%d' WHERE `ID`='%d'", strval(inputtext), PlayerData[playerid][pDealerVehicle]);
                SendClientMessageEx(playerid, X11_LIGHTBLUE, "DEALERSHIP: "WHITE"You've edit vehicle dealership (Database ID: %d) model to (ID: %d)", PlayerData[playerid][pDealerVehicle], strval(inputtext));
            }
            case 2:
            {
                format(string, sizeof(string), "UPDATE `dealervehicle` SET `Price` = '%d' WHERE `ID`='%d'", strval(inputtext), PlayerData[playerid][pDealerVehicle]);
                SendClientMessageEx(playerid, X11_LIGHTBLUE, "DEALERSHIP: "WHITE"You've edit vehicle dealership (Database ID: %d) price to (ID: %d)", PlayerData[playerid][pDealerVehicle], strval(inputtext));
            }
            case 3:
            {
                if(!DealershipData[strval(inputtext)][dExists])
                    return SendErrorMessage(playerid, "Invalid dealership id!.");
                    
                format(string, sizeof(string), "UPDATE `dealervehicle` SET `Dealer` = '%d' WHERE `ID`='%d'", strval(inputtext), PlayerData[playerid][pDealerVehicle]);
                SendClientMessageEx(playerid, X11_LIGHTBLUE, "DEALERSHIP: "WHITE"You've been move vehicle dealership (Database ID: %d) from dealer (ID: %d) to dealer (ID: %d)", PlayerData[playerid][pDealerVehicle], PlayerData[playerid][pDealerEdit], strval(inputtext));
            }
        }
        mysql_tquery(g_iHandle, string);
    }
    return 1;
}

Dialog:BM_WeaponMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            selectCategory[playerid] = index;
            ShowWeapons(playerid);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_Category(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, BM_Category, DIALOG_STYLE_INPUT, "Add Category", "Nama tidak boleh kosong\nMaksukkan nama kategory di bawah ini:", "Create", "Close");

        new Cache:check;
        check = mysql_query(g_iHandle, sprintf("SELECT `Name` FROM `category` WHERE `Name`='%s'", inputtext));

        if(!cache_num_rows())
        {
            mysql_tquery(g_iHandle, sprintf("INSERT INTO `category` (`ID`, `Name`) VALUES (NULL, '%s')", SQL_ReturnEscaped(inputtext)));
            SendServerMessage(playerid, "Sukses melakukan penambahan kategori pada marketplace (%s).", inputtext);
        }
        else SendErrorMessage(playerid, "Kategori sudah terdaftar dengan nama yang sama.");

        cache_delete(check);
    }
    return 1;
}

Dialog:BM_Weaplist(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new weaponid = listitem+1;
        if(weaponid >= 19 && weaponid < 22)
        {
            SendErrorMessage(playerid, "Invalid weapon.");
            ShowWeaponList(playerid);
            return 1;
        }

        SetPVarInt(playerid, "addingWeaponID", weaponid);
        Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Berapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Close", ReturnWeaponName(weaponid));
    }
    return 1;
}

Dialog:BM_AddAmmo(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Amunisi harus di isi.\n\nBerapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")));
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Masukkan angka tidak huruf maupun simbol.\n\nBerapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")));
        SetPVarInt(playerid, "addingWeaponAmmo", strval(inputtext));
        Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Harga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), strval(inputtext));
    }
    else ShowWeaponList(playerid);
    return 1;
}

Dialog:BM_Price(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Price can't be null\nHarga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Price must be numeric\nHarga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
        SetPVarInt(playerid, "addingWeaponPrice", strval(inputtext));
        Dialog_Show(playerid, BM_Type, DIALOG_STYLE_LIST, "Add Weapon > Type", "Normal Player\nOfficial Family\nVarified Member", "Next", "Back");
    }
    else Dialog_Show(playerid, BM_AddAmmo, DIALOG_STYLE_INPUT, "Add Weapon > Ammo", ""WHITE"Berapa banyak amunisi untuk senjata "YELLOW"%s"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")));
    return 1;
}

Dialog:BM_Type(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "addingWeaponType", listitem);
        Dialog_Show(playerid, BM_Day, DIALOG_STYLE_LIST, "Add Weapon > Day", ""RED"Minggu\n"WHITE"Senin\nSelasa\nRabu\nKamis\nJum'at\nSabtu", "Next", "Back");
    }
    else Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Harga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
    return 1;
}

Dialog:BM_Day(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        SetPVarInt(playerid, "addingWeaponDay", listitem+1);
        ShowCategories(playerid, 3);
    }
    else Dialog_Show(playerid, BM_Type, DIALOG_STYLE_LIST, "Add Weapon > Type", "Normal Player\nOfficial Family\nVarified Member", "Next", "Back");
    return 1;
}

Dialog:BM_ChooseCategory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            new 
                weapon = GetPVarInt(playerid, "addingWeaponID"),
                ammo = GetPVarInt(playerid, "addingWeaponAmmo"),
                price = GetPVarInt(playerid, "addingWeaponPrice"),
                type = GetPVarInt(playerid, "addingWeaponType"),
                day = GetPVarInt(playerid, "addingWeaponDay"),
                query[255];

            format(query, sizeof(query), "INSERT INTO `weapons` (`WeaponID`, `Ammo`, `Price`, `Authority`, `Day`, `Category`, `Enable`) VALUES ('%d', '%d', '%d', '%d', '%d', '%d', '0')",
                weapon,
                ammo,
                price,
                type,
                day,
                index
            );
            mysql_tquery(g_iHandle, query);

            SendServerMessage(playerid, "Sukses meletakkan senjata ke dalam kategori.");
        }
    }
    else Dialog_Show(playerid, BM_Price, DIALOG_STYLE_INPUT, "Add Weapon > Price", ""WHITE"Harga untuk senjata "YELLOW"%s (%d)"WHITE":", "Next", "Back", ReturnWeaponName(GetPVarInt(playerid, "addingWeaponID")), GetPVarInt(playerid, "addingWeaponAmmo"));
    return 1;
}

Dialog:BM_RemoveCategory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `category` WHERE ID = '%d'", index));
            mysql_tquery(g_iHandle, sprintf("DELETE FROM `weapons` WHERE `Category` = '%d'", index));

            SendServerMessage(playerid, "Sukses melakukan penghapusan kategory \"%s\".", inputtext);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_RenameCategory(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            SetPVarInt(playerid, "renameCategory", index);
            Dialog_Show(playerid, "BM_RenameCategory1", DIALOG_STYLE_INPUT, "Rename Category",""WHITE"Category: %s\nMasukkan nama baru:", "Rename", "Close", inputtext);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_RenameCategory1(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) Dialog_Show(playerid, "BM_RenameCategory1", DIALOG_STYLE_INPUT, "Rename Category",""WHITE"Nama harus di isi\nMasukkan nama baru:", "Rename", "Close");
        mysql_tquery(g_iHandle, sprintf("UPDATE `category` SET Name='%s' WHERE ID=%d", inputtext, GetPVarInt(playerid, "renameCategory")));
        DeletePVar(playerid, "renameCategory");

        SendServerMessage(playerid, "Sukses menamai kategori dengan nama baru.");
    }
    return 1;
}

Dialog:BM_RemoveWeapon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new index = -1;

        if((index = Return_CategoryID(inputtext)) != -1)
        {
            selectCategory[playerid] = index;

            ShowWeapons(playerid, 1, 1);
        }
        else SendErrorMessage(playerid, "Anda memilih kategori yang salah");
    }
    return 1;
}

Dialog:BM_RemoveFinal(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new weapon, price, ammo, authority;
        if(Category_GetWeaponData(selectCategory[playerid], listitem, weapon, ammo, price, authority)) 
        {
            mysql_tquery(g_iHandle, sprintf("DELETE FROM weapons WHERE WeaponID='%d' AND Ammo='%d' AND Price='%d' AND Authority='%d' AND Category='%d'", weapon, ammo, price, authority, selectCategory[playerid]));
            selectCategory[playerid] = -1;
            SendServerMessage(playerid, "Weapon removed!");
        }
        else SendErrorMessage(playerid, "Tidak ada senjata dalam kategori ini.");
    }
    return 1;
}

Dialog:BM_BuyWeapon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        selectIndex[playerid] = listitem;

        new weapon, ammo, price, authority;
        if(Category_GetWeaponData(selectCategory[playerid], selectIndex[playerid], weapon, ammo, price, authority)) {
            if(price > GetMoney(playerid)) return SendErrorMessage(playerid, "Uang anda tidak cukup.");
            switch(authority)
            {
                case 1: 
                {
                    if(GetFactionType(playerid) != FACTION_GANG) 
                        return SendErrorMessage(playerid, "This weapon authority for official member.");
                }
                case 2:
                {
                    if(!PlayerData[playerid][pGunAuthority]) 
                        return SendErrorMessage(playerid, "This weapon authority for verified member.");
                }
            }

            switch(weapon)
            {
                case 1 .. 18, 46:
                {
                    GiveMoney(playerid, -price);
                    GivePlayerWeaponEx(playerid, weapon, ammo);

                    SendCustomMessage(playerid, "Black Market", "Pembelian selesai");
                    SendCustomMessage(playerid, "Black Market", "%s "WHITE"bayaran untuk {F1C40F}%s "WHITE"dengan {F1C40F}%d "WHITE"amunisi", FormatNumber(price), ReturnWeaponName(weapon), ammo);

                    mysql_tquery(g_iHandle, sprintf("UPDATE weapons SET Enable=1 WHERE WeaponID='%d' AND Ammo='%d' AND Price='%d' AND Category='%d'", weapon, ammo, price, selectCategory[playerid]));
                }
                default: Dialog_Show(playerid, BM_BuyFinal, DIALOG_STYLE_INPUT, "Marketplace > Buy Weapon", ""WHITE"Anda akan membeli sebuah {F1C40F}%s "WHITE"dengan {F1C40F}%d "WHITE"amunisi.\n\nHarga: {2ECC71}%s\n\n"WHITE"Berapa banyak kelipatan yang akan anda beli dengan item ini?", "Buy", "Close", ReturnWeaponName(weapon), ammo, FormatNumber(price));
            }
        }
        else SendErrorMessage(playerid, "Tidak ada senjata dalam kategori ini.");
    }
    return 1;
}

Dialog:BM_BuyFinal(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new times = strval(inputtext);
        if(!(0 < times <= 5)) return SendErrorMessage(playerid, "Anda hanya bisa membeli antara 0 sampai dengan 5.");

        new weapon, ammo, price, type;
        if(Category_GetWeaponData(selectCategory[playerid], selectIndex[playerid], weapon, ammo, price, type)) {
            price = (price * times);
            ammo = (ammo * times);
            if(price > GetMoney(playerid)) return SendErrorMessage(playerid, "Uang anda tidak cukup.");
            GiveMoney(playerid, -price);
            GivePlayerWeaponEx(playerid, weapon, ammo);

            SendCustomMessage(playerid, "Black Market", "Pembelian selesai");
            SendCustomMessage(playerid, "Black Market", "%s "WHITE"bayaran untuk {F1C40F}%s "WHITE"dengan {F1C40F}%d "WHITE"amunisi", FormatNumber(price), ReturnWeaponName(weapon), ammo);

            mysql_tquery(g_iHandle, sprintf("UPDATE weapons SET Enable=1 WHERE WeaponID='%d' AND Ammo='%d' AND Price='%d' AND Category='%d'", weapon, ammo, price, selectCategory[playerid]));
        }
        else SendErrorMessage(playerid, "Tidak ada senjata dalam kategori ini.");
    }
    return 1;
}

//--------------------------
// Dialog:BuyCrate(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         static 
//             id = -1;

//         switch(listitem)
//         {
//             case 0: {
//                 GiveMoney(playerid, -300);
//                 id = Crate_Create(playerid,(listitem+1), -2157.2009,-246.4058,36.5156,182.1140);
//                 if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
//                 SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
//                 SetPlayerWaypoint(playerid, "Crate Spawn", -2157.2009,-246.4058,36.5156);
//             }
//             case 1: {
//                 GiveMoney(playerid, -700);
//                 id = Crate_Create(playerid,(listitem+1), -2160.7009,-246.4058,36.5156,182.1140);
//                 if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
//                 SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
//                 SetPlayerWaypoint(playerid, "Crate Spawn", -2160.7009,-246.4058,36.5156);
//             }
//             case 2: {
//                 GiveMoney(playerid, -1200);
//                 id = Crate_Create(playerid,(listitem+1), -2164.2009,-246.4058,36.5156,182.1140);
//                 if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
//                 SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
//                 SetPlayerWaypoint(playerid, "Crate Spawn", -2164.2009,-246.4058,36.5156);
//             }
//             case 3: {
//                 GiveMoney(playerid, -800);
//                 id = Crate_Create(playerid,(listitem+1), -2174.7009,-246.6339,36.5156,182.1140);
//                 if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
//                 SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
//                 SetPlayerWaypoint(playerid, "Crate Spawn", -2174.7009,-246.6339,36.5156);
//             }
//             case 4: {
//                 GiveMoney(playerid, -1500);
//                 id = Crate_Create(playerid,(listitem+1), -2171.2009,-246.6339,36.5156,182.1140);
//                 if(id == -1) return SendErrorMessage(playerid, "The server has reached the limit for crates.");
//                 SendServerMessage(playerid, "You have successfully order a crate, now the crate in near table in back you.");
//                 SetPlayerWaypoint(playerid, "Crate Spawn", -2171.2009,-246.6339,36.5156);
//             }
//             case 5: Dialog_Show(playerid, BuySeeds, DIALOG_STYLE_LIST, "Buy Seeds", "Marijuana Seeds\nCocaine Seeds\nHeroin Opium Seeds", "Buy", "Close");
//         }
//     }
//     return 1;
// }

Dialog:BuySeeds(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: {
                if(GetMoney(playerid) < 2000)
                    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");
                /*if(Inventory_Count(playerid, "Marijuana Seeds") > 1)
                    return SendErrorMessage(playerid, "You still have a Marijuana Seeds on your inventory");*/

                Inventory_Add(playerid, "Marijuana Seeds", 1578, 50);
                GiveMoney(playerid, -2000);
                return -1;
            }
            case 1: {
                if(GetMoney(playerid) < 2500)
                    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");

                /*if(Inventory_Count(playerid, "Cocaine Seeds") > 1)
                    return SendErrorMessage(playerid, "You still have a Cocaine Seedss on your inventory");*/

                Inventory_Add(playerid, "Cocaine Seeds", 1575, 50);
                GiveMoney(playerid, -2500);
                return -1;
            }
            case 2: {
                if(GetMoney(playerid) < 3000)
                    return SendErrorMessage(playerid, "You have insufficient funds for the purchase.");
                    
                /*if(Inventory_Count(playerid, "Heroin Opium Seeds") > 1)
                    return SendErrorMessage(playerid, "You still have a Heroin Opium Seeds on your inventory");*/

                Inventory_Add(playerid, "Heroin Opium Seeds", 1577, 50);
                GiveMoney(playerid, -3000);
                return -1;
            }
        }
        SendServerMessage(playerid, "You have successfully order 50 %s. (type /plant to plant this seeds)", inputtext);
    }
    return 1;
}

Dialog:BuyFarmSeeds(playerid, response, listitem, inputtext[]) {
    if (GetPlayerJob(playerid, 0) == JOB_FARMER || GetPlayerJob(playerid, 1) == JOB_FARMER) {
        if (response) {
            switch (listitem) {
                case 0: {
                    if (GetMoney(playerid) < 90)
                        return SendErrorMessage(playerid, "You don't have enough money");

                    new id = Inventory_Add(playerid, "Pumpkin Seeds", 1578, 100);
                    if (id == -1) return -1;
                    GiveMoney(playerid, -90);
                    SendCustomMessage(playerid, "FARMER", "You has been bought "YELLOW"%s "WHITE"for "GREEN"%s", inputtext, FormatNumber(90));
                }
                case 1: {
                    if (GetMoney(playerid) < 100)
                        return SendErrorMessage(playerid, "You don't have enough money");

                    new id = Inventory_Add(playerid, "Mushroom Seeds", 1578, 100);
                    if (id == -1) return -1;
                    GiveMoney(playerid, -100);
                    SendCustomMessage(playerid, "FARMER", "You has been bought "YELLOW"%s "WHITE"for "GREEN"%s", inputtext, FormatNumber(100));
                }
                case 2: {
                    if (GetMoney(playerid) < 95)
                        return SendErrorMessage(playerid, "You don't have enough money");

                    new id = Inventory_Add(playerid, "Cucumber Seeds", 1578, 100);
                    if (id == -1) return -1;
                    GiveMoney(playerid, -95);
                    SendCustomMessage(playerid, "FARMER", "You has been bought "YELLOW"%s "WHITE"for "GREEN"%s", inputtext, FormatNumber(95));
                }
                case 3: {
                    if (GetMoney(playerid) < 85)
                        return SendErrorMessage(playerid, "You don't have enough money");

                    new id = Inventory_Add(playerid, "Egg Plant Seeds", 1578, 100);
                    if (id == -1) return -1;
                    GiveMoney(playerid, -85);
                    SendCustomMessage(playerid, "FARMER", "You has been bought "YELLOW"%s "WHITE"for "GREEN"%s", inputtext, FormatNumber(85));
                }
            }
        }
    }
    return 1;
}

Dialog:AtmWithdraw(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: {
                if(PlayerData[playerid][pBankMoney] < 10)
                    return cmd_atm(playerid, "");
                PlayerData[playerid][pBankMoney] -= 10;
                GiveMoney(playerid, 10);
                SendServerMessage(playerid, "You've withdraw $10 from atm.");
            }
            case 1: {
                if(PlayerData[playerid][pBankMoney] < 20)
                    return cmd_atm(playerid, "");
                PlayerData[playerid][pBankMoney] -= 20;
                GiveMoney(playerid, 20);
                SendServerMessage(playerid, "You've withdraw $20 from atm.");
            }
            case 2: {
                if(PlayerData[playerid][pBankMoney] < 50)
                    return cmd_atm(playerid, "");
                PlayerData[playerid][pBankMoney] -= 50;
                GiveMoney(playerid, 50);
                SendServerMessage(playerid, "You've withdraw $50 from atm.");
            }
            case 3: {
                if(PlayerData[playerid][pBankMoney] < 100)
                    return cmd_atm(playerid, "");
                PlayerData[playerid][pBankMoney] -= 100;
                GiveMoney(playerid, 100);
                SendServerMessage(playerid, "You've withdraw $100 from atm.");
            }
            case 4: {
                if(PlayerData[playerid][pBankMoney] < 500)
                    return cmd_atm(playerid, "");
                PlayerData[playerid][pBankMoney] -= 500;
                GiveMoney(playerid, 500);
                SendServerMessage(playerid, "You've withdraw $500 from atm.");
            }
            case 5: {
                if(PlayerData[playerid][pBankMoney] < 1000)
                    return cmd_atm(playerid, "");
                PlayerData[playerid][pBankMoney] -= 1000;
                GiveMoney(playerid, 1000);
                SendServerMessage(playerid, "You've withdraw $1000 from atm."); 
            }
        }
    }
    return 1;
}

Dialog:Atm(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, AtmWithdraw, DIALOG_STYLE_LIST, "ATM Account","$10\n$20\n$50\n$100\n$500\n$1000","Take","Close"); 
            case 1: 
            {
                if(PlayerData[playerid][pHour] < 2) return SendErrorMessage(playerid, "You must play 2 hours to transfer.");
                Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Make a transfer", "Your bank account's balance: %s\n\nPlease enter the name or ID of the player below:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]));
            }
            case 2: Paycheck(playerid);
        }
    }
    return 1;
}

Dialog:Refill(playerid, response, listitem, inputtext[])
{
    if(response) {
        PlayerData[playerid][pGasPump] = GetPVarInt(playerid, "PumpID");
        PlayerData[playerid][pGasStation] = PumpData[GetPVarInt(playerid, "PumpID")][pumpBusiness];

        PlayerData[playerid][pRefill] = GetPlayerVehicleID(playerid);
        SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s has started refilling their vehicle.", ReturnName(playerid, 0, 1));
    }
    return 1;
}

Dialog:DialogBusiness(playerid, response, listitem, inputtext[])
{
    new
        string[225],
        id = GetPVarInt(playerid,"BM"),
        is_owner = Business_IsOwner(playerid, id);
    
    if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                format(string,sizeof(string),"Business ID %d", GetPVarInt(playerid,"BM"));
                Dialog_Show(playerid, BusinessInfo, DIALOG_STYLE_TABLIST,string,""COL_GREY"You can look business information here:\t \n\n \t \n"WHITE"Business name:\t%s\nMessage:\t%s\nBusiness product:\t%d/100\nBusiness Vault:\t%s","Back","Close",BusinessData[id][bizName],BusinessData[id][bizMessage], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
            }
            case 1: {
                if (is_owner) Dialog_Show(playerid, BusinessName, DIALOG_STYLE_INPUT,"Business Name",""WHITE"Nama sebelumnya: %s\n\n"WHITE"Masukkan nama bisnis yang anda inginkan\nMaksimal 32 karakter untuk nama bisnis","Done","Back",BusinessData[id][bizName]);
                else Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit","Next","Back");
            }
            case 2: {
                if (is_owner) Dialog_Show(playerid, BusinessMessage, DIALOG_STYLE_INPUT,"Business Message",""COL_LIGHTBLUE"BUSINESS: "WHITE"%s\n\nInput: \"none\" to disable business message\n\nInput your business message below:", "Next", "Close",BusinessData[id][bizMessage]);
                else Business_ProductMenu(playerid, id);
            }
            case 3: {
                if (is_owner) Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit\nWithdraw","Next","Back");
                else {
                    if (BusinessData[id][bizType] == 4) {
                        new count = 0;
                        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                            count++;
                        }
                        Dialog_Show(playerid, BusinessVehicle, DIALOG_STYLE_LIST, "Business Vehicle", "%s Vehicle\nChange Plate\nTrack\nSet spawn", "Select", "Close", (count) ? ("Sell") : ("Buy"));
                    }
                }
            }
            case 4: Business_ProductMenu(playerid, id);
            case 5: Dialog_Show(playerid, BusinessCargo, DIALOG_STYLE_INPUT,"Product Price For Sale","Harga sekarag: %s\nBerapa harga yang akan anda tawarkan untuk 1 kargo? (1 kargo = 5pcs)","Set","Back", FormatNumber(BusinessData[id][bizCargo]));
            case 6: Dialog_Show(playerid, ShowBusiness_Employee, DIALOG_STYLE_LIST, "Employees Management", "Add Employee\nRemove Employee\nRemove All Employees\nEmployees Members", "Select", "Close");
            case 7: {
                if (BusinessData[id][bizType] == 4) {
                    new count = 0;
                    for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                        count++;
                    }
                    Dialog_Show(playerid, BusinessVehicle, DIALOG_STYLE_LIST, "Business Vehicle", "%s Vehicle\nChange Plate\nTrack\nSet spawn", "Select", "Close", (count) ? ("Sell") : ("Buy"));
                }
            }
        }
    }
    return 1;
}

Dialog:BusinessVehicle(playerid, response, listitem, inputtext[]) {
    if (response) {
		new id = GetPVarInt(playerid,"BM");
		switch (listitem) {
			case 0: {
                if (!Business_IsOwner(playerid, id))
                    return SendErrorMessage(playerid, "Only owner of business can use this option!");

				new carid;
				for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
					carid = i;
				}

				if (Business_VehGetCount(id)) {
					Vehicle_Delete(carid);
					GiveMoney(playerid, 250);
					SendCustomMessage(playerid, "BUSINESS", "You've been sold your vehicle business for "GREEN"%s", FormatNumber(250));
				} else {
					if (GetMoney(playerid) < 500)
						return SendErrorMessage(playerid, "You don't have enough money to buy business vehicle, the price is $500!");

                    new detail[64];
                    format(detail,sizeof(detail),"%i\t%s %s\n%i\t%s %s", 423, GetVehicleNameByModel(423), FormatNumber(500), 588, GetVehicleNameByModel(588), FormatNumber(500));
					ShowPlayerDialog(playerid, DIALOG_BUYVEHBIZ, DIALOG_STYLE_PREVIEW_MODEL, "Buy Car", detail, "Select", "Close");
				}
			}
			case 1: {
                if (!Business_IsOwner(playerid, id))
                    return SendErrorMessage(playerid, "Only owner of business can use this option!");

				if (!Business_VehGetCount(id))
                    return SendErrorMessage(playerid, "Your business didn't have vehicle!");

				Dialog_Show(playerid, BizChangePlate, DIALOG_STYLE_INPUT, "Change Plate", "Please input new vehicle plate: "GREEN"(input below)", "Change", "Cancel");
			}
			case 2: {
                if (!Business_VehGetCount(id))
                    return SendErrorMessage(playerid, "Your business didn't have vehicle!");

				for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i)) {
                    if (VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                        new Float:vpos[3];
                        GetVehiclePos(VehicleData[i][cVehicle], vpos[0], vpos[1], vpos[2]);
                        SetPlayerWaypoint(playerid, "Business Vehicle", vpos[0], vpos[1], vpos[2]);
                    }
				}
			}
			case 3: {
                if (!Business_IsOwner(playerid, id))
                    return SendErrorMessage(playerid, "Only owner of business can use this option!");

                if (!Business_VehGetCount(id))
                    return SendErrorMessage(playerid, "Your business didn't have vehicle!");

				for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i)) {
                    if (VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
                        if(IsPlayerInAnyVehicle(playerid)) {
                            GetVehiclePos(GetPlayerVehicleID(playerid), VehicleData[i][cPos][0], VehicleData[i][cPos][1], VehicleData[i][cPos][2]);
                            GetVehicleZAngle(GetPlayerVehicleID(playerid), VehicleData[i][cPos][3]);
                        } else {
                            GetPlayerPos(playerid, VehicleData[i][cPos][0], VehicleData[i][cPos][1], VehicleData[i][cPos][2]);
                            GetPlayerFacingAngle(playerid, VehicleData[i][cPos][3]);
                        }
                        Vehicle_Spawn(i);
                        Vehicle_Save(i);

                        SetPlayerPos(playerid, VehicleData[i][cPos][0], VehicleData[i][cPos][1], VehicleData[i][cPos][2] + 2.0);
                        SendCustomMessage(playerid, "BUSINESS", "You've been set your business vehicle spawn position!");
                    }
				}
			}
		}
	}
    return 1;
}

Dialog:BizChangePlate(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = GetPVarInt(playerid, "BM");
        
        if (isnull(inputtext))
			return Dialog_Show(playerid, BizChangePlate, DIALOG_STYLE_INPUT, "Change Plate", "Please input new vehicle plate: "GREEN"(input below)", "Change", "Cancel");

        if (strlen(inputtext) > 24)
            return Dialog_Show(playerid, BizChangePlate, DIALOG_STYLE_INPUT, "Change Plate", "Please input new vehicle plate: "GREEN"(input below)", "Change", "Cancel"), SendErrorMessage(playerid, "Max characters length is 24 characters!");

		for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && VehicleData[i][cBiz] == BusinessData[id][bizID] && IsValidVehicle(VehicleData[i][cVehicle])) {
			format(VehicleData[i][cPlate], 24, "%s", inputtext);
			Vehicle_Spawn(i);
			Vehicle_Save(i);
		}
		SendCustomMessage(playerid, "BUSINESS", "You've been changed the vehicle number plate to: "YELLOW"%s", inputtext);
    }
    return 1;
}

Dialog:BusinessCargo(playerid, response, listitem, inputtext[])
{
    if(response) {
        if(strval(inputtext) < 50 || strval(inputtext) > 400)
            return SendErrorMessage(playerid, "Invalid amount specified, must be between $50-$400!");

        BusinessData[GetPVarInt(playerid, "BM")][bizCargo] = strval(inputtext);
        SendServerMessage(playerid, "Anda menawarkan %s untuk 1 kargo sekarang.", FormatNumber(strval(inputtext)));
    }
    return 1;
}

Dialog:BusinessInfo(playerid, response, listitem, inputtext[])
{
    if(response)
        return cmd_bm(playerid, "\0");

    return 1;
}

Dialog:BusinessVault(playerid, response, listitem, inputtext[])
{
    if(response) {
        switch(listitem) {
            case 0: Dialog_Show(playerid, BusinessDeposit, DIALOG_STYLE_INPUT, "Deposit", "Uang anda: %s.\n\nMasukkan berapa banyak uang yang akan anda simpan di dalam bisnis ini", "Deposit", "Back", FormatNumber(GetMoney(playerid)));
            case 1: Dialog_Show(playerid, BusinessWithdraw, DIALOG_STYLE_INPUT,"Withdraw","Business Vault: %s\n\nMasukkan berapa banyak uang yang akan anda ambil di dalam bisnis ini","Withdraw","Back", FormatNumber(BusinessData[GetPVarInt(playerid,"BM")][bizVault]));
        }
    }
    return 1;
}

Dialog:BusinessWithdraw(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");

        if(strval(inputtext) < 1 || strval(inputtext) > BusinessData[id][bizVault])
            return SendErrorMessage(playerid, "Invalid amount specified!");

        BusinessData[id][bizVault] -= strval(inputtext);
        Business_Save(id);

        GiveMoney(playerid, strval(inputtext));
        SendClientMessageEx(playerid, X11_LIGHTBLUE,"BUSINESS: "WHITE"You have withdrawn "YELLOW"%s "WHITE"from the business vault.", FormatNumber(strval(inputtext)));
        Log_Write("logs/business_log.txt", "[%s] %s has withdrawn \"%s\" from business ID: %d.", ReturnDate(), NormalName(playerid), FormatNumber(strval(inputtext)), id);
    }
    else {
        if (Business_IsOwner(playerid, GetPVarInt(playerid, "BM"))) Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit\nWithdraw","Next","Back");
        else Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit","Next","Back");
    }

    return 1;
}

Dialog:BusinessDeposit(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");
        
        if(strval(inputtext) < 1 || strval(inputtext) > GetMoney(playerid))
            return SendErrorMessage(playerid, "Invalid amount specified!");

        BusinessData[id][bizVault] += strval(inputtext);
        Business_Save(id);

        GiveMoney(playerid, -strval(inputtext));
        SendClientMessageEx(playerid, X11_LIGHTBLUE,"BUSINESS: "WHITE"You have deposit "YELLOW"%s "WHITE"into the business vault.", FormatNumber(strval(inputtext)));
        Log_Write("logs/business_log.txt", "[%s] %s has deposit \"%s\" to business ID: %d.", ReturnDate(), NormalName(playerid), FormatNumber(strval(inputtext)), id);        
    }
    else {
        if (Business_IsOwner(playerid, GetPVarInt(playerid, "BM"))) Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit\nWithdraw","Next","Back");
        else Dialog_Show(playerid, BusinessVault, DIALOG_STYLE_LIST,"Business Vault","Deposit","Next","Back");
    }

    return 1;
}

Dialog:BusinessName(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");

        if(!Business_IsOwner(playerid, id))
            return SendErrorMessage(playerid, "This is not on your business.");
        
        if(isnull(inputtext))
            return Dialog_Show(playerid, BusinessName, DIALOG_STYLE_INPUT,"Business Name",""COL_LIGHTRED"NOTE: "WHITE"Nama bisnis tidak di perbolehkan kosong!\n\n"WHITE"Nama sebelumnya: %s\n\n"WHITE"Masukkan nama bisnis yang anda inginkan\nMaksimal 32 karakter untuk nama bisnis","Done","Back",BusinessData[id][bizName]);

        if(strlen(inputtext) > 32 || strlen(inputtext) < 5)
            return Dialog_Show(playerid, BusinessName, DIALOG_STYLE_INPUT,"Business Name",""COL_LIGHTRED"NOTE: "WHITE"Nama bisnis harus 5 sampai 32 karakter.\n\n"WHITE"Nama sebelumnya: %s\n\n"WHITE"Masukkan nama bisnis yang anda inginkan\nMaksimal 32 karakter untuk nama bisnis","Done","Back",BusinessData[id][bizName]);
        
        format(BusinessData[id][bizName], 32, ColouredText(inputtext));

        Business_Refresh(id);
        Business_Save(id);

        SendServerMessage(playerid, "Business name set to: \"%s\".", BusinessData[id][bizName]);
    }
    else
        return cmd_bm(playerid, "\0");
    return 1;
}

Dialog:BusinessMessage(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = GetPVarInt(playerid,"BM");
        if(strlen(inputtext) > 128 || strlen(inputtext) < 5)
            return SendErrorMessage(playerid, "Maksimal dan minimal untuk business name yaitu 5-128 karakter.");

        if(!strcmp(inputtext, "none", true))
        {
            BusinessData[id][bizMessage][0] = '\0';

            Business_Save(id);
            SendServerMessage(playerid, "You have removed the business message.");
        }
        else
        {
            format(BusinessData[id][bizMessage], 128, inputtext);

            Business_Save(id);
            SendServerMessage(playerid, "Business message set to: \"%s\".", inputtext);
        }
    }
    else
        return cmd_bm(playerid, "\0");
    return 1;
}

Dialog:VehicleMenu(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new 
            id = -1,
            i = -1;

        switch(listitem)
        {
            case 0: {
                if (!IsPlayerInDynamicArea(playerid, zones[0]) && !IsPlayerInDynamicArea(playerid, zones[1]) && Workshop_Nearest(playerid) == -1) cmd_repairtires(playerid, "\1");
                else cmd_repairengine(playerid, "\1");
            } 
            case 1: cmd_repairtires(playerid, "\1");
            case 2: cmd_repairbody(playerid, "\1");
            case 3: {
                Dialog_Show(playerid, SelectNeon, DIALOG_STYLE_LIST, "Install Neon", "Red Neon\nBlue Neon\nGreen Neon\nYellow Neon\nPink Neon\nWhite Neon", "Install", "Close");
            }
            case 4: {
                if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) SendServerMessage(playerid, "Please use /paintcar for change the vehicle color!");
                else {
                    new ws = -1;

                    if((ws = Workshop_Nearest(playerid)) != -1) 
                    {
                        if(!Workshop_IsOwner(playerid, ws) && !Workshop_Employe(playerid, ws)) return SendErrorMessage(playerid, "You're not owner or employe in this workshop.");
                        if(WorkshopData[ws][wComponent] < 70) return SendErrorMessage(playerid, "This workshop doesn't have enough component (70 component)");

                        if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1) {
                            new str[955];
                            format(str, sizeof(str), "Mods\tComponent\n");
                            format(str, sizeof(str), "%sSpoiler Car\t70\n", str);
                            format(str, sizeof(str), "%sHood Car\t70\n", str);
                            format(str, sizeof(str), "%sVents Car\t70\n", str);
                            format(str, sizeof(str), "%sLights Car\t70\n", str);
                            format(str, sizeof(str), "%sExhausts\t70\n", str);
                            format(str, sizeof(str), "%sFront bumpers\t70\n", str);
                            format(str, sizeof(str), "%sRear Bumpers\t70\n", str);
                            format(str, sizeof(str), "%sRoofs Car\t70\n", str);
                            format(str, sizeof(str), "%sSide skirts\t70\n", str);
                            format(str, sizeof(str), "%sBullbars\t70\n", str);
                            format(str, sizeof(str), "%sStereo\t70\n", str);
                            format(str, sizeof(str), "%sWheels\t70\n", str);
                            format(str, sizeof(str), "%sHydraulics\t70\n", str);
                            format(str, sizeof(str), "%sNitrous\t70", str);
                            Dialog_Show(playerid, InstallMod, DIALOG_STYLE_TABLIST_HEADERS, "Install Mods", str, "Select", "Close");
                        }
                    }
                }
            }
            case 5: {
                if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
                    cmd_upgrade(playerid, "engine");
                }
                else {
                    if((i = Workshop_Nearest(playerid)) != -1)
                    { 
                        if(!Workshop_IsOwner(playerid, i) && !Workshop_Employe(playerid, i)) return SendErrorMessage(playerid, "You're not work in this workshop."); 
                        if(WorkshopData[i][wComponent] < 15)
                            return SendErrorMessage(playerid, "This workshop don't have 15 component to spray paintjob.");

                        if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0)
                        {
                            new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                            switch (modelid)
                            {
                                case 483: Dialog_Show(playerid, PaintjobJob, DIALOG_STYLE_LIST, "Available Paintjobs", "Paintjob ID: 0", "Select", "Cancel");
                                case 575: Dialog_Show(playerid, PaintjobJob, DIALOG_STYLE_LIST, "Available Paintjobs", "Paintjob ID: 0\nPaintjob ID: 1", "Select", "Cancel");
                                case 534 .. 536, 558 .. 562, 565, 567, 576: Dialog_Show(playerid, PaintjobJob, DIALOG_STYLE_LIST, "Available Paintjobs", "Paintjob ID: 0\nPaintjob ID: 1\nPaintjob ID: 2", "Select", "Cancel");
                                default: SendErrorMessage(playerid, "This vehicle does not support any paintjob.");
                            }
                            return 1;
                        }
                        SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
                    }
                }
            }
            case 6: {
                if(IsPlayerInDynamicArea(playerid, zones[0]) || IsPlayerInDynamicArea(playerid, zones[1])) {
                    cmd_upgrade(playerid, "body");
                }
                else {
                    if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
                    {
                        if((i = Workshop_Nearest(playerid)) != -1)
                        {
                            if(!Workshop_IsOwner(playerid, i) && !Workshop_Employe(playerid, i)) return SendErrorMessage(playerid, "You're not work in this workshop."); 

                            if(WorkshopData[i][wComponent] < 250)
                                return SendErrorMessage(playerid, "Workshop ini tidak memiliki 250 komponen.");

                            cmd_upgrade(playerid, "engine");
                        }
                    }
                }
            }
            case 7: {
                if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
                {
                    if((i = Workshop_Nearest(playerid)) != -1)
                    {
                        if(!Workshop_IsOwner(playerid, i) && !Workshop_Employe(playerid, i)) return SendErrorMessage(playerid, "You're not work in this workshop."); 

                        if(WorkshopData[i][wComponent] < 250)
                            return SendErrorMessage(playerid, "Workshop ini tidak memiliki 250 komponen.");

                        cmd_upgrade(playerid, "body");
                    }
                }
            }
            case 8: {
                if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
                {
                    if((i = Workshop_Nearest(playerid)) != -1)
                    {
                        if(!Workshop_IsOwner(playerid, i) && !Workshop_Employe(playerid, i)) return SendErrorMessage(playerid, "You're not work in this workshop."); 

                        if(WorkshopData[i][wComponent] < 50)
                            return SendErrorMessage(playerid, "Workshop ini tidak memiliki 50 komponen.");

                        new info[256], name[64], count = 0;
                        strcat(info, "Model\tName\n");
                        strcat(info, sprintf("%d\tUninstall Paintjob\n", VehicleData[id][cPaintjob])), count++;
                        for (new x = 0; x < 14; x ++) if (VehicleData[id][cMods][x] > 0) {
                            GetVehicleComponentName(VehicleData[id][cMods][x], name, sizeof(name));
                            strcat(info, sprintf("%d\t%s\n", VehicleData[id][cMods][x], name));
                            count++;
                        }
                        if (count) Dialog_Show(playerid, UninstallMods, DIALOG_STYLE_TABLIST_HEADERS, "Uninstall Mods", info, "Uninstall", "Close");
                        else SendErrorMessage(playerid, "This vehicle doesn't have any mods!");
                    }
                }
            }
        }
    }
    return 1;
}

Dialog:UninstallMods(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1, vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false), name[64];
        
        if (vehicleid == INVALID_VEHICLE_ID)
            return SendErrorMessage(playerid, "You're not nearest any vehicle!");
            
        if((ws = Workshop_Nearest(playerid)) != -1) {
            if ((id = Vehicle_GetID(vehicleid)) != -1) {
                if (!listitem) {
                    if (VehicleData[id][cPaintjob] == -1)
                        return SendErrorMessage(playerid, "This vehicle doesn't have installed paintjob");

                    WorkshopData[ws][wComponent] -= 50;
                    VehicleData[id][cPaintjob] = -1;
                    SendCustomMessage(playerid, "MECHANIC", "You've been successfully uninstalled paintjob");
                    ChangeVehiclePaintjob(VehicleData[id][cVehicle], 3);
                } else {
                    new component = strval(inputtext);

                    RemoveComponent(VehicleData[id][cVehicle], component);
                    GetVehicleComponentName(component, name, sizeof(name));
                    WorkshopData[ws][wComponent] -= 50;
                }
            }
        }
    }
    return 1;
}

Dialog:PaintjobJob(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new paintjobid,
            id = -1,
            i = -1;

        if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] != 0)
        {
            if((i = Workshop_Nearest(playerid)) != -1)
            {
                if(!Workshop_IsOwner(playerid, i) && !Workshop_Employe(playerid, i)) return SendErrorMessage(playerid, "You're not work in this workshop.");
                if(WorkshopData[i][wComponent] < 15) return SendErrorMessage(playerid, "This workshop doesn't have more 15 component.");
                if(PlayerData[playerid][pMekanik]) return SendErrorMessage(playerid, "You're in mechanic actions.");

                if(!sscanf(inputtext, "'Paintjob ID:'i", paintjobid)) {
                    PlayerData[playerid][pRepairTime] = repeat repairVehicle(playerid, VehicleData[id][cVehicle], PAINTJOB);
                    PlayerData[playerid][pMekanik] = 1;
                    PlayerData[playerid][pMekanikTime] = 0;
                    
                    SetPVarInt(playerid, "Workshop", i);
                    SetPVarInt(playerid, "WorkshopVeh", id);
                    SetPVarInt(playerid, "PaintjobId", paintjobid);
                    SendCustomMessage(playerid, "MECHANIC", "Don't move from your position or you will failed to repair this vehicle.");
                }
                return 1;
            }
            SendErrorMessage(playerid, "You're not in anything workshop.");    
            return 1;
        }
        SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
    }
    return 1;
}

Dialog:InstallMod(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                Dialog_Show(playerid, InstallSpoiler, DIALOG_STYLE_LIST, "Choose below","Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n","Choose","Close");
            }
            case 1: {
                Dialog_Show(playerid, InstallHoods, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx", "Choose", "Close");
            }
            case 2: {
                Dialog_Show(playerid, InstallVents, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare", "Choose", "Close");
            }
            case 3: {
                Dialog_Show(playerid, InstallLights, DIALOG_STYLE_LIST, "Lights", "Round\nSquare", "Choose", "Close");
            }
            case 4: {
                Dialog_Show(playerid, InstallExhausts, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust", "Choose", "Close");
            }
            case 5: {
                Dialog_Show(playerid, InstallFrontBumpers, DIALOG_STYLE_LIST, "Front bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper", "Choose", "Close");
            }
            case 6: {
                Dialog_Show(playerid, InstallRearBumpers, DIALOG_STYLE_LIST, "Rear bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper", "Choose", "Close");
            }
            case 7: {
                Dialog_Show(playerid, InstallRoofs, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop", "Choose", "Close");
            }
            case 8: {
                Dialog_Show(playerid, InstallSideSkirts, DIALOG_STYLE_LIST, "Side skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt", "Choose", "Close");
            }
            case 9: {
                Dialog_Show(playerid, InstallBullbars, DIALOG_STYLE_LIST, "Bull bars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar", "Choose", "Close");
            }
            case 10: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner]) {
                    AddComponent(VehicleData[id][cVehicle], 1086);
                    if((ws = Workshop_Nearest(playerid)) != -1) 
                    {
                        WorkshopData[ws][wComponent] -= 70;
                    }
                    SendCustomMessage(playerid, "MECHANIC", "You've installed streo for this vehicle!");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 11: {
                new whells[] = {
                        1025, 1073, 1074, 1075, 1075,
                        1076, 1077, 1078, 1079, 1080, 
                        1081, 1082, 1083, 1084, 1085, 
                        1096, 1097, 1096
                    },
                    vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);

                if ((id = Vehicle_GetID(vehicleid)) != -1) {
                    if(!IsDoorVehicle(vehicleid)) return SendErrorMessage(playerid, "This vehicle can't change wheels.");

                    SetPVarInt(playerid, "holdingWheelsVehicle", vehicleid);
                    SendServerMessage(playerid, "Pilih ban kendaraan yang tersedia di tampilan ini.");                    
                    ShowCustomSelection(playerid, "Wheels Shop", MODEL_SELECTION_WHELLS, whells, sizeof(whells), 0, 0, 90);
                    if((ws = Workshop_Nearest(playerid)) != -1) 
                    {
                        WorkshopData[ws][wComponent] -= 70;
                    }
                }
            }
            case 12: {
                new vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);
                if (vehicleid != INVALID_VEHICLE_ID) {
                    if(!IsDoorVehicle(vehicleid)) return SendErrorMessage(playerid, "This vehicle can't install hydraulic.");

                    new vehname[32];

                    GetVehicleNameByVehicle(vehicleid, vehname);
                    AddComponent(vehicleid, 1087);
                    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
                    SendServerMessage(playerid, "You've installed hydraulics for "CYAN"%s", vehname);
                    if((ws = Workshop_Nearest(playerid)) != -1) 
                    {
                        WorkshopData[ws][wComponent] -= 70;
                    }
                }
            }
            case 13: {
                if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
                {
                    if((ws = Workshop_Nearest(playerid)) != -1)
                    {
                        if(!Workshop_IsOwner(playerid, ws) && !Workshop_Employe(playerid, ws)) return SendErrorMessage(playerid, "You're not work in this workshop."); 

                        if(WorkshopData[ws][wComponent] < 70)
                            return SendErrorMessage(playerid, "Workshop ini tidak memiliki 70 komponen.");

                        if(IsValidVehicle(VehicleData[id][cVehicle]))
                        {
                            if(!IsEngineVehicle(VehicleData[id][cVehicle]) || IsABike(VehicleData[id][cVehicle]) || IsABoat(VehicleData[id][cVehicle]) || IsAPlane(VehicleData[id][cVehicle]) || IsAHelicopter(VehicleData[id][cVehicle])) 
                                return SendErrorMessage(playerid, "Tidak bisa memasang nos dikendaraan ini!.");

                            WorkshopData[ws][wComponent] -= 70;

                            ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

                            AddComponent(VehicleData[id][cVehicle], 1010);
                            PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
                            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s places a NOS canister into the vehicle's engine.", ReturnName(playerid, 0, 1));
                        }
                    } else return SendErrorMessage(playerid, "You're not near in any workshop!");
                } else return SendErrorMessage(playerid, "You're not near in any vehicle!");
            }
        }
    }
    return 1;
}

Dialog:InstallSpoiler(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 558 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1147);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1049);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1162);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1058);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1164);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1138);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 561 || modelid == 558 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1146);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1050);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1158);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1060);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1163);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1139);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 527 || modelid == 415 || modelid == 546 || modelid == 603 || modelid == 426 || modelid == 436 || modelid == 405 || modelid == 477 || modelid == 580 || modelid == 550 || modelid == 549) {
                        AddComponent(VehicleData[id][cVehicle], 1001);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 527 || modelid == 415 || modelid == 546 || modelid == 603 || modelid == 426 || modelid == 436 || modelid == 405 || modelid == 477 || modelid == 580 || modelid == 550 || modelid == 549) {
                        AddComponent(VehicleData[id][cVehicle], 1023);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 4: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 527 || modelid == 415 || modelid == 546 || modelid == 603 || modelid == 426 || modelid == 436 || modelid == 405 || modelid == 477 || modelid == 580 || modelid == 550 || modelid == 549) {
                        AddComponent(VehicleData[id][cVehicle], 1003);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 5: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 589 || modelid == 492 || modelid == 547 || modelid == 405) {
                        AddComponent(VehicleData[id][cVehicle], 1000);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 6: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 527 || modelid == 542 || modelid == 405) {
                        AddComponent(VehicleData[id][cVehicle], 1014);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 7: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 527 || modelid == 542) {
                        AddComponent(VehicleData[id][cVehicle], 1015);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 8: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 546 || modelid == 517) {
                        AddComponent(VehicleData[id][cVehicle], 1002);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed spoiler for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }

    }
    return 1;
}

Dialog:InstallHoods(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 589 || modelid == 492 || modelid == 426 || modelid == 550) {
                        AddComponent(VehicleData[id][cVehicle], 1005);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed hoods for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 402 || modelid == 546 || modelid == 426 || modelid == 550) {
                        AddComponent(VehicleData[id][cVehicle], 1004);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed hoods for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401) {
                        AddComponent(VehicleData[id][cVehicle], 1011);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed hoods for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 549) {
                        AddComponent(VehicleData[id][cVehicle], 1012);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed hoods for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallVents(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 546 || modelid == 517 || modelid == 603 || modelid == 547 || modelid == 439 || modelid == 550 || modelid == 549) {
                        AddComponent(VehicleData[id][cVehicle], 1142);
                        AddComponent(VehicleData[id][cVehicle], 1143);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed vents for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 589 || modelid == 546 || modelid == 517 || modelid == 603 || modelid == 439 || modelid == 550 || modelid == 549) {
                        AddComponent(VehicleData[id][cVehicle], 1144);
                        AddComponent(VehicleData[id][cVehicle], 1145);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed vents for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallLights(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 589 || modelid == 400 || modelid == 436 || modelid == 439) {
                        AddComponent(VehicleData[id][cVehicle], 1013);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed lights for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 589 || modelid == 603 || modelid == 400) {
                        AddComponent(VehicleData[id][cVehicle], 1024);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed lights for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallExhausts(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1034);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1046);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1065);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1089);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1064);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1028);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1037);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1045);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1066);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1092);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1059);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1029);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 || modelid == 534 || modelid == 567 || modelid == 536 || modelid == 576 || modelid == 535) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1044);
                            }
                            case 534: {
                                AddComponent(VehicleData[id][cVehicle], 1126);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1129);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1104);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1113);
                            }
                            case 535: {
                                AddComponent(VehicleData[id][cVehicle], 1136);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 || modelid == 534 || modelid == 567 || modelid == 536 || modelid == 576 || modelid == 535) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1043);
                            }
                            case 534: {
                                AddComponent(VehicleData[id][cVehicle], 1127);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1132);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1105);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1135);
                            }
                            case 535: {
                                AddComponent(VehicleData[id][cVehicle], 1114);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 4: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 527 || modelid == 542 || modelid == 589 || modelid == 400 || modelid == 517 || modelid == 603 || modelid == 426 || modelid == 547 || modelid == 405 || modelid == 477) {
                        AddComponent(VehicleData[id][cVehicle], 1020);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 5: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 527 || modelid == 542 || modelid == 400 || modelid == 426 || modelid == 436 || modelid == 547 || modelid == 405 || modelid == 477) {
                        AddComponent(VehicleData[id][cVehicle], 1021);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 6: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 436) {
                        AddComponent(VehicleData[id][cVehicle], 1022);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 7: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 518 || modelid == 415 || modelid == 542 || modelid == 546 || modelid == 400 || modelid == 517 || modelid == 603 || modelid == 426 || modelid == 436 || modelid == 547 || modelid == 405 || modelid == 550 || modelid == 549 || modelid == 477) {
                        AddComponent(VehicleData[id][cVehicle], 1019);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 8: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 || modelid == 518 || modelid == 415 || modelid == 542 || modelid == 546 || modelid == 400 || modelid == 517 || modelid == 603 || modelid == 426 || modelid == 415 || modelid == 547 || modelid == 405 || modelid == 550 || modelid == 549 || modelid == 477) {
                        AddComponent(VehicleData[id][cVehicle], 1018);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed exhaust for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallFrontBumpers(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1171);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1153);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1160);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1166);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1155);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1169);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed front bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1172);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1152);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1173);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1165);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1157);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1170);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed front bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 ||
						modelid == 534 ||
						modelid == 567 ||
						modelid == 536 ||
						modelid == 576 ||
						modelid == 535) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1174);
                            }
                            case 534: {
                                AddComponent(VehicleData[id][cVehicle], 1179);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1189);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1182);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1191);
                            }
                            case 535: {
                                AddComponent(VehicleData[id][cVehicle], 1115);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed front bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 ||
						modelid == 534 ||
						modelid == 567 ||
						modelid == 536 ||
						modelid == 576 ||
						modelid == 535) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1175);
                            }
                            case 534: {
                                AddComponent(VehicleData[id][cVehicle], 1185);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1188);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1181);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1190);
                            }
                            case 535: {
                                AddComponent(VehicleData[id][cVehicle], 1116);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed front bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallRearBumpers(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1149);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1150);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1159);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1168);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1154);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1141);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed rear bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1148);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1151);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1161);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1167);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1156);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1140);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed rear bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 ||
						modelid == 534 ||
						modelid == 567 ||
						modelid == 536 ||
						modelid == 576 ||
						modelid == 535) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1176);
                            }
                            case 534: {
                                AddComponent(VehicleData[id][cVehicle], 1180);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1187);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1184);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1192);
                            }
                            case 535: {
                                AddComponent(VehicleData[id][cVehicle], 1109);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed rear bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 ||
						modelid == 534 ||
						modelid == 567 ||
						modelid == 536 ||
						modelid == 576 ||
						modelid == 535) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1177);
                            }
                            case 534: {
                                AddComponent(VehicleData[id][cVehicle], 1178);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1186);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1183);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1193);
                            }
                            case 535: {
                                AddComponent(VehicleData[id][cVehicle], 1110);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed rear bumper for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallRoofs(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1038);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1054);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1067);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1088);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1055);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1032);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed roof for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1038);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1053);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1068);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1091);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1061);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1033);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed roof for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 567 || modelid == 536) {
                        switch (modelid) {
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1130);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1128);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed roof for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 567 || modelid == 536) {
                        switch (modelid) {
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1131);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1103);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed roof for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 4: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 401 ||
						modelid == 518 ||
						modelid == 589 ||
						modelid == 492 ||
						modelid == 546 ||
						modelid == 603 ||
						modelid == 426 ||
						modelid == 436 ||
						modelid == 580 ||
						modelid == 550 ||
						modelid == 477) {
                        AddComponent(VehicleData[id][cVehicle], 1006);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed roof for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallSideSkirts(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1036);
                                AddComponent(VehicleData[id][cVehicle], 1040);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1047);
                                AddComponent(VehicleData[id][cVehicle], 1051);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1069);
                                AddComponent(VehicleData[id][cVehicle], 1071);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1090);
                                AddComponent(VehicleData[id][cVehicle], 1094);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1056);
                                AddComponent(VehicleData[id][cVehicle], 1062);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1026);
                                AddComponent(VehicleData[id][cVehicle], 1027);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 562 || modelid == 565 || modelid == 559 || modelid == 558 || modelid == 561 || modelid == 560) {
                        switch (modelid) {
                            case 562: {
                                AddComponent(VehicleData[id][cVehicle], 1039);
                                AddComponent(VehicleData[id][cVehicle], 1041);
                            }
                            case 565: {
                                AddComponent(VehicleData[id][cVehicle], 1048);
                                AddComponent(VehicleData[id][cVehicle], 1052);
                            }
                            case 559: {
                                AddComponent(VehicleData[id][cVehicle], 1070);
                                AddComponent(VehicleData[id][cVehicle], 1072);
                            }
                            case 558: {
                                AddComponent(VehicleData[id][cVehicle], 1093);
                                AddComponent(VehicleData[id][cVehicle], 1095);
                            }
                            case 561: {
                                AddComponent(VehicleData[id][cVehicle], 1057);
                                AddComponent(VehicleData[id][cVehicle], 1063);
                            }
                            case 560: {
                                AddComponent(VehicleData[id][cVehicle], 1031);
                                AddComponent(VehicleData[id][cVehicle], 1030);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 575 ||
						modelid == 536 ||
						modelid == 576 ||
						modelid == 567) {
                        switch (modelid) {
                            case 575: {
                                AddComponent(VehicleData[id][cVehicle], 1042);
                                AddComponent(VehicleData[id][cVehicle], 1099);
                            }
                            case 536: {
                                AddComponent(VehicleData[id][cVehicle], 1108);
                                AddComponent(VehicleData[id][cVehicle], 1107);
                            }
                            case 576: {
                                AddComponent(VehicleData[id][cVehicle], 1134);
                                AddComponent(VehicleData[id][cVehicle], 1137);
                            }
                            case 567: {
                                AddComponent(VehicleData[id][cVehicle], 1102);
                                AddComponent(VehicleData[id][cVehicle], 1133);
                            }
                        }
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 534) {
                        AddComponent(VehicleData[id][cVehicle], 1102);
                        AddComponent(VehicleData[id][cVehicle], 1101);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 4: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 534) {
                        AddComponent(VehicleData[id][cVehicle], 1106);
                        AddComponent(VehicleData[id][cVehicle], 1124);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 5: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 535) {
                        AddComponent(VehicleData[id][cVehicle], 1118);
                        AddComponent(VehicleData[id][cVehicle], 1120);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 6: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(
						modelid == 401 ||
						modelid == 518 ||
						modelid == 527 ||
						modelid == 415 ||
						modelid == 589 ||
						modelid == 546 ||
						modelid == 517 ||
						modelid == 603 ||
						modelid == 436 ||
						modelid == 439 ||
						modelid == 580 ||
						modelid == 549 ||
						modelid == 477) {
                        AddComponent(VehicleData[id][cVehicle], 1007);
                        AddComponent(VehicleData[id][cVehicle], 1017);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed side skirt for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

Dialog:InstallBullbars(playerid, response, listitem, inputtext[]) {
    if (response) {
        new id = -1, ws = -1;

        switch (listitem) {
            case 0: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 534) {
                        AddComponent(VehicleData[id][cVehicle], 1100);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed bullbars for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 1: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 534) {
                        AddComponent(VehicleData[id][cVehicle], 1123);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed bullbars for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 2: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 534) {
                        AddComponent(VehicleData[id][cVehicle], 1125);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed bullbars for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
            case 3: {
                if ((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1 && VehicleData[id][cOwner] >= 0) {
                    new modelid = GetVehicleModel(VehicleData[id][cVehicle]);

                    if(modelid == 534) {
                        AddComponent(VehicleData[id][cVehicle], 1117);
                        if((ws = Workshop_Nearest(playerid)) != -1) 
                        {
                            WorkshopData[ws][wComponent] -= 70;
                        }
                        SendCustomMessage(playerid, "MECHANIC", "You've installed bullbars for this vehicle!");
                    } else return SendErrorMessage(playerid, "This vehicle doesn't support to install this mod.");
                } else return SendErrorMessage(playerid, "Vehicle in near you isn't owned vehicle.");
            }
        }
    }
    return 1;
}

// Dialog:InstallNeon(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         static 
//             id;

//         id = GetPVarInt(playerid, "neonVehicle");

//         if(!IsOwnedVehicle(id)) return SendErrorMessage(playerid, "This is not owned vehicle.");
//         if(!IsDoorVehicle(VehicleData[id][cVehicle])) return SendErrorMessage(playerid, "This vehicle isn't support to attach neon.");

//         VehicleData[id][cNeon] = (18647+listitem);
//         VehicleData[id][cNeonToggle] = 1;

//         ReloadVehicleNeon(id);
//         Vehicle_Save(id);

//         SendServerMessage(playerid, "You've install neon for this vehicle with %s neon", inputtext);
//     }
//     return 1;
// }

Dialog:SelectNeon(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static 
            id = -1,
            ws = -1;

        if(IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Can't use this action while on vehicle.");

        if((id = Vehicle_GetID(GetNearestVehicleToPlayer(playerid,4.0,false))) != -1)
        {
            if(VehicleData[id][cOwner] < 1) return SendErrorMessage(playerid, "This is not owned vehicle.");
            if(!IsDoorVehicle(VehicleData[id][cVehicle])) return SendErrorMessage(playerid, "This vehicle isn't support to attach neon.");

            if((ws = Workshop_Nearest(playerid)) != -1)
            {
                if(WorkshopData[ws][wComponent] < 50) return SendErrorMessage(playerid, "This workshop does'nt have enough component (50 component)");

                WorkshopData[ws][wComponent] -= 50;
            } else {
                if(Inventory_Count(playerid, "Component") < 50)
                    return SendErrorMessage(playerid, "Komponen yang kamu miliki tidak mencukupi (50 component).");
                
                Inventory_Remove(playerid, "Component", 50);
            }

            VehicleData[id][cNeon] = (18647+listitem);
            VehicleData[id][cNeonToggle] = 1;

            ReloadVehicleNeon(id);

            SendServerMessage(playerid, "You've install neon for this vehicle with %s neon.", inputtext);
            SendNearbyMessage(playerid, 15.0, X11_PLUM, "* %s installed neon for vehicle in near him.", ReturnName(playerid, 0, 1));
        }
        else SendErrorMessage(playerid, "You're not in anything vehicle you can install neon.");
    }
    return 1;
}

/*Dialog:RemoveAdmin(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        foreach(new id : Player) if(!strcmp(inputtext, NormalName(id))) {
            SendErrorMessage(playerid, "That player is online, (/setadmin) to remove him.");
            return 1;
        }
        new 
            strnFound = strfind(inputtext, "- ", true, 3);

        SetPVarString(playerid, "AdminName", inputtext[strnFound + 2]);
        Dialog_Show(playerid, RemoveAdmAccept, DIALOG_STYLE_MSGBOX, "Remove Agreement", "Are you sure want remove %s from admin?.", "Yes", "No", inputtext[strnFound + 2]);
    }
    return 1;
}

Dialog:RemoveAdmAccept(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static 
            query[128], 
            name[MAX_PLAYER_NAME];

        GetPVarString(playerid, "AdminName", name, sizeof(name));

        foreach (new targetid : Player) {
            new 
                plrName[MAX_PLAYER_NAME];

            GetPlayerName(playerid, "plrName", MAX_PLAYER_NAME + 1);

            if (!strcmp(name, plrName, true)) {
                SendErrorMessage(playerid, "Player bernama %s sedang online (pakai /setadmin)!", name);
                return 0;
            }
        }

        format(query, sizeof(query), "UPDATE `characters` SET `Admin`='0' WHERE `Character`='%q'", name); //`Character` LIKE '%q'
        mysql_tquery(g_iHandle, query);

        SendServerMessage(playerid, "Admin Notice: "WHITE"%s has been successfully removed from an Administrator Team!", name);
        //SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTION NOTICE: "WHITE"%s remove %s from %s member.", ReturnName2(playerid, 0), name, FactionData[PlayerData[playerid][pFaction]][factionName]);
        SetPVarString(playerid, "AdminName", "");
    }
    else
        SetPVarString(playerid, "AdminName", "");

    return 1;
}*/


Dialog:RemoveMember(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        foreach(new id : Player) if(!strcmp(inputtext, ReturnName(id))) {
            SendErrorMessage(playerid, "That player is online, (/fremove) to remove him.");
            return 1;
        }
        // new 
        //     strnFound = inputtext;
        //     //strfind(const string[], const sub[], bool:ignorecase=false, pos=0)

        SetPVarString(playerid, "MemberName", inputtext);
        Dialog_Show(playerid, RemoveAccept, DIALOG_STYLE_MSGBOX, "Remove Agreement", "Are you sure want remove %s from %s member?.", "Yes", "No", inputtext, FactionData[PlayerData[playerid][pFaction]][factionName]);
    }
    return 1;
}

/*Dialog:RemoveAccept(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static 
            query[128], 
            name[MAX_PLAYER_NAME];

        GetPVarString(playerid, "MemberName", name, sizeof(name));

        foreach (new targetid : Player) {
            new 
                plrName[MAX_PLAYER_NAME];

            GetPlayerName(playerid, "plrName", MAX_PLAYER_NAME + 1);

            if (!strcmp(name, plrName, true)) {
                SendErrorMessage(playerid, "Player bernama %s sedang online (pakai /fremove)!", name);
                return 0;
            }
        }

        format(query, sizeof(query), "UPDATE `characters` SET `Faction`='-1' WHERE `Character`='%q'", name); //`Character` LIKE '%q'
        mysql_tquery(g_iHandle, query);

        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTION NOTICE: "WHITE"%s remove %s from %s member.", ReturnName2(playerid, 0), name, FactionData[PlayerData[playerid][pFaction]][factionName]);
        SetPVarString(playerid, "MemberName", "");
    }
    else
        SetPVarString(playerid, "MemberName", "");

    return 1;
}*/

Dialog:RemoveAccept(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static 
            query[200], 
            name[MAX_PLAYER_NAME];

        GetPVarString(playerid, "MemberName", name, sizeof(name));

        format(query, sizeof(query), "UPDATE `characters` SET `Faction`='-1', `FactionRank`='0', `FactionRankName`='NULL', `FactionDuty`='0', `SkinFaction`='0' WHERE `Character`='%q'", name); //`Character` LIKE '%q'
        mysql_tquery(g_iHandle, query);

        SendFactionMessage(PlayerData[playerid][pFaction], COLOR_CLIENT, "FACTION NOTICE: "WHITE"%s remove %s from %s member.", ReturnName2(playerid, 0), name, FactionData[PlayerData[playerid][pFaction]][factionName]);
        SetPVarString(playerid, "MemberName", "");
    }
    else
        SetPVarString(playerid, "MemberName", "");

    return 1;
}

Dialog:Trace(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(listitem == 0) Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Insert plate number to track the vehicle:", "Track", "Close");
        else if(listitem == 1) Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");
    }
    return 1;
}

Dialog:TracePlate(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Insert plate number to track the vehicle:", "Track", "Close");
        if(!strcmp(inputtext, "NO HAVE", true)) return Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Unable to find this plate\nInsert plate number to track the vehicle:", "Track", "Close");
        if(!strcmp(inputtext, "STATIC", true)) return Dialog_Show(playerid, TracePlate, DIALOG_STYLE_INPUT, "Trace Number Plate", "Unable to find this plate\nInsert plate number to track the vehicle:", "Track", "Close");

        for (new i = 0; i < MAX_DYNAMIC_VEHICLES; i ++) if (Iter_Contains(DynamicVehicles, i) && IsValidVehicle(VehicleData[i][cVehicle]) && !strcmp(VehicleData[i][cPlate], inputtext, true))
        {
            new Float:x, Float:y, Float:z;
            GetVehiclePos(VehicleData[i][cVehicle], x, y, z);

            SetPlayerWaypoint(playerid, sprintf("Track Plate Number '%s'", VehicleData[i][cPlate]), x,y,z);
            SendServerMessage(playerid, "You have been successfull track vehicle number plate "YELLOW"%s.", inputtext);
            return 1;
        }
        SendErrorMessage(playerid, "There are no one vehicle with that plate.");
    }
    return 1;
}

Dialog:TracePhone(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext)) return Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");
        if(strval(inputtext) == 0) return Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");
        if(!IsNumeric(inputtext)) return Dialog_Show(playerid, TracePhone, DIALOG_STYLE_INPUT, "Trace Phone Number", "Insert phone number to track the player:", "Track", "Close");

        foreach(new i : Player) if(PlayerData[i][pPhone] == strval(inputtext))
        {
            if(PlayerData[i][pPhoneOff]) return SendErrorMessage(playerid, "Unable to find this number.");

            new Float:x, Float:y, Float:z;
            GetPlayerPos(i, x, y, z);

            SetPlayerWaypoint(playerid, sprintf("Track Phone Number '%d'", strval(inputtext)), x,y,z);
            SendServerMessage(playerid, "You have been successfull track phone number "YELLOW"%d.", strval(inputtext));
            return 1;
        }
        SendErrorMessage(playerid, "There are no one phone number with that.");
    }
    return 1;
}

Dialog:UsePills(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: 
            {
                //Butuh 5 pil untuk menghilangkan 1 efek batuk.
                if(PlayerData[playerid][pCoughPills] < 1) return SendErrorMessage(playerid, "Anda tidak ada pil untuk penyakit ini.");
                if(PlayerData[playerid][pCough] < 1) return SendErrorMessage(playerid, "Anda tidak dapat mengkonsumsi pil ini.");

                PlayerData[playerid][pCoughPills] --;
                PlayerData[playerid][pCough] --;
            }
            case 1:
            {
                if(PlayerData[playerid][pMigrainPills] < 1) return SendErrorMessage(playerid, "Anda tidak ada pil untuk penyakit ini.");
                if(PlayerData[playerid][pMigrainRate] < 1) return SendErrorMessage(playerid, "Anda tidak dapat mengkonsumsi pil ini.");

                PlayerData[playerid][pMigrainPills] --;
                if(++PlayerData[playerid][pMigrainUsed] >= 5)
                {
                    PlayerData[playerid][pMigrainRate] --;
                    PlayerData[playerid][pMigrainUsed] = 0;
                }
            }
            case 2:
            {
                if(PlayerData[playerid][pFiverPills] < 1) return SendErrorMessage(playerid, "Anda tidak ada pil untuk penyakit ini.");
                if(PlayerData[playerid][pFever] < 1) return SendErrorMessage(playerid, "Anda tidak dapat mengkonsumsi pil ini.");

                PlayerData[playerid][pFiverPills] --;
                if(++PlayerData[playerid][pFeverUsed] >= 5)
                {
                    PlayerData[playerid][pFeverUsed] = 0;
                    PlayerData[playerid][pFever] --;
                }
            }
        }
        cmd_me(playerid, sprintf("take's out %s and eat it.", inputtext));
        PlayerData[playerid][pUsePills] = 300;
    }
    return 1;
}

Dialog:TakePills(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: PlayerData[playerid][pCoughPills] ++;
            case 1: PlayerData[playerid][pMigrainPills] ++;
            case 2: PlayerData[playerid][pFiverPills] ++;
        }
        SendServerMessage(playerid, "Anda sudah mengambil "YELLOW"%s", inputtext); //cmd_me(playerid, sprintf("take's out %s from the locker.", inputtext));
    }
    return 1;
}

Dialog:WindowsControl(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new vehicleid = GetPlayerVehicleID(playerid),
            driver, passenger, backleft, backright;

        GetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, backright);

        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            switch(listitem)
            {
                case 0: SetVehicleParamsCarWindows(vehicleid, !driver, passenger, backleft, backright);
                case 1: SetVehicleParamsCarWindows(vehicleid, driver, !passenger, backleft, backright);
                case 2: SetVehicleParamsCarWindows(vehicleid, driver, passenger, !backleft, backright);
                case 3: SetVehicleParamsCarWindows(vehicleid, driver, passenger, backleft, !backright);
                default: SetVehicleParamsCarWindows(vehicleid, !driver, !driver, !driver, !driver);
            }
            ShowPlayerFooter(playerid, "You've toggle vehicle window.");
        }
    }
    return 1;
}

GetAutomaticName(index) {
    new name[24];
    switch (index) {
        case 1: format(name,sizeof(name),"Using Seatbelt");
        case 2: format(name,sizeof(name),"Using Helmet");
        case 3: format(name,sizeof(name),"Handbrake Vehicle");
        case 4: format(name,sizeof(name),"Uppercase Letter Chat");
        case 5: format(name,sizeof(name),"Enable Mask on Login");
    }
    return name;
}

Dialog:TogAuto(playerid, response, listitem, inputtext[]) {
    if (response) {
        if ((listitem + 1) == 5) {
            if(PlayerData[playerid][pScore] < 3)
                return SendErrorMessage(playerid, "You must level 3 to use mask.");

            if(!Inventory_HasItem(playerid, "Mask"))
                return SendErrorMessage(playerid, "You don't have any mask.");
        }
        
        PlayerData[playerid][pAuto][listitem + 1] = (PlayerData[playerid][pAuto][listitem + 1]) ? (0) : (1);
        SendServerMessage(playerid, "You have %s toggle automatic %s.", GetAutomaticName(listitem + 1), PlayerData[playerid][pAuto][listitem + 1] ? ("enable") : ("disable"));
    }
    return 1;
}

Dialog:StreamerSettings(playerid, response, listitem, inputtext[]) {
    if (response) {
        PlayerData[playerid][pStreamer] = listitem;
        SetPlayerStreamerSettings(playerid);
        SendCustomMessage(playerid, "STREAMER", "Streamer settings saved!");
    }
    return 1;
}

Dialog:ToggleMenu(playerid, response, listitem, inputtext[]) 
{
    if(response)
    {
        switch(listitem)
        {
            case 0:  
            {
                PlayerData[playerid][pDisableOOC] = (PlayerData[playerid][pDisableOOC]) ? (0) : (1);
                SendServerMessage(playerid, "You have %s OOC chat.", PlayerData[playerid][pDisableOOC] ? ("disable") : ("enable"));
            }
            case 1: 
            {
                PlayerData[playerid][pDisablePM] = (PlayerData[playerid][pDisablePM]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s private messages.", PlayerData[playerid][pDisablePM] ? ("disable") : ("enable"));
            }
            case 2: 
            {
                PlayerData[playerid][pDisableBC] = (PlayerData[playerid][pDisableBC]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s news broadcasts.", PlayerData[playerid][pDisableBC] ? ("disable") : ("enable"));
            }
            case 3: 
            {
                if(PlayerData[playerid][pFaction] == -1) return SendErrorMessage(playerid, "You are not part of any faction.");

                PlayerData[playerid][pDisableFaction] = (PlayerData[playerid][pDisableFaction]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s faction chat.", PlayerData[playerid][pDisableFaction] ? ("disable") : ("enable"));
            }
            case 4: 
            {
                PlayerData[playerid][pLoginLog] = (PlayerData[playerid][pLoginLog]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s login message.", PlayerData[playerid][pLoginLog] ? ("disable") : ("enable"));
            }
            case 5: 
            {
                ShowHungerTextdraw(playerid);
                SendServerMessage(playerid, "You have %s hud display.", PlayerData[playerid][pTogHud] ? ("disable") : ("enable"));
            }
            case 6:
            {
                if (!PlayerData[playerid][pVipTime])
                    return SendErrorMessage(playerid, "You're not vip member or your vip was expired.");

                PlayerData[playerid][pTogVipchat] = (PlayerData[playerid][pTogVipchat]) ? (0) : (1);
                SendServerMessage(playerid, "You have %s vip chat.", PlayerData[playerid][pTogVipchat] ? ("disable") : ("enable"));
            }
            case 7: {
                PlayerData[playerid][pTogAdmCmd] = (PlayerData[playerid][pTogAdmCmd]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s admin command message.", PlayerData[playerid][pTogAdmCmd] ? ("disable") : ("enable"));
            }
            case 8: 
            {
                PlayerData[playerid][pDisableAdmin] = (PlayerData[playerid][pDisableAdmin]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s admin chat.", PlayerData[playerid][pDisableAdmin] ? ("disable") : ("enable"));
            }
            case 9: 
            {
                PlayerData[playerid][pDisableAPM] = (PlayerData[playerid][pDisableAPM]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s Player PM.", PlayerData[playerid][pDisableAPM] ? ("disable") : ("enable"));
            }
            case 10: 
            {
                PlayerData[playerid][pDisableAtalk] = (PlayerData[playerid][pDisableAtalk]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s log admin talk.", PlayerData[playerid][pDisableAtalk] ? ("disable") : ("enable"));
            }
            case 11: 
            {
                PlayerData[playerid][pDisableAWarn] = (PlayerData[playerid][pDisableAWarn]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s log admin warning message.", PlayerData[playerid][pDisableAWarn] ? ("disable") : ("enable"));
            }
            case 12: 
            {
                PlayerData[playerid][pDisableReport] = (PlayerData[playerid][pDisableReport]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s log report message.", PlayerData[playerid][pDisableReport] ? ("disable") : ("enable"));
            }
            case 13: 
            {
                PlayerData[playerid][pDisableAsk] = (PlayerData[playerid][pDisableAsk]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s log ask message.", PlayerData[playerid][pDisableAsk] ? ("disable") : ("enable"));
            }
            case 14: 
            {
                PlayerData[playerid][pDisableWT] = (PlayerData[playerid][pDisableWT]) ? (0) : (1); 
                SendServerMessage(playerid, "You have %s player radio.", PlayerData[playerid][pDisableWT] ? ("disable") : ("enable"));
            }
        }
    }
    return 1;
}

Dialog:CheckTicket(playerid, response, listitem, inputtext[])
{
    if(response) 
    {
        new i = ListedTickets[playerid][listitem];
        Dialog_Show(playerid, TicketDetail, DIALOG_STYLE_MSGBOX, "Ticket Detail", ""WHITE"Ticket detail {C0C0C0}#%03d\n\n"WHITE"Ticket issuer: {C0C0C0}%s\n"WHITE"Reason: {C0C0C0}%s\n"WHITE"Amout: {C0C0C0}%s\n"WHITE"Date: {C0C0C0}%s", "<< Back", "", TicketData[playerid][i][ticketID], TicketData[playerid][i][ticketIssuer], TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
    }
    return 1;
}

Dialog:TicketDetail(playerid, response, listitem, inputtext[])
{
    if(response) return cmd_tickets(playerid, "\1");
    return 1;
}

Dialog:PayTicket(playerid, response, listitem, inputtext[])  
{    
    if(response) 
    {
        if (listitem != -1) {
            new i = ListedTickets[playerid][listitem];
            Dialog_Show(playerid, PayToPolice, DIALOG_STYLE_MSGBOX, "Ticket Detail", ""WHITE"Ticket detail {C0C0C0}#%03d\n\n"WHITE"Ticket issuer: {C0C0C0}%s\n"WHITE"Reason: {C0C0C0}%s\n"WHITE"Amout: {C0C0C0}%s\n"WHITE"Date: {C0C0C0}%s\n\n"WHITE"Do you want to pay this ticket?.", "Pay Now", "Close", TicketData[playerid][i][ticketID], TicketData[playerid][i][ticketIssuer], TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
            SetPVarInt(playerid, "TicketIndex", i);
        }
    }
    return 1;
}

Dialog:UnlockTire(playerid, response, listitem, inputtext[]) {
    if (response) {
        new i = ListedVehicles[playerid][listitem],
            cost = VehicleData[i][cImpoundPrice];

        if (GetMoney(playerid) < cost)
            return SendErrorMessage(playerid, "You don't have enough money!");

        new vehname[32];

        GetVehicleNameByVehicle(VehicleData[i][cVehicle], vehname);
        GiveMoney(playerid, -cost);

        VehicleData[i][cTireLock] = 0;
        VehicleData[i][cImpoundPrice] = 0;

        if (IsValidDynamic3DTextLabel(VehicleData[i][cText]))
            DestroyDynamic3DTextLabel(VehicleData[i][cText]);

        VehicleData[i][cText] = Text3D:INVALID_3DTEXT_ID;

        for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_POLICE) {
            FactionData[fac][factionMoney] += cost;
            FactionData[fac][factionDepositMoney] = cost;
            format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Unlock Tire Pay");
        }
        SendCustomMessage(playerid, "UNLOCKTIRE", "You've been unlocked your "CYAN"%s "WHITE"tire for "GREEN"%s", vehname, FormatNumber(cost));
    }
    return 1;
}

Dialog:PayToPolice(playerid, response, listitem, inputtext[])  
{    
    if(response) {
        new i = GetPVarInt(playerid, "TicketIndex");
        if(GetMoney(playerid) < TicketData[playerid][i][ticketFee]) return SendErrorMessage(playerid, "You don't have enough money to pay this ticket.");
        GiveMoney(playerid, -TicketData[playerid][i][ticketFee]);
        SendServerMessage(playerid, "Thanks for pay your ticket for "GREEN"%s.", FormatNumber(TicketData[playerid][i][ticketFee]));

        for(new fac = 0; fac != MAX_FACTIONS; fac++) if(FactionData[fac][factionExists] && FactionData[fac][factionType] == FACTION_POLICE) {
            FactionData[fac][factionMoney] += TicketData[playerid][i][ticketFee];
            FactionData[fac][factionDepositMoney] = TicketData[playerid][i][ticketFee];
            format(FactionData[fac][factionDeposit], MAX_PLAYER_NAME, "Ticket Pay");
        }
        Ticket_Remove(playerid, i);
        DeletePVar(playerid, "TicketIndex");
    }
    else cmd_payticket(playerid, "\1");
    return 1;
}

GetFreeBeacon() {
    for (new i = 0; i < 50; i ++) if (BeaconActive[i][beaconExists] == false) {
        return i;
    }
    return -1;
}

Dialog:BackupSystem(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        SendFactionMessageEx(GetFactionType(playerid), COLOR_RADIO, "BACKUP: %s needs backup with %s {8D8DFF}signal at %s.", ReturnName(playerid, 0), inputtext, GetLocation(x,y,z));
        new color, index = GetFreeBeacon();

        if (index == -1)
            return SendErrorMessage(playerid, "There are no beacon left.");

        BeaconActive[index][beaconExists] = true;
        BeaconActive[index][beaconObject] = CreateDynamicObject(18728, x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 200.0, 200.0);

        foreach (new i : Player) if((GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOV) && PlayerData[i][pOnDuty]) {
            switch (listitem) {
                case 0: color = 0x00FF00FF;
                case 1: color = 0xFFFF00FF;
                case 2: color = 0xFF0000FF;
            }
            SetPlayerMapIcon(i, index, x, y, z, 0, color, MAPICON_GLOBAL);
            SetTimerEx("RemoveBeacon", 300000, false, "dd", i, index);
        }
    }
    return 1;
}

Function:RemoveBeacon(playerid, beaconid) {
    BeaconActive[beaconid][beaconExists] = false;

    if (IsValidDynamicObject(BeaconActive[beaconid][beaconObject]))
        DestroyDynamicObject(BeaconActive[beaconid][beaconObject]), BeaconActive[beaconid][beaconObject] = INVALID_STREAMER_ID;

    RemovePlayerMapIcon(playerid, beaconid);
    return 1;
}

Dialog:CarLock(playerid, response, listitem, inputtext[]) {
    if(response) 
    {
        if (listitem == 0) {
            new
                id = -1,
                vehicleid = GetNearestVehicleToPlayer(playerid,4.0,false);

            if (vehicleid == INVALID_VEHICLE_ID)
                return SendErrorMessage(playerid, "You are not standing near any vehicle");

            if ((id = Vehicle_GetID(vehicleid)) != -1) {
                if (Vehicle_IsOwner(playerid, id) || VehicleData[id][cRentOwned] == PlayerData[playerid][pID] || VehicleData[id][cKeys] == GetPlayerSQLID(playerid)) {
                    if (VehicleData[id][cTireLock])
                        return SendErrorMessage(playerid, "This vehicle is tire locked!");

                    VehicleData[id][cLocked] = VehicleData[id][cLocked] ? false : true;

                    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                    SetDoorStatus(VehicleData[id][cVehicle], bool:VehicleData[id][cLocked]);
                    ShowPlayerFooter(playerid, sprintf("You have ~r~%s~w~ the vehicle!", VehicleData[id][cLocked] ? "locked" : "unlocked"), 3000, 1);
                } else return SendErrorMessage(playerid, "You're not owner of this vehicle");
            }
            return 1;
        }

        if (listitem != -1)
        {
            new i = ListedVehicles[playerid][listitem],
                Float:x, Float:y, Float:z;
        
            GetVehiclePos(VehicleData[i][cVehicle], x, y, z);
            if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 5.0)
                return SendErrorMessage(playerid, "Kendaraan terlalu jauh dari posisimu.");

            if (VehicleData[i][cTireLock])
                return SendErrorMessage(playerid, "This vehicle is tire locked!");

            VehicleData[i][cLocked] = VehicleData[i][cLocked] ? false : true;

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            SetDoorStatus(VehicleData[i][cVehicle], bool:VehicleData[i][cLocked]);
            ShowPlayerFooter(playerid, sprintf("You have ~r~%s~w~ the vehicle!", VehicleData[i][cLocked] ? "locked" : "unlocked"), 3000, 1);
        }
    }
    return 1;
}

Dialog:VehicleTrade(playerid, response, listitem, inputtext[]) {
    if (!response)
        return 0;

    new vehid = ListedVehicles[playerid][listitem], userid = INVALID_PLAYER_ID;

    foreach (new i : Player) if (PlayerData[i][pVehTradedPlayer] == playerid) {
        userid = i;
    }

    if (userid != INVALID_PLAYER_ID) {
        PlayerData[playerid][pVehTradedPlayer] = userid;
        PlayerData[playerid][pVehTraded] = vehid;
        new playerveh = PlayerData[userid][pVehTraded],
            vehname[32],
            vehPlayer[32];

        GetVehicleNameByVehicle(VehicleData[vehid][cVehicle], vehname);
        SendCustomMessage(playerid,"TRADE",""CYAN"%s", vehname);
        SendCustomMessage(playerid,"TRADE","Insurance(s): "YELLOW"%d year(s)", VehicleData[vehid][cInsurance]);
        SendCustomMessage(playerid,"TRADE","Upgrades: "YELLOW"Engine: %s", (VehicleData[vehid][cEngineUpgrade])?(GREEN"Yes"):(RED"No"));
        SendCustomMessage(playerid,"TRADE",""YELLOW"Body: %s", (VehicleData[vehid][cBodyUpgrade])?(GREEN"Yes"):("No"));

        GetVehicleNameByVehicle(VehicleData[playerveh][cVehicle], vehPlayer);
        SendCustomMessage(userid,"TRADE","Your "CYAN"%s "WHITE"will be traded to "CYAN"%s", vehname, vehPlayer);
        SendCustomMessage(userid,"TRADE","Insurance(s): "YELLOW"%d year(s)", VehicleData[playerveh][cInsurance]);
        SendCustomMessage(userid,"TRADE","Upgrades: "YELLOW"Engine: %s", (VehicleData[playerveh][cEngineUpgrade])?(GREEN"Yes"):(RED"No"));
        SendCustomMessage(userid,"TRADE",""YELLOW"Body: %s", (VehicleData[playerveh][cBodyUpgrade])?(GREEN"Yes"):("No"));
        SendCustomMessage(userid,"TRADE","Use '/approve trade' to accept this transaction.");
    } else SendErrorMessage(playerid, "That player has been disconnected.");
    return 1;
}

Dialog:CarList(playerid, response, listitem, inputtext[]) {
    if(response) 
    {
        if (listitem != -1) {
            new i = ListedVehicles[playerid][listitem],
                Float:posisi[3];

            if(VehicleData[i][cImpounded] != -1) return SendErrorMessage(playerid, "Can't track impounded vehicle.");
            if(IsVehicleOnGarage(i)) return SendErrorMessage(playerid, "This vehicle inside the garage.");
            if(VehicleData[i][cInsideInsurance] != 0) return SendErrorMessage(playerid, "This vehicle inside the insurance center.");
            
            GetVehiclePos(VehicleData[i][cVehicle], posArr{posisi});

            SetPlayerWaypoint(playerid, GetLocation(posArr{posisi}), posArr{posisi});
            SendServerMessage(playerid, "Your car waypoint was set to \"%s\" (marked on radar).", GetLocation(posArr{posisi}));
        }
    }
    return 1;
}

Dialog:VehicleUnstuck(playerid, response, listitem, inputtext[]) {
    if (response) {
        new i = ListedVehicles[playerid][listitem],
            Float:pos[6];

        GetVehiclePos(VehicleData[i][cVehicle], pos[0], pos[1], pos[2]);

        if (GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]) > 7.0)
            return SendErrorMessage(playerid, "You are not nearest on the selected vehicle");

        GetPlayerPos(playerid, pos[3], pos[4], pos[5]);
        SetVehiclePos(VehicleData[i][cVehicle], pos[3], pos[4], pos[5]);
        SetVehicleVirtualWorld(VehicleData[i][cVehicle], GetPlayerVirtualWorld(playerid));
        LinkVehicleToInterior(VehicleData[i][cVehicle], GetPlayerInterior(playerid));
        PutPlayerInVehicleEx(playerid, VehicleData[i][cVehicle], 0);
        VehicleData[i][cDespawn] = 0;
    }
    return 1;
}

Dialog:TrackRentCar(playerid, response, listitem, inputtext[]) {
    if(response) 
    {
        new i = ListedVehicles[playerid][listitem],
            Float:posisi[3];

        if(VehicleData[i][cImpounded] != -1) return SendErrorMessage(playerid, "Can't track impounded vehicle.");
        if(IsVehicleOnGarage(i)) return SendErrorMessage(playerid, "This vehicle inside the garage.");
        if(VehicleData[i][cInsideInsurance] != 0) return SendErrorMessage(playerid, "This vehicle inside the insurance center.");
        
        GetVehiclePos(VehicleData[i][cVehicle], posArr{posisi});

        SetPlayerWaypoint(playerid, GetLocation(posArr{posisi}), posArr{posisi});
        SendServerMessage(playerid, "Your car waypoint was set to \"%s\" (marked on radar).", GetLocation(posArr{posisi}));
        return 1;
    }
    return 1;
}

Dialog:GiveKey(playerid, response, listitem, inputtext[]) {
    if(response) 
    {
        new i = ListedVehicles[playerid][listitem];

        PlayerTemp[playerid][temp_vehicleid] = i;

        if(VehicleData[i][cKeys] > 0) Dialog_Show(playerid, KeyGive, DIALOG_STYLE_MSGBOX, "Take Key", "Kunci kendaraan ini telah di pinjamkan kepada: %s\nApakah anda ingin mengambil kunci kendaraan kembali?", "Ya", "Tidak", ReturnName(SQL_ReturnID(VehicleData[i][cKeys])));
        else Dialog_Show(playerid, KeyGive, DIALOG_STYLE_INPUT, "Give Key", "Masukkan nama/id player:", "Bagikan", "Keluar");
    }
    return 1;
}


Dialog:KeyGive(playerid, response, listitem, inputtext[]) {
    if(response) 
    {
        new i = PlayerTemp[playerid][temp_vehicleid],
            userid
        ;

        if(VehicleData[i][cKeys])
            return SendServerMessage(playerid, "Anda telah menarik kunci kembali dari %s.", ReturnName(SQL_ReturnID(VehicleData[i][cKeys]))), VehicleData[i][cKeys] = 0;

        if(sscanf(inputtext, "u", userid))
            return Dialog_Show(playerid, KeyGive, DIALOG_STYLE_INPUT, "ERROR: Give Key", "Masukkan nama/id player:", "Bagikan", "Keluar");

        if(userid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, KeyGive, DIALOG_STYLE_INPUT, "ERROR: Give Key", "Nama atau ID player salah!\n\nMasukkan nama/id player:", "Bagikan", "Keluar");

        VehicleData[i][cKeys]                   = GetPlayerSQLID(userid);
        PlayerTemp[playerid][temp_vehicleid]    = 0;

        new vehname[32];

        GetVehicleNameByVehicle(VehicleData[i][cVehicle], vehname);
        SendServerMessage(userid, "Anda telah dipinjamkan kunci kendaraan "CYAN"%s"WHITE" milik "YELLOW"%s", vehname, ReturnName(playerid, 0, 1));
        SendServerMessage(playerid, "Anda telah meminjamkan kunci kendaraan "CYAN"%s"WHITE" kepada "YELLOW"%s", vehname, ReturnName(userid, 0, 1));
    }
    return 1;
}

// Dialog:ReadySurgey(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         new player = PlayerData[playerid][pSurgeyID], name[24];
//         PlayerData[player][pStartSurgey] = 1;
//         PlayerData[player][pSurgeyFix] = PlayerData[playerid][pTestSurgey];
//         PlayerData[player][pSurgeryTimer] = SetTimerEx("Treatment", 60000, false, "d", player);

//         switch(DamageData[player][PlayerData[player][pSurgeyFix]][damageWeapon])
//         {
//             case 0 .. 15: name="pukulan";
//             default: name="tembakan peluru";
//         }
//         SendCustomMessage(player, "SURGERY", ""YELLOW"%s "WHITE"melakukan pemulihan pada "RED"%s "WHITE"dengan "GREEN"%d %s "YELLOW"%s.", ReturnName(playerid, 0), GetBodyPartName(DamageData[player][PlayerData[player][pSurgeyFix]][damageBodypart] + 3), DamageData[player][PlayerData[player][pSurgeyFix]][damageAmount], name, ReturnWeaponName(DamageData[player][PlayerData[player][pSurgeyFix]][damageWeapon]));
//         SendCustomMessage(player, "SURGERY", "Anda diharuskan menunggu sekitar "GREEN"2 menit "WHITE"untuk menyelesaikan operasi.");
//         SendCustomMessage(playerid, "SURGERY", "Anda melakukan operasi untuk "YELLOW"%s.", ReturnName(player, 0));
//     }
//     return 1;
// }

Dialog:TestSurgey(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new player = PlayerData[playerid][pSurgeyID];

        PlayerData[player][pStartSurgey] = 1;
        PlayerData[player][pSurgeryTimer] = SetTimerEx("Treatment", 60000, false, "d", player);
        SendCustomMessage(player, "SURGERY", ""YELLOW"%s "WHITE"memulai operasi pada Anda.", ReturnName(playerid, 0));
        SendCustomMessage(player, "SURGERY", "Anda diharuskan menunggu sekitar "GREEN"2 menit "WHITE"untuk menyelesaikan operasi.");
        SendCustomMessage(playerid, "SURGERY", "Anda melakukan operasi untuk "YELLOW"%s.", ReturnName(player, 0));
    }
    return 1;
}

Dialog:VehicleRadio(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: Dialog_Show(playerid, RadioLink, DIALOG_STYLE_INPUT, "Insert URL", "Masukkan link radio yang akan di dengar:", "Play", "Close");
            case 1: SetVehicleRadio(GetPlayerVehicleID(playerid), "http://stream.masima.co.id:8000/prambors.m3u");
            case 2: SetVehicleRadio(GetPlayerVehicleID(playerid), "http://streaming.radio.co/s2c4ce84ef/listen");
            case 3: SetVehicleRadio(GetPlayerVehicleID(playerid), "http://radio.melsa.net.id:8050/urban");
            case 4: StopVehicleRadio(GetPlayerVehicleID(playerid));
        }
    }
    return 1;
}

Dialog:RadioLink(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "You're not in vehicle.");
        SetVehicleRadio(GetPlayerVehicleID(playerid), inputtext);
    }
    return 1;
}
/*
Dialog:Username(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext))
            return Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Anda belum memasukkan username.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");

        if(strlen(inputtext) > 24)
            return Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Nama yang anda masukkan terlalu panjang.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");

        if(strlen(inputtext) < 3)
            return Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Nama yang anda masukkan kurang dari 3 karakter.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");
        
        if(!isValidPassword(inputtext))
            return Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Tidak boleh memasukkan angka atau simbol ke dalam username.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");

        new Cache:checkusername, query[128];

        format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Username`='%s'", inputtext);
        checkusername = mysql_query(g_iHandle, query);

        new rows = cache_num_rows();

        if(!rows)
        {
            format(PlayerData[playerid][pUsername], 24, inputtext);
            SendServerMessage(playerid, "Terima kasih telah melakukan input data username.");
            SendServerMessage(playerid, "Username anda sekarang adalah: %s.", PlayerData[playerid][pUsername]);
        }
        else
            Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Username yang anda masukkan sudah terdaftar.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");

        cache_delete(checkusername);
    }
    else
        Dialog_Show(playerid, Username, DIALOG_STYLE_INPUT, "Masukkan username", "Anda belum memasukkan username.\n\nMasukkan username bebas, yang menurut anda menarik.\nTidak boleh menggunakan simbol atau angka.", "Done", "Close");
    return 1;
}*/

Dialog:SelectHouse(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        new id = -1,
            business = GetPVarInt(playerid, "InsideBusiness"),
            price = GetPVarInt(playerid, "FurniturePrice"),
            model = GetPVarInt(playerid, "FurnitureModel"),
            houseid = ListedHouse[playerid][listitem];

        if(Furniture_GetCount(houseid) >= Furniture_GetMaxItems(houseid))
            return SendErrorMessage(playerid, "You can only have %d furniture items in your house.", Furniture_GetMaxItems(houseid));

        id = Furniture_Add(houseid, GetFurnitureNameByModel(model), model, 0.0, 0.0, 0.0);

        if(id == -1)
            return SendErrorMessage(playerid, "You don't have any house furniture slots left.");

        GiveMoney(playerid, -price);
        SendServerMessage(playerid, "You have purchased a \"%s\" for %s.", GetFurnitureNameByModel(model), FormatNumber(price));

        BusinessData[business][bizProducts]--;
        BusinessData[business][bizVault] += Tax_Percent(price);

        Business_Save(business);
        Tax_AddPercent(price);
    }
    else cmd_buy(playerid, "\0");
    return 1;
}

Dialog:AuctionQueue(playerid, response, listitem, inputtext[]) {
    if (response) {
        new
            Cache:query,
            str[650];

        aucQueue[playerid]++;
        query = mysql_query(g_iHandle, sprintf("SELECT * FROM `auction_queue` LIMIT %d, 10", aucQueue[playerid] * 10));

        new rows = cache_num_rows(), location[32], id, type, misc;

        if (rows) {
            format(str,sizeof(str),"ID\tName\tLocation\n");
            for (new i = 0; i < rows; i ++) {
                cache_get_value(i, "Location", location);
                cache_get_value_int(i, "ID", id);
                cache_get_value_int(i, "Property", type);
                cache_get_value_int(i, "Type", misc);

                format(str,sizeof(str),"%s%d\t%s\t%s\n",str,id,Auction_GetType(id, type, misc),location);
            }
            Dialog_Show(playerid, AuctionQueue, DIALOG_STYLE_TABLIST_HEADERS, "Auction Queue", str, "Next", "Close");
        } else SendErrorMessage(playerid, "There is no auction on the queue!");

        cache_delete(query);
    }
    else aucQueue[playerid] = 0;
    return 1;
}

Dialog:vehicleDeath(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        static
            Cache:cacheData,
            query[256];

        deathDialog[playerid] ++;

        format(query, sizeof(query), "SELECT *, FROM_UNIXTIME(destroyTime, '%%d/%%m/%%Y %%H:%%i:%%s') AS Time FROM cardestroy LIMIT %d, 10", deathDialog[playerid] * 10);
        cacheData = mysql_query(g_iHandle, query);

        if(!cache_num_rows()) return SendErrorMessage(playerid, "Tidak ada kendaraan dalam list log."), cache_delete(cacheData);
        else
        {
            new 
                dialogText[650],
                owner[MAX_PLAYER_NAME],
                destroyed[MAX_PLAYER_NAME],
                time[24],
                model;

            strcat(dialogText, "Model\tDestroy\tOwner\tDate\n");
            for(new id = 0; id != cache_num_rows(); id++)
            {
                cache_get_value(id, "destroyBy", destroyed);
                cache_get_value(id, "destroyOwner", owner);
                cache_get_value(id, "Time", time);
                cache_get_value_int(id, "destroyModel", model);

                strcat(dialogText, sprintf("%s\t%s\t%s\t%s\n", GetVehicleNameByModel(model), destroyed, owner , time));
            }
            Dialog_Show(playerid, vehicleDeath, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Death Log", dialogText, "Next", "Close");
        }
        cache_delete(cacheData);
    }
    else deathDialog[playerid] = 0;
    return 1;
}

Dialog:vehicleInteract(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: 
            {
                if(IsSpeedoVehicle(GetPlayerVehicleID(playerid))) cmd_v(playerid, "engine");
                else cmd_v(playerid, "lock");
            }
            case 1: cmd_v(playerid, "lights");
            case 2: cmd_v(playerid, "hood");
            case 3: cmd_v(playerid, "trunk");
            case 4: cmd_v(playerid, "speedometer");
            case 5: cmd_v(playerid, "lock");
        }
    }
    return 1;
}

RepairVeh(vehicleid) {
    new
        vehid = -1;

    if ((vehid = Vehicle_GetID(vehicleid)) != -1) {
        SetVehicleHealth(vehicleid, VehicleData[vehid][cMaxHealth]);
        UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
    } else {
        SetVehicleHealth(vehicleid, 1000.0);
        UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
    }
    return 0;
}

/*CMD:skins(playerid) { 
    const MAX_SKINS = 312; 
    static string[MAX_SKINS * 16]; 
     
    if (string[0] == EOS) { 
        for (new i; i < MAX_SKINS; i++) { 
            format(string, sizeof string, "%s%i\tID: %i\n", string, i, i); 
        } 
    } 
     
    return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_PREVIEW_MODEL, "Skin Selection Dialog", string, "Select", "Cancel"); 
} */


/*damagePlayer(playerid, Float: fDamage) {
    new
        Float: fHealth,
        Float: fArmour
    ;
    GetPlayerHealth(playerid, fHealth);
    GetPlayerArmour(playerid, fArmour);
    
    printf("fHealth(%.1f) += fArmour(%.1f) - fDamage(%.1f)", fHealth, fArmour, fDamage);
    fHealth += fArmour - fDamage;
    printf("fHealth(%.1f)", fHealth);
    
    SetPlayerArmour(playerid, (fHealth > 100.0) ? (fHealth - 100.0) : (0.0));
    SetPlayerHealth(playerid, (fHealth > 100.0) ? (100.0) : (fHealth));
    return 1;
}*/

// CMD:addplant(playerid, params[])
// {
//     if(IsPlayerStandInPlant(playerid, 3) != -1)
//         return SendErrorMessage(playerid, "Can't add new plant in nearest other plant with radius 3 meters.");

//     Dialog_Show(playerid, AddNewPlant, DIALOG_STYLE_LIST, "Plant", "Pumpkin\nMushroom\nCucumber\nOrange\nEgglant", "Plant", "Close");
//     return 1;
// }

// Dialog:AddNewPlant(playerid, response, listitem, inputtext[])
// {
//     if(response)
//     {
//         static
//             index;

//         if((index = AddNewPlant(playerid, (listitem+1))) != cellmin)
//         {
//             static
//                 name[15];

//             GetPlantName(index, name);
//             SendServerMessage(playerid, "Succesfful add new "YELLOW"%s "WHITE"plant.", name);
//         }
//         else SendErrorMessage(playerid, "Can't add more plant with id: %d", index);
//     }
//     return 1;
// }

/*// and this is my sudo core!
Function:start_sudo(playerid, targetid, args[])
{
   // checking is string is empty and return 0, because if empty string got executed on CallRemoteFunction it crashes the server.
   if (!args[0])
   {
       print("[SUDO ERROR]: string is empty!");
       return 0;
   }
   new 
    find1 = -1;

   if ((find1 = strfind(args, "text", true, 0) != -1)) {
        if(AccountData[targetid][pAdminDuty])
        {
            SendNearbyMessage(targetid, 15.0, X11_RED_2, "%s: "WHITE"(( %s ))", ReturnName(targetid, 0), args[find1 + 4]);
            SetPlayerChatBubble(targetid, sprintf("Admin: %s", args[find1 + 4]), X11_RED_2, 15.0, 5000);
        }
        else if(!IsPlayerOnPhone(targetid))
        {
            if(IsPlayerInDynamicArea(targetid, JailArea) || IsPlayerInDynamicArea(targetid, NSArea)) cmd_b(targetid, args[find1 + 4]);
            else {
                ProxDetector(targetid, 15.0, X11_WHITE, sprintf("%s says: %s", ReturnName(targetid, 0, 1), args[find1 + 4]));
                SetPlayerChatBubble(targetid, sprintf("Says: %s", args[find1 + 4]), X11_WHITE, 15.0, 5000);
            }
        }
        else 
        {
            ProxDetector(targetid, 5.0, X11_WHITE, sprintf("(Phone) %s says: %s", ReturnName(targetid, 0, 1), args[find1 + 4]));
            SetPlayerChatBubble(targetid, sprintf("(Phone): %s", args[find1 + 4]), X11_WHITE, 10.0, 5000);
        }

        if(!IsPlayerInAnyVehicle(targetid) && !PlayerData[targetid][pInjured] && !PlayerData[targetid][pLoopAnim] && !IsPlayerOnPhone(targetid) && !AccountData[targetid][pAdmin])  {
            ApplyAnimation(targetid, "GANGS", "prtial_gngtlkA", 4.1, 0, 1, 1, 1, strlen(args[find1 + 4]) * 100, 1);
            SetTimerEx("StopChatting", strlen(args[find1 + 4]) * 100, false, "d", targetid);
        }
   }
   else {

       // declarate our variable.
       new command[12], idx, index;

       // extract our sudo command so the script know what to execute.
       format(command, sizeof(command), "%s", ReturnCommand(playerid, args));
       format(command, sizeof(command), "cmd_%s", command[1]);

       // putting all intreger stuff into index and idx, because i want to increment the value and checking if my remote function is returning 0.
       index = GetPVarInt(playerid, "extracted_cmd");
       idx = CallRemoteFunction(command, "is", targetid, args[++index]);

       // then delete the "extracted_cmd" because we don't need it anymore. Oh by the way you may notice why i should
       // use DeletePVar instead setting them to 0 right ?, Yeah because instead recreating the "player variable" again i will chose to set them to 0
       // so i can use it later.
       SetPVarInt(playerid, "extracted_cmd", 0);

       // checking if my remote function is returning 0, and user will not confused wtf is going on.
       if (!idx)
       {
           print("[SUDO ERROR]: are you sure, you are using zcmd command?! or the command is invalid");
           SendErrorMessage(playerid, "Your command failed to execute, please see server log for more details.");
           return 0;
       }
   }
   // and if my remote function isn't returning 0, let user know.
   SendClientMessage(playerid, -1, "Successfully running the command!");
   return 1;
}

// why you use "stock" function instead just make them like this :P
// and also i don't wanna abuse the "stock" function like vince said.
ReturnCommand(playerid, const string[])
{
   // declarate our variable
   new extracted[24], index;

   // find the space and put them on index variable.
   index = strfind(string, " ", true);

   // set to player variable (this is why ReturnCommand seems awkward with using playerid)
   // and extract the string using strmid with index value that i got from strfind.
   SetPVarInt(playerid, "extracted_cmd", index);
   strmid(extracted, string, 0, index); 

   // return the string.  
   return extracted;
}


CMD:sudo(playerid, const sudo_thing[])
{
    if(AccountData[playerid][pID] != 1)
        return SendErrorMessage(playerid, "Command ini tidak tersedia!");
    new urtarget = INVALID_PLAYER_ID, argument[128];
    if (sscanf(sudo_thing, "us[128]", urtarget, argument))
       return SendSyntaxMessage(playerid, "/sudo [your target] [argument]");

    if (!IsPlayerConnected(urtarget) || urtarget == INVALID_PLAYER_ID)
       return SendErrorMessage(playerid, "Invalid target parameter.");

    if (urtarget == playerid)
       return SendErrorMessage(playerid, "you cannot sudoing yourself.");    

    SendClientMessage(playerid, -1, "trying to executing command!");    
    start_sudo(playerid, urtarget, argument);
    return 1;
}*/


// Buat testing aja
CMD:getvisibleitems(playerid, params[])
{
    if (CheckAdmin(playerid, 6))
        return PermissionError(playerid);

    new str[32];
    format(str, sizeof(str), "Streamer_CountVisibleItems: %d", Streamer_CountVisibleItems(playerid, STREAMER_OBJECT_TYPE_GLOBAL));
    SendClientMessage(playerid, COLOR_WHITE, str);
    return 1;
}
